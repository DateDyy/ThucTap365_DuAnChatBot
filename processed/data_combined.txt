Ph/uni1EA7n 1: 
Ph/uni1EA7n 1: 
Ph/uni1EA7n 1: 
NGÔN NGỮ
LẬP TRÌNH WEB 
CHUYÊN SÂU

Ngôn ngữ lập trình web chuyên sâu1. Mục tiêu và định hướng học lập trình web
  ▶
 
 
Header
Logo:
 Thường được đặt ở góc trên bên trái, là biểu tượng hoặc chữ viết tắt của 
tên trang web hoặc công ty.
Menu Điều Hướng:
 Các liên kết đến các trang quan trọng của trang web, 
thường được đặt ở trên cùng hoặc góc trên bên phải.
Nút Đăng Nhập/Đăng Ký:
 Cho phép người dùng đăng nhập vào tài khoản hoặc 
tạo tài khoản mới.
Tìm Kiếm:
 Hộp tìm kiếm cho phép người dùng nhập từ khóa và tìm kiếm thông 
tin trên trang web.
  ▶
 
 
Nội Dung Chính (Content Area)
Văn Bản, Hình Ảnh, Video:
 Thông tin chính của trang web, bao gồm văn bản, 
hình ảnh, video, hoặc các yếu tố multimedia khác.
Biểu Đồ, Đồ Thị:
 Nếu trang web hiển thị dữ liệu thống kê hoặc số liệu, chúng 
thường được hiển thị qua các biểu đồ hoặc đồ thị.
  ▶
 
 
Sidebar
Widget:
 Các hộp nhỏ thường chứa các liên kết liên quan, tin tức, hoặc các yếu 
tố tương tác như bài viết phổ biến hoặc tag cloud.
Quảng Cáo:
 Nếu trang web hiển thị quảng cáo, chúng thường xuất hiện ở sidebar 
hoặc ở vị trí khác trên trang.
  ▶
 
 
Footer
Liên Hệ:
 Thông tin liên hệ với trang web hoặc công ty, bao gồm địa chỉ email 
hoặc số điện thoại.
Liên Kết Quan Trọng:
 Các liên kết đến trang chính sách, điều khoản sử dụng, 
chính sách bảo mật, và các trang liên quan khác.
Liên Kết Mạng Xã Hội:
 Các biểu tượng hoặc liên kết đến trang mạng xã hội của 
trang web.
  ▶
  
Phân tích cấu trúc của 1 trang website
2

▶
 
 
Modal/Pop-up (nếu có):
Quảng Cáo, Thông Báo:
 Thông điệp hoặc quảng cáo quan trọng có thể xuất 
hiện trong các cửa sổ modal hoặc pop-up.
  ▶
 
 
Trang Đăng Nhập và Đăng Ký (nếu có):
Form Đăng Nhập:
 Cho phép người dùng nhập thông tin tài khoản để đăng nhập.
Form Đăng Ký:
 Cho phép người dùng nhập thông tin tài khoản mới để tạo tài 
khoản trên trang web.
  ▶
 
 
Thành Phần Tương Tác (nếu có):
Biểu Mẫu Liên Hệ: 
Cho phép người dùng nhập thông tin và gửi liên hệ đến trang 
web hoặc công ty.
Nút Thao Tác:
 Các nút hoặc nút bấm giúp người dùng thực hiện các hành động 
như gửi biểu mẫu, đăng xuất, hoặc thêm sản phẩm vào giỏ hàng (đối với trang 
web thương mại điện tử).
  ▶
 
 
Tổ Chức Cấu Trúc Trang (Layout Structure):
Responsive Design: 
Đảm bảo trang web được thiết kế sao cho nó có thể phản 
ứng với các thiết bị khác nhau và kích thước màn hình.
Grid System:
 Sử dụng lưới để tổ chức các phần tử trên trang web một cách cân 
đối và hợp lý.
Nhớ rằng, cấu trúc của một trang web có thể thay đổi tùy thuộc vào mục tiêu 
và nhu cầu cụ thể của trang web đó. Web 3.0, còn được gọi là "Semantic 
Web" hoặc "Decentralized Web," là một khái niệm tiến bộ của Internet mà 
nhắm đến việc tối ưu hóa trải nghiệm người dùng, tăng tính tương tác, và tạo 
ra một môi trường trực tuyến phi tập trung. Web 3.0 không chỉ là một bản 
nâng cấp về công nghệ mà còn mang đến sự đổi mới về cách chúng ta tương 
tác với dữ liệu, ứng dụng và các nguồn thông tin trên Internet.
3

Ngôn ngữ lập trình web chuyên sâu2. Đặc điểm và Tiện Ích của Web 3.0
3. Ví Dụ Thực Tế Của Web 3.0
  ▶
  
Semantic Web (Web Ngữ Nghĩa)
∙
 
Web 3.0 giúp máy tính hiểu được ý nghĩa của dữ liệu trên Internet, tăng cường 
khả năng tìm kiếm thông tin chính xác và liên kết thông tin một cách thông 
minh.
∙
 
Dữ liệu được liên kết với ý nghĩa semantical, giúp cả người dùng và máy tính 
hiểu và xử lý dữ liệu một cách có ý nghĩa hơn.
  ▶
  
Tăng Cường Trí Tuệ Nhân Tạo (AI) và Học Máy (Machine Learning)
∙
 
Sử dụng AI để cải thiện trải nghiệm người dùng, dự đoán nhu cầu và tối ưu hóa 
quy trình làm việc trên Internet.
  ▶
  
Trí Tuệ Phi Tập Trung (Decentralized Intelligence)
∙
 
Web 3.0 hướng tới việc tận dụng trí tuệ phi tập trung, giúp máy tính tương tác 
với các nguồn dữ liệu và tài nguyên trên mạng một cách phi tập trung, không 
phụ thuộc vào các tổ chức trung ương.
  ▶
  
Công Nghệ Blockchain và Hợp Đồng Thông Minh (Smart Contracts)
∙
 
Sử dụng công nghệ blockchain để tăng tính minh bạch, bảo mật và quản lý 
quyền lợi của người dùng.
∙
 
Hợp đồng thông minh (smart contracts) cho phép tự động hóa các giao dịch 
mà không cần trung gian, tăng tính tự chủ và minh bạch.
  ▶
  
Tạo Ra Nội Dung Sẵn Sàng Kết Hợp (Interoperable Content)
∙
 
Web 3.0 tạo điều kiện cho việc tạo ra nội dung mà các ứng dụng và dịch vụ 
khác có thể dễ dàng kết hợp và tương tác.
∙
 
Dữ liệu được thiết kế sao cho có thể chia sẻ và tương tác một cách linh hoạt 
giữa các ứng dụng và trang web.
  ▶
  
Nền Tảng Đã Tích Hợp Blockchain
∙
 
Các ứng dụng tài chính phi tập trung như DeFi (Decentralized Finance) và các 
dịch vụ thanh toán có thể sử dụng blockchain để tăng tính bảo mật và minh bạch.
4

▶
  
Nền Tảng Xã Hội Phi Tập Trung
∙
 
Các nền tảng mạng xã hội phi tập trung sử dụng công nghệ blockchain để tạo 
ra các mô hình kinh doanh dựa trên nội dung người dùng và cấu trúc phi tập 
trung.
  ▶
  
Máy Tính Lượng Tử (Quantum Computing)
∙
 
Web 3.0 có thể tận dụng sức mạnh của máy tính lượng tử để giải quyết các vấn 
đề phức tạp và tăng cường tính toán một cách đột phá.
  ▶
  
Nền Tảng Trí Tuệ Nhân Tạo Phi Tập Trung (Decentralized AI Platforms)
∙
 
Các dịch vụ AI phi tập trung cho phép người dùng sử dụng các mô hình AI và 
dữ liệu mà không cần chia sẻ thông tin cá nhân của họ với các tổ chức trung 
ương.
  ▶
  
Hệ Thống Quản Lý Dữ Liệu Người Dùng Phi Tập Trung
∙
 
Dịch vụ quản lý dữ liệu người dùng giúp người dùng kiểm soát thông tin cá 
nhân của mình và quyết định cách thông tin đó được sử dụng trên Internet.
  ▶
  
Phát Triển Ứng Dụng Phi Tập Trung (Decentralized Applications - DApps)
∙
 
Sử dụng blockchain và smart contracts để xây dựng các ứng dụng phi tập 
trung. Các ứng dụng này không phụ thuộc vào một máy chủ trung tâm, mà sử 
dụng một mạng lưới ngang hàng (peer-to-peer network) để lưu trữ và xử lý dữ 
liệu.
∙
 
Sử dụng các nền tảng như Ethereum, Binance Smart Chain, hoặc Polkadot để 
phát triển DApps.
Những ví dụ trên chỉ là một số hình thức của Web 3.0. Chúng đều nhấn 
mạnh vào tính phi tập trung, minh bạch, bảo mật và tích hợp thông tin 
người dùng một cách linh hoạt, đồng thời tối ưu hóa trải nghiệm người dùng 
trên Internet. Web 3.0 mở ra nhiều cơ hội cho việc phát triển các ứng dụng 
web đầy đủ sức mạnh và tính năng. Dưới đây là một số cách bạn có thể tích 
hợp các khái niệm và công nghệ của Web 3.0 vào lập trình web:
5

Ngôn ngữ lập trình web chuyên sâu  ▶
  
Integrate Blockchain và Hợp Đồng Thông Minh (Smart Contracts)
∙
 
Sử dụng hợp đồng thông minh để xây dựng các hệ thống thanh toán, quản lý 
phát hành token, hoặc thực hiện các giao dịch một cách tự động và minh bạch.
∙
 
Tích hợp ví điện tử hoặc các cổng thanh toán dựa trên blockchain để chấp 
nhận thanh toán bằng cryptocurrency.
  ▶
  
Xây Dựng Nền Tảng Xã Hội Phi Tập Trung
∙
 
Phát triển các mạng xã hội phi tập trung dựa trên blockchain để bảo vệ quyền 
riêng tư của người dùng và cung cấp khả năng kiểm soát dữ liệu của họ.
∙
 
Sử dụng blockchain để xác minh danh tính người dùng và tạo ra hệ thống đánh 
giá phi tập trung.
  ▶
  
Phát Triển Dịch Vụ Tài Chính Phi Tập Trung (DeFi)
∙
 
Xây dựng các ứng dụng tài chính phi tập trung sử dụng các giao thức DeFi như 
Uniswap, Compound, hoặc MakerDAO để tạo ra các dịch vụ vay/mượn và giao 
dịch không cần trung gian.
∙
 
Phát triển các ứng dụng ví lưu trữ cryptocurrency và các tài sản kỹ thuật số 
khác dựa trên blockchain.
  ▶
  
Integrate Trí Tuệ Nhân Tạo (AI) và Machine Learning
∙
 
Sử dụng AI và machine learning để cải thiện trải nghiệm người dùng, dự đoán 
hành vi người dùng, và tối ưu hóa nội dung trên trang web.
∙
 
Phát triển các hệ thống gợi ý dựa trên AI để cung cấp nội dung cá nhân hóa và 
tăng cường tương tác người dùng.
  ▶
  
Quản Lý Dữ Liệu Người Dùng Phi Tập Trung
∙
 
Phát triển các hệ thống quản lý dữ liệu người dùng mà không yêu cầu trung 
tâm, giúp người dùng kiểm soát thông tin cá nhân của họ.
∙
 
Sử dụng các công nghệ mã hóa và blockchain để bảo vệ dữ liệu người dùng.
  ▶
  
Phát Triển Ứng Dụng Trò Chơi Phi Tập Trung
∙
 
Sử dụng blockchain để lưu trữ thông tin về tài sản trong trò chơi và tạo ra các 
thị trường phi tập trung cho việc mua bán tài sản trong trò chơi.
∙
 
Integrate các token phi tập trung để tạo ra các hệ thống kinh tế trong trò chơi, 
cho phép người chơi kiếm được giá trị thực từ việc chơi game.
6

Lập trình web 3.0 đòi hỏi hiểu biết sâu rộng về các công nghệ như block
-
chain, hợp đồng thông minh, trí tuệ nhân tạo và machine learning. Bằng 
cách sử dụng các công nghệ này một cách sáng tạo và linh hoạt, bạn có 
thể phát triển các ứng dụng web 3.0 đầy đủ tính năng và hiệu suất.
7

Ngôn ngữ lập trình web chuyên sâuKHÁI NIỆM
ĐẶC ĐIỂM CHÍNH
PHP là một ngôn ngữ lập trình phổ biến được sử dụng chủ yếu để phát triển các ứng 
dụng web động. Dưới đây là một số thông tin chi tiết về PHP
Ngôn ngữ 
lập trình PHP
Chương 1
Chương 1
  ▶
  
Ngôn Ngữ Lập Trình PHP
 
∙
 
Là viết tắt của "PHP: Hypertext Preprocessor". 
Nó là một ngôn ngữ lập trình máy chủ mã nguồn 
mở được thiết kế đặc biệt cho việc phát triển 
các ứng dụng web động và có thể nhúng vào 
mã HTML.
  ▶
  
Mã Nguồn Mở
∙
 
PHP là mã nguồn mở, có nghĩa là bạn có thể tùy chỉnh mã nguồn theo nhu cầu 
của mình.
  ▶
  
Tương Thích Nhiều Hệ Thống
∙
 
PHP có thể chạy trên nhiều hệ thống điều hành như Windows, Linux, macOS, 
và hỗ trợ nhiều loại máy chủ web như Apache, Nginx, IIS.
  ▶
  
Dễ Học và Sử Dụng
∙
 
PHP có cú pháp dễ đọc và dễ học, đặc biệt phù hợp cho người mới học lập trình.
H
T
M
L
J
S
CS
S
PH
P
8

▶
  
PHP Roadmap dạng bảng cú pháp câu lệnh và các thẻ
Khái Niệm/
Chủ Đề
Mô Tả
Cú Pháp/Thẻ
Biến và Kiểu 
Dữ Liệu
Lưu trữ thông tin và giá trị
$variable_name = value;
Câu Lệnh 
Điều Kiện
Thực hiện các hành động dựa trên 
điều kiện
if (condition) { ... } else 
{ ... }
Vòng Lặp
Lặp lại các hành động một số lần
for ($i = 0; $i < 5; $i++) { 
... }
Mảng
Lưu trữ nhiều giá trị trong một 
biến
$array = array(value1, 
value2, ...);
Hàm
Đoạn mã có thể được gọi lại
function function
-
Name($param) { ... }
Lớp và Đối 
Tượng
Đóng gói dữ liệu và hành vi vào 
đối tượng
class ClassName { ... }
Kế Thừa và 
Giao Tiếp
Mở rộng chức năng của lớp khác
class SubClass extends 
ParentClass { ... }
Namespace
Tạo không gian tên cho lớp và 
hàm
namespace MyName
-
space;
Autoloading
Tự động tải các lớp khi cần
spl_autoload_register(
-
function($class) { ... });
Lưu Trữ Dữ Liệu
Lưu trữ và truy xuất dữ liệu từ cơ 
sở dữ liệu
MySQL, PostgreSQL, 
MongoDB, ...
Xử Lý Biểu Mẫu
Gửi và nhận dữ liệu từ biểu mẫu 
web
$_GET, $_POST, $_RE
-
QUEST
Cookies và 
Sessions
Theo dõi thông tin trạng thái của 
người dùng
setcookie(), $_SESSION
Xử Lý Chuỗi
Xử lý và định dạng chuỗi
strlen(), strpos(), str_re
-
place()
Xử Lý Thời Gian
Làm việc với ngày, giờ và múi giờ
date(), strtotime(), time
-
zone_set()
Làm Việc với 
Tệp Tin
Đọc, ghi và xử lý tệp tin
fopen(), fwrite(), fclose()
9

Ngôn ngữ lập trình web chuyên sâuKhái Niệm/
Chủ Đề
Mô Tả
Cú Pháp/Thẻ
Xử Lý Lỗi và 
Ngoại Lệ
Xử lý các lỗi và trạng thái ngoại lệ
try { ... } catch(Exception 
$e) { ... }
JSON và XML
Đọc và ghi dữ liệu trong định dạng 
JSON và XML
json_encode(), json_de
-
code(), simplexml_load_
string()
HTTP Requests
Gửi và nhận dữ liệu qua HTTP
file_get_contents(), curl_
init(), curl_exec()
Unit Testing
Kiểm thử hàm và lớp
PHPUnit, SimpleTest
CÚ PHÁP
1. Khai Báo Biến
2. Câu Lệnh Điều Kiện
10

VÍ DỤ THỰC TẾ
3. Vòng Lặp
4. Hàm
  ▶
  
Xây Dựng Trang Web Động:
  
∙
 
PHP thường được sử dụng để xử lý dữ liệu từ biểu mẫu web và tương tác với 
cơ sở dữ liệu. 
Dưới đây là một ví dụ đơn giản về việc hiển thị tên người dùng từ một biểu mẫu 
đăng nhập
11

Ngôn ngữ lập trình web chuyên sâu
KẾT NỐI CƠ SỞ DỮ LIỆU
PHP cũng được sử dụng để kết nối với cơ sở dữ liệu, thực hiện truy vấn và hiển thị dữ 
liệu. Dưới đây là một ví dụ về việc kết nối với cơ sở dữ liệu MySQL và truy vấn dữ liệu:
12

Có nhiều framework được phát triển để hỗ trợ việc phát triển ứng dụng PHP 
nhanh chóng, hiệu quả và dễ bảo trì. Dưới đây là một số framework phổ biến 
trong lập trình PHP
Những ví dụ trên chỉ là một số ứng dụng cơ bản của PHP . PHP có thể được 
sử dụng trong nhiều tình huống khác nhau trong phát triển web.
1. Laravel
2. Symfony
  
▶
  
Laravel
 là một trong những framework PHP phổ biến và mạnh mẽ nhất hiện 
nay. Nó cung cấp các tính năng như routing mạnh mẽ, Eloquent ORM, Blade 
templating engine và nhiều tính năng khác giúp việc phát triển ứng dụng web 
PHP trở nên dễ dàng.
Website:
 
https://laravel.com/
  
▶
  
Symfony
 là một framework PHP mạnh mẽ và linh hoạt, được thiết kế để xây 
dựng các ứng dụng web và API phức tạp. Nó cung cấp các thành phần và thư 
viện có thể tái sử dụng, giúp giảm thời gian và công sức trong việc phát triển 
ứng dụng.
Website:
 
https://sym
f
ony.com/
13

Ngôn ngữ lập trình web chuyên sâu3. CodeIgniter
4. Yii
4. Phalcon
  
▶
  
CodeIgniter
 là một framework PHP nhẹ nhàng, nhanh và đơn giản, được 
thiết kế để tối ưu hóa hiệu suất. Nó có một cộng đồng lớn và tài liệu phong phú, 
giúp người phát triển nhanh chóng bắt đầu và xây dựng các ứng dụng web.
Website:
 
https://codeigniter.com/
  
▶
  
Yii
 là một framework PHP mạnh mẽ, linh hoạt và hiệu quả. Nó được thiết 
kế để tăng cường hiệu suất và giảm độ phức tạp trong việc phát triển ứng dụng 
web. Yii hỗ trợ các công cụ tạo mẫu, tạo giao diện người dùng và các tính năng 
bảo mật mạnh mẽ.
Website:
 
https://www.yiiframework.com/
  
▶
  
Phalcon
 Phalcon là một framework PHP được viết bằng C và C++, điều 
này giúp nó cực kỳ nhanh và hiệu quả. Phalcon cung cấp các tính năng như mã 
nguồn mở, chế độ xem, viết tắt ORM và nhiều tính năng khác.
Website:
 
https://phalcon.io/
Khi lựa chọn framework cho dự án của bạn, hãy xem xét yêu cầu cụ thể của 
dự án, cũng như sở thích và kinh nghiệm của bạn trong việc sử dụng các 
công cụ cụ thể. Mỗi framework có những ưu điểm riêng và thích hợp cho 
các tình huống khác nhau.
14

TÌM HIỂU VỀ FRAMEWORK LARAVEL
TRONG LẬP TRÌNH PHP
1. Phân Tích
2. Cú Pháp Câu Lệnh
3. Ví Dụ Thực Tế
Laravel
 là một framework PHP mạnh mẽ và phổ biến được thiết kế để giúp người 
phát triển xây dựng các ứng dụng web đa nhiệm và chất lượng cao một cách 
nhanh chóng và dễ dàng. Laravel cung cấp nhiều tính năng như routing mạnh 
mẽ, ORM (Eloquent), Blade templating engine, middleware, và nhiều công cụ 
hỗ trợ khác giúp việc phát triển ứng dụng web trở nên thuận tiện và hiệu quả.
Sửa File Migration
 
với các trường cần thiết
 (ví dụ: name, email, password).
Cài Đặt Laravel:
 composer global require laravel/installer
Tạo Một Dự Án Laravel Mới:
 laravel new project-name
Tạo Controller:
 php artisan make:controller MyController
Tạo Migration:
 php artisan make:migration create_table_name
Tạo Model:
 php artisan make:model MyModel
Tạo Migration và Model Cùng Lúc:
 php artisan make:model MyModel -m
Chạy Migration:
 php artisan migrate
3.1. Ví Dụ 1: Hiển Thị Danh Sách Người Dùng
  ▶
  
Tạo Migration cho Bảng Người Dùng
15

Ngôn ngữ lập trình web chuyên sâuChạy Migration:
 
php artisan migrate
  ▶
  
Tạo Model
  ▶
  
Tạo Controller để Quản Lý Người Dùng
  ▶
  
Trong UserController, viết hàm để lấy và 
Hiển Thị Danh Sách Người Dùng
  ▶
  
Tạo View (users/index.blade.php) để Hiển Thị Danh Sách Người Dùng
Mã: HTML
16

▶
  
Định tuyến (Routes) để gọi hàm trong UserController
Mã: PHP
Sửa File Migration
 
với các trường cần thiết 
(ví dụ: title, content).
Chạy Migration:
 php artisan migrate
3.2. Ví Dụ 2: Tạo và Hiển Thị Bài Viết
  ▶
  
Tạo Migration cho Bảng Bài Viết
  ▶
  
Tạo Model
  ▶
  
Tạo Controller để Quản Lý Bài Viết
17

Ngôn ngữ lập trình web chuyên sâu
Mã: PHP
Mã: HTML
Mã: PHP
  ▶
  
Trong PostController, viết hàm để lấy và hiển thị danh sách bài viết
  ▶
  
Tạo View (posts/index.blade.php) để Hiển Thị Danh Sách Bài Viết
  ▶
  
Định tuyến (Routes) để gọi hàm trong PostController
18

4. Bài Tập Thực Hành
4.1. Bài Tập 1: Tạo Trang Blog
4.2. Bài Tập 2: Tạo Hệ Thống Đăng Nhập và Đăng Ký Người Dùng
4.3. Bài Tập 3: Quản Lý Ảnh
  ▶
  
Tạo Bảng posts với các trường:
 
id, title, content, created_at, updated_at.
  ▶
  
Tạo Controller và Routes:
 để hiển thị danh sách bài viết.
  ▶
  
Tạo View:
 để hiển thị danh sách bài viết và chi tiết từng bài viết.
  ▶
  
Tạo Bảng users với các trường:
 
id, name, email, password, created_at, 
updated_at.
  ▶
  
Tạo Controller và Routes:
 để đăng nhập và đăng ký người dùng.
  ▶
  
Sử dụng Laravel Passport hoặc Sanctum:
 để xây dựng API cho việc xác 
thực người dùng.
  ▶
  
Tạo Bảng photos với các trường:
 
id, user_id, image_path, created_at, 
updated_at.
  ▶
  
Cho phép người dùng
 tải lên ảnh và hiển thị danh sách ảnh tải lên gần đây.
5. Tạo API cho việc tải ảnh lên và lấy danh sách
     ảnh tải lên gần đây
Lưu ý: Bạn có thể tìm kiếm tài liệu và hướng dẫn chi tiết trên trang chính thức 
của Laravel (
https://laravel.com/docs
) để được hỗ trợ chi tiết trong việc thực hiện 
các bài tập này.
19

Ngôn ngữ lập trình web chuyên sâu  ▶
  
Tạo Bảng posts
  ▶
  
Định tuyến (Routes)
  ▶
  
Tạo Controller và Routes
Mã: PHP
Mã: PHP
Mã: PHP
5.1. Lời Giải Bài Tập 1: Tạo Trang Blog
∙
 
Tạo controller:
 
php artisan make:controller PostController
∙
 
Trong PostController:
20

▶
  
Tạo Bảng users
  ▶
  
Tạo View
  ▶
  
Tạo Controller và Routes cho Đăng Nhập và Đăng Ký
Mã: PHP
Mã: PHP
Mã: HTML
5.2. Lời Giải Bài Tập 2: Tạo Hệ Thống Đăng Nhập
        và Đăng Ký Người Dùng
∙
 
Tạo file 
index.blade.php
 trong thư mục 
resources/views/posts
:
∙
 
Tạo controller: 
php artisan make:controller AuthController
∙
 
Trong AuthController: 
viết các hàm cho đăng nhập và đăng ký.
∙
 
Định tuyến (Routes): 
cho đăng nhập và đăng ký
21

Ngôn ngữ lập trình web chuyên sâu
∙
 
Sử Dụng 
Laravel Passport
 hoặc 
Sanctum
 cho Xác Thực:
∙
 
Cài đặt 
Laravel Passport
 hoặc 
Sanctum
 và cấu hình chúng.
∙
 
Trong 
AuthController
, sử dụng 
Passport
 hoặc 
Sanctum
 để xác thực người dùng.
  ▶
  
Tạo Bảng photos
Mã: PHP
5.3. Lời Giải Bài Tập 3: Quản Lý Ảnh
  ▶
  
Tạo Controller và Routes cho Tải Ảnh Lên và Hiển Thị Danh Sách Ảnh
Mã: PHP
∙
 
Tạo controller: 
php artisan make:controller PhotoController
∙
 
Trong PhotoController: 
viết hàm cho tải ảnh lên và hiển thị danh sách ảnh.
22

▶
  
Định tuyến (Routes) cho tải ảnh lên và hiển thị danh sách ảnh
Mã: PHP
Lưu ý: Trong lời giải trên, bạn cần thay thế các phần như path_to_upload
-
ed_image bằng logic xử lý thực tế để lưu ảnh vào máy chủ và trả về đường 
dẫn đến ảnh đã tải lên. Đồng thời, bạn cũng cần cấu hình middleware và 
xác thực người dùng khi cần thiết để bảo mật các tác vụ như tải ảnh lên và 
hiển thị danh sách ảnh.
23

Ngôn ngữ lập trình web chuyên sâuLIST BÀI TẬP CHUYÊN SÂU VỀ SỬ DỤNG
FRAMWORK TRONG LẬP TRÌNH PHP TỪ
CƠ BẢN ĐẾN CHUYÊN SÂU VÀ THỰC TẾ
Danh sách các bài tập chuyên sâu về việc sử dụng framework trong lập trình 
PHP , bao gồm cả các bài tập từ cơ bản đến nâng cao và thực tế. Việc làm các 
bài tập này sẽ giúp bạn hiểu rõ cách sử dụng các framework phổ biến như Lar
-
avel, Symfony, hoặc Yii để xây dựng ứng dụng web PHP một cách hiệu quả và 
chuyên nghiệp.
1. Các Bài Tập Cơ Bản
1.1. Cài Đặt Framework 
  ▶
  
Cài đặt một framework PHP
 như Laravel hoặc Symfony trên máy local của bạn.
  ▶
  
T
ạo một ứng dụng "Hello World"
 đơn giản sử dụng framework này.
1.2. Routing và Controllers
  ▶
  
Định nghĩa các route
 
cho các trang web đơn giản.
  ▶
  
Tạo controllers
 
để xử lý các yêu cầu từ các routes.
1.3. Views và Templates
  ▶
  
Sử dụng views
 
để hiển thị dữ liệu trên trình duyệt.
  ▶
  
Tạo và sử dụng các templates
 
để tái sử dụng giao diện.
1.4. Forms và Validation
  ▶
  
Tạo các biểu mẫu (forms)
 
để nhận dữ liệu từ người dùng.
  ▶
  
Áp dụng các quy tắc kiểm tra (validation rules)
 
để xác nhận dữ liệu nhập vào.
24

2. Các Bài Tập Trung Bình
3. Các Bài Tập Nâng Cao và Thực Tế
2.1. Database Integration
  ▶
  
Kết nối ứng dụng với cơ sở dữ liệu (MySQL, PostgreSQL, hoặc SQLite).
  ▶
  
Thực hiện các truy vấn SQL cơ bản 
để lấy, thêm, sửa và xóa dữ liệu.
2.2. Authentication và Authorization
  ▶
  
Thiết lập hệ thống xác thực người dùng (authentication).
  ▶
  
Xác định quyền truy cập và xử lý xác thực người dùng.
2.3. RESTful APIs
  ▶
  
Xây dựng một RESTful API đơn giản 
cho ứng dụng của bạn.
  ▶
  
Sử dụng HTTP methods (GET, POST, PUT, DELETE) 
để thực hiện các thao 
tác trên tài nguyên.
3.1. ORM (Object-Relational Mapping)
  ▶
  
Sử dụng ORM 
để tương tác với cơ sở dữ liệu thay vì viết truy vấn SQL trực tiếp.
  ▶
  
Định nghĩa các mối quan hệ (relationships) 
giữa các bảng dữ liệu.
3.2. Middleware và Custom Middleware
  ▶
  
Sử dụng middleware 
để thực hiện các xử lý trung gian trước khi yêu cầu đến 
các controllers.
  ▶
  
Viết và tích hợp các middleware tùy chỉnh (custom middleware) 
vào ứng dụng.
3.3. Caching và Performance Optimization
  ▶
  
Sử dụng caching 
để lưu trữ dữ liệu tạm thời và tối ưu hóa hiệu suất ứng dụng.
  ▶
  
Áp dụng các kỹ thuật tối ưu hóa 
để giảm thời gian tải trang và tăng trải 
nghiệm người dùng.
25

Ngôn ngữ lập trình web chuyên sâu    (Sử dụng Laravel):
        Cài đặt Laravel bằng Composer: composer create-project --prefer-dist 
laravel/laravel myapp
        Tạo một route và controller cho "Hello World":
    (Sử dụng Laravel):
        Định nghĩa route và controller:
3.4. Đa Ngôn Ngữ và Đa Khu Vực
  ▶
  
Thực hiện hỗ trợ đa ngôn ngữ (multi-language) 
cho ứng dụng của bạn.
  ▶
  
Xây dựng hỗ trợ đa khu vực (multi-region) 
để xử lý các yêu cầu từ các khu 
vực khác nhau.
3.5. Tích Hợp Dịch Vụ Bên Ngoài
  ▶
  
Kết nối ứng dụng với các dịch vụ bên ngoài 
bằng cách sử dụng API (ví dụ: 
Google Maps API, Facebook API).
  ▶
  
Xử lý dữ liệu 
được trả về từ các dịch vụ bên ngoài.
LỜI GIẢI CHI TIẾT
1. Các Bài Tập Cơ Bản
1.1. Cài Đặt Framework
1.2. Routing và Controllers
Mã: PHP
26

(Sử dụng Laravel):
        Sử dụng view và gửi dữ liệu đến template:
    
(Sử dụng Laravel):
        Tạo một biểu mẫu và xử lý dữ liệu đơn giản:
1.3. Views và Templates
1.4. Forms và Validation
Mã: PHP
Mã: PHP
Mã: HTML
27

Ngôn ngữ lập trình web chuyên sâuMã: PHP
Mã: PHP
Mã: PHP
2. Các Bài Tập Trung Bình
2.1. Database Integration
2.2. Authentication và Authorization
    (Sử dụng Laravel):
        Kết nối với cơ sở dữ liệu và thực hiện truy vấn:
    (Sử dụng Laravel):
        
Xác thực người dùng trong Laravel:
        
Xác định quyền truy cập:
28

Mã: PHP
Mã: PHP
Mã: PHP
Mã: PHP
3. Các Bài Tập Nâng Cao và Thực Tế
3.1. ORM (Object-Relational Mapping)
2.3. RESTful APIs:
    
Lời Giải (Sử dụng Laravel):
        Định nghĩa các route API và trả về dữ liệu JSON:
    (Sử dụng Laravel Eloquent):
        Định nghĩa mối quan hệ giữa các bảng và sử dụng Eloquent để tương tác 
với cơ sở dữ liệu.
29

Ngôn ngữ lập trình web chuyên sâu
3.2. Middleware và Custom Middleware
    (Sử dụng Laravel):
        Định nghĩa middleware tùy chỉnh và áp dụng nó cho các route cụ thể.
Mã: PHP
30

3.3. Caching và Performance Optimization
3.4. Đa Ngôn Ngữ và Đa Khu Vực
3.5. Tích Hợp Dịch Vụ Bên Ngoài
    (Sử dụng Laravel):
        Sử dụng cache để lưu trữ dữ liệu tạm thời và tối ưu hóa các truy vấn dữ 
liệu lớn.
    (Sử dụng Laravel):
        Sử dụng localization để dịch các chuỗi văn bản sang nhiều ngôn ngữ.
        Sử dụng multiple database connections để kết nối với các cơ sở dữ liệu 
khác nhau tùy thuộc vào khu vực.
    (Sử dụng Laravel HTTP Client):
        Sử dụng HTTP Client hoặc các thư viện API để kết nối và gửi yêu cầu đến 
dịch vụ bên ngoài.
Mã: PHP
Mã: PHP
31

Ngôn ngữ lập trình web chuyên sâu1. Bài tập
1.1. Bài Tập 1: Quản lý Người Dùng
  ▶
  
Đề Bài: 
Xây dựng một trang web quản lý người dùng với các chức năng sau:
∙
 
Hiển thị danh sách người dùng từ cơ sở dữ liệu.
∙
 
Thêm mới người dùng.
∙
 
Chỉnh sửa thông tin người dùng.
∙
 
Xóa người dùng.
 ▶
  
Hướng dẫn:
    Tạo Cơ Sở Dữ Liệu:
∙
 
Sử dụng MySQL hoặc SQLite
 để lưu trữ thông tin người dùng.
∙
 
Tạo các truy vấn SQL
 để lấy, thêm, cập nhật và xóa người dùng.
    Giao Diện Người Dùng:
∙
 
Sử dụng HTML và CSS
 để tạo giao diện cho trang web.
∙
 
Sử dụng PHP
 để kết nối với cơ sở dữ liệu và hiển thị dữ liệu người dùng.
Mã: PHP
LIST BÀI TẬP CHUYÊN SÂU VỀ 
NGÔN NGỮ LẬP TRÌNH PHP
1.2. Bài Tập 2: Quản lý Sản Phẩm
  ▶
  
Đề Bài: 
Xây dựng một trang web quản lý sản phẩm với các chức năng sau:
32

2. Lời giải chi tiết các bài tập chuyên sâu về PHP
  ▶
  
Đề Bài: 
Xây dựng một hệ thống quản lý đơn hàng với các chức năng sau:
∙
 
Hiển thị danh sách đơn hàng từ cơ sở dữ liệu.
∙
 
Xem chi tiết đơn hàng bao gồm thông tin sản phẩm và khách hàng.
∙
 
Xác nhận đơn hàng khi đã giao hàng.
 ▶
  
Hướng dẫn:
    Cơ Sở Dữ Liệu:
∙
 
Lưu trữ
 thông tin đơn hàng, thông tin sản phẩm và thông tin khách hàng trong 
các bảng riêng biệt.
∙
 
Kết nối
 các bảng thông qua các khóa ngoại để liên kết thông tin đơn hàng với 
sản phẩm và khách hàng.
    Truy Vấn Dữ Liệu: 
Sử dụng các truy vấn SQL
 để lấy thông tin đơn hàng, sản 
phẩm và khách hàng từ cơ sở dữ liệu.
    Giao Diện Người Dùng: 
∙
 
Tạo giao diện cho trang quản lý đơn hàng với các chức năng xem danh sách 
đơn hàng và xem chi tiết đơn hàng.
∙
 
Hiển thị thông tin sản phẩm và khách hàng liên quan đến mỗi đơn hàng.
∙
 
Hiển thị danh sách sản phẩm từ cơ sở dữ liệu.
∙
 
Thêm mới sản phẩm với hình ảnh đính kèm.
∙
 
Chỉnh sửa thông tin sản phẩm.
∙
 
Xóa sản phẩm.
 ▶
  
Hướng dẫn:
    Cơ Sở Dữ Liệu và Tệp Ảnh:
∙
 
Sử dụng cơ sở dữ liệu để lưu trữ thông tin sản phẩm.
∙
 
Lưu trữ hình ảnh sản phẩm trong thư mục trên máy chủ và lưu đường dẫn đến 
hình ảnh trong cơ sở dữ liệu.
    Tải Lên Ảnh: 
Sử dụng PHP
 để xử lý tệp ảnh được tải lên từ người dùng và lưu 
trữ nó trong thư mục đích.
    Giao Diện Người Dùng: 
Tạo giao diện cho trang quản lý sản phẩm với các 
biểu mẫu để thêm, chỉnh sửa và xóa sản phẩm.
1.3. Bài Tập 3: Quản lý Đơn Hàng
2.1. Bài Tập 1: Quản lý Người Dùng
33

Ngôn ngữ lập trình web chuyên sâu  ▶
  
Giao Diện Người Dùng (HTML, CSS, JavaScript):
index.html (Hiển Thị Danh Sách Người Dùng):
form.html (Form Thêm Mới/Chỉnh Sửa Người Dùng):
34

▶
  
Xử Lý Dữ Liệu (PHP và MySQL):
styles.css (CSS để Thiết Kế Giao Diện):
db.php (Kết Nối Cơ Sở Dữ Liệu):
35

Ngôn ngữ lập trình web chuyên sâu
users.php (Xử Lý Dữ Liệu Người Dùng):
36

▶
  
JavaScript (script.js - Xử Lý Giao Diện và Gửi Yêu Cầu):
37

Ngôn ngữ lập trình web chuyên sâu
38

Trong ví dụ trên, bạn cần tạo một cơ sở dữ liệu MySQL với bảng users có 
các trường id, name, và email. Đảm bảo rằng bạn đã cấu hình thông tin kết 
nối đúng trong file db.php. Giao diện người dùng được thiết kế bằng HTML 
và CSS, và JavaScript được sử dụng để tương tác với người dùng và gửi yêu 
cầu đến máy chủ thông qua API.
2.2. Bài Tập 2: Quản lý Sản Phẩm
    Để xây dựng trang web quản lý sản phẩm với các chức năng hiển thị, thêm 
mới, chỉnh sửa và xóa sản phẩm, bạn có thể sử dụng PHP và MySQL cho xử 
lý dữ liệu trên máy chủ. Dưới đây là lời giải để bạn có thể bắt đầu thực hiện:
  ▶
  
Kết Nối Cơ Sở Dữ Liệu:
39

Ngôn ngữ lập trình web chuyên sâu
  ▶
  
Hiển Thị Danh Sách Sản Phẩm:
  ▶
  
Thêm Mới Sản Phẩm:
  ▶
  
Chỉnh Sửa Thông Tin Sản Phẩm:
40

▶
  
Xóa Sản Phẩm:
  ▶
  
Giao Diện Người Dùng (HTML, CSS):
index.html (Hiển Thị Danh Sách Sản Phẩm):
41

Ngôn ngữ lập trình web chuyên sâu
form.html (Form Thêm Mới/Chỉnh Sửa Sản Phẩm):
42

styles.css (CSS để Thiết Kế Giao Diện):
  ▶
  
JavaScript (script.js - Xử Lý Giao Diện và Gửi Yêu Cầu):
43

Ngôn ngữ lập trình web chuyên sâu
44

Trong ví dụ trên, bạn cần tạo một cơ sở dữ liệu MySQL với bảng products 
có các trường id và product_name. Đảm bảo rằng bạn đã cấu hình thông 
tin kết nối đúng trong file db.php. Giao diện người dùng được thiết kế bằng 
HTML và CSS, và JavaScript được sử dụng để tương tác với người dùng và 
gửi yêu cầu đến máy chủ thông qua API.
2.3. Bài Tập 3: Quản lý Đơn Hàng
    Để xây dựng hệ thống quản lý đơn 
hàng với các chức năng hiển thị danh 
sách đơn hàng, xem chi tiết đơn hàng, 
và xác nhận đơn hàng, bạn cần thiết 
kế cơ sở dữ liệu và tạo giao diện tương 
tác với người dùng. Dưới đây là một 
hướng dẫn về cách thực hiện dự án 
bạn có thể bắt đầu:
  ▶
  
Thiết Kế Cơ Sở Dữ Liệu:
    Bảng orders:
∙
 
order_id (PRIMARY KEY): Khóa chính của đơn hàng.
∙
 
customer_name: Tên khách hàng đặt hàng.
∙
 
product_name: Tên sản phẩm trong đơn hàng.
∙
 
order_status: Trạng thái của đơn hàng (ví dụ: "Đã xác nhận", "Đang giao 
hàng", "Đã giao hàng").
    Bảng products:
∙
 
product_id (PRIMARY KEY): Khóa chính của sản phẩm.
∙
 
product_name: Tên sản phẩm.
∙
 
product_description: Mô tả sản phẩm.
∙
 
product_price: Giá sản phẩm.
    Bảng customers:
∙
 
customer_id (PRIMARY KEY): Khóa chính của khách hàng.
∙
 
customer_name: Tên khách hàng.
∙
 
customer_email: Địa chỉ email của khách hàng.
  ▶
  
Giao Diện Người Dùng (HTML, CSS, JavaScript):
index.html (Hiển Thị Danh Sách Đơn Hàng và Chi Tiết Đơn Hàng):
45

Ngôn ngữ lập trình web chuyên sâu
styles.css (CSS để Thiết Kế Giao Diện):
46

orders.php (Truy vấn và Trả về Dữ Liệu Đơn Hàng):
  ▶
  
Xử Lý Dữ Liệu (PHP và MySQL):
47

Ngôn ngữ lập trình web chuyên sâuorder-details.php (Truy vấn và Trả về Chi Tiết Đơn Hàng):
confirm-order.php (Xác Nhận Đơn Hàng):
48

▶
  
JavaScript (script.js - Xử Lý Giao Diện và Gửi Yêu Cầu):
49

Ngôn ngữ lập trình web chuyên sâuTrong ví dụ trên, bạn cần tạo một cơ sở dữ liệu MySQL với bảng products 
có các trường id và product_name. Đảm bảo rằng bạn đã cấu hình thông 
tin kết nối đúng trong file db.php. Giao diện người dùng được thiết kế bằng 
HTML và CSS, và JavaScript được sử dụng để tương tác với người dùng và 
gửi yêu cầu đến máy chủ thông qua API.
50

Chương 2Ngôn ngữ 
lập trình
ASP.NET
Chương 1i
Chương i1
NGÔN NGỮ LẬP TRÌNH ASP:
KHÁI NIỆM, CÚ PHÁP VÀ VÍ DỤ THỰC TẾ
1. Khái niệm
ASP 
(Active Server Pages) là một công nghệ phát triển ứng dụng web được phát 
triển bởi Microsoft. Nó cho phép người phát triển tạo ra các trang web động 
bằng cách sử dụng mã server-side để tạo nội dung được hiển thị cho người 
dùng. ASP sử dụng các mã server-side để tạo nội dung trang web, giúp tương 
tác với cơ sở dữ liệu, đọc và ghi tệp tin, và thực hiện các tác vụ máy chủ khác.
2. Cú Pháp
2.1. Mã Server-Side
Mã: ASP
51

Ngôn ngữ lập trình web chuyên sâu2.2. Biến
2.3. Câu Lệnh Điều Kiện
2.4. Vòng Lặp
Mã: ASP
Mã: ASP
Mã: ASP
52

Chương 23. Ví Dụ Thực Tế
3.1. Hiển Thị Thông Tin Từ Form
3.2. Kết Nối Cơ Sở Dữ Liệu và Hiển Thị Dữ Liệu
Mã: ASP
Mã: ASP
53

Ngôn ngữ lập trình web chuyên sâu1. Phân Tích
Trong ví dụ trên, mã ASP được sử dụng để nhận dữ liệu từ một biểu mẫu và 
hiển thị thông tin hoặc truy vấn cơ sở dữ liệu và hiển thị kết quả lên trang 
web. ASP cung cấp các chức năng mạnh mẽ để xử lý dữ liệu và tương tác với 
người dùng trên các trang web.
ASP.NET: PHÂN TÍCH, CÚ PHÁP
VÀ VÍ DỤ THỰC TẾ
  ▶
  
ASP.NET :
  
∙
 
ASP.NET
 là một framework phát triển ứng dụng web được phát triển bởi
Microsoft. Nó sử dụng ngôn ngữ lập trình C# hoặc VB.NET để phát triển các 
ứng dụng web động, trang web tương tác và dịch vụ web. ASP .NET hỗ trợ mô 
hình lập trình Web Forms và Model-View-Controller (MVC), cho phép phát triển 
ứng dụng web linh hoạt và dễ dàng bảo trì.
∙
 
Visual Studio:
 Visual Studio là một IDE (Integrated Development
Environment) chính thức từ Microsoft dành cho phát triển ứng dụng .NET, bao 
gồm ASP .NET. Nó cung cấp nhiều công cụ hỗ trợ phát triển và thiết kế ứng dụng 
ASP .NET, đi kèm với trình biên dịch tích hợp.
∙
 
Visual Studio Code:
 Visual Studio Code (VS Code) là một trình soạn thảo 
mã nguồn mở và miễn phí được phát triển bởi Microsoft. Nó hỗ trợ nhiều ngôn 
ngữ lập trình, bao gồm ASP .NET. Bạn có thể sử dụng các extension như “C# for 
Visual Studio Code” để phát triển ứng dụng ASP .NET.
∙
 
Rider:
 Rider là một IDE phát triển bởi JetBrains, nổi tiếng với IntelliJ IDEA cho 
Java. Rider hỗ trợ phát triển ứng dụng .NET bằng C# và ASP .NET. Nó cung cấp 
các tính năng mạnh mẽ cho việc phát triển ASP .NET.
  ▶
  
PHP Roadmap dạng bảng cú pháp câu lệnh và các thẻ
54

Chương 2  ▶
  
Roadmap học ASP.NET dưới dạng bảng, bao gồm các cú pháp câu lệnh 
và cách sử dụng các thẻ cơ bản
Thứ 
Tự
Chủ Đề
Nội Dung
1
C# Cơ Bản
∙ 
Biến, kiểu dữ liệu, hàm.
∙ 
Câu lệnh điều kiện và vòng lặp.
∙ 
Mảng và List.
2
ASP .NET
Web Forms
∙ 
Cú pháp cơ bản của ASP .NET Web Forms.
∙ 
Xử lý sự kiện và truy cập cơ sở dữ liệu.
3
ASP .NET MVC
∙ 
Mô hình MVC (Model-View-Controller).
∙ 
Routing và Razor syntax.
∙ 
Xử lý dữ liệu với Entity Framework.
4
ASP .NET Core
∙ 
Cài đặt và cấu hình ASP .NET Core.
∙ 
Middleware và Dependency Injection.
∙ 
Razor Pages và MVC trong ASP .NET Core.
5
ASP .NET MVC
∙ 
Code-First và Database-First approaches.
∙ 
Tạo, đọc, cập nhật và xóa dữ liệu.
6
Entity
Framework
Core
∙ 
Thiết kế và xây dựng RESTful APIs.
∙ 
Sử dụng HTTP methods (GET, POST, PUT, 
DELETE).
7
Front-end
Technologies
∙ 
HTML, CSS, JavaScript cơ bản.
∙ 
AJAX và JSON.
∙ 
Data binding và DOM manipulation.
8
Unit Testing
∙ 
Xây dựng và chạy unit tests với NUnit hoặc 
xUnit.
∙ 
Tự động hóa việc kiểm thử.
55

Ngôn ngữ lập trình web chuyên sâu  ▶
  
Một số khái niệm/chủ đề trong ASP.NET, cùng với mô tả và 
cú pháp/
thẻ liên quan
Thứ 
Tự
Chủ Đề
Nội Dung
9
Source Control (Git)
∙ 
Cơ bản về Git: commit, push, pull, branch, 
merge.
∙ 
GitHub hoặc GitLab.
10
Bảo Mật và
Xác Thực
∙ 
HTTPS và SSL
∙ 
Xác thực người dùng với ASP .NET Identity 
hoặc OAuth.
11
Performance
Optimization
∙ 
Caching, bundling và minification.
∙ 
Tối ưu hóa truy vấn và tải dữ liệu.
12
DevOps và
Production
Deployment
∙ 
Cấu hình và triển khai ứng dụng lên môi 
trường production.
∙ 
Monitoring và log analysis.
Khái 
Niệm/Chủ 
Đề
Mô Tả
Cú Pháp/Thẻ ASP.NET
ASP .NET 
Web Forms
Mô hình lập trình 
web dựa trên các 
trang form-like.
<asp:Control>
ASP .NET 
MVC
Mô hình lập trình 
web dựa trên 
Moel-View-Con
-
troller.
@Html.TextBoxFor(m => m.Property)
ASP .NET 
Core
Framework lập 
trình web dựa trên 
.NET Core.
@model, @inject, @foreach, @if (Razor 
syntax)
56

Chương 2Khái 
Niệm/Chủ 
Đề
Mô Tả
Cú Pháp/Thẻ ASP.NET
Server
Controls
Các điều khiển 
(controls) được xử 
lý ở phía máy chủ.
<asp:TextBox>, <asp:Button>,
<asp:GridView>
Razor Syntax
Cú pháp cho việc 
viết mã C# trong 
file .cshtml.
@{ var variable = "value"; }, @if, @
foreach, @model
ASP .NET 
Identity
Hệ thống quản lý 
xác thực và quyền 
truy cập người 
dùng.
SignInManager, UserManager, Roles, 
AuthorizeAttribute
Entity
Framework
ORM (Object-Re
-
lational Mapping) 
cho truy cập cơ sở 
dữ liệu.
LINQ to Entities, Code-First,
Database-First
Middleware
Các thành phần 
xử lý yêu cầu trước 
khi đến Controller.
app.UseMiddleware
<CustomMiddleware>()
Layouts
Template chung 
cho các trang 
web.
Layout.cshtml, @RenderBody(),
@section
Routing
Định tuyến yêu 
cầu từ URL đến 
Controller và 
Action.
app.UseMvc(routes => { routes.
MapRoute(...) })
AJAX in ASP .
NET
Sử dụng AJAX để 
tương tác với máy 
chủ mà không làm 
tải lại trang.
$.ajax(), UpdatePanel, <asp:
ScriptManager>
57

Ngôn ngữ lập trình web chuyên sâuKhái Niệm/
Chủ Đề
Mô Tả
Cú Pháp/Thẻ ASP.NET
Web API
Xây dựng API dựa 
trên HTTP cho ứng 
dụng web hoặc di 
động.
ApiController, RouteAttribute,
HttpGet, HttpPost
Dependency 
Injection
Cách tiêm các đối 
tượng vào trong 
các lớp khác.
services.AddSingleton<IService,
ServiceImplementation>()
2. Cú Pháp Câu Lệnh ASP.NET
Mã: csharp
Mã: HTML
Mã: csharp
  ▶
  
Lập Trình Trong ASP.NET View
  ▶
  
Khối Code-behind (C#)
58

Chương 2  ▶
  
Code-behind (products.aspx.cs)
3. Ví Dụ Thực Tế: Hiển Thị Danh Sách Sản Phẩm
Mã: HTML
  ▶
  
ASP.NET View (products.aspx)
59

Ngôn ngữ lập trình web chuyên sâuBÀI TẬP THỰC HÀNH
1. Bài Tập 1: Tạo Trang Đăng Nhập
2. Bài Tập 2: Quản Lý Sản Phẩm
3. Bài Tập 3: Xây Dựng Ứng Dụng Blog Đơn Giản
∙
 
Tạo trang đăng nhập với hai trường nhập: tên đăng nhập và mật khẩu.
∙
 
Kiểm tra thông tin đăng nhập và hiển thị thông báo lỗi nếu không hợp lệ.
∙
 
Tạo trang quản lý sản phẩm với các chức năng: hiển thị danh sách sản phẩm, 
thêm sản phẩm mới và xóa sản phẩm.
∙
 
Sử dụng GridView hoặc Repeater để hiển thị danh sách sản phẩm.
∙
 
Tạo trang chính hiển thị các bài viết blog.
∙
 
Cho phép người dùng đăng bài mới, chỉnh sửa và xóa bài viết.
60

Chương 24. Lời Giải Bài Tập 1
LỜI GIẢI CHI TIẾT
Mã: Csharp
5. Lời Giải Bài Tập 2
Mã: Csharp
61

Ngôn ngữ lập trình web chuyên sâu6. Lời Giải Bài Tập 3
Mã: Csharp
62

Chương 2Lưu ý: Trong các ví dụ trên, bạn cần thay thế logic truy vấn CSDL và xử lý dữ 
liệu thực tế tương ứng với ứng dụng của mình.
63

Ngôn ngữ lập trình web chuyên sâuNgôn ngữ
lập trình web với 
Python sử dụng 
Framework
Django
Chương 1ii
Chương ii1
LẬP TRÌNH WEB VỚI PYTHON VÀ
FRAMEWORK DJANGO: KHÁI NIỆM, CÚ PHÁP
VÀ VÍ DỤ THỰC TẾ
1. Khái niệm
∙
 
Django:
 là một framework phát triển ứng dụng web mã nguồn mở được viết 
bằng Python, hỗ trợ các nhà phát triển xây dựng các ứng dụng web mạnh mẽ và 
linh hoạt dễ dàng. Django tuân theo mô hình MTV (Model-Template-View) để 
tạo các trang web.
∙
 
Dưới đây là một roadmap cho học Django dưới dạng bảng, bao gồm các cú 
pháp câu lệnh và các thẻ cơ bản:
Khái Niệm/
Chủ Đề
Mô Tả
Cú Pháp/Thẻ ASP.NET
Models
Định nghĩa cấu 
trúc dữ liệu trong 
cơ sở dữ liệu
class MyModel(models.Model):
Fields
Định nghĩa các 
loại trường dữ 
liệu (CharField, 
IntegerField, ...)
name = models.CharField
(max_length=100)
64

Chương 3Khái Niệm/
Chủ Đề
Mô Tả
Cú Pháp/Thẻ ASP.NET
Migrations
Tạo và quản lý các 
phiên bản cơ sở dữ 
liệu
python manage.py makemigrations
Admin Panel
Tạo giao diện 
quản trị dữ liệu 
cho các model
admin.site.register(MyModel)
Views
Xử lý logic
và tương tác với
dữ liệu
def my_view(request):
Templates
Hiển thị dữ liệu và 
giao diện người 
dùng
{{ variable_name }}
URL Patterns
Liên kết các URL 
với views và
functions
path('my-url/', my_view, name='my-url')
Forms
Định nghĩa và xử 
lý các biểu mẫu 
nhập liệu
class MyForm(forms.Form):
Static Files
Quản lý các tệp tin 
tĩnh như CSS,
JavaScript
{% load static %}<br><link rel="
-
stylesheet" href="{% static 'style.css' 
%}">
Django ORM
Sử dụng ORM 
(Object-Relation
-
al Mapping) để 
tương tác với cơ 
sở dữ liệu
MyModel.objects.filter(...)
65

Ngôn ngữ lập trình web chuyên sâuKhái Niệm/
Chủ Đề
Mô Tả
Cú Pháp/Thẻ ASP.NET
Querysets
Tạo truy vấn
LINQ-like để
truy vấn dữ liệu
MyModel.objects.filter(...).exclude(...).
order_by(...)
Middlwares
Xử lý các yêu cầu 
trước khi đến 
views hoặc sau 
khi rời views
def my_middleware(get_response):
User
Authentication
Đảm bảo và quản 
lý xác thực
người dùng
@login_required (Decorator)
Testing
Viết các bài kiểm 
tra để đảm bảo 
chất lượng ứng 
dụng
class MyTestCase(TestCase):
REST APIs
Xây dựng API cho 
ứng dụng web
Django REST Framework
Caching
Sử dụng cache 
để tối ưu hóa hiệu 
suất
from django.core.cache import cache
cache.set(‘my_key’, ‘my_value’)
Error
Handling
Xử lý và bắt lỗi 
trong ứng dụng
try:
except SomeException as e:
Custom Mid
-
dleware
Tạo middleware 
tùy chỉnh cho 
ứng dụng
class MyMiddleware:
def __init__(self, get_response):
66

Chương 3Khái Niệm/
Chủ Đề
Mô Tả
Cú Pháp/Thẻ ASP.NET
Signals
Định nghĩa và xử 
lý các sự kiện ứng 
dụng
from django.db.models.signals import 
post_save
@receiver(post_save, sender=MyModel)
Async Views
Xử lý yêu cầu bất 
đồng bộ trong 
views
async def my_view(request):
Nhớ rằng, để học Django hiệu quả, bạn cần áp dụng kiến thức này thông qua 
việc thực hành và xây dựng các dự án thực tế. Đồng thời, nắm vững việc đọc 
tài liệu chính thống và hiểu rõ về các chức năng, phương thức và thuộc tính 
của các lớp và thẻ Django.
2. Cú Pháp
  ▶
  
Khai Báo Một Model
Mã: Python
67

Ngôn ngữ lập trình web chuyên sâu  ▶
  
Tạo Một URL và Hàm Xử Lý Liên Quan
  ▶
  
Tạo Một View
  ▶
  
Tạo Một Template
Mã: Python
Mã: Python
Mã: HTML
68

Chương 3  ▶
  
Cấu Hình Cơ Sở Dữ Liệu (settings.py)
  ▶
  
Tạo Ứng Dụng Quản Lý Sản Phẩm
Mã: Python
Mã: Python
3. Ví Dụ Thực Tế
  
Khai Báo Một Model:
Mã: Python
69

Ngôn ngữ lập trình web chuyên sâu  
Kết Nối URL với View
:
  
Cách Chạy Ứng Dụng Django
:
Mã: Python
Mã: Python
Mã: HTML
 Cài Đặt Django: Trước hết, bạn cần cài đặt Django bằng pip:
70

Chương 3  
Tạo Ứng Dụng Django Mới
:
 Tạo Dự Án Django Mới: Chạy lệnh dưới đây để tạo một dự án Django mới:
Cấu Hình URL: Trong tệp myproject/urls.py, cấu hình các URL cho ứng dụng 
của bạn.
Chạy Máy Chủ Phát Triển: Chạy lệnh dưới đây để khởi động máy chủ phát triển 
Django:
Truy Cập Ứng Dụng: Mở trình duyệt và truy cập http://localhost:8000/products/ 
để xem danh sách sản phẩm.
BÀI TẬP THỰC HÀNH
1. Bài Tập 1: Tạo Form Đăng Nhập và Xử Lý Đăng Nhập
  ▶
  
Tạo một trang đăng nhập với hai trường nhập:
 tên người dùng và mật 
khẩu.
  ▶
  
Viết view
 
để xác thực thông tin đăng nhập và hiển thị thông báo lỗi nếu 
không hợp lệ.
71

Ngôn ngữ lập trình web chuyên sâuLỜI GIẢI CHI TIẾT
4. Lời Giải Bài Tập 1
Mã: Python
3. Bài Tập 3: Thêm Tính Năng Biểu Đồ Động
  ▶
  
Sử dụng thư viện JavaScript như Chart.js
 để tạo biểu đồ động.
  ▶
  
Tạo một view để cung cấp dữ liệu biểu đồ dưới dạng
 JSON từ Django và 
hiển 
thị biểu đồ động trên trình duyệt.
2. Bài Tập 2: Tạo Trang Quản Lý Sản Phẩm
  ▶
  
Tạo trang quản lý sản phẩm với chức năng:
 
hiển thị danh sách sản 
phẩm, thêm sản phẩm mới, và xóa sản phẩm.
  ▶
  
Sử dụng
 template và form để hiển thị và xử lý dữ liệu sản phẩm.
72

Chương 35. Lời Giải Bài Tập 2
6. Lời Giải Bài Tập 3
Mã: Python
Mã: Python
73

Ngôn ngữ lập trình web chuyên sâuTrong ví dụ trên, chart_data là một view trả về dữ liệu biểu đồ dướng dạng 
JSON. Bằng cách sử dụng JavaScript và AJAX, bạn có thể lấy dữ liệu này và 
vẽ biểu đồ động trên trình duyệt của người dùng.
Trong ví dụ trên, chart_data là một view trả về dữ liệu biểu đồ dướng dạng 
JSON. Bằng cách sử dụng JavaScript và AJAX, 
bạn
 có thể lấy dữ liệu này và 
vẽ biểu đồ động trên trình duyệt của người dùng.
BÀI TẬP CHUYÊN SÂU VỀ
FRAMEWORK VỚI DJANGO
1. Quản Lý Bài Viết
1. Lời giải bài tập: Quản Lý Bài Viết
  ▶
  
Cơ Sở Dữ Liệu
  ▶
  
Giao Diện Người Dùng
Tạo một model Post chứa các trường như 
title
, 
content
, 
created_at
, và 
author
 
để lưu trữ thông tin của các bài viết.
Để xây dựng ứng dụng Quản Lý Bài Viết sử dụng 
Django
 và kết nối với cơ sở dữ 
liệu 
MySQL
 (tên cơ sở dữ liệu là QuanLyBaiViet), bạn cần thực hiện các bước 
sau:
∙
 Thiết kế trang chính hiển thị danh sách các bài viết.
∙
 Tạo trang chi tiết cho mỗi bài viết để hiển thị nội dung đầy đủ của bài viết.
LỜI GIẢI CHI TIẾT
74

Chương 3  ▶
  
Cài Đặt Django và MySQL Client
  ▶
  
Thiết Lập Cơ Sở Dữ Liệu
  ▶
  
Thiết Lập Django Project và App
  ▶
  
Cấu Hình Cơ Sở Dữ Liệu trong settings.py
Trước tiên, hãy chắc chắn rằng bạn đã cài đặt 
Django
 và 
MySQL Client
 cho 
Django
. Bạn có thể cài đặt chúng bằng các lệnh sau:
Tạo một cơ sở dữ liệu với tên là 
QuanLyBaiViet
 trong 
MySQL
 thông qua 
XAMPP
 
hoặc bất kỳ công cụ quản lý cơ sở dữ liệu nào khác.
75

Ngôn ngữ lập trình web chuyên sâu  ▶
  
Định Nghĩa Model Bài Viết
  ▶
  
Tạo Migration và Áp Dụng
Trong 
file models.py
 của ứng dụng 
QuanLyBaiVietApp
, định nghĩa 
model
 cho 
bài viết:
Chạy các lệnh sau để tạo 
migration
 và áp dụng nó vào cơ sở dữ liệu:
Mã: Python
76

Chương 3  ▶
  
Tạo Giao Diện Đăng Nhập
  ▶
  
Cấu Hình Đường Dẫn URL
Tạo template cho trang đăng nhập 
(templates/login.html)
:
Trong file urls.py của ứng dụng 
QuanLyBaiVietApp
, cấu hình đường dẫn 
Mã: HTML
Mã: Python
77

Ngôn ngữ lập trình web chuyên sâu  ▶
  
Định Nghĩa View Đăng Nhập
Trong file views.py của ứng dụng QuanLyBaiVietApp, định nghĩa view cho 
trang đăng nhập:
Mã: Python
Trong hàm login_view, người dùng sẽ được chuyển hướng đến trang chính 
(home) sau khi đăng nhập thành công.
Nhớ thêm các đường dẫn và views cho các chức năng khác của ứng dụng 
theo yêu cầu của bạn.
Hy vọng rằng hướng dẫn này giúp bạn xây dựng ứng dụng Quản Lý Bài Viết 
với Django kết nối cơ sở dữ liệu MySQL.
78

Ph/uni1EA7n 2: 
Ph/uni1EA7n 2: 
Ph/uni1EA7n 2: 
NGÔN NGỮ
LẬP TRÌNH
ASP.NET

1. Bài tập 1 HTML/CSS
Lời giải bài tập số 1
Xây Dựng Trang Web Cá nhân Hoặc Trang Thương Mại. 
( phục vụ Dự án cuối 
sách).
Tạo Giao Diện Người Dùng Cho Ứng Dụng Web Cụ Thể. 
( phục vụ dự án cuối 
sách) Ngôn ngữ sử dụng Lập trình web với 
PHP
 và 
MySQL
  ▶
  
Xác định Mục Tiêu
  ▶
  
Wireframing và Thiết Kế Giao Diện
  ▶
  
Phát Triển Giao Diện Người Dùng
  ▶
  
Chọn Công Nghệ
  ▶
 
 
Bước 1: Xác định Yêu Cầu
  ▶
 
 
Bước 2: Thiết Kế Giao Diện Người Dùng (UI/UX)
∙
 Loại sản phẩm: Điện tử, thời trang, đồ gia dụng, v.v.
∙
 Chức năng chính: Hiển thị sản phẩm, giỏ hàng, thanh toán, đánh giá, tìm 
kiếm, v.v.
∙
 Vẽ wireframes để hiểu cấu trúc trang web và ứng dụng.
∙
 Thiết kế giao diện người dùng sáng sủa, dễ sử dụng và hấp dẫn.
∙
 Sử dụng HTML và CSS để tạo cấu trúc và thiết kế giao diện.
∙
 Sử dụng JavaScript hoặc framework để thêm chức năng tương tác.
∙
 Front-end: 
HTML, CSS, JavaScript, framework như React, Angular
 hoặc 
Vue.js
.
∙
 Back-end: 
Node.js, Python (Django, Flask), PHP (Laravel), Ruby (Ruby on 
Rails)
.
∙
 Cơ sở dữ liệu: 
MySQL, PostgreSQL, MongoDB
.
80

▶
  
Quản Lý Sản Phẩm và Dữ Liệu
  ▶
  
Kiểm Thử
  ▶
  
Triển Khai Trang Web
  ▶
  
Xây Dựng Giỏ Hàng và Thanh Toán
  ▶
  
Tối Ưu Hóa
  ▶
  
Chức Năng Tìm Kiếm và Lọc
  ▶
 
 
Bước 3: Phát Triển Trang Thương Mại
  ▶
 
 
Bước 4: Kiểm Thử và Tối Ưu Hóa
  ▶
 
 
Bước 5: Triển Khai và Duy Trì
∙
 Tạo cơ sở dữ liệu cho sản phẩm, người dùng, đơn hàng, v.v.
∙
 Phát triển chức năng thêm, sửa, xóa sản phẩm và quản lý danh mục.
∙
 Kiểm tra trang web trên các trình duyệt và thiết bị khác nhau để đảm bảo 
tính tương thích.
∙
 Thử nghiệm các chức năng để đảm bảo không có lỗi và người dùng có trải 
nghiệm tốt.
∙
 Đăng ký tên miền và chọn dịch vụ hosting.
∙
 Tải lên mã nguồn và cấu hình máy chủ.
∙
 Tích hợp chức năng giỏ hàng.
∙
 Tích hợp các cổng thanh toán như 
PayPal, Stripe
, hoặc tùy chọn thanh toán 
khi nhận hàng.
∙
 Tối ưu hóa mã nguồn, hình ảnh và tài nguyên để giảm thời gian tải trang.
∙
 Bảo mật trang web bằng cách sử dụng 
HTTPS
 và xác thực dữ liệu người 
dùng.
∙
 Tạo chức năng tìm kiếm sản phẩm theo tên, danh mục, giá, v.v.
∙
 Tích hợp các bộ lọc để giúp người dùng tìm kiếm dễ dàng hơn.
81

▶
  
Duy Trì và Cập Nhật
  ▶
  
File: index.html
∙
 Sao lưu dữ liệu định kỳ để tránh mất mát thông tin.
∙
 Cập nhật nội dung và chức năng theo yêu cầu của người dùng hoặc chủ sở 
hữu trang web.
Nhớ rằng, trang web trang thương mại cần phải tối ưu hóa trải nghiệm người 
dùng để tăng cơ hội chuyển đổi và duy trì lượng khách hàng trung thành. 
Đồng thời, bảo mật thông tin người dùng và giao dịch là rất quan trọng.
82

83

▶
  
File CSS( Style.css)
84

85

▶
  
Kết quả chạy chương trình
86

2. Bài tập 2: Bài Tập JavaScript và DOM
∙
 Xây Dựng Trò Chơi Đơn Giản Sử Dụng 
JavaScript
.
∙
 Tạo Các Ứng Dụng Web Tương Tác Với Người Dùng.
  ▶
  
Index.html
  ▶
 
 
Lời giải
87

▶
  
Script.js
<\>
<\>
C+
+
C++
H
H
TM
L
TML
PHP
PHP
88

▶
  
Style.css
89

▶
  
Kết quả chạy chương trình
Là một cách tuyệt vời để lấy dữ liệu thực tế từ internet và tích hợp vào ứng 
dụng của bạn. Dưới đây là hướng dẫn về cách sử dụng một API thời tiết công 
cộng để lấy thông tin thời tiết cho một địa điểm cụ thể. Trong ví dụ này, chúng 
ta sẽ sử dụng 
OpenWeatherMap API
.
3. Bài tập 3: Bài Tập Ajax và API
∙
 Tìm Hiểu Và Sử Dụng Các 
API
 Công Cộng (Ví Dụ: API Thời Tiết).
∙
 Xây Dựng Ứng Dụng Web Hiển Thị Dữ Liệu Từ 
API
 Bằng 
Ajax
.
  ▶
  
Tìm Hiểu Và Sử Dụng Các API Công Cộng (Ví Dụ: API Thời tiết)
  ▶
 
 
Lời giải
Trong ví dụ này, một số ngẫu nhiên từ 1 đến 100 được tạo ra và người chơi 
cần nhập số vào ô input và nhấn nút “Đoán”. Họ sẽ nhận được thông báo nếu 
số họ đoán là quá lớn, quá nhỏ hoặc chính xác. Khi họ đoán đúng, input sẽ bị 
vô hiệu hóa và họ sẽ biết được số lần họ đã đoán.
90

Là một cách tuyệt vời để lấy dữ liệu thực tế từ internet và tích hợp vào ứng 
dụng của bạn. Dưới đây là hướng dẫn về cách sử dụng một API thời tiết công 
cộng để lấy thông tin thời tiết cho một địa điểm cụ thể. Trong ví dụ này, chúng 
ta sẽ sử dụng 
OpenWeatherMap API
.
Truy cập trang web OpenWeatherMap và đăng ký tài khoản (nếu bạn chưa có). 
Sau khi đăng ký, bạn sẽ nhận được một API Key. API Key này sẽ được sử dụng 
để xác thực yêu cầu của bạn khi truy cập API OpenWeatherMap.
Gửi Yêu Cầu Đến API OpenWeatherMap. Để lấy thông tin thời tiết từ API Open
-
WeatherMap, bạn cần gửi yêu cầu GET đến URL của API với các tham số nhất 
định bao gồm tên thành phố và API Key. Dưới đây là một ví dụ yêu cầu API sử 
dụng JavaScript và Fetch API:
  ▶
  
Tìm Hiểu Và Sử Dụng Các API Công Cộng (Ví Dụ: API Thời tiết)
  ▶
  
Mã code: javascript
Bước 1: Đăng ký và Nhận API Key
Bước 2: Sử Dụng API Thời Tiết
91

▶
  
Xử Lý Dữ Liệu Thời Tiết
Sau khi nhận được dữ liệu từ API, bạn có thể xử lý thông tin th
ời tiết theo cách 
bạn muốn. Dưới đây là ví dụ cách hiển thị nhiệt độ và mô tả tình trạng thời tiết:
  ▶
 
 
Xử Lý Dữ Liệu Thời Tiết
Trong ví dụ trên, data.main.temp chứa nhiệt độ (tính theo Kelvin) và data.
weather[0].description chứa mô tả tình trạng thời tiết.
Lưu ý rằng việc sử dụng API cụ thể có thể yêu cầu bạn tuân thủ các hướng 
dẫn và điều kiện sử dụng từ nhà cung cấp API. Hãy đọc tài liệu của API để 
biết thêm chi tiết về cách sử dụng và giới hạn của nó.
92

▶
  
Mã code File: index.html
  ▶
  
Mã code File: script.js
  ▶
 
 
Lời giải
Xây Dựng Ứng Dụng Web Hiển Thị Dữ Liệu Từ API Bằng Ajax
93

94

▶
  
Mã code File: script.js
95

▶
  
Kết quả sau khi chạy chương trình
  ▶
  
Phân Tích Thực Thể
4. Bài tập 4: Bài Tập Cơ Sở Dữ Liệu và SQL
∙
 Thiết Kế Cơ Sở Dữ Liệu Cho Một Ứng Dụng Web Cụ Thể.
∙
 Viết Các Truy Vấn SQL Để Truy Cập Và Cập Nhật Dữ Liệu.
  ▶
 
 
Lời giải
  ▶
  
Thiết kế cơ sở dữ liệu cho website: Trang Thương Mại điện tử:
 
Để thiết kế cơ sở dữ liệu cho một trang web Thương Mại Điện Tử 
(e-commerce 
website)
, chúng ta cần bắt đầu bằng việc phân tích các thực thể 
(entities)
 mà 
hệ thống của chúng ta cần để lưu trữ thông tin. Dưới đây là phân tích thực thể, 
lược đồ diagram và thiết kế chi tiết cho cơ sở dữ liệu 
e-commerce
.
Người Dùng (Users)
ID (Khóa chính)
Tên đăng nhập
Mật khẩu
Họ và tên
Địa chỉ email
96

▶
  
Thiết Kế Các Bảng Cơ Sở Dữ Liệu
Bảng Người Dùng (Users)
ID (INT, PRIMARY KEY)
Username (VARCHAR)
Password (VARCHAR)
FullName (VARCHAR)
Email (VARCHAR)
Địa chỉ giao hàng
Số điện thoại
Vai trò (người dùng thường, quản trị viên, v.v.)
ID (Khóa chính)
Tên sản phẩm
Mô tả sản phẩm
Giá sản phẩm
Số lượng trong kho
Hình ảnh sản phẩm
Danh mục sản phẩm (liên kết với Danh Mục)
ID (Khóa chính)
Ngày đặt hàng
Tổng giá trị đơn hàng
Trạng thái đơn hàng (đang xử lý, đã giao hàng, hủy bỏ, ...)
ID Người Dùng (liên kết với Người Dùng)
ID (Khóa chính)
ID Đơn hàng (liên kết với Đơn Hàng)
ID Sản phẩm (liên kết với Sản Phẩm)
Số lượng
Giá sản phẩm khi đặt hàng
ID (Khóa chính)
Tên danh mục
Sản Phẩm (Products)
Đơn Hàng (Orders)
Chi Tiết Đơn Hàng (Order Details)
Danh Mục Sản Phẩm (Categories)
97

ShippingAddress (VARCHAR)
PhoneNumber (VARCHAR)
Role (VARCHAR)
ID (INT, PRIMARY KEY)
ProductName (VARCHAR)
Description (TEXT)
Price (DECIMAL)
QuantityInStock (INT)
ImageURL (VARCHAR)
CategoryID (INT, FOREIGN KEY)
ID (INT, PRIMARY KEY)
CategoryName (VARCHAR)
ID (INT, PRIMARY KEY)
OrderDate (DATETIME)
TotalAmount (DECIMAL)
Status (VARCHAR)
UserID (INT, FOREIGN KEY)
ID (INT, PRIMARY KEY)
OrderID (INT, FOREIGN KEY)
ProductID (INT, FOREIGN KEY)
Quantity (INT)
PricePerUnit (DECIMAL)
Bảng Sản Phẩm (Products)
Bảng Danh Mục Sản Phẩm (Categories)
Bảng Đơn Hàng (Orders)
Bảng Chi Tiết Đơn Hàng (OrderDetails)
Trong thiết kế này, các cột đánh dấu là FOREIGN KEY liên kết với khóa chính 
của các bảng khác để thiết lập mối quan hệ giữa các bảng. Hãy đảm bảo 
rằng bạn đã xem xét các yêu cầu cụ thể của ứng dụng của bạn và điều chỉnh 
thiết kế cơ sở dữ liệu tùy thuộc vào các yêu cầu và quy định cụ thể.
98

ID: Trường kiểu INT và là khóa chính của bảng.
Username, Password, FullName, Email, ShippingAddress, PhoneNumber,
 và 
Role:
Bảng user
  ▶
  
Tạo lược đồ ERD sử dụng Phpmyadmin
  ▶
  
Trong câu lệnh trên
  ▶
  
Bảng Products
∙
 Các trường kiểu 
VARCHAR
 với độ dài tối đa là 255 ký tự.
99

▶
  
Bảng Products
  ▶
  
Trong câu lệnh trên
ID: Trường kiểu INT và là khóa chính của bảng.
ProductName: Trường kiểu VARCHAR với độ dài tối đa là 255 ký tự.
Description: Trường kiểu TEXT, cho phép lưu trữ văn bản dài hơn.
Price: Trường kiểu DECIMAL(10, 2) để lưu giá sản phẩm với 2 chữ số thập 
phân.
QuantityInStock: Trường kiểu INT để lưu số lượng sản phẩm trong kho.
ImageURL: Trường kiểu VARCHAR với độ dài tối đa là 255 ký tự, lưu đường dẫn 
URL đến hình ảnh sản phẩm.
CategoryID: Trường kiểu INT, là khóa ngoại (FOREIGN KEY) liên kết với trường 
ID trong bảng “Categories” (nếu bạn đã tạo bảng Categories).
ID: Trường kiểu INT và là khóa chính của bảng.
CategoryName: Trường kiểu 
VARCHAR
 với độ dài tối đa là 255 ký tự, để lưu trữ 
tên của danh mục sản phẩm.
Tạo bảng Categories:
 Để tạo bảng “
Categories
” trong MySQL với các 
trường đã mô tả, bạn có thể sử dụng câu lệnh 
SQL CREATE TABLE
 như sau:
Lưu ý Trong trường hợp bạn đã tạo bảng “Categories”, bạn có thể liên kết 
trường CategoryID với trường ID trong bảng “Categories” bằng khóa ngoại 
như ở ví dụ trên. Điều này giúp thiết lập mối quan hệ giữa hai bảng dữ liệu.
∙
 Bảng 
“Categories”
 này sẽ lưu trữ các danh mục sản phẩm với thông tin về 
ID và tên danh mục.
100

▶
  
Trong câu lệnh trên
ID: Trường kiểu INT và là khóa chính của bảng.
OrderDate: Trường kiểu DATETIME để lưu trữ ngày đặt hàng.
TotalAmount: Trường kiểu DECIMAL để lưu trữ tổng số tiền của đơn hàng.
Status: Trường kiểu VARCHAR với độ dài tối đa là 255 ký tự, để lưu trữ trạng 
thái của đơn hàng.
Tạo bảng Orders:
 Để tạo bảng 
“Orders”
 trong 
MySQL
 với các trường đã mô 
tả, bạn có thể sử dụng câu lệnh 
SQL CREATE TABLE
 như sau:
∙
 
UserID:
 Trường kiểu INT và là khóa ngoại liên kết với trường ID trong bảng 
Users.
Bảng “Orders” này sẽ lưu trữ thông tin về các đơn hàng, bao gồm ngày đặt hàng, 
tổng số tiền, trạng thái và ID của người dùng đặt hàng.
101

Tạo bảng OrderDetails:
 Để tạo bảng 
“OrderDetails”
 trong 
MySQL
 với các 
trường đã mô tả, bạn có thể sử dụng câu lệnh 
SQL CREATE TABLE
 như sau:
Mối Quan Hệ:
Mối quan hệ Một-nhiều giữa Users và Orders (Mỗi người dùng có thể có nhiều 
đơn hàng, nhưng mỗi đơn hàng chỉ thuộc về một người dùng).
Mối quan hệ Một-nhiều giữa Products và OrderDetails (Mỗi sản phẩm có thể 
xuất hiện trong nhiều chi tiết đơn hàng, nhưng mỗi chi tiết đơn hàng chỉ liên 
kết với một sản phẩm).
Mối quan hệ Một-nhiều giữa Categories và Products (Mỗi danh mục có thể 
chứa nhiều sản phẩm, nhưng mỗi sản phẩm chỉ thuộc về một danh mục).
Mối quan hệ Một-nhiều giữa Orders và OrderDetails (Mỗi đơn hàng có thể có 
nhiều chi tiết đơn hàng, nhưng mỗi chi tiết đơn hàng chỉ thuộc 
về một đơn 
hàng).
  ▶
  
Trong câu lệnh trên
ID: Trường kiểu INT và là khóa chính của bảng.
OrderID: Trường kiểu INT và là khóa ngoại liên kết với trường ID trong bảng 
Orders, để chỉ định đơn hàng liên quan.
ProductID: Trường kiểu INT và là khóa ngoại liên kết với trường ID trong bảng 
Products, để chỉ định sản phẩm liên quan.
Quantity: Trường kiểu INT để lưu trữ số lượng sản phẩm trong đơn hàng.
PricePerUnit: Trường kiểu DECIMAL để lưu trữ giá của mỗi sản phẩm.
∙
 Bảng “OrderDetails” này sẽ lưu trữ thông tin chi tiết về các sản phẩm trong 
các đơn hàng, bao gồm số lượng sản phẩm và giá của mỗi sản phẩm.
102

Truy Vấn SQL Để Truy Cập Dữ Liệu
  ▶
  
Viết Các Truy Vấn SQL Để Truy Cập Và Cập Nhật Dữ Liệu.
Dưới đây là một số truy vấn SQL thường được sử dụng để truy cập và cập nhật 
dữ liệu trong cơ sở dữ liệu e-commerce đã thiết kế:
Nhớ rằng, việc thiết kế cơ sở dữ liệu là một quá trình linh hoạt và phụ thuộc 
vào yêu cầu cụ thể của dự án của bạn. Lược đồ quan hệ có thể thay đổi dựa 
trên yêu cầu và quyết định của bạn trong quá trình phát triển dự án.
Lấy Danh Sách Sản Phẩm
Lấy Danh Sách Sản Phẩm trong Một Danh Mục Cụ Thể
Lấy Chi Tiết Đơn Hàng Dựa Trên ID Đơn Hàng
Lấy Danh Sách Đơn Hàng Cho Một Người Dùng Cụ Thể
Mã SQL
Mã SQL
Mã SQL
Mã SQL
103

Tìm Sản Phẩm theo Tên hoặc Mô Tả (Sử Dụng Phép Toán LIKE)
Truy Vấn SQL Để Cập Nhật Dữ Liệu: Cập Nhật Thông Tin Sản Phẩm
Cập Nhật Trạng Thái Đơn Hàng
Thêm Sản Phẩm Mới
Xóa Sản Phẩm hoặc Đơn Hàng
Mã SQL
Mã SQL
Mã SQL
Mã SQL
Mã SQL
104

Lưu ý rằng các truy vấn trên đều là ví dụ và phải được điều chỉnh tùy thuộc 
vào cấu trúc cụ thể của cơ sở dữ liệu và yêu cầu của ứng dụng của bạn. Đảm 
bảo rằng bạn kiểm tra dữ liệu đầu vào và xử lý lỗi để ngăn chặn các tấn công 
như SQL injection và bảo vệ dữ liệu của bạn khỏi thay đổi không mong muốn.
Xây Dựng Ứng Dụng Web Quản Lý Sản Phẩm:
Sử Dụng Một Framework Angular kết hợp với ngôn ngữ lập trình PHP và 
MySQL sử dụng Xampp, tên cơ sở dữ liệu DB_QuanLySP , Web tích hợp được 
Tích Hợp Các Tính Năng Như Định Tuyến, Xử Lý Biểu Mẫu, và Xác Thực Người 
Dùng. Ứng dụng có thiết kế cơ sở dữ liệu và đưa ra được giao diện hiện form 
login tương tác với người dùng và người dùng đăng nhập xác thực được vào 
trang web với thông báo: Thành công hoặc Không thành công theo các tiêu 
chí xác thực trên: Tích hợp các tính năng định tuyến, xử lý biểu mẫu, xác thực 
người dùng.
5. Bài Tập 5:  Sử Dụng Framework và Thư Viện
∙
 Xây Dựng Ứng Dụng Web Sử Dụng Một Framework Như React Hoặc Angular 
kết hợp với ngôn ngữ lập trình PHP và MySQL.
∙
 Tích Hợp Các Tính Năng Như Định Tuyến, Xử Lý Biểu Mẫu, và Xác Thực 
Người Dùng.
Dưới đây là một ví dụ về cách xây dựng ứng dụng quản lý sản phẩm với
Angular (frontend), PHP (backend) và MySQL (cơ sở dữ liệu) sử dụng XAMPP , 
với các chức năng định tuyến, xử lý biểu mẫu và xác thực người dùng. Để bắt 
đầu, bạn cần cài đặt Angular CLI để tạo và quản lý dự án Angular của bạn.
  ▶
 
 
Phân tích
  ▶
 
 
Lời giải
105

▶
  
Bước 1: Thiết Lập Cơ Sở Dữ Liệu
  
▶
  
Bước 2: Thiết Lập Backend với PHP
Dưới đây là một số truy vấn SQL thường được sử dụng để truy cập và cập nhật 
dữ liệu trong cơ sở dữ liệu 
e-commerce
 đã thiết kế:
Tạo một tệp 
db_config.php
 để kết nối đến cơ sở dữ liệu MySQL.
  ▶
  
Kết Nối đến Cơ Sở Dữ Liệu
106

Tạo một tệp login.php để xử lý yêu cầu đăng nhập.
Xử Lý Đăng Nhập và Xác Thực Người Dùng
  ▶
  
Xử Lý Đăng Nhập và Xác Thực Người Dùng
107

▶
  
Bước 3: Xây Dựng Frontend với Angular
Sử dụng 
Angular CLI
 để tạo một 
service
 để xử lý xác thực người dùng.
Trong auth.service.ts, thêm phương thức login để gửi yêu cầu đăng nhập đến 
backend.
Trong 
login.component.ts
, sử dụng 
AuthService
 để xử lý đăng nhập và hiển thị 
thông báo tương ứng.
  ▶
  
Tạo Một Service cho Xác Thực Người Dùng
  ▶
  
Tạo Một Component Cho Đăng Nhập
108

Sử dụng 
Angular Router
 để định tuyến giữa các trang của ứng dụng.
  ▶
  
Xác Định Định Tuyến
109

Trong 
login.component.html
, tạo giao diện cho trang đăng nhập và hiển thị 
thông báo.
Sau khi viết mã nguồn cho các phần chức năng trên, bạn cần chạy ứng dụng 
Angular và PHP . Để chạy ứng dụng Angular, sử dụng lệnh:
Điều này sẽ mở trình duyệt và hiển thị ứng dụng trên 
http://localhost:4200.
Đảm bảo rằng 
Apache
 và 
MySQL
 đang chạy trên 
XAMPP
. Bạn có thể truy cập 
ứng dụng trên trình duyệt tại 
http://localhost
6. Bài Tập 6: Bảo Mật và Xác Thự
∙
 Thực Hiện Xác Thực Người Dùng Sử Dụng JSON Web Tokens (JWT).
∙
 Bảo Vệ Ứng Dụng Web Khỏi Các Tấn Công Thông Qua Việc Kiểm Tra Đầu 
Vào Và Sử Dụng Công Nghệ Bảo Mật.
  ▶
  
Tạo Giao Diện Đăng Nhập
  
▶
  
Bước 4: Chạy Ứng Dụng
110

Để thực hiện xác thực người dùng sử dụng 
JSON Web Tokens (JWT)
 trong ứng 
dụng web của bạn, bạn cần tuân thủ các bước sau:
Trong phần xử lý đăng nhập của bạn (ví dụ, 
login.php
), sau khi xác thực thành 
công, bạn sẽ tạo JWT token và trả về cho người dùng
Khi bạn nhận được token từ phía 
backend
, bạn cần lưu trữ nó ở phía 
frontend
, 
thường là trong 
localStorage
 hoặc 
sessionStorage
.
Trong đoạn mã trên, 
$user_id, $username
, và 
$user_role
 là thông tin của người 
dùng đã đăng nhập. Hãy đảm bảo rằng bạn lưu trữ những thông tin này sau khi 
xác thực.
  ▶
  
Tạo JWT Token ở Phía Backend (PHP)
  ▶
  
Lưu Trữ JWT Token ở Phía Frontend (JavaScript)
  
▶
  
Trình Tự Thực Hiện
111

Mỗi khi bạn gửi một yêu cầu API từ phía 
frontend
, bạn cần đính kèm 
token
 
trong 
header
 của yêu cầu.
Trong mỗi yêu cầu API, phía backend cần xác thực token để đảm bảo rằng yêu 
cầu được thực hiện bởi một người dùng hợp lệ.
  ▶
  
Gửi JWT Token với Mỗi Yêu Cầu API
  ▶
  
Phía Backend Xác Thực Token
112

Trong đoạn mã trên, 
getAuthorizationToken
() là hàm bạn tự định nghĩa để lấy 
giá trị 
token
 từ 
header
 của yêu cầu. Hãy đảm bảo rằng bạn kiểm tra và xử lý
token
 một cách an toàn để ngăn chặn các tấn công như 
CSRF
. Bạn cũng cần 
xác định các loại lỗi mà bạn muốn trả về khi 
token
 không hợp lệ hoặc đã hết 
hạn.
  ▶
  
Bảo Vệ Ứng Dụng Web Khỏi Các Tấn Công Thông Qua Việc Kiểm Tra 
Đầu Vào Và Sử Dụng Công Nghệ Bảo Mật.
Lưu ý: Trong một ứng dụng thực tế, bạn nên sử dụng HTTPS để bảo mật dữ 
liệu được truyền tải giữa frontend và backend, đồng thời cân nhắc về các 
biện pháp bảo mật bổ sung như CSP (Content Security Policy) và CORS 
(Cross-Origin Resource Sharing).
Kiểm Tra Đầu Vào (Input Validation)
PHP - Kiểm Tra Định Dạng Email
JavaScript - Kiểm Tra Số Nguyên Dương
113

Bảo Vệ Đối Với SQL Injection
Ngăn Chặn Cross-Site Scripting (XSS) Attacks
Bảo Vệ Đối Với Cross-Site Request Forgery (CSRF) Attacks
PHP - Sử Dụng Prepared Statements
PHP - Sử Dụng htmlentities
PHP - Sử Dụng Tokens
JavaScript - Sử Dụng innerText hoặc textContent
114

Sử Dụng HTTPS
Bảo Vệ Đối Với JSON Injection Attacks
Bảo Vệ Đối Với XML Injection Attacks
Đảm bảo rằng trang web của bạn sử dụng HTTPS để mã hóa dữ liệu truyền tải 
giữa trình duyệt và máy chủ.
Nhớ rằng, cách tốt nhất để bảo vệ ứng dụng web của bạn là hiểu rõ về các 
loại tấn công và áp dụng các biện pháp bảo mật phù hợp. Hãy xem xét việc 
sử dụng các thư viện và framework bảo mật, cũng như tham khảo các hướng 
dẫn bảo mật từ các nguồn đáng tin cậy như OWASP .
115

Ngôn ngữ sử dụng: PHP & MySQL
XAMPP
7. Dự Án Thực Tế: Xây Dựng Ứng Dụng Web
∙
 Phát Triển Một Ứng Dụng Web Hoàn Chỉnh Từ Ý Tưởng Đến Triển Khai.
∙
 Tuân Thủ Các Quy Tắc và Thực Hành Tốt Nhất Khi Phát Triển Ứng Dụng Web.
  ▶
 
 
7.1. Sử dụng ngôn ngữ lập trình PHP & MySQL
  ▶
  
Tên Dự án: Xây dựng website Hệ thống quản lý hàng tồn kho
Phân tích:
 
Dự án này là Hệ thống quản lý hàng tồn kho. Đây là một dự án ứng 
dụng dựa trên web được phát triển trong Cơ sở dữ liệu 
PHP
 và 
MySQL
. Mục 
tiêu chính của dự án này là cung cấp cho một số cửa hàng, cửa hàng hoặc bất 
kỳ doanh nghiệp nào một nền tảng trực tuyến để quản lý Hàng tồn kho hoặc 
Kho sản phẩm của họ. Ứng dụng giúp doanh nghiệp dễ dàng lưu trữ, truy xuất 
và theo dõi kho sản phẩm của mình. Nó có giao diện người dùng đơn giản và 
dễ chịu với sự trợ giúp của 
Bootstrap 5 Framework
 và 
jQuery
, đồng thời mang 
lại cho người quản lý hoặc người dùng cuối trải nghiệm tốt hơn khi sử dụng 
ứng dụng. Dự án này bao gồm các tính năng và chức năng thân thiện với người 
dùng.
Giới thiệu về Hệ thống quản lý hàng tồn kho. Dự án này được phát triển bằng 
cách sử dụng:
PHP version >= 7.2 
MySQL Database 
HTML 
CSS 
JavaScript 
jQuery 
Ajax 
Font Awesome 
Bootstrap 5 Framework
Score: 12,
09
8
Time 3:0
0
116

Home/Inventory List
Customer Management
Category Management
Brand Management
  ▶
 
 
7.2. Bảng dữ liệu
  ▶
 
 
7.3. Phân tích các thực thể
Add New Customer
List All Customers
Edit/Update Customer Details
Delete Customer
Add New Category
List All Categories
Edit/Update Category Details
Delete Category
Add New Brand
List All Brands
Edit/Update Brand Details
Delete Brand
Dự án Hệ thống quản lý hàng tồn kho đơn giản này chỉ có quản trị viên cửa 
hàng mới có thể truy cập được. Nó yêu cầu thông tin xác thực của người dùng 
hệ thống quản trị viên để có quyền truy cập vào các tính năng và chức năng. 
Người quản trị có thể quản lý danh sách.
Customers, Categories, Brands, Suppliers, Products, Purchases
, and 
Orders
 
Mỗi đặc điểm này chứa 
CRUD
 (Create, Read, Update, and Delete) hoạt 
động hoặc chức năng. Hệ thống tự động tính toán lượng tồn kho sẵn có của 
từng sản phẩm.
 
Danh sách dự án được phát triển bằng cách sử dụng 
PHP
 and 
MySQL
 
Database
. Mỗi Danh sách trên ứng dụng này được hiển thị bằng cách sử dụng 
Bootstrap DataTables
. Dữ liệu đang được tải bằng cách sử dụng
Ajax Requests
. Mỗi chức năng xóa đều có một tính năng xác nhận nhằm ngăn 
người dùng vô tình xóa dữ liệu. Các mẫu đơn đăng ký cho từng quy trình được 
hiển thị bằng cách sử dụng 
Bootstrap Modal
.
117

Supplier Management
Product Management
Purchase Management
Order Management
Purchase Management
Add New Supplier
List All Suppliers
Edit/Update Supplier Details
Delete Supplier
Add New Product
List All Products
Edit/Update Product Details
View Product Details
Delete Product
Add New Purchase
List All Purchases
Edit/Update Purchase Details
Delete Purchase
Add New Order
List All Orders
Edit/Update Order Details
Delete Order
Add New Purchase
List All Purchases
Edit/Update Purchase Details
Delete Purchase
Login and Logout
Bảng Customer
Thiết kế bảng cơ sở dữ liệu
118

Bảng user
Bảng Purchase
Bảng Brand
119

Bảng Category
Bảng Order
Bảng Supplier
Bảng Supplier
120

Bảng Cơ sở dữ liệu
121

File: Style.CSS
  ▶
 
 
7.4. Phân tích code trong chương trình
  ▶
  
Giải thích, phân tích code chi tiết
html, body
 
{ height: 100% !important; width: 100% !important; }:
footer { ... }
∙
 Đoạn mã này áp dụng cho phần tử html và body trong tài liệu HTML.
∙
 Nó đặt chiều cao và chiều rộng của html và body lên 100%. !important là
  một trình tự ưu tiên trong CSS, nó có ý nghĩa rằng quy tắc này sẽ ghi đè lên
  bất kỳ quy tắc nào khác được định nghĩa trước đó. Trong trường hợp này, nó
  đảm bảo rằng chiều cao và chiều rộng của html và body đều sẽ bằng 100%
  của chiều cao và chiều rộng của khung trình duyệt.
∙
 Đoạn mã này áp dụng cho phần tử có lớp (class) là “footer”.
∙
 Nó định dạng phần footer của trang web.
∙
 position: absolute; đặt phần footer ở vị trí tương đối với phần tử gốc (thường 
là body hoặc một phần tử cha). Nó sẽ được đặt ở cuối trang.
∙
 bottom: 0; đặt phần footer ở phía dưới của phần tử gốc (thường là body). Nó 
sẽ được dán vào phía dưới của trang.
∙
 width: 100%; đảm bảo rằng phần footer sẽ chiếm toàn bộ chiều rộng
của trang.
122

File: Member.CSS
∙
 height: 60px; đặt chiều cao của phần footer là 60px. 
∙
 background-color: #C6E2FF; đặt màu nền cho phần footer là #C6E2FF 
(màu xanh nhạt).
∙
 padding-top: 15px; đặt khoảng cách đệm phía trên của phần footer là 15px.
123

124

125

126

▶
  
Giải thích, phân tích code chi tiết
footer { ... }
<!DOCTYPE html>:
 Định nghĩa phiên bản HTML được sử dụng trong tài liệu.
<html lang=”en”>:
 Bắt đầu của tài liệu HTML, với thuộc tính lang xác định ngôn 
ngữ của trang web là tiếng Anh (English).
<head>:
 Phần chứa các meta tags, tiêu đề trang, và các liên kết CSS và các tập 
tin khác.
<meta charset=”UTF-8”>:
 Xác định encoding (bộ ký tự) cho tài liệu là UTF-8.
<meta name=”viewport” content=”width=device-width, initial-scale=1.0”>:
 
Thiết lập thuộc tính viewport để tự động điều chỉnh kích thước trang web cho 
các thiết bị di động.
<title>Đăng ký người dùng</title>:
 Đặt tiêu đề của trang web.
<link rel=”icon” href=”../dp.png”>:
 Liên kết đến biểu tượng (favicon) của trang 
web.
<link href=”https://fonts.googleapis.com/css2?family=Mitr&display=swap” 
rel=”stylesheet”>:
 Liên kết đến một font chữ từ Google Fonts.
<body>:
 Phần chứa nội dung hiển thị trên trang web.
.container
: Một div với lớp container chứa toàn bộ nội dung trang web.
<form action=”register.php” method=”post”>:
 Một biểu mẫu HTML với các 
trường nhập liệu và nút đăng ký.
127

Link “Bạn đã có tài khoản? Vùi lòng tiếp tục đăng nhập” dẫn đến trang đăng 
nhập.
.footer:
 Một phần chứa thông tin chân trang, được đặt ở cuối trang.
Phần CSS:
body:
 Thiết lập font chữ và màu nền cho toàn bộ trang.
.container:
 Thiết lập kích thước, màu nền, góc bo và lề của phần container.
h1:
 Thiết lập căn giữa cho tiêu đề h1.
.form-group:
 Thiết lập lề và đệm cho các trường nhập liệu.
input[type=”text”] và input[type=”password”]:
 Thiết lập giao diện của các 
trường nhập liệu với viền, góc bo và đệm.
button[type=”submit”] và .returnlogin:
 Thiết lập giao diện của nút Đăng ký và 
nút Đăng nhập, kèm hiệu ứng hover khi di chuột qua.
.footer:
 Thiết lập giao diện cho phần chân trang với vị trí tuyệt đối ở dưới cùng, 
màu nền, màu chữ và căn chỉnh văn bản sang phải.
File: Brand.PHP
128

129

▶
  
Giải thích, phân tích code chi tiết
∙
 <?php ob_start(); session_start(); ?>: Đây là các mã PHP để bắt đầu một 
phiên làm việc và bật bộ đệm (output buffering) để tránh in ra nội dung ngẫu 
nhiên trước khi trang được hiển thị.
∙
 include(‘inc/header.php’);: Đoạn mã này nạp file header.php, có thể chứa 
mã HTML và CSS chung cho trang web.
∙
 include ‘Inventory.php’;: Nạp file Inventory.php, mà có thể chứa các lớp và 
chức năng liên quan đến quản lý dữ liệu.
∙
 $inventory = new Inventory();: Tạo một thể hiện của lớp Inventory.
∙
 $inventory->checkLogin();: Gọi phương thức checkLogin() từ đối tượng
$inventory, có thể dùng để kiểm tra xem người dùng đã đăng nhập hay chưa.
∙
 include(‘inc/footer.php’);: Nạp file footer.php, có thể chứa phần cuối cùng 
của trang web, chẳng hạn như chân trang.
∙
 Các đoạn mã JavaScript và CSS được nạp bằng cách sử dụng các thẻ 
<script> và <link>.
∙
 <?php include(‘inc/container.php’); ?>: Nạp một phần container chung của 
trang web. Thường là một phần dành cho nội dung chính của trang.
130

▶
  
File: Category.php
∙
 Đoạn mã HTML bên dưới này xây dựng giao diện danh sách thể loại:
   + Có một tiêu đề “Danh sách thể loại”.
   +
 
Có một nút “Thêm mới” để thêm thể loại mới.
   + Sử dụng một bảng (<table>) để hiển thị danh sách thể loại với các cột như 
ID, Loại, Tên thể loại, Trạng thái và Hành động.
∙
 Sử dụng một bảng (<table>) để hiển thị danh sách thể loại với các cột như 
ID, Loại, Tên thể loại, Trạng thái và Hành động.
∙
 <?php include(“menus.php”); ?>: Nạp file menus.php, có thể chứa menu 
hoặc liên kết đến các trang khác.
Cuối cùng, có một modal (cửa sổ pop-up) để thêm hoặc sửa thông tin thể 
loại. Modal này có các trường nhập liệu như ID, Loại, Tên thể loại và một nút 
“Thêm” để thêm thể loại mới.
131

132

▶
  
Giải thích, phân tích code chi tiết
File: Brand.PHP
133

134

135

▶
  
Giải thích, phân tích code chi tiết
∙
 <?php ob_start(); session_start(); ?>: Đoạn mã này bắt đầu một phiên làm 
việc và bật bộ đệm (output buffering) để tránh in ra nội dung ngẫu nhiên trước 
khi trang được hiển thị.
∙
 include(‘inc/header.php’);: Nạp file header.php, có thể chứa mã HTML và 
CSS chung cho trang web.
∙
 include ‘Inventory.php’;: Nạp file Inventory.php, có thể chứa các lớp và chức 
năng liên quan đến quản lý dữ liệu.
∙
 $inventory = new Inventory();: Tạo một thể hiện của lớp Inventory.
∙
 $inventory->checkLogin();: Gọi phương thức checkLogin() từ đối tượng
$inventory, có thể được sử dụng để kiểm tra xem người dùng đã đăng nhập hay 
chưa.
∙
 include(‘inc/footer.php’);: Nạp file footer.php, có thể chứa phần cuối cùng 
của trang web, chẳng hạn như chân trang.
∙
 Các đoạn mã JavaScript và CSS được nạp bằng cách sử dụng các thẻ 
<script> và <link>.
∙
 <?php include(‘inc/container.php’); ?>: Nạp một phần container chung của 
trang web. Thường là một phần dành cho nội dung chính của trang.
Đoạn mã PHP và HTML trên tạo ra một trang quản lý danh sách khách hàng. 
Dưới đây là giải thích từng phần của mã:
∙
 Đoạn mã HTML dưới đây xây dựng giao diện danh sách khách hàng:
   + Có một tiêu đề “Danh sách khách hàng”.
   +
 
Có một nút “Thêm mới” để thêm thông tin khách hàng mới. Nút này kích 
hoạt modal (cửa sổ pop-up) để nhập thông tin khách hàng mới.
   + Sử dụng một bảng (<table>) để hiển thị danh sách khách hàng với các cột 
như ID, Họ và tên, Địa chỉ, Số điện thoại, Số tiền và Hành động.
∙
 Modal (<div id=”customerModal” class=”modal”>) được sử dụng để thêm 
hoặc sửa thông tin khách hàng:
∙
 Có các trường nhập liệu để nhập Họ và tên, Số điện thoại, Số tiền và Địa chỉ.
∙
 Nút “Lưu lại” để thực hiện thêm mới hoặc cập nhật thông tin khách hàng,
và nút “Đóng” để đóng cửa sổ modal.
136

File Index.PHP
137

▶
  
Giải thích, phân tích code chi tiết
∙
 
<?php ob_start(); session_start(); ?>:
 Đoạn mã này bắt đầu một phiên làm 
việc và bật bộ đệm (output buffering) để tránh in ra nội dung ngẫu nhiên trước 
khi trang được hiển thị.
∙
 
include(‘inc/header.php’);:
 Nạp file header.php, có thể chứa mã HTML và 
CSS chung cho trang web.
∙
 
include ‘Inventory.php’;:
 Nạp file Inventory.php, có thể chứa các lớp và chức 
năng liên quan đến quản lý dữ liệu.
∙
 
$inventory = new Inventory();:
 Tạo một thể hiện của lớp Inventory.
∙
 
$inventory->checkLogin();:
 Gọi phương thức checkLogin() từ đối tượng
$inventory, có thể được sử dụng để kiểm tra xem người dùng đã đăng nhập hay 
chưa.
∙
 
include(‘inc/footer.php’);:
 Nạp file footer.php, có thể chứa phần cuối cùng 
của trang web, chẳng hạn như chân trang.
∙
 Các đoạn mã JavaScript và CSS được nạp bằng cách sử dụng các thẻ 
<script> và <link>.
∙
 
<?php include(‘inc/container.php’); ?>:
 Nạp một phần container chung của 
trang web. Thường là một phần dành cho nội dung chính của trang.
∙
 Đoạn mã HTML dưới đây xây dựng giao diện danh 
sách hàng tồn kho:
   + Có một tiêu đề “Hàng tồn kho”.
   +
 
Có một nút “Thêm mới” để thêm thông tin khách 
hàng mới. Nút này kích 
hoạt modal (cửa sổ pop-up) để 
nhập thông tin khách hàng mới.
   + Sử dụng một bảng (<table>) để hiển thị danh sách 
hàng tồn kho với các cột 
như STT, Mã sản phẩm, Bắt 
đầu tồn kho, Hàng tồn kho nhận, Hàng tồn kho đã vận 
chuyển, Tổng số hàng.
∙
 Không có modal hay nút thêm mới hoặc sửa thông 
tin ở đây, vì trang này chỉ 
hiển thị thông tin hàng tồn kho.
138

File login.PHP
139

140

▶
  
Giải thích, phân tích code chi tiết
∙
 
<?php ob_start(); session_start(); ?>:
 Đoạn mã này bắt đầu một phiên làm 
việc và bật bộ đệm (output buffering) để tránh in ra nội dung ngẫu nhiên trước 
khi trang được hiển thị.
∙
 
include(‘inc/header.php’);:
 Nạp file header.php, có thể chứa mã HTML và 
CSS chung cho trang web.
∙
 
if (!empty($_POST[‘email’]) && !empty($_POST[‘pwd’])) { ... }:
 Kiểm tra xem 
người dùng đã gửi thông tin đăng nhập chưa. Nếu đã gửi, mã trong khối này sẽ 
được thực thi.
∙
 
include ‘Inventory.php’;:
 Nạp file Inventory.php, có thể chứa các lớp và chức 
năng liên quan đến quản lý dữ liệu.
∙
 
$inventory = new Inventory();:
 Tạo một thể hiện của lớp Inventory.
∙
 
$login = $inventory->login($_POST[‘email’], $_POST[‘pwd’]);:
 Gọi phương 
thức login() từ đối tượng $inventory để kiểm tra thông tin đăng nhập người dùng 
nhập vào.
∙
 
if(!empty($login)) { ... } else { ... }:
 Kiểm tra xem thông tin đăng nhập hợp lệ 
hay không. Nếu hợp lệ, lưu thông tin người dùng vào phiên làm việc và chuyển 
hướng người dùng đến trang chính (index.php). Nếu không hợp lệ, hiển thị 
thông báo lỗi.
∙
 
include(‘inc/footer.php’);:
 Nạp file footer.php, có thể chứa phần cuối cùng 
của trang web, chẳng hạn như chân trang.
∙
 
<?php include(‘inc/container.php’); ?>:
 Nạp một phần container chung của 
trang web. Thường là một phần dành cho nội dung chính của trang.
∙
 Phần HTML dưới đây xây dựng giao diện đăng nhập:
    + Tiêu đề “HỆ THỐNG QUẢN LÝ HÀNG TỒN KHO”.
   +
 
Một biểu mẫu (<form>) cho việc nhập thông tin đăng nhập, bao gồm ô 
nhập email và mật khẩu.
   + Khi người dùng nhấn nút “Đăng nhập”, thông tin đăng nhập sẽ được gửi 
đến chính trang này (action=””), và kết quả đăng nhập sẽ được xử lý bởi các mã 
PHP ở trên.
141

+ Nếu có lỗi đăng nhập, thông báo lỗi sẽ được hiển thị. Người dùng có thể 
nhấn vào liên kết “Đăng ký” để chuyển hướng đến trang đăng ký thành viên 
(member.html).
File login.PHP
142

143

144

File menus.php
145

▶
  
Giải thích, phân tích code chi tiết
∙
 <nav class=”navbar navbar-dark bg-dark bg-gradient navbar-expand-lg 
navbar-expand-md my-3”>: Đây là phần bắt đầu của thanh điều hướng. Nó sử 
dụng các lớp CSS để thiết lập màu nền đậm (dark) và hiệu ứng gradient màu 
nền (bg-gradient). Navbar này sẽ mở rộng khi kích thước màn hình lớn hơn hoặc 
bằng medium (md) và chứa một khoảng cách lề (my-3).
∙
 <div class=”container-fluid”>: Đây là một container linh hoạt, điều chỉnh kích 
thước của nội dung navbar để phản ánh với kích thước của màn hình.
146

∙
 
Nút Toggle Navbar (navbar-toggler):
    + <button class=”navbar-toggler” type=”button” data-bs-toggle=”collapse” 
data-bs-target=”#navbarNav” aria-controls=”navbarNav” aria-expanded=”
-
false” aria-label=”Toggle navigation”>: Đây là nút toggle (nút mở rộng) được sử 
dụng để mở và đóng các mục menu khi trang web được xem trên các thiết bị có 
màn hình nhỏ hoặc điện thoại di động.
∙
 
Nút Toggle Navbar (navbar-toggler):
    + <button class=”navbar-toggler” type=”button” data-bs-toggle=”collapse” 
data-bs-target=”#navbarNav” aria-controls=”navbarNav” aria-expanded=
”false” aria-label=”Toggle navigation”>: Đây là nút toggle (nút mở rộng) được sử 
dụng để mở và đóng các mục menu khi trang web được xem trên các thiết bị có 
màn hình nhỏ hoặc điện thoại di động.
∙
 
Dropdown Menu (dropdown-menu):
    + <li class=”dropdown position-relative”>: Đây là một mục menu dropdown 
chứa các tùy chọn liên quan đến người dùng hiện đang đăng nhập.
   + <button type=”button” class=”badge bg-light border px-3 text-dark
round
ed-pill dropdown-toggle” id=”dropdownMenuButton1” data-bs-toggle=”
dropdown” aria-expanded=”false”>...: Nút dropdown hiển thị tên người dùng và 
một số thông báo (được thể hiện bằng số lượng item trong giỏ hàng hoặc thông 
báo khác).
   + <ul class=”dropdown-menu” aria-labelledby=”dropdownMenuButton1”>: 
Danh sách các tùy chọn trong menu dropdown, trong trường hợp này chỉ có tùy 
chọn “Logout”.
∙
 
Mục Menu (nav-items):
    + <div class=”collapse navbar-collapse” id=”navbarNav”>: Phần này chứa 
danh sách các mục menu navbar.
+ Các mục menu được liệt kê dưới dạng danh sách không sắp xếp (<ul>) với 
các mục (<li>) chứa các liên kết (<a>) đến các trang khác của trang web.
147

File order.php
148

149

▶
  
Giải thích, phân tích code chi tiết
∙
 
Bắt đầu phiên làm việc PHP và include các file cần thiết:
     + ob_start(); và session_start();: Bắt đầu một buffer đầu ra và một phiên 
làm việc session.
    + include(‘inc/header.php’);: Include file header.php, chứa nội dung của 
phần đầu của trang web.
       + include ‘Inventory.php’;: Include file chứa class Inventory, định nghĩa các 
phương thức để tương tác với cơ sở dữ liệu và xử lý logic của hệ thống.
∙
 
Bắt đầu phiên làm việc PHP và include các file cần thiết:
     + include(‘inc/footer.php’);: Include file footer.php, chứa nội dung phần cuối 
trang web.
    + Các dòng script và link CSS được sử dụng để include các thư viện và tệp 
tin cần thiết để làm việc với DataTables và xử lý logic của trang.
∙
 
Div container chính:
  Đây là container chính của trang web, bao gồm toàn 
bộ nội dung trang.
∙
 
Include file menus.php:
 Include file menus.php, chứa thanh điều hướng 
(navbar) của trang web.
∙
 
Div row và card cho quản lý đơn hàng:
 Trong div này, hiển thị danh sách đơn 
hàng trong một card có nút thêm mới.
∙
 
Modal cho thêm mới đơn hàng:
 Modal này sẽ xuất hiện khi người dùng 
muốn thêm mới một đơn hàng. Nó chứa một form để nhập thông tin cho đơn 
hàng mới, bao gồm sản phẩm, tổng số mặt hàng và khách hàng.
150

∙
 
File Product.php:
151

152

153

154

▶
  
Giải thích, phân tích code chi tiết
∙
 
Bắt đầu phiên làm việc PHP và include các file cần thiết:
     + ob_start(); và session_start();: Bắt đầu một buffer đầu ra và một phiên 
làm việc session.
    + include(‘inc/header.php’);: Include file header.php, chứa nội dung của 
phần đầu của trang web.
       + include ‘Inventory.php’;: Include file chứa class Inventory, định nghĩa các 
phương thức để tương tác với cơ sở dữ liệu và xử lý logic của hệ thống.
∙
 
Include các file và script cần thiết:
     + include(‘inc/footer.php’);: Include file footer.php, chứa nội dung phần cuối 
trang web.
    + Các dòng script và link CSS được sử dụng để include các thư viện và tệp 
tin cần thiết để làm việc với DataTables và xử lý logic của trang.
∙
 
Div container chính:
  Đây là container chính của trang web, bao gồm toàn 
bộ nội dung trang.
∙
 
Include file menus.php:
 Include file menus.php, chứa thanh điều hướng 
(navbar) của trang web.
∙
 
Div row và card cho quản lý sản phẩm:
  Trong div này, hiển thị danh sách sản 
phẩm trong một card có nút thêm mới.
∙
 
Modal cho thêm mới sản phẩm:
 Modal này sẽ xuất hiện khi người dùng 
muốn thêm mới một sản phẩm. Nó chứa một form để nhập thông tin cho sản 
phẩm mới.
∙
 
Modal để xem chi tiết sản phẩm:
 Modal này sẽ xuất hiện khi người dùng 
muốn xem chi tiết về một sản phẩm. Nó chứa một nơi để hiển thị thông tin chi 
tiết của sản phẩm.
155

∙
 
File Purchase.php:
156

157

▶
  
Giải thích, phân tích code chi tiết
∙
 
Bắt đầu phiên làm việc PHP và include các file cần thiết:
     + ob_start(); và session_start();: Bắt đầu một buffer đầu ra và một phiên 
làm việc session.
    + include(‘inc/header.php’);: Include file header.php, chứa nội dung của 
phần đầu của trang web.
       + include ‘Inventory.php’;: Include file chứa class Inventory, định nghĩa các 
phương thức để tương tác với cơ sở dữ liệu và xử lý logic của hệ thống.
∙
 
Include các file và script cần thiết:
     + include(‘inc/footer.php’);: Include file footer.php, chứa nội dung phần cuối 
trang web.
    + Các dòng script và link CSS được sử dụng để include các thư viện và tệp 
tin cần thiết để làm việc với DataTables và xử lý logic của trang.
∙
 
Div container chính:
  Đây là container chính của trang web, bao gồm toàn 
bộ nội dung trang.
∙
 
Include file menus.php:
 Include file menus.php, chứa thanh điều hướng 
(navbar) của trang web.
∙
 
Div row và card cho quản lý mua hàng:
  Trong div này, hiển thị danh sách đơn 
mua hàng trong một card có nút thêm mới.
158

∙
 
Modal cho thêm mới đơn mua hàng:
  Modal này sẽ xuất hiện khi người dùng 
muốn thêm mới một đơn mua hàng. Nó chứa một form để nhập thông tin cho 
đơn mua hàng mới.
∙
 
File Register.php:
159

160

▶
  
Giải thích, phân tích code chi tiết
∙
 
Bắt đầu phiên làm việc PHP và include file header:
     + ob_start(); và session_start();: Bắt đầu một buffer đầu ra và một phiên 
làm việc session.
    + include(‘inc/header.php’);: Include file header.php, chứa nội dung của 
phần đầu của trang web.
∙
 
Thực hiện truy vấn SQL để thêm dữ liệu mới:
     + Chuẩn bị truy vấn SQL để thêm dữ liệu vào bảng ims_user.
    + Nếu truy vấn thực hiện thành công, hiển thị thông báo “Đăng ký thành 
công!” và kết thúc chương trình.
+Nếu có lỗi, hiển thị thông báo lỗi.
∙
 
Include file footer và đóng thẻ HTML:
     + include(‘inc/footer.php’);: Include file footer.php, chứa nội dung phần cuối 
trang web.
    + Đóng thẻ HTML
.
∙
 
Form đăng ký trong phần body của trang:
 
Form này có các trường input 
cho email, password, name và một select để chọn loại người dùng (user hoặc 
admin).
∙
 
Kiểm tra nếu có dữ liệu được submit từ form đăng ký:
 
Dùng $_SERVER
[“REQUEST_METHOD”] để kiểm tra xem form đã được submit chưa.
∙
 
Lấy thông tin từ form và kết nối đến cơ sở dữ liệu:
 
Lấy thông tin từ các trường 
input trong form và kết nối đến cơ sở dữ liệu MySQL.
161

∙
 
File  Supplier.php:
162

163

▶
  
Giải thích, phân tích code chi tiết
∙
 
Bắt đầu phiên làm việc PHP và include file header:
     + ob_start(); và session_start();: Bắt đầu một buffer đầu ra và một phiên 
làm việc session.
    + include(‘inc/header.php’);: Include file header.php, chứa nội dung của 
phần đầu của trang web.
∙
 
Kiểm tra đăng nhập và include file Inventory:
     + include ‘Inventory.php’;: Include file Inventory.php, chứa các chức năng và 
lớp cần thiết cho quản lý kho.
    + $inventory = new Inventory();: Tạo một đối tượng từ lớp Inventory để sử 
dụng các chức năng của nó.
 + $inventory->checkLogin();: Kiểm tra đăng nhập, chuyển hướng người dùng 
nếu họ chưa đăng nhập.
∙
 
Include file footer và khai báo script và stylesheet:
     + include(‘inc/footer.php’);: Include file footer.php, chứa nội dung phần cuối 
trang web.
    + Đường link và script để sử dụng DataTables (thư viện JavaScript cho bảng 
dữ liệu) và các script khác liên quan đến quản lý nhà cung cấp.
∙
 
Include menu và tạo khối danh sách nhà cung cấp:
     + <?php include(“menus.php”); ?>: Include menu từ file menus.php.
     + Tạo một block div với class row và một col-lg-12 để chứa nội dung danh 
sách nhà cung cấp.
∙
 
Card danh sách nhà cung cấp:
     + card card-default rounded-0 shadow: Định dạng card với các hiệu ứng bo 
tròn và đổ bóng.
     + Phần header chứa tiêu đề và nút thêm mới
.
     
+ Phần body chứa bảng danh sách nhà cung cấp
.
∙
 
Container chứa nội dung trang web:
 
Bắt đầu một container để chứa nội 
dung trang web.
164

∙
 
Bảng danh sách nhà cung cấp:
  Bảng sử dụng DataTables và có các cột như 
ID, Họ tên, Số điện thoại, Địa chỉ, Trạng thái và Hành động.
∙
 
Include file menus.php:
 Bảng sử dụng DataTables và có các cột như ID, Họ 
tên, Số điện thoại, Địa chỉ, Trạng thái và Hành động.
∙
 
Modal thêm mới nhà cung cấp:
  Modal sử dụng để thêm mới nhà cung cấp 
với các trường như Tên nhà cung cấp, Số điện thoại, Địa chỉ.
∙
 
Kết thúc container và include file footer:
  Đóng container và include file
footer.php.
∙
 
Phân tích các file . js:
∙
 
File Brand.js:
165

166

▶
  
Giải thích, phân tích code chi tiết
∙
 
Xử lý sự kiện khi nút “Add Brand” được click :
     + ob_start(); và session_start();: Bắt đầu một buffer đầu ra và một phiên 
làm việc session.
    + include(‘inc/header.php’);: Include file header.php, chứa nội dung của 
phần đầu của trang web.
∙
 
Khởi tạo DataTable cho danh sách thương hiệu:
     + DataTable được khởi tạo trên bảng có id là “brandList” để hiển thị danh 
sách thương hiệu.
    + Sử dụng Ajax để lấy dữ liệu từ server thông qua tệp “action.php” và cung 
cấp các cấu hình khác nhau cho DataTable như số lượng trang, sắp xếp, không 
cho phép thay đổi độ dài, v.v.
∙
 
Xử lý sự kiện khi form “brandForm” được submit:
     + Khi form có id “brandForm” được submit, sự kiện submit được ngăn chặn 
để tránh chuyển hướng trang.
    + Nút action được tạm thời vô hiệu hóa để tránh gửi nhiều yêu cầu cùng một 
lúc.
    
+ Dữ liệu từ form được gửi đến server qua Ajax để thêm/sửa thương hiệu.
∙
 
Xử lý sự kiện khi nút “update” được click:
     + Khi nút có class “update” được click, một yêu cầu Ajax được gửi đến
server để lấy thông tin về thương hiệu cần chỉnh sửa.
    + Modal hiển thị thông tin thương hiệu cho phép người dùng 
chỉnh sửa
.
∙
 
Xử lý sự kiện khi nút “update” được click:
     + Khi nút có class “update” được click, một yêu cầu Ajax được gửi đến
server để lấy thông tin về thương hiệu cần chỉnh sửa.
    + Modal hiển thị thông tin thương hiệu cho phép người dùng 
chỉnh sửa
.
∙
 
Xử lý sự kiện khi nút “Add Brand” được click:
  Khi nút có id “addBrand” được 
click, modal hiển thị, các trường trong form được reset, tiêu đề modal được cập 
nhật, giá trị của các input và nút action được đặt cho việc thêm mới thương hiệu.
167

∙
 
Include menu và tạo khối danh sách nhà cung cấp:
     + <?php include(“menus.php”); ?>: Include menu từ file menus.php.
     + Tạo một block div với class row và một col-lg-12 để chứa nội dung danh 
sách nhà cung cấp.
∙
 
Xử lý sự kiện khi nút “delete” được click:
     + Khi nút có class “delete” được click, xác nhận xóa thương hiệu và sau đó 
gửi yêu cầu Ajax đến server để xóa thương hiệu.
     + DataTable được làm mới sau khi thương hiệu được xóa
.
∙
 
File: Category.js:
168

169

▶
  
Giải thích, phân tích code chi tiết
∙
 
Khởi tạo DataTable cho danh sách danh mục sản phẩm:
     + DataTable được khởi tạo trên bảng có id là “categoryList” để hiển thị danh 
sách danh mục sản phẩm.
    + Sử dụng Ajax để lấy dữ liệu từ server thông qua tệp “action.php” và cung 
cấp các cấu hình khác nhau cho DataTable như số lượng trang, sắp xếp, không 
cho phép thay đổi độ dài, v.v..
∙
 
Khởi tạo DataTable cho danh sách thương hiệu:
     + DataTable được khởi tạo trên bảng có id là “brandList” để hiển thị danh 
sách thương hiệu.
    + Sử dụng Ajax để lấy dữ liệu từ server thông qua tệp “action.php” và cung 
cấp các cấu hình khác nhau cho DataTable như số lượng trang, sắp xếp, không 
cho phép thay đổi độ dài, v.v.
∙
 
Xử lý sự kiện khi form “categoryForm” được submit:
     + Khi form có id “categoryForm” được submit, sự kiện submit được ngăn 
chặn để tránh chuyển hướng trang.
    + Nút action được tạm thời vô hiệu hóa để tránh gửi nhiều yêu cầu cùng một 
lúc.
    
+ Dữ liệu từ form được gửi đến server qua Ajax để thêm/sửa danh mục sản 
phẩm.
∙
 
Xử lý sự kiện khi form “categoryForm” được submit:
     + Khi nút có class “update” được click, một yêu cầu Ajax được gửi đến
server để lấy thông tin về danh mục cần chỉnh sửa.
    + Modal hiển thị thông tin danh mục cho phép người dùng chỉ
nh sửa
.
∙
 
Xử lý sự kiện khi nút “Add Category” được click:
  Khi nút có id “categoryAdd” 
được click, modal được reset và hiển thị để thêm mới một danh mục sản phẩm. 
Các giá trị của form và nút action được cập nhật để phản ánh hành động thêm 
mới danh mục.
170

∙
 
Xử lý sự kiện khi nút “delete” được click:
     + Khi nút có class “delete” được click, xác nhận xóa danh mục và sau đó gửi 
yêu cầu Ajax đến server để xóa danh mục.
    + DataTable được làm mới sau khi danh mục được xóa
.
∙
 
File common.js:
171

▶
  
Giải thích, phân tích code chi tiết
∙
 
Xác định trang hiện tại và thay đổi màu của liên kết trên thanh điều hướng
:
     + Đoạn này lấy đường dẫn của trang hiện tại và xác định tên trang bằng cách 
loại bỏ phần mở rộng và các dấu gạch chéo.
    + Tìm thẻ a có id tương ứng với trang hiện tại và thay đổi màu chữ của nó 
thành trắng (#FFF).
∙
 
Khởi tạo DataTable cho chi tiết kho hàng (#inventoryDetails):
     + DataTable được khởi tạo trên bảng có id là “inventoryDetails” để hiển thị 
chi tiết kho hàng.
    + Sử dụng Ajax để lấy dữ liệu từ server thông qua tệp “action.php” và cung 
cấp các cấu hình khác nhau cho DataTable như số lượng trang, sắp xếp, không 
cho phép thay đổi độ dài, v.v.  
+ Sử dụng rowCallback để thực hiện một số xử lý đặc biệt cho từng dòng
của DataTable. Đoạn mã này thêm class và xác định màu chữ cho các ô dữ 
liệu dựa trên giá trị của chúng.
+ rowCallback được sử dụng để thực hiện một số thay đổi cho mỗi dòng của 
DataTable.
+ Các ô dữ liệu được thêm class để 
căn giữa và thêm class text-end cho 
việc căn phải.
+ Ô dữ liệu ở cột đầu tiên (td:eq(0)) 
được chuyển từ căn phải sang căn giữa.
+ Màu chữ của ô dữ liệu ở cột thứ 6 
(td:eq(5)) được xác định dựa trên giá trị 
của nó. Nếu giá trị là âm, màu chữ là đỏ, 
ngược lại là màu xanh lá cây. Thêm chữ 
in đậm để làm nổi bật.
+ Số lượng hàng được hiển thị trên 
mỗi trang của DataTable là 10.
172

∙
 
File Customer.js:
173

174

▶
  
Giải thích, phân tích code chi tiết
∙
 
Thêm khách hàng mới khi nút “Add Customer” được click
:
     + Khi nút có id là “addCustomer” được click, modal chứa form thông tin 
khách hàng (“customerModal”) sẽ hiển thị.
    + Nội dung của form sẽ được đặt lại (reset) và tiêu đề modal sẽ được thiết 
lập là “Add Customer”.
∙
 
Khởi tạo DataTable cho danh sách khách hàng (“customerList”):
     + DataTable được khởi tạo trên bảng có id là “customerList” để hiển thị danh 
sách khách hàng.
    + Sử dụng Ajax để lấy dữ liệu từ server thông qua tệp “action.php” và cung 
cấp các cấu hình khác nhau cho DataTable như số lượng trang, sắp xếp, không 
cho phép thay đổi độ dài, v.v.  
+ Sử dụng columnDefs để thiết lập các thuộc tính của cột, trong trường hợp 
này là không cho phép sắp xếp cột có index là 0 và 5.
+ Sử dụng rowCallback để thực hiện một số thay đổi cho từng dòng của DataT
-
able.
+ Các ô dữ liệu được thêm class để căn giữa (align-middle), và một số class 
text-center và text-end được thêm vào ô cụ thể.
+ Dòng này thêm class và định dạng màu chữ dựa trên giá trị của cột thứ 5 
(balance). Nếu balance âm, màu chữ là đỏ, ngược lại là màu xanh lá cây.
∙
 
Xử lý sự kiện khi form khách hàng 
được submit:
     + Khi form có id là “customerForm” 
được submit, sự kiện này sẽ được ngăn 
chặn (preventDefault).
    + Dữ liệu của form sẽ được serialize 
và gửi đi thông qua Ajax để xử lý bằng 
cách sử dụng “action.php”.
175

Sự kiện này xảy ra khi nút “Edit” trên mỗi dòng của DataTable được click. Nó 
sử dụng Ajax để lấy thông tin chi tiết của khách hàng từ server và điền vào 
form để sửa đổi. Sự kiện này xảy ra khi nút “Delete” trên mỗi dòng của
DataTable được click. Trước khi thực hiện xóa, hiển thị một hộp thoại xác 
nhận từ người dùng. Nếu người dùng đồng ý, thì thông tin khách hàng sẽ 
được xóa thông qua Ajax và DataTable sẽ được làm mới.
∙
 
File: order.js:
176

177

▶
  
Giải thích, phân tích code chi tiết
∙
 
Khởi tạo DataTable cho danh sách đơn hàng (“orderList”):
     + DataTable được khởi tạo trên bảng có id là “orderList” để hiển thị danh 
sách đơn hàng.
    + Sử dụng Ajax để lấy dữ liệu từ server thông qua tệp “action.php” và cung 
cấp các cấu hình khác nhau cho DataTable như số lượng trang, sắp xếp, không 
cho phép thay đổi độ dài, v.v.  
+ Sử dụng columnDefs để thiết lập các thuộc tính của cột, trong trường hợp 
này là không cho phép sắp xếp cột có index là 0 và 4.
+ Sử dụng rowCallback để thực hiện một số thay đổi cho từng dòng của
DataTable.
+ Các ô dữ liệu được thêm class để căn giữa (align-middle), và một số class 
text-center được thêm vào ô cụ thể.
∙
 
Xử lý sự kiện khi nút “Add Order” được click:
     + Khi nút có id là “addOrder” được click, modal chứa form thông tin đơn 
hàng (“orderModal”) sẽ hiển thị.
178

∙
 
Xử lý sự kiện khi form đơn hàng được submit:
     + Khi form có id là “orderForm” được submit, sự kiện này sẽ được ngăn chặn 
(preventDefault).
    + Dữ liệu của form sẽ được serialize và gửi đi thông qua Ajax để xử lý bằng 
cách sử dụng “action.php”.  
    + Sự kiện này xảy ra khi nút “Edit” trên mỗi dòng của DataTable được click. 
Nó sử dụng Ajax để lấy thông tin chi tiết của đơn hàng từ server và điền vào form 
để sửa đổi.
    + Sự kiện này xảy ra khi nút “Delete” trên mỗi dòng của DataTable được 
click. Trước khi thực hiện xóa, hiển thị một hộp thoại xác nhận từ người dùng. 
Nếu người dùng đồng ý, thông tin đơn hàng sẽ được xóa thông qua Ajax và
DataTable sẽ được làm mới.
∙
 
File Product.js:
     + Nội dung của form sẽ được đặt lại (reset) và tiêu đề modal sẽ được thiết 
lập là “Add Order”.
179

180

181

▶
  
Giải thích, phân tích code chi tiết
∙
 
Khởi tạo DataTable cho danh sách sản phẩm (“productList”):
     + DataTable được khởi tạo trên bảng có id là “productList” để hiển thị danh 
sách sản phẩm.
    + Sử dụng Ajax để lấy dữ liệu từ server thông qua tệp “action.php” và cung 
cấp các cấu hình khác nhau cho DataTable như số lượng trang, sắp xếp, không 
cho phép thay đổi độ dài, v.v.  
+ Sử dụng columnDefs để thiết lập các thuộc tính của cột, trong trường hợp 
này là không cho phép sắp xếp cột có index là 0 và 8.
+ Sử dụng rowCallback để thực hiện một số thay đổi cho từng dòng của
DataTable.
+ Các ô dữ liệu được thêm class để căn giữa (align-middle), và một số class 
text-center được thêm vào ô cụ thể.
∙
 
Xử lý sự kiện khi nút “Add Product” được click:
     + Khi nút có id là “addProduct” được click, modal chứa form thông tin sản 
phẩm (“productModal”) sẽ hiển thị.
    + Nội dung của form sẽ được đặt lại (reset) và tiêu đề modal sẽ được thiết 
lập là “Add Product”.
∙
 
Xử lý sự kiện khi form sản phẩm 
được submit:
     + Khi form có id là “productForm” 
được submit, sự kiện này sẽ được ngăn 
chặn (preventDefault).
    + Dữ liệu của form sẽ được serialize 
và gửi đi thông qua Ajax để xử lý bằng 
cách sử dụng “action.php”.
182

▶
  
Giải thích, phân tích code chi tiết
  ▶
  
Phân tích code trong folde: INC (includes)
∙
 
<head> và <body>:
+ </head>: Đóng thẻ head của trang HTML
.
+ <body class=”bg-gradient bg-dark bg-opacity-25”>: Mở thẻ body của 
trang và áp dụng một số lớp CSS để định dạng nền của trang. Đây có vẻ như là 
một hiệu ứng gradient với màu đen và ánh sáng mờ.
∙
 
File container.php:
Sự kiện này xảy ra khi giá trị của dropdown có id là “categoryid” thay đổi. Nó 
sử dụng Ajax để lấy danh sách thương hiệu tương ứng với danh mục đã chọn.
Sự kiện này xảy ra khi nút “Edit” trên mỗi dòng của DataTable được click. Nó 
sử dụng Ajax để lấy thông tin chi tiết của sản phẩm từ server và điền vào form 
để sửa đổi.
Sự kiện này xảy ra khi nút “Delete” trên mỗi dòng của DataTable được click. 
Trước khi thực hiện xóa, hiển thị một hộp thoại xác nhận từ người dùng. 
Nếu người dùng đồng ý, thông tin sản phẩm sẽ được xóa thông qua Ajax và 
DataTable sẽ được làm mới.
183

∙
 
Thanh điều hướng (Navbar):
+ <nav role=”navigation” class=”navbar navbar-dark navbar-static-top 
bg-primary bg-gradient”>: Tạo một thanh điều hướng (navbar) với một số thuộc 
tính và lớp CSS. Có sử dụng Bootstrap để áp dụng các lớp liên quan đến màu 
sắc và kiểu dáng.
  role=”navigation”: Đặt vai trò của thanh điều hướng.
 class=”navbar navbar-dark navbar-static-top bg-primary bg-gradient”: Các 
lớp CSS và Bootstrap classes để thiết lập kiểu dáng cho thanh điều hướng.
+ <div class=”container”>: Một container chứa các phần tử của thanh điều 
hướng.
+ <div class=”navbar-header”>: Container chứa các phần tử liên quan đến 
header của thanh điều hướng.
+ <a href=”” class=”navbar-brand”>Hệ thống website quản lý hàng tồn kho 
tập 
trung</a>: Đường dẫn logo hoặc brand của trang web. Trong trường hợp này, 
chữ “Hệ thống website quản lý hàng tồn kho tập trung” là nội dung của brand.
∙
 
Container chứa nội dung:
 
<div class=”container”>: Mở một container khác 
chứa nội dung của trang.
184

∙
 
File footer.php:
  ▶
  
Giải thích, phân tích code chi tiết
∙
 
<footer>:
     + Mở thẻ footer để đánh dấu phần chân trang
.
     + Có một container bao quanh phần nội dung của footer
.
∙
 
Nội dung footer:
     + <div class=”container”>: Một container chứa nội dung của footer để căn 
giữa và định dạng.
     + <div class=”footer-content”>: Container chứa nội dung cụ thể của footer
.
     
+ <p>&copy; <?php echo date(“Y”); ?> Sách lập trình Web chuyên sâu từ cơ 
bản đến nâng cao - nhà sách webupbook. All rights reserved. Designed by Đào 
Xuân Hiệp</p>: Đoạn văn bản hiển thị trong footer.
185

+ &copy; <?php echo date(“Y”); ?>: Hiển thị ký hiệu bản quyền © và năm 
hiện tại.
     + Phần còn lại là một đoạn văn bản mô tả quyền sở hữu và thông tin về 
sách “Sách lập trình Web chuyên sâu từ cơ bản đến nâng cao” và người thiết kế 
“Designed by Đào Xuân Hiệp”
∙
 
CSS cho footer:
+ CSS được đặt trong một thẻ <style> để thiết lập kiểu dáng cho footer
.
+ background-color: #007bff;: Màu nền của footer là màu xanh dương
.
+ color: #fff;: Chữ màu trắng
.
+ padding: 20px 0;: Khoảng trắng 20px ở trên và dưới nội dung của footer
.
+ text-align: center;: Căn giữa nội dung của footer
.
+ width: 100%;: Footer chiếm toàn bộ chiều rộng của trang
.
+ position: fixed; bottom: 0;: Đặt footer ở cuối trang và giữ nó ở vị trí cố định.
font-size: 16px;: Kích thước chữ tiêu chuẩn cho toàn bộ footer.
+ .footer-content { font-size: 14px; }: Kích thước chữ cho phần nội dung cụ 
thể trong footer.
  ▶
 
 
7.5. Chạy chương trình thực tế
  ▶
  
Login page
186

▶
  
Trang chủ
  ▶
  
Khách Hàng
187

▶
  
Chức năng thêm mới Khách Hàng
∙
 
Để thêm mới khách hàng người dùng click vào nút:
∙
 
Sau khi thêm mới thông tin xong người dùng click vào nút:
 
Lưu Lại
. Kết quả 
sau khi thêm mới Khách Hàng:
Thêm mới
188

▶
  
Chức năng sửa thông tin khác hàng
  ▶
  
Người dùng nhập thông tin danh sách khách cần sửa
∙
 
Tại giao diện form Danh Sách Khách Hàng người dùng click vào nút Update 
để sửa và cập nhật thông tin khách hàng:
189

▶
  
Sau đó ấn nút: Lưu Lại
∙
 
Chức năng: Xoá danh sách khách hàng. Tại giao diện danh sách khách hàng 
người dùng chọn mục Hành động và click vào nút Xoá (biểu tượng thùng rác) 
để xoá.
∙
 
Thông báo hiển thị thông tin xác nhận người dùng xoá thông tin danh sách 
khách hàng.
Loại
190

▶
  
Để thêm mới lại danh mục người dùng click vào nút: Thêm mới
  ▶
  
Sau đó ấn nút Add. Kết quả sau khi thêm mới danh mục
191

∙
 
Để thêm mới Thể Loại: Người dùng click vào nút Thêm mới sau đó nhập 
thông tin trên From:
192

∙
 
Người dùng chọn Danh mục trước sau đó nhập tên loại sản phẩm ch
o danh 
mục đó và ấn nút Add để thêm mới. Kết quả sau khi thêm thông tin trên giao 
diện:
  ▶
  
Nhà Cung Cấp
193

∙
 
Để thêm mới Nhà Cung Cấp người dùng click vào nút:
∙
 
Sau khi người dùng ấn nút Add giao diện sẽ có dạng:
Add Supplier
194

▶
  
Sản Phẩm
∙
 
Để thêm mới: Sản Phẩm người dùng click vào nút
 
Add Product
 giao diện 
hiển thị ra có dạng cho phép người dùng nhập thông tin:
195

∙
 
Sau khi ấn nút Add để thêm mới giao diện hiện ra có dạng:
  ▶
  
Mua Hàng
196

∙
 
Để thêm mới Danh sách mua hàng tại giao diện Mua Hàng người dùn
g click 
vào nút Add Purchase giao diện hiện ra cho phép người dùng nhập thông tin:
∙
 
Sau Khi người dùng ấn nút Add giao diện có dạng:
197

▶
  
Đơn Đặt Hàng
  ▶
  
Để thêm mới Đơn đặt hàng
∙
 
Tại giao diện: Quản lý đơn hàng người dùng click vào nút: New Order
198

▶
  
Người dùng Click nút Add để thêm mới đơn hàng giao diện hiện ra có 
dạng
199

▶
  
Chức năng đăng ký người sử dụng
  ▶
  
Tại giao diện đăng ký người dùng, người sử dụng nhập
∙
 
Tại giao diện login người dùng click nút :
∙
 
Tên đăng nhập: Địa chỉ email
Họ và tên
Mật khẩu
Xác nhận lại mật khẩu
Và ấn vào nút: Đăng ký ngay bây giờ để đăng ký thông tin user.
Đăng ký
200

▶
  
Hướng dẫn chạy chương trình
Download
 và 
Install
 chương trình 
local web server
 sử dụng 
XAMPP
.
Link tải chương trình:
https://www.apachefriends.org/blog/new_xampp_20171220.html
 hoặc trong 
thư mục code của dự án
Tải source code cài chương trình(kèm theo sách).
Mở chương trình XAMPP Control và khởi chạy Apache 
và
 MySQL.
Giải nén source code zip file.
Copy
 source code chương trình đã giải nén và copy vào thư mực 
XAMPP’s
 
“htdocs” đường dẫn
.
Khởi chạy 
PHPMyAdmin
 trên trình duyệt và gõ địa chỉ
http://localhost/phpmyadmin
.
Tạo mới một database và đặt tên database với tên 
ims_db
.
Import
 file 
SQL 
của chương trình tên file 
ims_db.sql
 vào 
database
 vừa tạo trên.
Thử chạy hệ thống:  Quản lý tồn kho tập trung trên trình duyệt có thể là Firefox; 
GoogleChorme;… 
http://localhost/ims
.
User admin mặc định:
Email: 
admin@mail.com
Password: 
admin123
File footer.php
Hướng dẫn cài đặt chương trình
Chúc các bạn học tốt!
Note: Các chức năng Sửa Thông tin, Xoá thông tin trên các Chức năng: Loại, 
Thể Loại, Nhà Cung Cấp, Sản Phẩm, Mua Hàng, Đơn Đặt Hàng như trên giao 
diện sử dụng tương tự như tại giao diện: Khách Hàng.
201

▶
  
Giải thích từ khoá
RESTful API
 (Representational State Transferful Application Programming 
Interface) là một kiến trúc thiết kế cho các ứng dụng web để truyền tải dữ liệu 
giữa các máy chủ và máy khách. Nó dựa trên nguyên tắc cơ bản của REST, 
một kiến trúc được mô tả trong quy ước HTTP (Hypertext Transfer Protocol)
Decentralized web
 (web phi tập trung) là một mô hình phát triển web mà 
không phải tất cả các hoạt động và dữ liệu đều được tập trung vào một vị trí 
duy nhất hoặc một nhóm nhất định của các máy chủ. Thay vào đó, nó sử dụng 
các nguyên tắc và công nghệ để phân phối dữ liệu, quản lý quyền lực, và giảm 
sự phụ thuộc vào các tổ chức tập trung.
Uniswap
 là một dự án và giao thức tài chính phi tập trung (DeFi) xây dựng 
trên blockchain Ethereum. Được ra mắt vào tháng 11 năm 2018, Uniswap đặc 
biệt nổi tiếng với việc cung cấp các dịch vụ trao đổi và cung cấp thanh khoản 
(liquidity) cho các token tiêu chuẩn của Ethereum.
integration
 (tích hợp) thường được hiểu là quá trình kết hợp các thành phần, 
hệ thống, hoặc dịch vụ khác nhau để chúng có thể hoạt động cùng
 nhau một 
cách hiệu quả.
Authentication
 (xác thực) là quá trình xác nhận xem một người dùng, ứng 
dụng, hoặc hệ thống có quyền truy cập hay thực hiện một hành động nào đó 
không. Quá trình này thường được thực hiện thông qua việc kiểm tra thông tin 
xác thực như tên người dùng và mật khẩu, mã thông báo (token), chứng chỉ số 
dấu, hay các phương tiện xác thực khác.
Authorization
 (Ủy quyền) là quá trình xác định xem một người dùng, ứng dụng 
hay hệ thống có quyền truy cập vào hay thực hiện một tài nguyên, chức năng 
hay hành động nào đó không. Quá trình này xảy ra sau khi quá trình
authentication (xác thực) đã xác nhận danh tính của người dùng.
202

sessionStorage
 là một đối tượng trong Web Storage API của HTML5, cung cấp 
một cách để lưu trữ dữ liệu trong quá trình làm việc của một phiên làm việc 
của người dùng trên trình duyệt web. Dữ liệu được lưu trữ trong sessionStorage 
chỉ tồn tại trong suốt thời gian phiên làm việc của người dùng và sẽ bị xóa khi 
trình duyệt được đóng.
localhost
 là một thuật ngữ được sử dụng để đề cập đến máy chủ máy tính cục 
bộ, thường được sử dụng để phát triển và kiểm thử ứng dụng web trên máy 
tính cá nhân. Khi bạn thiết lập một máy chủ web trên máy tính của mình, bạn 
thường có thể truy cập nó thông qua địa chỉ 
localhost
.
UI và UX
 là hai khái niệm quan trọng trong thiết kế trải nghiệm người dùng 
(User Experience - UX) và thiết kế giao diện người dùng (User Interface - UI).
203

Lời nói đầu
Ngày nay v ới sự phát triển mạnh của ng ành Công Ngh ệ Thông Tin, Internet v à
Web trở nên không th ể thiếu trong cuộc sống. V ì thế, xây dựng các ứng dụng Web l à
cần thiết. Giáo tr ìnhThiết kế và lập trình Web hướng dẫn cách xây dựng một ứng
dụng Web từ cơ bản đến nâng cao bằng công nghệ HTMLvàASP. Được biên soạn
với phương châm đ ảm bảo tính khoa học, thiết thực, dễ hiểu nhằm giúp sinh vi ên
ngành công ngh ệ thông tin có đ ược tài liệu hữu ích cho việc học tập.
Tuy có nhi ều cố gắng trong công tác  biên soạn, nhưng do lần đầu xuất bản n ên
chắc chắn sẽ có nhiều khiếm khuyết. Chúng tôi rất mong nhận đ ược các ý kiến đóng
góp để hoàn thiện hơn trong các l ần tái bản kế tiếp.
Nhóm biên so ạn

1Chương 1 :Các khái ni ệm cơ bản
1. Mạng máy tính  là gì?
Mạng máy tính l à một tập các máy tính đ ược nối với nhau bởi đường truyền
theo mộtcấu trúcnào đó và qua đó các máy tính có th ể trao đổi tin tức  thông qua các
giao thức truyền thông.
Đường truyền l à một hệ thống các thiết bị truyền dẫn có dây hay không có dây
như cáp xo ắn, cáp đồng trục , cáp quang, dây điện thoại, sóng vô tuyến...
Tập các đường truyền tạo n ên một cấu trúc mạng.
Mạng máy tính đ ược phân th ành 2 loại: mạng diện rộng v à mạng cục bộ, việc
phân loại mạng máy tính dựa v ào khoảng cách địa  lý.
Mạng cục bộ (Local Area NetWorks) hay th ường gọi là mạng LAN:
là mạng được thiết kế để trao đổi thông tin giữa các máy tính trong
một toà nhà, một khu nh à, một phân xưởng nhỏ.
Mạng diện rộng (Wide Area NetWorks) hay c òn gọi là mạng WAN:
Là mạng được thiết lập để kết nối các máy tính ở những khu vực lại
với nhau, ví dụ nh ư giữa các thành phố, giữa các khu vực...
2. Internet là gì?
Internet ra đ ời vào giữa năm 1960. Ng ười ta đã xây dựng Internet nh ư một giao
thức để trao đổi v à chia sẻ thông tin giữa cá c viện nghiên cứu với nhau.
Ngày nay Internet cho phép h ằng trăm triệu ng ười trên khắp thế giới li ên lạc và
trao đổi thông tin với nhau thông qua tập các tập  các giao thức gọi chung l à TCP/IP
(Transmission Control Protocol/Internet Protocol).
3. Địa chỉIP là gì ?
IPlà một địa chỉ d ùng để xác định đối t ượng gởi v à nhận thông tin tr ên
Internet, đ ịa chỉ này có kích  thư ớc 32 bits (version 4), 64 bits (version 5 trở l ên). Khi
gửi một nội dung, th ìđịa chỉIPcủa bạn sẽ đ ược gửi cùng các gói tin n ội dung đế n
người nhận. Khi ng ười nhận nhận đ ược yêu cầu từ bạn th ì họ căn cứ v ào địa chỉIPđể
phản hồi thông tin lại cho bạn.
Địa  chỉIPgồm 2 phần: Phần địa chỉ mạng v à phần địa chỉ máy. 32bits địa chỉ
IPđược chia th ành 4 vùng, m ỗi vùng có kích thư ớc 1 byte (8  bits) được biểu diễn d ưới
dạng thập phân, thập lục phân hay nhị phân. Thông th ường người ta dùng cách vi ết
thập có dấu chấm để tách các v ùng. Mục đích của địa chỉ IPlà để định danh duy nhất
cho một máy tính bất kỳ tr ên liên mạng.
Các máy tính trao đ ổi thông tin v ới nhau thông qua mô h ình Client/Server. Mô
hình Client/Server là mô hình trao đổi thông tin giữa các máy tính trong đó Server
thường là máy cung c ấp thông tin trong khi Client l à một công cụ hay ch ương trình
trên máy tính khác dùng đ ể lấy thông tin từ máy Server. Tuy nhi ên, máy Client c ũng
có thể đóng vai tr ò cung cấp dữ liệu cho máy Server.
Để trao đổi thông tin giữa các máy tính với nhau ng ười ta đặt ra một số giao
thức (protocol) truyền thông tr ên mạng, các quy định về việc trao đổi thông tin  để các
máy tính có th ể nói chuyện với nhau thông qua mạng.
Với mức độ phổ biến của Internet ng ày càng cao, s ố lượng người tham gia ng ày
càng lớn thì các giao th ức truyền thông trở n ên phổ biến và đa dạng. Sau đây l à một số

2giao thức thường gặp, cho phép người sử dụng Internet gửi/nhận th ư điện tử (E-mail),
tập tin (File), đọc tin v à đưa tin.
4. Giao th ức SMTP, POP3 (Simple Mail Transfer protocol)
Là giao th ức dùng để gửi/nhận th ư điện tử (E-mail) từ người dùng (user) này
đến người dùng (user) khác đư ợcgửi từ user n ày đến user khác thông qua protocol
này. Thông thư ờng người ta dùng một e-mail client đê g ửi thông điệp (message), c òn
mail server trên internet qu ản lý, trả lời e -mail phúc đáp.
E-mail (electronic mail) là d ịch vụ trao đổi th ư điện tử trên mạng viễn thông.
Nội dung th ư điện tử thường được mã hóa dưới dạng m ã ASCII khi g ửi, tuy nhi ên thư
điện tử còn hỗ trợ việc trao đổi thông tin h ìnhảnh và âm thanh.
Để trao đổi thông tin bằng E -mail bạn cần tạo một hộp mail cho chính bạn. Một
hộp mail có 3 thành phần chính sau:
Địa chỉ hộp mail: L à định danh của hộp mail giúp xác định ng ười gửi và người
nhận. Chúng ta gửi E -mail thông qua đ ịa chỉ này, địa chỉ mail th ường có dạng
tên@tênmi ền,ví dụ:xuântt@yahoo.com ,xuanttđóng vai tr ò là tên,
yahoo.com là t ên miền.
Địa chỉ mail đ ược quản lý bởi mail server thông qua các dịch vụ cung cấp mail
như FPT, SaigonNet, vnEpress, Yahoo, Hotmail, vnn....tuy nhiên hi ện nay có
rất nhiều dịch vụ cung cấp mail miễn phí. Nh ưng thông d ụng nhất vẫn l à 2 dịch
vụ cung cấp mail  Yahoo và Hotmail.
Một hộp mail có một t ên đăng nh ập và một mật khẩu để truy cập hộp mail của
mình. Tên đăng nhập và mật khẩu đ ược tạo khi chúng ta đăng ký hộp mail.
Điều này bảo đảm tính bảo mật của hộp mail của bạn v à chỉ có bạn mới biết
mật khẩu cùng tên đăng nh ập của bạn để v ào hộp mail m à thôi.
5. Giao th ức FPT (File Transfer Protocol)
Đây là m ột giao thức để trao đổi các tập tin tr ên Internet v ới nhau. Nguy ên tắc
hoạt động của nó khá đ ơn giản. FTP d ùng để tải các tập tin (file) từ máy tính n ày sang
máy tính khác, các t ập tin (file) n ày có thể là các tập tin chứa văn bản, âm thanh, h ình
ảnh. Các máy gửi y êu cầu tập tin qua lại thông qua nhiều ch ương trình khác nhau. Tuy
nhiên, chúng ta có th ể dùng một tập hợp lệnh nh ư “open” (đ ể kết nối với máy server)
và “get” (đ ể tải các tập tin n ày về máy client) hoặc có thể chọn tập tin mong muốn từ
một giao diện của ch ương trình có sẵn để trao đổi các tập tin giữa các máy với
nhau.FTP c ũng có thể d ùng để tải các ch ương trình, tập tin giữa các máy server với
nhau.
6. Giao thức HTTP (HyperText Transfer Protocol)
Là giao th ức dùng để hiển thị trang web d ưới dạng văn bản, h ìnhảnh, âm thanh,
video, và các liên k ết (links) đến các trang web khác tr ên World Wide Web. Khi chúng
ta chọn các liên kết thì HTTP sẽ mở một nội dung mới thông qua tr ình duyệt Web cho
chúng ta. Đây là giao th ức nền tảng trong tập các giao thức ICP/IP.
7. Giao th ức NNTP (Network News Transfer Protocol)
Là giao th ức phân phối thông điệp một cách rộng r ãi với nhiều chủ đề khác
nhau. Thông qua m ột chương trình tin tức Client nh ư Collabra c ủa Netscape hay
chương tr ình Internet News c ủa Microsoft bạn có thể đọc hay đ ưa các bài báo cáo
trong những nhóm mới.
8. Giao th ức Chat

3Là giao th ức cho phép ng ười dùng trao đ ổi thông tin trực tiếp d ưới dạng văn
bản, hìnhảnh và âm thanh.
Các chương tr ình Chat thông d ụng nhất hiện nay l à YahooMessenger, ICQ,
MIRC...
9. URL
URL (Uniform Resource Locator) là đ ịa chỉ của một trang Web hay bất kỳ một
tập tin (file) n ào khác trên Internet. M ỗi URL tr ên Web là duy nh ất.
URL có m ột cú pháp đặc biệt. Tất cả các URL phải chính xác, thậm chí có một
ký tự sai hay thiếu một dấu chấm cũng không đ ược chấp nhận. Một ký tự sai trong
URL có th ể mang đến cho bạn một trang Web ho àn toàn khác bi ệt hoặc kết quả đ ược
trả về là một thôngbáo lỗi.
Một URL đ ơn giản dùng cho Web bao g ồm tên của Web protocol, theo sau bởi
dấu hai chấm (:)  v à hai dấu (//), tiếp đến l à tên của domain v à kết thúc bởi dấu (/).
Ví dụ:http://www.hotmail.com/
Cấu trúc của một URL có thể bao gồm các phần sau:
Phần thứ nhất của URL l à tên giao th ức. Cho đến nay tất cả các URL
đều bắt đầu l à http:// (Hypertext Transfer Protocol) b ởi vìđó là trang
Web và HTML. Nhưng URL có th ể chỉ đến các phần khác của
Internet ch ứ không phải chỉ là Web.
Sau đây là m ột số giao thức đ ược dùng trong URL:
ftp:// tên giao th ức (File Transfer Protocol)
http:// tên giao th ức (Hypertext Transfer Protocol)
mailto: địa chỉ thư điện tử (Electronic mail address) không y êu cầu
hai ký tự  ‘/’.
news: Giao thức cho phép mọi ng ười tham gia v ào nhóm tin n ếu
trang chủ của bạn có li ên quan đ ặc biệt đến nhóm. Hoặc
cho phép nh ận các câu hỏi cần trả lời từ một nhóm tin n ào
đó. Như v ậy bạn có thể hạn chế đ ược số lượng e-mail nhận
được (không y êu cầu hai ký tự ‘/’).
telnet: Giao thức cho phép trao đổi thông tin trực tiếp giữa các
máy tính v ới nhau bằng cách y êu cầu  người sử dụng nhập
tên truy c ập và mật khẩu (không y êu cầu hai ký tự ‘/’).
file:// Tài liệu mà bạn đang truy xuất đ ược đặt trên máy tính c ủa
bạn thay vì trên Web.
Phần thứ hai của URL l à tên của domain. Domain đ ại diện cho t ên
của server m à bạn đang kết nối.
Phần thứ ba của URL l à đường dẫn đến tập tin cần truy cập, th ường
bắt đầu bằng t ên tài kho ản (account name). Nếu bạn muốn truy xuất
đến trang Web đ ượctạo bởi một ng ười dùng (user) xác đ ịnh thì phải
thêm tên c ủa tài khoản vào URL. Tên của tài khoản luôn bắt đầu
bằng ký tự (~).
Ví dụ:http://www.sonic.net/~japan
Phần thứ tư của URL l à tên đường dẫn v à tên tập tin (pathname và
filename). URL thư ờng chỉ ra t ên đường dẫn v à tên tập tin cụ thể.

4Đây là m ột miền xác định tr ên máy ch ủ đang chứa tập tin cần truy
xuất.
Phần thứ năm của URL l à tên của anchor (anchor name). Đây l à một
con trỏ chỉ đến một phần xác định của một file HTML. Nó luôn bắt
đầu bằng ký tự (#). Anchor đặc biệt rất hữu dụng đối với các t ài liệu
lớn.
Tuy nhiên tên account, tên đư ờng dẫn, t ên file và tên anchor không ph ải là
thành phần bắt buộc đối với một URT.
Ví dụ một URL đầy đủ:
http://www.zdnet.com/~zdi/software/wind95/utils.html#WINZIP
Trong đó:
http:// : Tên giao th ức (Protocol)
www.zdnet.com : Tên miền (domain)
~zdi :Tên tài kho ản (account)
software/win95 : Đường dẫn th ư mục
utils.html : Tên tập tin (file)
#WINZIP : Tên neo (anchor)
10. Hyperlink là gì ?
Hyperlinks (hay còn g ọi là links) rất cần thiết đối với World Wide Web. D ùng
hyperlinks đ ể liên kết từ tài liệu này đến tài liệu khác l à một hoạt động rất phổ biến
trên web.
Bạn có thể tạo links đối với bất kỳ đối t ượng nào trên web. Links có th ể kết nối
trực tiếp với văn bản, h ìnhảnh, âm thanh hay một file HTML khác. Hyperlink th ường
được hiển thị với một m àu sắc mặc định. Tu y nhiên chúng ta có th ể thay đổi m àu sắc
nếu cần. Chỉ cần nhấn chuột v ào hyperlinks, tài li ệu được link sẽ đ ược hiển thị. Thông
thường, hình dạng con trỏ sẽ thay đổi th ành hình bàn tay khi rê chu ột qua vùng
hyperlinks vì th ế chúng ta sẽ biết đ ược hyperlink s đangở đâu để có thể nhắp chuột.
Hyperlinks giúp chúng ta d ễ dàng tìm ki ếm các thông tin khác nhau về một chủ
đề. Nếu bạn đang t ìm kiếm một chủ đề n ào đó, chỉ cần vào trang web có hyperlinks k ết
nối với vấn đề n ày, và chúng ta s ẽ nhận được một danh sách  liệt kê hàng trăm ch ủ thể
có liên quan.
11. Web Browser là gì?
Web browser là m ột công cụ hay ch ương trình cho phép b ạn truy xuất v à xem
thông tin trên web. Có nhi ều web browser để truy xuất web. Mỗi web browser có
những đặc điểm khác nhau v à chúng s ẽ hiển thị những trang web không ho àn toàn
giống nhau. Hai web browser đang phổ biến hiện nay l àNestcape’s Navigator của
công ty Netscape và Microsoft’s Internet Explorer  của công ty Microsoft. Chúng hiển
thị được cả hìnhảnh, âm thanh v à rất dễ sử dụng. Ngo ài việc truy xuất web, Netcape
và IE (Internet Explorer ) còn cho phép chúng ta th ực hiện một số công việc khác nhau
như gửi và nhận thư điện tử (e-mail), tải các tập tin (download file) từ máy chủ
(server),....V ới hai web browser n ày web đ ã trở thành một hệ thống thông tin đa
phương ti ện có mối li ên hệ với nhau.
12. Web Server là gì?
Web server đơn gi ản là một máy tính nối v ào Internet và ch ạy các phần mềm
được thiết kế để truyền tải nội dung d ưới dạng trang HTML (Trang HTML có thể chứa

5âm thanh, hình ảnh, video, văn b ản) hay d ưới dạng tập tin (tập tin có thể l à tập tin hình
ảnh, âm thanh, văn bản, video...). Máy chủ (server) phải đủ mạnh để đáp ứng nhiều kết
nối Internet đồng thời.
Thông qua trình duy ệt Web máy chủ sẽ cung cấp các dịch vụ đ ược yêu  cầu đến
máy client.
Thông thư ờng web server chạy tr ên các hệ điều hành khá m ạnh như Unix,
Linux, Microsoft Windows NT Server, Windows 2000 server.
13. Website là gì?
Là tập các trang web li ên quan đ ến một công ty, một tập đo àn, một trung tâm
hay một cá nhân n ào đó.Ví dụ:Website c ủa Trung Tâm Phát Triển Công Nghệ Thông
Tin Thành Ph ố Hồ Chí Minh gồm tập các trang web đ ược bắt đầu từ trang chủ có địa
chỉ (URL) làwww.citd.edu.vn .
14. World Wide Web (www) là gì?
World Wide  Web là d ịch vụ thông dụng ra đời v ào năm 1990. D ịch vụ World
Wide Web s ử dụng giao thức HTTP (HyperText Transfer Protocol). Để sử dụng dịch
vụ này chúng ta c ần một trình duyệt Web (gọi l à Web Browser).
Để truy cập một trang Web bạn cần phải biết địa chỉ (URL-Uniform Resource
Locator) c ủa trang web đó. Ví dụ nếu bạn muốn truy cập v ào trang ch ủ của Yahoo th ì
bạn đánh địa chỉ http://www.yahoo.com  cho trình duy ệt web. Khi đó tr ình duyệt web
sẽ mở trang chủ Yahoo cho bạn. Từ trang chủ n ày bạn có thể đi đến các trang khác
bằng cách nhấn chuột v ào đối tượng HyperLink trong trang web. H ình dạng con chuột
thay đổi (thông th ường là hình bàn tay) khi đi qua các đ ối tượng Hyperlink n ày.
Trang Web truy ền tải nhiều thông tin khác n hau với nhiều h ình thức khác nhau
như văn b ản, âm thanh, h ìnhảnh... Sự ra đời của trang web giúp con ng ười trao đổi
nhanh hơn, ti ện lợi hơn, phong phú hơn và đa d ạng về cả h ình thức và nội dung.
World Wide Web (c ũng được gọi là ‘W3’, ‘WWW’ hay g ọi tắt là Web) là m ột
hệ thống rộng lớn bao gồm nhiều HTTP server (máy chủ sử dụng giao thức HTTP -
Hypertext Transfer Protocol), chúng đang th ực hiện việc trao đổi file thông qua
Internet.
15. Sự khác biệt giữa Inernet v à World Wide Web?
Nhiều người nghĩ rằng Web v à Internet là m ột. Nhưng Web ch ỉ là một phần của
Inerner và nó đang phát tri ển với tốc độ nhanh h ơn các ph ần khác.
Trên Interner chúng ta có th ể gửi và nhận nhiều loại thông tin khác nhau nh ư
thư điện tử (e-mail), các bài báo, tán g ẫu và các tran g Web. Như v ậy Web chỉ l à một
trong những dịch vụ của Internet.
16. Web page là gì?
Web page là trang web, là m ột loại tập tin đặc biệt đ ược viết bằng ngôn ngữ
siêu văn b ản HTML. Web page có thể hiển thị các thông tin văn bản, âm thanh, h ình
ảnh...TrangWeb này đư ợc đặt trên máy server sao cho máy client có th ể truy cập
được nó. Chúng ta cũng có thể đặt tập tin n ày trênổ cứng máy tính của m ình nhưng
người khác sẽ không đọc đ ược nó.

6Chương 2  :lập trình web v ới ngôn ngữ si êu văn
bản html
1. Khái ni ệmngôn ngữ HTML
HTML (Hypertext Markup Language) là ngôn ng ữ định dạng văn bản si êu liên
kết, là ngôn ng ữ lập trình Web c ăn bản, cho phép định dạng văn bản, bổ sung h ình
ảnh, âm thanh v à video, c ũng như lưu tất cả vào một tập tin d ưới dạng văn bản hay
dướidạng mã ASCII, binary mà b ất cứ máy tính n ào cũng có thể đọc đ ược thông qua
trình duyệt Web (Web browser). HTML có hai đặc tính c ơ bản sau:
Siêu văn b ản:Tạo các li ên k ết trong trang Web, cho phép truy cập
thông tin t ừ nhiều h ướng khác nhau thông qua các H yperlinks.
Tính tổng quát:  Hầu nh ư máy tính nào c ũng có thể đọc đ ược thiết kế
bằng ngôn ngữ HTML. Điều đó l à do d ữ liệu trong tập tin HTML đ ược
lưu dư ới dạng văn bản hay d ưới dạng m ã ASCII.
2. lập trình web v ới ngôn ngữ HTml
2.1 Các thành ph ần cơ bản của H TML
Tag là gì?
Tag là m ột tập các ký hiệu đ ược định nghĩa trong HTML có ý nghĩa đặc biệt. Tag
được bắt đầu bằng ký hiệu nhỏ h ơn (<) theo sau b ởi một từ khoá, v à kết thúc bằng ký
hiệu lớn h ơn (>). Nó quy đ ịnh văn bản đ ược hiển thị tr ên màn hình nh ư thế nào.
Ví dụ:
+ Tag<B> định phông chữ cho văn bản l à chữ đậm.
+ Tag<I> định dạng phông chữ nghi êng.
+ Tag<TITLE > đặt tiêu đề cho trang web.
+ Tag<HTML > bắt đầu một trang web.
+ Tag<P> bắt đầu cho một đoạn văn bản.
Mỗi tag trong HTMl có một ý nghĩa ri êng, nó  khá rõ ràng và d ễ hiểu. Tag
không phân bi ệt chữ hoa chữ th ường v ì thế các tag < Title >, <title>, <TITLE > và
<tItLe > đều có nghĩa nh ư nhau.
Có hai lo ại tag: Tag bắt đầu v à tag k ết thúc. Dữ liệu bị tác động sẽ nằm giữa tag
bắt đầu v à tag k ết thúc. Tag kết th úc giông tag b ắt đầu nh ưng có thêm d ấu xuyệt phải
(/)ở phía tr ước.
Ví dụ: <TITLE> Lap trinh web voi HTML</ TITLE >
Trong đó:
<TITLE> : Tag b ắt đầu.
Lap trinh web voi HTML: chu ỗi dữ liệu bị tác động.
</TITLE > : Tag k ết thúc.
Thuộc tính
Có nhi ều tag c òn có  thuộc tính k èm theo. Thu ộc tính đ ược nhập v ào ngay trư ớc
dấu ngoặc đóng (>) của tag. Có thể sử dụng nhiều thuộc tính trong một tag. Thuộc tính
này k ế tiếp thuộc tính khác, phân cách nhau bởi khoảng trắng.
Ví dụ: <TABLE BORDER>
Trong đó: < TABLE> :  Tên tag
<BORDER >:Thuộc tính
Giá trị

7Ngoài các thu ộc tính không có giá trị c òn có các thu ộc tính của tag có giá trị
nữa.Ví dụ:thuộc tínhCLEAR của tag <BR> có ba giá tr ị chọn lựa : left, right, all.
Ví dụ: <BR CLEAR = “left”>
Trong đó: <BR> :tên tag
CLEAR: thuộc tính
left: giá tr ị của thuộc tính CLEAR.
Giá tr ị nên đặt giữa hai dấu nháy “”. Tuy nhi ên có th ể bỏ dấu nháy trong các
trường hợp giá trị chỉ chứa chữ (A - > Z, a - > z), s ố (0- > 9), d ấu nối ( -), dấu chấm (.).
Tag lồng nhau
Thẻ lồng nhau d ùng để chỉnh sửa cách tr ình bày n ội dung trong một trang web.
Ví dụ chúng ta muốn tr ình bày ch ữ nghi êng trong m ột vài ch ữ quan trọng trong ti êu
đề.
Không ph ải tag n ào cũng chấp nhận dạng thẻ lồng nhau.
Trật tư sắp xếp của những tag lồng nhau. Thẻ đ ược mở đầ u tiên s ẽ là thẻ được
đóng sau  cùng.
Ví dụ: Dòng đầu tiên đúng, d òng th ứ hai sai
Đúng: <H1> Phần <I> Nội Dung </ I></H1>
Sai: <H1> Phần <I> Nội Dung </ H1></I>
Khoảng trắng
Trình duy ệt bỏ qua các khoảng trắng giữa các tag trong tập tin HTML.
Tên tập tin
Nên sử dụng chữ th ường khi đặt t ên tập tin, điều n ày giúp ích cho b ạn lẫn ng ười
duyệt. Với bạn, sẽ giúp ích khi tạo li ên kết giữa các trang Web. Với ng ười dùng, s ẽ dễ
dàng khi truy c ập trang web.
Đặt tên tập tin phải đúng phần mở rộng “.htm” hay “.html”. Gi úp trình duy ệt
Web đ ịnh ra loại t ài liệu khi duyệt.
2.2 Tạo trang Web
Có th ể tạo trang Web tr ên bất cứ ch ương tr ình x ử lý văn bản n ào như chương
trình so ạn thảo văn bản Nodepad, WordPad, Word... ở đây chúng ta sẽ thực hiện tạo
trang Web trên trình so ạn th ảo văn bản NotePad, ch ương tr ình so ạn thảo có sẵn tr ên
Windows, b ằng cách v ào menuStart ->Programs ->Accessories ->Notepad.
2.3. Cấu trúc của một tập tin HTML
Một trang Web luôn bắt đầu bằng tag < HTML > và đư ợc kết thúc bởi tag
</HTML >.
Hầu hết các tr ang Web đư ợc chia th ành 2 ph ần. Phần đầu v à phần thân. Phần
đầu là phần được đặt giữa 2 tag < HEAD > và tag </ HEAD >. Ph ần thân l à phần được
đặt giữa hai tag < BODY > và tag </ BODY >.
Phần đầu l à nơi đ ịnh r õ tiêu đề, nội dung của ti êu đ ề được đặt giữa 2 tag
<TITLE > và </TITLE >.
Cú pháp : <HEAD > <TITLE > tên tiêu đ ề của trang Web
<TITLE > </HEAD >
Hầu hết các tr ình duy ệt Web, ti êu đề xuất hiện tr ên thân tiêu đ ề của cửa sổ tr ình
duyệt.
Phần thân chứa nội dung của trang Web l à phần chính của trang Web, phần
cung c ấp thông tin c ần thiết đến ng ười duyệt Web.

8Cú pháp : <BODY > Nội dung trang Web </ BODY >
Ví dụ:Tạo một trang web đầu ti ên, m ở chương tr ình so ạn thảo văn bản NodePad v à
gõđoạn HTML nh ư trong h ình sau:
2.4. Xem trang HTML b ằng trình duyệt Web
Sau khi thi ết kế trang Web xong bạn d ùng m ột trình duy ệt Web để xem kết quả
thiết kế. V ì không bi ết ng ười dùng s ử dụng tr ình duy ệt Web n ào. Nên t ốt nhất n ên xem
nó trong nhi ều trình duy ệt Web khác nhau theo các b ước sau.
Khởi động tr ình duy ệt WebInternetExplorer ->NhấpFile ->Open->Trong
hộp thoạiOpen bạn gõđịa chỉ tập tin rồi nhấp OKnhư h ình sau:
Hoặc nhấp v ào nútBrowser.. để chọn tập tin trong hộp thoại vừa mở ra, nhấp
tiếp nútOpen trong h ộp thoại để hiển thị trang Web l ên cửa sổ tr ình duy ệt. Khi ấy nội
dung  của trang Web trong ví dụ tr ên đư ợc hiển thị nh ư sau:
2.5. Các tag cơ b ản trong HTML
2.5.1. Tag chú gi ải
Tag này đư ợc th êm vào tài li ệu HTML nhằm nhắc nhở mục đích của các d òng
lệnh. Tr ình duy ệt không tính nội dung nằm giữa tag ghi chú n ày.
Cú pháp: <!--nội dung chú giải -->
2.5.2 Các tag đ ịnh dạng văn bản
Định phông chữ: Đặt tagFONT trước nội dung văn bản cần hiển thị.
Cú pháp:
<FONT FACE =”fontname1,fontname2”></ FONT >
Trong đó fontname1  là phông ch ữ được chọn, g õ tên đầy đủ của phông chữ cả
chữ (đậm ( Bold), nghiêng (Italic), g ạch d ưới (Underline)). Ta có thể bổ sung th êm
phông ch ữfontname2 phòng khi ng ười duyệt không c ài loại phông chữ fontname1, các
phông ch ữ được viết cách nhau dấu phảy.
Ví dụ:Ta thêm 3 th ẻ lệnh sau v ào ví d ụ trên
<FONT  FACE = “VNI -Litthos,VNI -Times”, bold></ FONT>
<FONT FACE = “VNI -Times”, bold></ FONT>
<FONT FACE = “VNI -Centur,VNI -Times”, bold></ FONT>
Như vậy đoạn lệnh đ ược viết lại nh ư sau:
Mã HTML
<HTML>
<HEAD><TITLE>To chuc</TITLE></HEAD>
<BODY>
<FONT FACE = “VNI -Litthos,VNI -Times”, bold>
<H1>Giám đ ốc</H1></FONT>
<FONT FACE = “VNI -Times”, bold>
<H2>Phó giám đ ốc</H2></FONT>
<FONT FACE = “VNI -Centur,VNI -Times”, bold>
<H3>Nhân viên</H3>
</FONT>
</BODY>
</HTML>

9Kết quả hiển thị tr ên trình duy ệt
Giám đốc
Phó giám đ ốc
Nhân viên
Định kích th ước chữ
Cú pháp: <BASEFONT SIZE = “n”>
Với n mang giá trị từ 1 đến 7, giá trị mặc định l à 3. TagBASEFONT dùng để
định kích th ước cho to àn bộ văn bản, nếu muốn thay đổi một đoạn hay một từ trong
văn bản thì dùng tag FONT, tagBIG, tagSMALL.
Định màu cho văn b ản
Cú pháp: <FONT COLOR = “color”></FONT>
Vớicolor là màu dùng cho ch ữ, các giá trị m àu có thể gõ bằng chữ hoặc g õ bằng chữ
số ở hệ hexa (hệ 16).
Nếu gõở hệ hexa th ì thành ph ầncolorlà sự kết hợp thứ tự giữa 3 giá trị m àu
tươngứng là Red (đỏ), Green (xanh lục), Blue (xanh đậm), mỗi giá trị m àu được biểu
diễn bởi 2 chữ số thập phân.
Ví dụ:Ta muốn màu chữ là màu đỏ thì ta gõ “Red” ho ặc “FF0000”, nếu m àu vàng thì
Yellow ho ặc “FFFF00”, m àu xanh đ ậm thì “Green” ho ặc “0000FF”...
Như vậy tagFONTkhông nh ững dùng để định dạng kích th ước văn bản m à
cònđịnh dạng m àu cho văn b ản.
Ví dụ:Ta muốn định m àu xanh đ ậm cho đoạn nội dung “Lop chuyen vien” n ên ta bỏ
chúng vào 2 tag < COLOR> và </COLOR>
Mã HTML
<HTML>
<HEAD><TITLE>To chuc</TITLE></HEAD>
<BODY>
<H1>Dao tao tu xa qua mang</H1>
<BASEFONT SIZE = “4”>
<FONT  COLOR = “0000FF”>Lop chuyen vien</FONT>
cong nghe thong tin
</BODY>
</HTML>
Kết quả hiển thị tr ên trình duy ệt
Dao tao tu xa qua mang
Lop chuyen vien cong nghe thong tin
Định dạng chữ
Cú pháp:
<B>nội dung</ B> hoặc <STRONG >nội dung</ STRONG >
<I>nội dung</ I> hoặc <EM></EM>
Ta định dạng chữ đậm chữ nghi êng cho văn b ản bằng cách sử dụng 2 tag:
Định dạng chữ đậm d ùng tag < B> hoặc tag<STRONG >
Định dạng chữ nghi êng dùng tag < I> hoặc tag <EM>

10Ví dụ:Từ ví dụ trên muốn phần nội dung “lop chuyen vien” đ ược in đậm c òn phần nội
dung “cong nghe thong tin” đư ợc in nghi êng thì 2 n ội dung tr ên được bỏ vào 2 tag như
sau:
<B>Lop chuyen vien</ B>
<I>cong nghe thong tin</ I>
Ghi chú:
Ta có thể kết hợp các thuộc tính vào chung m ột tag
Ví dụ: Ta kết hợp cùng lúc 3 thu ộc tính định dạng phông chữ l àFACE (kiểu chữ hiển
thị), SIZE ( kích thước văn bản ), COLOR ( màu của văn bản )vào tag < FONT> như
đoạn tag sau:
<FONT FACE =”VNI-Times”SIZE =”3”COLOR =”RED”>
<B>nội dung văn b ản</B></FONT>
Ví dụ: Xét ví d ụ sau
Mã HTML
<HTML>
<HEAD><TITLE>Thong tin</TITLE></HEAD>
<BODY>
<H1>Lop chuyen vien</H1>
<FONT FACE = “VNI -Times” SIZE =”3” COLOR=”red”>
<B>chào các b ạn đến với ch ương trìnhđào tạo chuyên viên</B></FONT>
</BODY>
</HTML>
Kết quả hiển thị tr ên màn hình
Lop chuyen vien
chào các b ạn đến với ch ương trìnhđào tạo chuyên viên
Sử dụng tag < BIG> và tag < SMALL> để thay đổi từng phần hoặc cá thể
trong nội dung văn bản. tag BIGdùng để thay đổi phần nội dung th ành chữ
lớn, tagSMALL dùng để thay đổi phần nội dung th ành chữ thường.
Cú pháp: <BIG>...</BIG> và <SMALL>...</SMALL>
Định dạng chỉ số tr ên, chỉ số dưới
Chữ (hoặc số) nằm h ơi cao ho ặc hơi thấp hơn so với phần văn bản chính đ ược
gọi là chỉ số trên và chỉ số dưới.
Đểđịnh dạng chỉ số tr ên hay ch ỉ số dưới ta dùng hai tag SUP(định dạng chỉ số
trên),SUB (định dạng chỉ số d ưới).
Cú pháp: Chỉ số trên: <SUP></SUP>
Chỉ số dưới: <SUB></SUB>
Ví dụ:Ta muốn hiển thị ph ương trình bậc hai
AX2+BX+C=0, C+O 2=CO2lên Webthì ta dùng đoạn lệnh sau:
Mã HTML
<HTML>
<HEAD><TITLE>dinh dang chi so</TITLE></HEAD>
<FONT SIZE =”3”>
AX<SUP>2</SUP>=BX+C=0
<BR>

11C+O<SUB>2</SUB>=CO<SUB>2</SUB>
</FONT>
</HTML>
Kết quả hiển thi tr ên trình duy ệt
AX2+BX+C=O
C+O2=CO2
Trong đoạn lệnhtrên ta sử dụng tag < BR>, tag này dùng đ ể sang dòng mới mà
ta sẽ đề cập cụ thể trong các phần kế tiếp.
Phân đoạn
Dùng tag < P> để phân đoạn văn bản. Muốn canh chỉnh đoạn tr ên trang Web ta
sử dụng th êm thuộc tínhALIGN.
Cú pháp: <P ALIGN =”direction”>
Với direction mang 1 trong 3 giá tr ị sau:
- Left (nội dung trong đoạn đ ược canh trái)
-Right (nội dung trong đoạn đ ược canh phải)
- Center (n ội dung trong đoạn đ ược canh giữa)
Ví dụ:Muốn phân hai d òng AX2+BX+C=0 và C+O 2=CO2 thành hai đo ạn riêng biệt,
nội dung đoạn thứ nhất nằm ở giữa m àn hình,đoạn thứ hai nằm b ên trái màn hình thì
ta viết lại đoạn lệnh nh ư sau:
<HTML>
<HEAD><TITLE>dinh dang chi so</TITLE></HEAD>
<FONT SIZE =”3”>
<P ALIGN =”center”>
AX<SUP>2</SUP>=BX+C=0
<P ALIGN =”left”>
C+O<SUB>2</SUB>= CO<SUB>2</SUB>
</FONT>
</HTML>
Tag phân c ấp đề mục
Đề mục trong trang Web giúp cho ng ười duyệt hiểu r õ hơn cấu trúc của trang.
Cú pháp: <Hn></Hn> với n mang giá trị từ 1 ->6
Trong HTML cho phép s ử dụng 6 cấp đề mục trong trang Web, tuy nhi ên trong
thực tế ta chỉ sử dụng 3 đến 4 cấp đề mục l à đủ.
Ví dụ: ta xem xét đo ạn lệnh sau:
Mã HTML
<HTML>
<HEAD><TITLE>To chuc</TITLE></HEAD>
<BODY>
<!--các cấp trong một công ty -->
<H1>Giam doc</H1>
<H2>Pho giam doc</H2>
<H3>Nhan vien</H3>
</BODY>

12</HTML>
Kết quả hiển  thị trên trình duy ệt
Giam doc
Pho giam doc
Nhan vien
2.5.3. Các tag đ ịnh dạng h ìnhảnh
Có nhiều loại hìnhảnh trên một trang Web: Logo (biểu t ượng), ảnh chụp, ảnh
vẽ từ các ch ương trình xử lý ảnh nh ư: CorelDraw, Paint, Photoshop...
Hìnhảnh được đưa vào trang Web dư ới dạng tập tin h ìnhảnh.
Nhớ lưu hìnhảnh dưới dạng tập tin có phần mở rộng “ gif”, “jpg” hoặc “pmg”.
Hạn chế lưuảnh dưới dạng tập tin có phần mở rộng “ bmp” như thế, chỉ có ng ười dùng
trình duyệt Web Internet Explorer mới xem đ ược hìnhảnh này, mặt khác kích th ước
của các tập tin h ình lưu dưới dạng “ bmp” lớn hơn nhiều lần so với tập tin l ưu dưới
dạng “jpg”, “gif”, “pmg”.
Chèn hình ảnh vào trang Web
Để chèn hìnhảnh vào trang Web ta dùng tag < IMG>.
Cú pháp: <IMG SRC  =”tên tập tin chứa h ìnhảnh”>
Tên tập tin chứa h ìnhảnh có cả đường dẫn th ư mục, nếu tập tin h ìnhảnh được đặt
cùng thư m ục với thư mục chứa trang Web th ì không cần đường dẫn th ư mục.
Tạo thư mục có tênimages trong thư m ục chứa trang Web, sau đó l ưu tập tin
hìnhảnh vào thư mụcimages. Khi đóSRC=”images/tên t ập tin”
Thêm đư ờng viền chung quanh v ào hìnhảnh
Để thêm đường viền v ào xung quanh hình ảnh ta d ùng thêm thu ộc tính
BORDER  vào tag < IMG>
Cú pháp; < IMG SRC =”tên file”BORDER =n>
Với n là độ dày mảnh của đ ường biênảnh, tính bằ ng pixel.
Canh chỉnh hìnhảnh
Để canh chỉnh h ìnhảnh ta dùng thuộc tínhALIGNtrong tag < IMG> với 3 giá
trị: left, center v à right.
Cú pháp:  <IMG ALIGN  =”direction”>nội dung
Trong đó direction mang 1 trong 3 giá tr ị sau:
-ALIGN = left  : Hìnhảnh nằm b ên trái màn hình.
-ALIGN = center  : Hìnhảnh nằm giữa m àn hình.
-ALIGN = right  : Hìnhảnh nằm b ên phải màn hình.
Thêm chữ xung quanh h ìnhảnh
Muốn thêm chữ xung quanh h ìnhảnh ta th êm thuộc tínhALIGN vào tag
<IMG>.
Cú pháp: <IMG SRC  =”tên file”ALIGN = “direction”> nội dung muốn ch èn
Trong đó direction mang 1 trong 3 giá tr ị sau:
-ALIGN = top  : Vị trí văn bản nằm ở phía tr ên màn hình.
-ALIGN = middle  : Vị trí văn bản nằm ở giữa h ìnhảnh.
-ALIGN = bottom : Vị trí văn bản nằm ở phía b ên dưới hìnhảnh.
Ví dụ:
Mã HTML

13<HTML>
<HEAD><TITLE>hien thi hinh anh</TITLE></HEAD>
<BODY>
<H1>hien thi hinh anh qua 3 cach</H1>
<H2>tren</H2>
<IMG SRC=”.. \\002.jpg” BORDER=1 ALIGN =”top”>van ban o phia tren.
<H3>giua</H3>
<IMG SRC=”.. \\002.jpg” BORDER=2 ALIGN =”middle”>van ban o giua.
<H4>giua</H4>
<IMG SRC=”.. \\002.jpg” BORDER=3 ALIGN =”bottom”>van ban o phia duoi.
</BODY>
</HTML>
Kết quả hiển thị tr ên trình duy ệt
2.5.4. Các tag đ ịnh dạng trang
Đường kẻ ngang trang Web
Dùng tag < HR> để kẻ đường ngang tr ên trang Web, giúp trang Web rõ ràng
hơn.
Cú pháp : <HR SIZE =”n”WIDTH=”w”
ALIGN=”direction”NOSHADE >
Trong đó:
SIZE : Độ dầy/ mỏng của đ ường kẻ tính bằng Pixel.
WIDTH : Chi ều rộng của đ ường kẻ tính bằng Pixel.
ALIGN : Thu ộc tính n ày có ba giá tr ịleft, right, center dùng đ ể chỉnh vị trí
đường ngang.
Định màu nền cho trang Web
Để định m àu n ền cho trang Web ta th êm thu ộc tínhBGCOLOR  trong tag
BODY.
Cú pháp: <BODY BGCOLOR= ”color ”>
color là màu c ần định cho trang Web
Ví dụ:Ta mu ốn tạo m àu nền của trang l à màu vàng (yellow) cho Web thì ta
dùng đo ạn lệnh sau:
<HTML>
<HEAD><TITLE>mau nen</TITLE></HEAD>
<BODY BGCOLOR=”yellow”>
</BODY>
</HTML>
Định ảnh nền cho trang Web
Dùng hình ảnh l àm n ền cho to àn trang Web thay vì chúng ta s ử dụng m àu nền.
ảnh nền giúp trang Web của chúng ta đẹp h ơn, h ấp dẫn h ơn, trang Web có s ức lôi cuốn
người dùng hơn.

14Để định h ìnhảnh n ên cho trang Web ta s ử dụng thuộc tínhBACKGROUND
trong tag BODY  thay vì dùng thu ộc tínhBGCOLOR để định m àu nền.
Cú pháp : <BODY BACKGROUND =”tên file ”>
Tên file là tên t ập tin h ìnhảnh cần l àm n ền cho trang Web.
Ví dụ: Mu ốn định tập tin ảnh có t ên “b.jpg” trong thư m ục images l àmnền cho trang
Web ta dùng đo ạn lệnh sau:
<HTML>
<HEAD><TITLE>mau nen</TITLE></HEAD>
<BODY BACKGROUND=”images/b.jpg”>
</BODY>
</HTML>
Xuống dòng trong trang Web
Khi dùng tag < P> để phân đoạn th ì kho ảng cách giữa các đoạn khá lớn. Để
tránh khuy ết điểm n àyta dùng tag < BR> để xuống d òng.
2.5.5. Các tag t ạo danh sách (list)
Tạo danh sách theo thứ tự
Sử dụng tag <OL> để tạo danh sách theo thứ tự
Cú pháp : <OL TYPE=X >
<LI> nội dung mục 1
<LI> nội dung mục 2
...
<LI> nội dung mục n
</OL>
Trong đ óX định kiểu ký hiệu sẽ đ ược sử dụng trong danh sách.
A là ch ữ hoa
a là danh sách đư ợc đánh theo thứ tự chữ th ường a,b,c...z
I danh sách đư ợc đánh theo thứ tự số La M ã I, II, III...
i danh sách đư ợc đánh theo thứ tự số La M ã i, ii, iii...
1 danh sách đư ợc đánh d ấu theo thứ tự 1,2,3...
Ngoài ra còn có thu ộc tínhSTART =n, n là giá tr ị bắt đầu của danh sách.
Ví dụ:Xét đo ạn lệnh sau:
Mã HTML
<HTML>
<HEAD><TITLE>mau nen</TITLE></HEAD>
<BODY>
<OL TYPE=1 START=2>
<LI>cong cha nhu nui thai son
<LI>nghia me nhu n uoc trong nguon chay ra
<LI>mot long tho me kinh cha
<LI>cho tron chu hieu moi la dao con
</BODY>
</HTML>
Kết quả hiển thị tr ên trình duy ệt
2.   cong cha nhu nui thai son

153.   nghia me nhu nuoc trong nguon chay ra
4.   mot long tho me kinh cha
5.   cho t ron chu hieu moi la dao con
Tạo chấm tr òn (Bullet) cho danh sách
Dùng tag < UL> để tạo chấm tr òn cho danh sách.
Cú pháp : <UL TYPE =”kiểu chấm tr òn”>
<LI>nội dung mục thứ 1
<LI>nội dung mục thứ 2
...
<LI>nội dung mục thứ n
</UL>
“kiểu chấm tr òn” mang m ột trong 3 giá trị sau:
disc: ki ểu dấu chấm tr ònđậm (mặc định đối với danh sách ở cấp thứ nhất).
circle: ki ểu dấu chấm tr òn rỗng (mặc định đối với danh sách ở cấp 2).
square: ki ểu dấu chấm vuông đặc (mặc định đối với danh sách từ cấp thứ 3
trở đi)
Ví dụ: Đoạn lệnh sau tạo dấu chấm tr òn cho danh sách .
Mã HTML
<HTML>
<HEAD><TITLE>mau nen</TITLE></HEAD>
<H1>Dau  cham tron cho danh sach</H1>
<HR>
<UL TYPE=”disc”>
<LI>muc mot
<LI>muc hai
<LI>muc ba
<LI>muc nam
<LI>muc sau
</BODY>
</HTML>
Kết quả hiển t hị trên màn hình
Dau cham tron cho danh  sach
muc mot
muc hai
muc ba
muc nam
muc sau
Với cách tạo Bullet n ày trông có v ẻ đơn đi ệu,xấu xí. Bạn h ãy tự vẽ những h ình ngh ộ
nghĩnh , sau đó d ùng nh ững h ìnhảnh n ày để tạo Bullet bằng tag < IMG >.
Ví dụ: Ta v ẽ mộ t Bullet và lưu t ập tin h ìnhảnh n ày với phần mở rộng l à “gif’. Khi ấy
ta tạo danh sách bằng đoạn lệnh sau:
Mã HTML

16<HTML>
<HEAD><TITLE>Bullet tu tao</TITLE></HEAD>
<BODY>
<H2><CENTER>Cac huong trong nganh CNTT</CENTER></H2>
<IMG src=”images/b1.gif”>Cong nghe phan mem<br>
<IMG src=”images/b1.gif”>Cong nghe tri thuc<br>
<IMG src=”images/b1.gif”>He thong thong tin<br>
<IMG src=”images/b1.gif”>Mang may tinh
</BODY>
</HTML>
Kết quả hiển thị tr ên trình duy ệt
Cac huong trong nganh CNTT
Cong nghe phan mem
Cong  nghe tri thuc
He thong thong tin
Mang may tinh
Tạo danh sách định nghĩa
Là lo ại danh sách có dạng một từ hay một cụm từ k èm theo n ội dung d ài, rất thích
hợp giải thích ý nghĩa của nội dung.
Để làm đư ợc điều n ày ta dùng các tag < DL>, <DT>,<DD>.
Tag <DL>: Để tạo danh sách định nghĩa
Tag <DT> : Đ ể đánh dấu thuật ngữ đ ược định nghĩa trong danh sách.
<DD>: Gi ải thích thuật ngữ ở tr ên
Ví dụ: Ta xét đo ạn lệnh sau:
Mã HTML
<HTML>
<HEAD><TITLE>Danh sach dinh nghia</TITLE></HEAD>
<BODY>
<H2>Cac huong trong nga nh cong nghe thong tin</H2>
<DL>
<DT><B>Huong cong nghe phan mem</B>
<DD>Dao tao ra nhung lap trinh vien, dap ung nhu cau can thiet cua xa hoi, sau khi
ra truong Sinh Vien duoc gioi thieu viec lam o  cac khu cong nghiep phan mem
</BODY>
</HTML>
Kết quả hi ển thị tr ên trình duy ệt
Cac huong trong nganh cong nghe thong tin
Huong cong nghe phan mem
        Dao tao ra nhung lap trinh vien, dap ung nhu cau can thiet cua xa hoi, sau
khi ra truong Sinh Vien duoc gioi thieu viec lam o  cac khu cong nghiep phan
mem

172.5.6. Tạo liên kết (link)
Liên k ết là đặc trưng c ủa Word Wide Web, chúng cho phép ng ười dùng chuy ển từ
mục này sang m ục khác trong c ùng trang Web ho ặc chuyển từ trang Web n ày đến
trang Web khác.
Liên kết trong c ùng trang Web
Cho phép l iên đ ến các mục b ên trong m ột trang Web. Để l àm đư ợc điều n ày trư ớc
tiên ph ải tạo điểm neo (Bookmark) v à sau đó t ạo liên kết đến điểm neo n ày.
Cú pháp:
Tạo điểm neo: <A NAME =”tên đi ểm neo cần tạo”>nội dung</ A>
Tạo liên kết: <A HREE =”#tên đi ểm neo cần li ên kết đến”></ A>
Dấu “#” báo cho tr ình duy ệt biết li ên kết là nội bộ b ên trong trang Web.
Ví dụ: Xét đo ạn lệnh sau:
<HTML>
<HEAD><TITLE>Hyperlink</TITLE></HEAD>
<BODY>
<P><A HREE=”#Ch1”>Chuong 1</A></P>
<P><A NAME=”Ch1”>Chuong 1:</A></P>
<P>Bai 1: Mot so kh ai niem lien quan den mang may tinh</P>
<P>Bai 2; Lap trinh voi ngon ngu sieu lien ket HTML</P>
</BODY>
</HTML>
Tạo liên kết đến các trang Web khác
Cú pháp: <A HREE =”URL”></ A>
Ví dụ:
<A HREE =”http://www.yahoo.com ”>Yahoo</ A>: liên k ết đến trang chủ
Yahoo.
<A HREE =”home.htm ”>Home</ A>: liên k ết đến trang có t ên home.htm
trong cùng thư m ục.
<A HREE =”javascript:window.open() ”>Click</ A>: g ọi Open của
JavaSript.
<A HREE =”code.zip ”>Download</ A>: m ở cửa sổ tải tập tin nén
“code.zip”.
<A HREE =”mailto: xuanhung@yaho o.com ” > my mail</ A>: th ực hiện
việc gửi mail.
<A HREE =”news.htm” TARGET =_blank>News</ A>: m ở trang Web có
tên “news.htm ” trong c ửa sổ đ ược định nghĩa bởi thuộc tính TARGET,
trong đó TARGET mang m ột trong những giá trị sau:
name: Nạp trang news.htm l ên cửa sổ hoặc Frame có t ên Name.
_blank: Nạp trang news.htm v ào một cửa sổ trống mới, cửa sổ mới n ày
không có tên.
_parent: Nạp trang news.htm v ào cửa sổ cha gần nhất của trang Web
hiện hành.
_self: Nạp trang news.htm v ào cùng c ửa sổ với trang Web hiện h ành.

18_top: Nạp trang news.htm v ào cửa sổ cao nhất.
2.5.7. Một số ký tự đặc biệt trong HTML
Vì HTML dùng các ký t ự  ‘<’, ‘>’ để đánh dấu các tag, do đó để thể hiện các ký
tự đặc biệt n ày ta phải dùng các nhóm ký t ự thay thế.
Ký tự cần hiển thị Nhóm ký t ự thay thế
< &lt;
> &gt;
&  &amp;
“ &quot
Khoảng trắng &nbsp
2.5.8. Các tag dùng thi ết kế bảng
Để thiết kế một bảng biểu d ùng các tag cơ b ản sau, với các thuộc tính đi k èm
như sau:
<TABLE></TABLE > :Bắt đầu một bảng mới với các thuộc tính đi k èm
sau:
BGCOLOR : Định màu nền cho bảng
BORDER : Định độ dày/mảnh của đ ường viền.
BORDERCOLOR : Định màu cho đư ờng viền.
BORDERCOLORDARK:  Định màu sậm cho phần hắt bóng của
đường viền.
BORDERCOLORLIGHT : Định màu nhạt cho phần sáng h ơn của
đường viền.
CELLPADDING : Định khoảng  cách giữa nội dung v à đường viền.
CELLSPACING : Khoảng cách giữa các ô.
FRAME: Hiển thị đường viền ngo ài.
HEIGHT : Định chiều cao bảng.
WIDTH: Định chiều rộng bảng.
RULES: Hiển thị đường viền trong.
<TR> </TR> : Bắt đầu một h àng mới trong bảng với các thuộc  tính sau:
ALIGN/VALIGN : Canh ch ỉnh nội dung h àng theo phương ngang/d ọc
BGCOLOR : thay đổi màu nền của bảng.
<TH></TH>, <TD></TD >: Bắt đầu một đề mục mới cho bảng với các
thuộc tính sau:
ALIGN/VLIGN : Canh ch ỉnh nội dung ô theo ph ương ngang/d ọc.
BGCOLOR : thay đổi màu nền của ô.
COLSPAN : mở rộng ô qua nhiều cột.
ROWSPAN : kéo dài ô xu ống nhiều h àng.
NOWRAP : Giữ nội dung ô nằm tr ên một dòng.
WIDTH, HEIGHT : định chiều rộng, cao cho ô.
Tạo bảng
Ví dụ:Tạo một bảng đ ơn giản bằng đoạn HTML sau:
Mã HTML
<HTML>
<BODY>

19<HEAD><TITLE>tao bang</TITLE></HEAD>
<TABLE BORDER=”1”>
<TR><TH>TEN</TH>
           <TH>DIEM TB</TH>
           <TH>LOAI</TH>
<TR><TD>Nguyen Thi An</TD>
          <TD>7</TD>
            <TD>KHA</TD>
<TR><TD>Nguyen Van Tuan</TD>
           <TD>8</TD>
         <TD>Gioi</TD>
</TABLE></BODY></HTML>
kết quả hiển thị tr ên màn hình
TEN DIEM TB LOAI
Nguyen Thi An 7 KHA
Nguyen Van Tuan 8 GIOI
Dùng tag <ROWSPAN> và <COLSPAN> đ ể mở rộng một ô qua nhiều
dòng, nhi ều cột.
Ví dụ:Xét đoạn HTML sau:
Mã HTML
<HTML>
<HEAD><TITLE>BANG DIEM</TITLE></HEAD>
<BODY>
<TABLE BORDER=”1”>
<TR><TD ALIGN=”center” ROWSPAN=”3”>HOC KY I</TD>
          <TD ALIGN=”center” COLSPAN=”3”>DIEM TB</TD>
</TR>
<TR><TD>NGUYEN THI AN</TD>
          <TD>7</TD>
            <TD>KHA</TD>
<TR><TD>NGUYEN VAN TUAN</TD>
           <TD>8</ TD>
             <TD>GIOI</TD>
</TABLE></BODY></HTML>
Kết quả hiển thị tr ên trình duy ệt
DIEM TRUNG BINH
NGUYEN THI AN 7KHA HOC KY I
NGUYEN VAN TUAN 8GIOI

20Tạo khung viền cho bảng
Cú pháp; <TABLE BORDER= ”n”>
Với “n” là độ dày của đường viền (tính bằng Pixel), nếu n=0 th ì bảng không có đ ường
viền.
Thay đổi màu khung vi ền
Cú pháp: <TABLE BORDERCOLOR =”màu”>
Ví dụ:Ta muốn độ dày viền=2 và màu khung vi ền là đỏ thì
<TABLE BORDER =”2”BORDERCOLOR =”red”>
Tạo màu nền bảng
Cú pháp: < TABLE BGCOLOR= ”màu”>
Màu nền cho các ô
Cú pháp: <TH BGCOLOR= ”màu”>...</TH>hoặc
<TD BGCOLOR =”màu”>...</ TD>
Định kích th ước bảng
Cú pháp: <TABLE WIDTH= ”x”HEIGHT =”y”>...
Với “x”,”y” thứ tự l à chiều rộng v à chiều cao của bảng.
Định kích th ước cho ô
Cú pháp: <TH WIDTH= ”x”HEIGHT= ”y”>...</TH> hoặc
<TD WIDTH= ”x” HEIGHT= ”y”>...</TD>
Canh bảng ở giữa trang
Cú pháp: <TABLE ALIGN= ”direction”>...</TABLE>
Với “direction” mang 3 giá tr ị “center”, “left”, “right ” tươngứng với bảng nằm giữa,
trái, phải trên màn hình.
2.5.9. Các tag dùng t ạo Form
Formlà thành ph ần giao tiếp c ơ bản giữa người duyệt Web với ng ười tạo Web. Dữ
liệu được nhập v àoFormthông qua các h ộp điều khiển (control) nh ư Textbox,
Checkbox, Radio button, push button, dropdown listbox...
Cú pháp; <FORM>...</FORM>
Tạo TextBox (hộp nhập liệu)
TextBox dùng để chứa một d òng văn bản tuỳ ý do ng ười dùng nhập vào. Để tạo
mộtTexboxta chỉ định thuộc tính TYPE=”text” theo cú pháp sau
Cú pháp: <INPUT TYPE= ”text” NAME= ”name” VALUE= ”value” SIZE=”n”
MAXLENGTH= ”n”>
Trong đó “name” là chu ỗi ký tự nhận diện dữ liệu nhập v ào, “value” là  dữ liệu đầu ti ên
hiển thị trong Textbox và được gửi đến máy chủ khi ng ười duyệt không g õ thông tin
gì khác,SIZEđịnh kích th ước củaTextBox, MAXLENGTH giới hạn số ký tự nhập
vàoTextbox.
Khi muốn chỉ định dữ liệu nhập v àoTextbox dưới dạng mật khẩu(Các ký tự nhập
vào không đư ợc hiển thị m à thay vào đó là các d ấu ****) ta thay thuộc tính TYPE
=”password.”
Ví dụ:Tạo mộtTextbox bằng đoạn HTML sau:
Mã HTML
<HTML>
<HEAD>

21<TITLE>T ạo TextBox</TITLE>
</HEAD>
<BODY>
<FORM>
<B>Ten KH:</B>
<INPUT TYPE=”Text” NAM E=”TenKH” SIZE=20 MAXLENGTH=”255”>
<BR>
<B>Mat ma:</B>
<INPUT TYPE=”password” NAME=”matma” SIZE=8>
</FORM>
</BODY>
</HTML>
Kết quả hiển thị tr ên trình duy ệt
Tạo Texbox với  v ùng văn b ản chứa nhiều d òng
Cú pháp: <TEXTTAREA NAME= ”name” ROWS= ”n” COLS= ”m”
WRAP></TEXTAREA>
Trong đó “name” là chu ỗi ký tự nhận diện dữ liệu nhập v à, “n” là chi ều cao của v ùng
văn bản tính bằng d òng (mặc định n=4), “m” l à chiều rộng của v ùng văn b ản tính bằng
ký tự (giá trị mặc định m=40). D ùng thuộc tínhWRAPđể xuống d òng khi đụng lề.
Tạo nút Radio button (nút chọn Radio)
Radio là loại nút chỉ đ ược chọn một trong số đó, không thể chọn lựa hai nút c ùng
lúc. Để tạo một nút chọn Radiota chỉ định thuộc tính TYPE=”radio” như cú pháp
sau:
Cú pháp: <INPUT TYPE= ”radio” NAME =”name” VALUE= ”data” CHECKED>
Trong đó “name” v ừa nhận diện dữ liệu vừa li ên kết các nút Radiotrong một nhóm lại
với nhau, các nút Radiotrong cùng m ột nhóm th ì có thuộc tínhNAMEgiống nhau,
đảm bảo một thời điểm chỉ có một nút đ ược chọn. “Data” l à văn bản gửiđến máy chủ
khi một nútRadiođược chọn.CHECKED nút đó đư ợc chọn.
Tạo ô chọn (checkbox)
Khác với nútRadio, Checkbox cho người chọn nhiều nút trong c ùng một nhóm.
Giống như nútRadio, Checkbox liên kết với nhau thông qua thuộc tính NAME. Ta
chỉ định thuộ c tínhTYPE=”checkbox” khi t ạo nút chọn Checkbox
Cú pháp: <INPUT TYPE= ”checkbox”  NAME= ”set” VALUE =”value”
CHECKED>
Trong đó ch ức năng của các thuộc tính giống nh ư chức năng của nút chọn Radio.
Ví dụ:
Mã HTML
<HTML>
<HEAD><TITLE>T ạo TextBox</TITLE></HEAD>
<BODY>
<FORM>Trinh do:
<INPUT TYPE=”radio” NAME=”nn” VALUE=”R1” CHECKED>Dai hoc
<INPUT TYPE=”radio” NAME=”nn” VALUE=”R2” >Cao dang

22<INPUT TYPE=”radio” NAME=”nn” VALUE=”R3”>Trung cap
<INPUT TYPE=”checkbox” NAME=”cc” VALUE=”T1” CHECKED>18 -22<br>
<INPUT TYPE= ”checkbox” NAME=”cc” VALUE=”T2”>23 -30<br>
<INPUT TYPE=”checkbox” NAME=”cc” VALUE=”T3”>30 -40<br>
</FORM>
</BODY>
</HTML>
Kết quả hiển thị tr ên trình duy ệt Web
Tạo nút Push Button (nút nhấn)
Để tạo nút nhấn ta chỉ định thuộc tính TYPE=”button”
Cú pháp: <INPUT TYPE =”button” VALUE=”nhãn”>
Để tạo nút nhấn m à khi ngư ời dùng nhấn vào, dữ liệu của các điều khiển khác đều
được đặt về giá trị mặc định lúc khởi tạo, ta chỉ định thuộc tính TYPE=”reset” trong
tag <INPUT>.
Tạo nút nhấn để kết thúc việc nhập liệu của một Form, ta chỉ định thuộc tính
TYPE=”submit” trong tag < INPUT>.
Ví dụ:
Mã HTML
<HTML>
<HEAD><TITLE>T ạo TextBox</TI TLE></HEAD>
<BODY>
<FORM>
<TEXTAREA NAME=”text” ROWS=”4” COLS=”20”>Lop chuyen vien cong nghe
thong tin</TEXTAREA><BR>
<INPUT TYPE=”submit” NAME=”btSubmit” VALUE=”Submit”>&nbsp&nbsp
<INPUT TYPE=”reset” NAME=”btReset” VALUE=”Reset”>
</FORM>
</BODY>
</HTML>
Kết quả hiển thị tr ên màn hình trình duy ệt Web
Tạo Dropdown Listbox (danh sách)
Dropdown Listbox là danh sách ch ứa nhiều mục.
Để tạo danh sách tr ên ta dùng tag < SELECT >, mỗi mục của Dropdown Listbox
sẽ được định nghĩa bằng tag < OPTION >. Để đặt một mục  chọn trong Dropdown
Listbox là mặc định ta th êm vào thu ộc tínhSELECTED  trong tag < OPTION >
Ví dụ:
Mã HTML
<HTML>
<HEAD><TITLE>T ạo list</TITLE></HEAD>
<FORM>
<SELECT NAME=”MAU”>

23<OPTION VALUE= “vang” SELECTED>Mau vang</OPTION>
<OPTION VALUE= “xanh” SELEC TED>Mau do</OPTION>
<OPTION VALUE= “do” SELECTED>Mau xanh</OPTION>
</SELECT>
</FORM>
</HTML>
Kết quả hiển thị tr ên trình duy ệt Web
Để tạo một ListBox cho phép hiển thị, chọn nhiều mục ta d ùng thêm thu ộc tính
MULTIPLE  vớiSIZE=”n”, n là s ố mục <SELECT  NAME=”MAU” MULTIPLE
SIZE=”2”>
Khi đó kết quả trên trình duy ệt là:
2.6. Các tag t ạo Frame (khung)
Framelà thành ph ần cơ bản của trang Web, một trang Web có thể đ ược chia th ành
nhiềuframe, mỗiframe sẽ chứa một trang Web ri êng.
2.6.1. Tạo Frame có dạng h àng
Để chia một trang Web th ành nhiều Frame ta d ùng tag <FRAMESET> đ ặt ngay
sau tag </HEAD>.
Cú pháp:
<FRAMESET ROWS= ”a,*,b”>
<FRAME NAME =”đặt tên frame”  SRC=”tên tập tin sẽ hiển thị ở Frame
này”>
</FRAMESET>
Trong đó:
a: Chiều cao của Frame đầu tiên
*: Chiều cao của Frame thứ hai là khoảng trống c òn lại.
b: Chiều  cao của Frame thứ 3
Nếu ta sử dụng nhiều dấu “*” th ì không gian còn l ại của cửa sổ sẽ đ ược chia đều cho
các Frame có d ấu “*”.
Ví dụ:
Mã HTML
<HTML>
<HEAD><TITLE>T ạo Frame</TITLE></HEAD>
<FRAMESET ROWS=”100,*,*”>
<FRAME  NAME=”tren” SRC=”khungtren.htm”>
<FRAME  NAME=”tren” SRC=”khunggiua.htm”>
<FRAME  NAME=”tren” SRC=”khungcuoi.htm”>
</FRAMESET>
</HTML>
kết quả hiển thị tr ên màn hình

24Thêm thanh cu ộn cho Frame ta d ùng thuộc tínhSCROLL ING = yes/no  trong tag
FRAME tươngứng đểẩn/hiện thanh cu ộn. Nếu không có thuộc tính SCROLLING
thì thanh cu ộn sẽ xuất hiện khi cần thiết.
Thêm thu ộc tínhNORESIZE  vào tag FRAME cho Frame tương ứng để không
cho người dùng thay đ ổi kích th ước của Frame đó.
Thêm thu ộc tínhFRAMEBORDER =”yes/no/0” vào tag < FRAME> để hiện/ẩn
khung viền cho Frame. Chọn “yes/0” cho tr ình duyệt Internet Explorer v à “yes/no”
cho trình duy ệt Netscape.
Thêm thu ộc tínhBorder vào tag < FRAME> để định độ d ày mỏng viền của Frame.
ThêmFramespacing =”n” vào tag < FRAME> để định khoảng cách từ viền khung
tới nội dung trong khung.
2.6.2. Tạo Frame có dạng cột
Cú pháp: <FRAMESET COLS= ”a,*,b”>
<FRAME NAME =”đặt tên frame” SRC=”tên tập tin sẽ đ ược hiển thị ở
Frame này ” >
</FRAMESET>
ý nghĩa của các thuộc tính t ương tự tạo Frame có dạng h àng.
2.6.3. Kết hợp tạo Frame vừa dạng h àng vừa có dạng cột
Trong một trang Web việc tạo Frame th ường được kết hợp giữa tạo Frame có dạng
hàng và Frame có d ạng cột.
Ví dụ:Trong ví d ụ này ta chia trang Web thà nh 4 Frame:1 Frame trên, 1 Frame trái, 1
phải và 1 Frame dư ới.
Mã HTML
<HTML>
<HEAD><TITLE>Danh sach cac mon hoc</TITLE></HEAD>
<FRAMESET ROWS=”60,*,40”>
<FRAME  NAME=”tren” SRC=”tren.htm”>
<FRAMESET COLS=”150,*”>
<FRAME  NAME=”trai” SRC=”trai.htm”>
<FRAME  NAME=”phai” SRC=”phai.htm”>
</FRAMESET>
<FRAME  NAME=”duoi” SRC=”duoi.htm”>
</FRAMESET>
</HTML>
Kết quả hiển thị tr ên trình duy ệt
2.7. Các hi ệu ứng Dynamic HTML (DHTML)
2.7.1. Tạo chuỗi ký tự chuyển động
Cú pháp: <MARQUEE></MARQUEE>
Các thuộc tính:
BEHAVIOR =type, type có th ể là: scroll đ ể chuỗi ký tự bắt đầu từ một
bên màn hình và bi ến mất ở b ên kia, slide đ ể chuỗi bắt đầu tại một b ên

25màn hình và d ừng lại ở b ên kia, alternate đ ể chuỗi bắt đầu b ên này màn
hình và chuy ển động ng ược lại khi đến b ên kia.
DIRECTION =”left/right”: đ ịnh hướng bắt đầu chạy.
LOOP=n: số lần chuyển động ngang qua m àn hình, n ếuLOOP=infinite
thì chuỗi sẽ xuất hiện li ên tục.
VSCROLLAMOUNT= n : tốc độ chuyển động.
SCROLLDELAY= n: thời gian ngừng sau một v òng chạy.
Nếu không có các t huộc tính trên thì chuy ển động lặp đi lặp lại từ lề phải sang lề trái
với tốc độ=6 (pixel) v à thời gian dừng=90 giây.
Ví dụ:Ta xét đo ạn chương trình sau:
Mã HTML
<HTML>
<HEAD>
<TITLE>Chuoi ky tu chay
</TITLE>
</HEAD>
<p><font color=”red” FACE=”VNi -times” SIZE=”6”></p>
<MARQUEE BEHAVIOR=scroll DIRECTION=”left” LOOP=infinite
SCROLLDELAY=”60” BGCOLOR=”turquoise”>L ớp chuyên viên công ngh ệ thông
tin
</MARQUEE>
</HTML>
Kết quả hiển thị tr ên trình duy ệt
2.7.2. Thay đ ổi hình dạng chuột khi đi qua một ô tron g bảng
Cú pháp: <TD STYLE= ”cursor: thu ộc tính của cursor” >
Các thuộc tính và các dạng cursor t ươngứng.
Auto Hand Move Text Wait Help Default Crosshair
Beam_r.cur Harrow.cur Move_im.cur Beam_r.cur Busy_m.cur Help_l.cur Larrow.cur Lcross.cur
Ví dụ:Đoạn chương trình sau mô ph ỏng các dạng Cursor
<HTML>
<HEAD><TITLE>Cursor</TIT LE></HEAD>
<TABLE BORDER=”1’>
<TR>
           <TD STYLE=”cursor:auto”>auto
            <TD STYLE=”cursor:hand”>hand
            <TD STYLE=”cursor:move”>move
             <TD STYLE=”cursor:text”>text
            <TD STYLE=”cursor:wait”>wait
            <TD STYLE=”cursor:help”>help
            <TD STYLE=”cursor:default”>default

26            <TD STYLE=”cursor:crosshair”>crosshair
</TABLE>
</HTML>
Bài tập chương 2
Bài 1: Thiết kế trang chủ ch ương trìnhđào tạo chuyên viên ( http://cv.citd.edu.vn ),
trang gồm 3 Frame nh ư hình sau, toàn b ộ trang sử dụng font chữ l à “Times New
Roman”. Frame trên cùng g ồm có một h ình bêntrái, bên ph ải là các dòng ch ữ chạy.
Frame bên trái là các m ục cần đưa tin. Frame gi ữa dùng để hiển thị nội dung tin.
Bài 2: Thiết kế trang Web Giáo dục
(http://www.saigonnet.vn/giaod uc/thong_tin_tuyen_sinh.htm )
Bài 3:Thiết kế trang Web th ường truy cập có địa chỉ sau:
-http://citd.vn.edu.vn  (trang ch ủ trung tâm tin học TP.HCM)
-http://www.vnexpress.net
-http://www.saigonnet.vn
-http://www.vnn.vn
-http://yahoo.com
-http://www.hcmuns.edu.vn
-http://www.google.com
Ghi chú:
-Để xem mãHTMLcủa trang Web hiện h ành ta vào Menu sau đó
chọn View->Source.
-Để lưu trang Web hi ện hành ta vào menu sau đó ch ọn File->Save
as
Chương 3 :GIớI THIệU NGÔN NGữ SCRIPT
VBSCRIPT Và JAVASCRIPT
1.Giới thiệu ngôn ngữ vbscript v à JavaScript
VBscript vàJavaScript là ngôn ng ữ lập ra để chạy đ ược trên trình duy ệt, các đoạn
chương tr ình viết bằng ngôn ngữ n ày được nhúng v ào các trang HTML. Các đo ạn
chương tr ình này có kh ả năng:
Được thực thi khi một sự kiện n ào đó trên trang Web x ảy ra như:
mouseclicked , mouseover,...
Xử lý các th ành phần trên trang Web như: thay đ ổi màu chữ, font
chữ, thay đổi ảnh,...
Cú pháp c ủaVBScript  gần giống với cú pháp ngôn ngữ lập tr ìnhVisualBasic
và được Microsoft phát triển, trong khi cú pháp của JavaScript gần giống với cú  pháp
của ngôn ngữ lập tr ình C vàđược NetsCape phát triển.
VBScript không phân bi ệt chữ hoa v à chữ thường trong khi JavaScript th ì lại
phân biệt chữ hoa v à chữ thường.
JavaScript được hỗ trợ tr ên hầu hết các tr ình duyệt, cònVBScript chỉ được hỗ
trợ tốt nhất ở trình duyệt Internet Explorer.
Cũng giống nh ư các ngôn ng ữ lập trình khác các ki ểu dữ liệu thông dụng đ ược
dùng VBScript và JavaScript là: ki ểu số, kiểu chuỗi, kiểu luận lý,...Tuy nhi ên cách

27định nghĩa các kiểu dữ liệu giữa VBScript  vàJavaScript có sự khác nhau. Cách khai
báo các hàm c ũng khác nhau. Cách sử dụng các h àm thư vi ện có sẵn cũng khác nhau.
2. ngôn ng ữ vbscript
2.1. Chú thích m ột dòng lệnh
Chú thích trong VBScript tương tự nhưVisual Basic bắt đầu bằng ký tự nháy
đơn (‘). D ấu chú thíc h chỉ có tác dụng tr ên một dòng. Dấu chú thích l àm cho các dòng
lệnh rõ ràng và d ễ hiểu đối với ng ười thiết kế ch ương trình. Khi th ực thi, trình biên
dịch bỏ qua d òng ghi chú này.
2.2. Cách khai báo bi ến, hằng, mảng
2.2.1. Khai báo bi ến
Dùng từ khóaDimđể khai báo biến, biến trong ngôn ngữ VBScript không cần
chỉ định kiểu nh ư trong ngôn ng ữ lập trình cấu trúc. Các biến không cấu trúc đ ược
xem là biến vô hướng (variant) có thể chứa và tự chuyển đổi hầu hết các kiểu dữ liệu.
Cú pháp: Dim tên_biến1, tên_biến2,tên_biến3,...
Các biến được cách nhau bởi dấu phẩy “,”.
Tuy nhiên trong VBScript không nh ất thiết phải khai báo biến tr ước khi sử
dụng. Để y êu cầu các biến phải đ ược khai báo tr ước khi sử dụng ta d ùng lệnh “Option
Explicit” đặt trước lệnh đầu ti ên củađoạn chương trình.
Ví dụ: Dima
a = 3
Ghi chú:
Biến không phân biệt chữ hoa/th ường
Chiều dài tên biến không v ượt quá 255 ký tự.
Tên biến phải bắt đầu bằng 1 ký tự chữ cái v à biến không phép chứa dấu
chấm “.”
2.2.2. Khai báo h ằng
Hằng được định nghĩa bằ ng từ khoáConst.Chỉ có thể sử dụng giá trị của hằng
chứ không thể thay đổi nội dung hằng.
Ví dụ: Const ten = “Nguyen Van Tuan”
2.2.3. Khai báo m ảng
Mảng một chiều
DimTen_mang  (kích thư ớc của mảng)
Số phần tử tối đa của mảng tr ên= Kích thư ớc của mảng +1.
Chỉ số của phần tử đầu ti ên của mảng bằng 0, để truy xuất đến phần tử có chỉ số
“i” ta dùng Ten_mang (i);.
Ví dụ: Dim A( 20);thì mảngAcó thể chứa tối đa 21 phần tử
Mảng 2 chiều
DimTen_mang (dòng, cột)
Chỉ số của phần tử ở d òngđầu tiên và cột đầu tiên là (0,0).
Để truy xuất phần đến phần tử có chỉ số d òng i, chỉ số cột j ta d ùngB(i,j).
Ví dụ: Dim B (5,10); M ảngBcó thể chứa 6 d òng và 11 c ột.
TrongVBScript ta muốn khai báo một mảng động th ì khi khai báo m ảng ta
không định rõ kích thước cho mảng. Tức kí ch thước của mảng có thể thay đổi trong
quá trình thao tác, dùng hàm ReDimđể thay đổi kích th ước của mảng động.
TrongVBScript có thể khai báo một mảng có 60 chiều.

282.3. Các ki ểu dữ liệu
TrongVBScript  chỉ có một kiểu dữ liệu duy nhất l àVariant. Đây là kiểu dữ
liệu có thể chứa các loại dữ liệu từ kiểu chuỗi, kiểu số cho đến các loại dữ liệu có cấu
trúc như ki ểu bản ghi (record). Kiểu dữ liệu n ày cũng là kiểu dữ liệu trả về của các
hàm và các th ủ tục được viết bằng ngôn ngữ VBScript .
Tuỳ theo ngữ cảnh s ử dụng m à một biếnVariant mang giá tr ị là kiểu số, kiểu
chuỗi (hay bất kỳ kiểu dữ liệu n ào khác).
Ví dụ:Trong biểu thức a=b+1997, th ì biến a và biến b mang kiểu dữ liệu l à kiểu số.
Trong biểu thức a=b+”1997” th ì biến a và biến  b có kiểu dữ liệu l à kiểuchuỗi.
Các kiểu dữ liệu m à một biếnVariant có thể lưu trữ.
Các kiểu dữ liệu ý nghĩa
Boolean kiểu luận lý True hoặc False
Byte Số nguyên có giá tr ị từ 0 đến 255
Interger Số nguyên có giá tr ị từ-32768 đến 32768
Currency Từ -922,337,203,685,477,5808 đ ến
922,337,203,685,477,5807
Long Số nguyên từ-2,147,483,648 đ ến 2,147,483,647
Single Số thực, có giá trị từ 3.402823E38 đến 1.401298E -45 cho
các số âm, từ 1.401298E -45 đến 3.402823E38 cho số d ương
Double Số thực, có giá trị từ 1.79769313486232E308 đến
4.94065645841247E -324 cho các s ố âm,
4.94065645841247E -324 đến 1.79769313486232E308
Date(time) chứa giá trị ng ày từ 01.01.100 đến 31.12.9999
String Chuỗi ký tự có thể chứa 2 tỉ ký tự
Empty dữ liệu chưa được khởi tạo
Null Null
Object Chứa đối tượngtrênFormnhư hộp văn bản, nh ãn, nút
nhấn,...
Error chứa mã lỗi
Để chuyển đổi dữ liệu n ày sang ki ểu dữ liệu khác ta d ùng các hàm thư vi ện
Cbyte (kiểu byte), Cdate (kiểu ngày),CInt (integer), CStr (string), SBool
(bool),CDbl (double), CLng (long),CSng (Single)
Muốn biết kiểu dữ liệu m à một biến có kiểu Variantđang lưu tr ữ ta dùng hàm
thư việnVarType.
2.4. Các toán t ử cơ sở
Toán tử gán (=)
Tên_biến = Biểu thức.
Với các biến có kiểu dữ liệu tổng quát, để gán giá trị cho biến chúng ta d ùng, ta
phải dùng lệnhSet như sau:
Set tên_bi ến = Biểu thức
Toán tử tính toán
+(cộng),-(trừ), *(nhân), \(chia lấy phần nguy ên), /(chia làm tròn), ^(lu ỹ thừa), mod
(chia lấy phần d ư)

29Toán tử nối chuỗi
Dùng &: Ví dụ: S = “Dai” & “ ” & “hoc”
Dùng + : Ví dụ: S = “Dai” + “ ”  + “hoc”
Toán tử so sánh
=(bằng), > (lớn h ơn), >= (l ớn hơn hay bằng), < (nhỏ h ơn), <= (nh ỏ hơn hay bằng),
<> (khác).
Kết quả của một biểu thức so sánh sẽ thuộc về kiểu lý luận (True/false), khi cần nối
các biểu thức so sánh với nhau ta d ùng toán t ử luận lýAnd, Or
2.5. Các l ệnh xử lý điều kiện rẽ nhánh
Bạn có thể sử dụng các lệnh rẽ nhánh if...then, if...then...else  hoặcSelect case
để ra điều kiện rẽ nhánh dựa tr ên các biểu thức so sánh.
2.5.1. Cấu trúc If...Then
Dùng để xử lý lệnh khi biểu thức so sánh  củaIf trả về giá trị True
Ví dụ:
Dim myDate
myDate = #2/12/2000#
if myDate < Now Then myDate = Now
end if
2.5.2. Cấu trúc If...Then...Else
Mở rộng hơn cấu trúcIf...Else, khi biểu thức so sánh của If trả về giá trị True
thì khối lệnh sau mệnh đề Thensẽ được thực hiện. Ng ược lại biểu thức so sánh của If
trả về giá trị False thì khối lệnh sau Else sẽ được thực hiện.
Ví dụ:
Dim myValue
myValue = 13
if myValue mod 2 = 0 Then
document.Write(myValue)
           document.Write(“la so chan”)
else
        document.Write(myValue)
           document.Write(“la so le”)
end if
2.5.3. Cấu trúc Select Case
Cấu trúcSelect Case  cho phép l ựa chọn nhiều tr ường hợp để ra quyết định thực
thi. Theo cú pháp sau:
Select case  <tên biến>
Case <giá trị 1>
Khối lệnh 1
Case <giá trị 2>
Khối lệnh 2
...
Case Else
Khối lệnh i

30End Select
Ví dụ:
<HTML>
<HEAD><TITLE>Select case</TITLE></HEAD>
<BODY>
<SCRIPT LANGUAGE=”VBScript”>
Dim Thang
Thang = 13
document.Write(“Thang”)
document.Write(Thang)
SELECT C ASE Thang
CASE 2: document.Write(“co 28 ngay”)
CASE 1,3,5,7,8,10,12 : document.Write(“co 31 ngay”)
CASE 2: document.Write(“co 28 ngay”)
CASE 4,6,9,11 : document.Write(“co 30 ngay”)
CASE ELSE document.Write(“khong hop le”)
END SELECT
</SCRIPT></BODY></HTML>
Mệnh đề Case Else trong cú pháp Select case d ùng trong trư ờng hợp tất cả các
phép so kh ớp của mệnh đề Case không xảy ra.
2.6. Cấu trúc lặp
Tương tự các ngôn ngữ lập tr ình khác, VBScript  cung cấp các lệnh lặp dựa tr ên
điều kiện. D ùng cấu trúcExit for, Exit  do, Exit While để thoát khỏi cấu trúc lặp
tươngứng.
2.6.1. Cấu trúc Do...Loop
Cấu trúcDo...Loop  lặp trong khi điều kiện kiểm tra của Loop cònđúng. Có 4
cấu trúc lặp theo cú pháp sau:
Do While  <biểu thức điều kiện>
Khối lệnh
Loop
Do
Khối lệnh
Loop While <biểu thức điều kiện>
Do
Khối lệnh
Loop Until  <biểu thức điều kiện>
Ví dụ:Tính giá tr ị N!
Dim N, i, S
N=3
S=1
i=1
DO WHILE (i<=n)
S=S*i
i=i+1

31LOOP
2.6.2. Cấu trúc While...Wend
Lặp trong khi điều kiện kiểm tra của While cònđúng. Theo cú pháp sau:
While <biểu thức điều kiện>
Khối lệnh
Wend
Ví dụ:Tính tổng S = 1+2+3+5+...+N
Dim i,S,N
N=5
i=1
S=0
WHILE (i<=N)
S=S+i
i=i+2
Wend
2.6.3. Cấu trúc For...Next
Cấu trúcFor...Next lặp với số lần lặp xác định, cấu trúc n ày có 2 dạng sau:
For <biến chạy = chỉ số đầu> To <chỉ số cuối>
Khối lệnh
Next
For <biến = chỉ số đầu> To <chỉ số cuối> Step <b ước nhảy>
Khối lệnh
Next
Ví dụ:Tính tổng S = 1+2+3+4+...+N
Dim d
‘Tao doi tuong  DictionarySet
d = CreateOject(“Scripting.Dictionary”)
‘ Luu cac phan tu vao tap hop
d.Add “0”, ”Athens”
d.Add “1”, “Belgrade”
d.Add “2”, “Cairo”
‘ Duyet va in cac phan tu trong tap hop
For Each I in d
           document.Write(D.Item(I))
        Next
2.6.4. Cấu trúc For each...Next
Cấu trúcFor each...Next lặp với mỗi phầ n tử trong tập
Ví dụ:
Dim d
‘Tạo doi tuong DictionarySet
d=CreateObject(“Scripting.Dictionary”)
‘Luu cac phan tu vao tap hop
d.Add “0’,”Athens”

32d.Add ”1”, “Belgrade”
d.Add “2”, “Cairo”
‘ Duyet va in cac phan tu trong tap hop
For each i in d
document.Write (D.Item(I))
2.7. Khai báo hàm và th ủ tục
2.7.1. Khai báo hàm
Function Tên_hàm (các tham s ố)
Khối lệnh
End Function
Ví dụ:Xây dựng hàm tính di ện tích hình tròn khi bi ết bán kính
Function DienTich(R)
           Dim S
            S = 3.14*R*R
     DienTich=S
             document.Write(S)
End Function
2.7.2. Khai báo th ủ tục
SubTên_thủ_tục(các tham số)
khối lệnh
End Sub
Ví dụ:Xây dựng thủ tục gọi sử dụng h àm DienTich đ ã viết trên
Sub SuDung()
       DienTich(5)
End Sub

33Chương3. Ngôn ngữ JAVASCRIPT
3.1. Chú thích m ột hay nhiều d òng lệnh
Dòng lệnh được kết thúc bằng dấu chấm phẩy “;” ở cuối d òng. Tập hợp các
dòng lệnh nằm trong hai dấu ngoặc đ ơn {} gọi là tập lệnh.
Muốn chú thích một d òng lệnh ta dùng dấu “//” đặt tr ước dòng lệnh muốn chú
thích. Mu ốn chú thích nhiều d òng lệnh thì tađặt các dòng lệnh cần chú thích giữa hai
dấu “/*” và “*/”.
3.2. Cách khai báo bi ến, mảng
3.2.1 Cách khai báo bi ến
Dùng từ khoávarđể khai báo biến. Biến trong JavaScript không cần định r õ
kiểu dữ liệu của biến lúc khai báo. Tuy nhi ên, khi gán giá tr ị cho biến, JavaScript
phân biệt kiểu của các giá trị m à bạn gán. Trong JavaScript bắt buộc phải khai báo
biến trước khi sử dụng.
var tên_biến1= trị1,tên_biến2=trị2,...;
Chú ý:
+ Biến có phân biệt chữ hoa/thường.
+ Biến phải bắt đầu bằng ký tự chữ cái.
+ Biến không cho phép có khoảng trắng, không cho phép có dấu ghạch ngang.
3.2.2. Khai báo m ảng
Mảng một chiều
var A = new Array(10)
MảngAnói trên có 10 ph ần tử, và chỉ số phần tử đầu ti ên của mảng bắ t đầu 0,
muốn truy xuất đến phần tử có chỉ số i, ta d ùngA[i].
Mảng 2 chiều
Khai báo Alà mảng 2 chiều có 10 d òng, 20 cột.
var A =new Array(10),i = 0;
for (i = 0; i<10; i++)
A[i] =newArray(20);
Để truy xuất đến phần tử có chỉ số d òng i, chỉ số cột j ta  dùng A[i][j].
3.3. Các ki ểu dữ liệu trong JavaScript
Trong JavaScript thư ờng sử dụng các kiểu dữ liệu sau:
3.3.1. Dữ liệu kiểu số
Kiểu số có hai loại thông dụng l à kiểu số nguy ên và kiểu số thực.
Ví dụ: var a = 10, b = 100, ten = “Nguyen Van Ba”
Các phép toán trên ki ểu số
+ , += ,- ,- = , * , *= , / , /= , %(chia l ấy phần d ư) , ++ (phép tăng m ột đơn
vị),-- (phép giảm một đ ơn vị).
Các phép so sánh: < (nh ỏ), <= (nhỏ h ơn hay bằng), > (lớn), >= (lớn h ơn hay
bằng), = = (bằng), != (khác).
3.3.2. Kiểu ký tự
Các ký tự được nằm giữa 2 nháy đ ơn. Ngoài ra c òn có các ký t ự đặc biệt sau
đây:

34Ký tự ý nghĩa
\n Xuống dòng mới
\t Ký tự tab
\r Về đầu dòng
\b Ký tự khoảng trắng
Ví dụ:  var ch= “A”, c= “B”;
Các phép toán trên ký t ự
+, += (cộng 2 ký tự)
Phép toán so  sánh : >, >=, <, <= ,= =, !=
3.3.3. Kiểu chuỗi
Chuỗi là tập hợp các ký tự.
Một hằng chuỗi đ ược nằm giữa hai dấu nháy đôi “
Ví dụ: var hoten= “Le Van Tam”;
Các phép toán trên chu ỗi
Phép nối chuỗi: +, +=
Phép so sánh: <, <=, >, >=, = =, !=
3.3.4. Kiểu luận lý
Một biến có kiểu luận lý tồn tại 1 trong 2 trạng thái: true,false.
Ví dụ: var t = true, f = false;
Các phép toán trên ki ểu luận lý
Phép so sánh: <, <=, >, >=, = =, !=
Phép logic: && (và), || (ho ặc), ! (phủ định).
3.3.5. Kiểu ngày
Mô tả thông tin về: Ngày, Tháng, Năm, gi ờ, phút, giây của hệ thống.
Ví dụ: var now = new Date();
Các hàm l ấy ngày giờ trong đối t ượng Date nh ư sau:
Tên hàm Mô tả
GetDate() Ngày: 1..31
GetDay() Ngày trong tu ần: 0 (chủ nhật), 1 (thứ 2)
GetHours Giờ: 0..23
GetMinutes Phút:0..59
GetMonth Tháng: 0 (tháng 1)...11 (tháng 12)
GetSeconds Giây:0..59
GetTime Giờ theo mili giây
GetYear Năm
Ví dụ:Ví dụ lấy ngày hệ thống và hiển thị lên trình duy ệt
Mã HTML
<HTML>
<HEAD>
<TITLE>Outputting Text</TITLE>
</HEAD>
<BODY>

35<SCRIPT LAN GUAGE=”javascript”>
<!—
var now = new Date();
var ngay = “”;
ngay=”hom nay la ngay”+ now.getDate();
ngay+=”thang”+ now.getMonth();
ngay+=”nam”+ now.getYear();
document.Write(ngay);
-->
</SCRIPT>
</BODY>
</HTML>
Ngoài các ki ểu dữ liệu thông dụng tr ên còn có các ki ểu dữ liệu object, null.
3.4. Các l ệnh xử lý điều kiện rẽ nhánh
3.4.1. Cấu trúc if
Dùng để xử lý lệnh khi biểu thức của if trả về giá trị true
if (biểu thức điều kiện)
Khối lệnh;
3.4.2. Cấu trúc if...else
if (biểu thức điều kiện )
Khối lệnh 1;
else
Khối lệnh 2;
Ví dụ:
if(a%2==0)
document.Write(a, “là s ố chẵn”);
else
document.Write(a, “là s ố lẻ”);
3.4.3. Cấu trúc switch...case
Cho phép th ực hiện nhiều lựa chọn để ra quyết định thực thi.
switch(bi ến)
{
case giá trị 1:
Khối lệnh 1;
break;
case giá trị 2:
Khối lệnh 2;
break;
...
default:
Khối lệnh n;
break;
}
3.5. Cấu trúc lặp

36Dùng câu l ệnhbreak để thoát khỏi cấu trúc lặp khi cần.
3.5.1. Cấu trúc for
for(biểu thức khởi tạo; biểu thức điều kiện; biểu thức  thay đổi)
Khối lệnh;
Khối lệnh được thực hiện khi biểu thức điều kiện  cònđúng.
Ví dụ:for(i=0;i<10;i++)
s+=2*i;
3.5.2. Cấu trúc While
While(biểu thức điều kiện)
Khối lệnh;
Khối lệnh được thực hiện khi biểu thức trong While cònđúng.
Ví dụ:i=0;
While(i<20)
{
s+=i;
i++;
}
3.5.3. Cấu trúc do...While
do
Khối lệnh;
While(biểu thức điều kiện);
Khối lệnh được thực hiện tr ước sau đó kiểm tra biểu thức điều kiện nếu cònđúng thì
quay lên th ực hiện khối lệnh.
Ví dụ:
i=0;
do
{
s+=i;
i++;
}While(i<20);
3.6. Khai báo hàm
Dùng từ khoáfunction để khai báo h àm. Muốn trả về giá trị của h àm ta dùng t ừ
khoáreturn.
function tên_hàm( danh sách các tham s ố)
{
Khối lệnh;
}
Ví dụ:
function Add(x,y)
{
return(x+y);
}
var t;
document. Write(t)

37Chương4. sử dụng vbscript v à javascript trong
trang web
4.1. Chèn đo ạn VBScript/JavaScript  v ào trang HTML
Các đoạn Script nằm giữa tag < Script> và </Script>, trong đó ghi r õ ngôn ng ữ
sử dụng để viết m ã chương trình.Các đoạnScript được đặt giữ a cặp tag<HEAD> và
</HEAD> hay đặt giữa cặp tag <BODY>  Và</BODY>. Tuy nhiên, n ếu đặt giữa tag
<HEAD> thì cácđoạn mã nàyđãđược đọc và thông d ịch trước các thành phần nằm
trong tag <BODY>.
Dùng tag <! -- và--> để báo cho tr ình duyệt không hiển thị các đoạn mã bên
trong nếu nó không hiểu tag <SCRIPT> .
Ví dụ:Trong ví d ụ sau ta viết một h àm tính di ện tích h ình vuông (vi ết bằng
VBScript), m ột thủ tục tính diện tích h ình chữ nhật (viết bằng JavaSript).
Mã HTML
<HTML>
<HEAD><TITLE>Tinh dien tich </TITLE>
<SCRIPT LANGUAGE=”VBSCRIPT”>
<!--
Function DienTichHinhVuong(a)
               dim tich
               tich=a*a
               DienTichHinhVuong=tich
End Function
Dim dt
          dt=DienTichHinhVuong(5)
          document.Write(“Dien tich hinh vuong=”)
       document.Write(dt)
-->
</SCRIPT>
</HEAD>
<BODY><BR>
<SCRIPT LANGUAGE=”JAVASCRIPT”>
<!—
       Function DienTichTron(R)
       {
            var dt;
            dt=3.14*R*R;
             return dt;
       }
var D;
D=DienTichTron(5);
document.Write(“ Dien tich hinh tron=”,D);
-->

38</SCRIPT>
</BODY></HTML>
kết quả hiển thị tr ên trình duy ệt
Dien tich hinh vuong=25
Dien tich hinh tron=78.5
4.2. Xuất/nhập dữ liệu trong VBScript v à JavaScript
4.2.1. Xu ất dữ liệu
Đối tượngdocument  là đối tượng đại diện  cho trang Web hi ện hành.Cònđối
tượng window thìđại diện cho cửa sổ m à trong đó trang web hi ển thị.
Để xuất dữ liệu ra trang Web ta d ùng hàm writevà hàm writelncủa đối tượng
document theo cú pháp.
document.write (“chuỗi cần hiển thị”)
document.write ln(“chuỗi cần hiển thị”);
Chúng ta có th ể dùng các tag HTML đ ể xuất dữ liệu trong các đoạn Script
Ví dụ: document.write (“<H2>Hello Script </H2>”)
Đểwriteln (xuất dữ liệu v à về đầu dòng mới)có tác dụng ta phải d ùng kèm theo tag
<PRE>và</PRE> đứng trước và sau đo ạnScript.
Ví dụ:
<BODY>
<PRE>
<SCRIPT LANGUAGE=”vbscript” >
<!—
document.writeln(“<H2>Hello JavaScript</H2>”)
           document.write(“<H3>Hello VBScript</H3>”)
-->
</SCRIPT>
</PRE>
</BODY>
Để hiển thị các hộp thông báo ta d ùng hàm confirm và hàmalert của đối tượng
window. Theo cú pháp sau:
window.alert (“chuỗi cần hiển thị”)
window.confirm (“chuỗi cần hiển thị”)
Đối vớiVBScript để hiển thị hộp thông báo ta d ùng hàm MsgBox(“chu ỗi cần thông
báo”);
4.2.2. Nh ập dữ liệu
Dùng hàm promt của đối tượng window để nhập giá trị cho biến theo cấu trúc
sau:
Biến =window.promt (“chuỗi thông báo”,”trị mặc nhi ên”)
Biến =InputBox (“chuỗi thông báo”)
5. xử lý các sự kiện khi t ương tác v ới các thành phần trên trang web
Sự kiện đ ược phát sinh khi ta kích hoạ t (onClick, onMouseOver,
onMouseOut ...) các thành ph ần trên trang web như các nút đi ều khiển Button,
hyperlink, ListBox...

39Để xử lý các sự kiện n ày ta tạohàm xử lý sự kiện  và gánhàm xử lý sự kiện  đó
chotên sự kiện
<tên sự kiện>=<h àm xử lý sự kiện>
Ví dụ 1:Tạo 2 nút bấm (OK, Cancel), thủ tục xử lý sự kiện khi Click nút OK đ ược
viết bằngVBScript , hàm xử lý sự kiện khi nhấn nút Cancel đ ược viết bằng ngôn ngữ
JavaScript .
Mã HTML
<HTML>
<HEAD><TITLE>Click Button </TITLE>
<SCRIPT LANGUAGE=”VBScript”>
<!--
Sub SubOk()
window.alert(“Ban da bam nut OK”)
End Sub
-->
</SCRIPT>
<SCRIPT LANGUAGE=”JAVAScript”>
<!—
       Function SubCancel()
       {
            window.alert(“Ban da bam nut Cancel”);
       }
-->
</SCRIPT>
</HEAD>
<BODY>
<INPUT TYPE=BUTTON  NAME = “Ok” VALUE=”OK”
LANGUAGE=”VBScript” onclick=”SubOk()”>
<INPUT TYPE=BUTTON NAME = “Cancel” VALUE=”Cancel”
LANGUAGE=”JavaScript” onclick=”SubCancel();”>
</BODY>
</HTML>
kết quả hiển thị tr ên trình duy ệt
Ví dụ 2:Kiểm tra tính hợp lệ của dữ liệu nhập từ Form. Nếu thiếu th ì thông báo cho
người dùng biết, ngược lại thông báo câu “dữ liệu đ ãđầy đủ”.
Mã HTML
<HTML>
<HEAD>
<TITLE>KIEM TRA DU LIEU NHAP </TITLE>
</HEAD>
<BODY>
<SCRIPT LANGUAGE=”JavaScript”>
function KiemTraForm()

40{
<!—lay doi tuong form, dienthongtin la ten Form
FormObj = document.dienthongtin;
if(FormObj.Ten.value==””)
{
alert(“Chua nhap Ten”);
        FormObj.Ten.forcus();
return false ;
}
else if(FormObj.Tuoi.value==””)
{
alert(“Chua nhap Tuoi”);
         FormObj.Tuoi.forcus();
return false;
}
else if(FormObj.NgaySinh.value==””)
{
alert(“Chua nhap Ngay sinh”);
        FormObj.NgaySinh.forcus();
return false ;
}
       alert(“Thong tin day du”);
}
</SCRIPT>
<FORM NAME=”dienthongtin” method = POST>
Nhap ten
<INPUT TYPE=TEXT  NAME = “Ten” SIZE=30><BR>
Nhap tuoi
<INPUT TYPE=TEXT  NAME = “Tuoi” SIZE=30><BR>
Nhap ngay sinh nhat
<INPUT TYPE=TEXT  NAME = “NgaySinh” S IZE=20 ><BR>
<INPUT TYPE=BUTTON NAME=”btnSubmit” value=”Chap nhan”
onClick=”KiemTraForm()”>&nbsp; &nbsp;
<INPUT type=”RESET” NAME = “btnReset” value=”Tu choi”>
</FORM>
</BODY>
</HTML>
Kết quả hiển thị tr ên màn hình
Bài tập chương 3
Bài 1: Thiết kếForm nhập liệu nh ư hình sau, khi nh ấn chọn nút chấp nhận thì phải
kiểm tra tính đầy đủ v à hợp lệ của dữ liệu. Nếu thông tin n ào không có ho ặc bị sai th ì

41yêu cầu người dùng bổ xung. Nếu ng ười dùng nhấn chọn nút không ch ấp nhận thì
làm rỗng tất cả các thông tin tr ên Form đ ể chuẩn bị cho lần đăng ký kế tiếp.
Bài 2:Tương tự như bài 1, chúng ta thi ết kế Form đặt h àng mua áo thun qua m ạng
như sau:
Khi khách hàng nh ấn chọn nút chấp nhận thì phải kiểm tra tính đầy đủ v à hợp
lệ của dữ liệu. Nếu dữ liệu đúng th ì thông báo câu “ Bạn đãđặt hàng thành công ”,
nếu không hợp lệ th ì yêu cầu người mua h àng điền thông tin lại cho hợp lệ. Trong
trường hợp ng ười đặt hàng nhấn chọn nút bỏ quathì phải làm rỗngcác thông tin trên
Form để chuẩn bị cho lần đặt mua h àng kế tiếp.
Bài 3: Chúng ta thi ết kế trang web đăng ký mail của Yahoo
(http://www.mail.yahoo.com ) khi nhấn vào nút Submit this Form thì ph ải kiểm tra tính
đầyđủ và hợp lệ của dữ liệu.  Nếu không đúng hay thiếu th ì yêu cầu người dùng nhập
lại.
Chương 4: l ập trình webđộng với ngôn ngữ lập tr ình asp
1.giới thiệu về asp
ASp(Active Server Page) ngôn ng ữ lập trìnhứng dụng đ ược chạy b ên phía
Server.Một trangASP có các đặc điểm sau:
Một trangASP được lưu với phần mở rộng “. asp”
Cácứng dụng ASPdễ viết, dễ sửa đổi.
Cung cấp chế độ bảo mật tốt v ì các mã code trong trang ASP ng ười duyệt
web không th ể thấy được.
Ngôn ngữ Script đ ược dùng thông d ụng nhất trong trang  ASP là VBScript.
Được hỗ trợ bởi tr ình chủ Web Server IIS (Internet information server) v à
Personal Web Server (PWS là trình ch ủ web được dùng trên win98 ).Tuy
nhiên, IIS là thông d ụng nhất.
Ngoài ASP còn có m ột số ngôn ngữ lập tr ình webđộng như JSP, PHP ...
Như vậy để thực thi một trang ASP ta cần c ài trình ch ủ Web Server IIS.
Để cài IIS, sau khi đưa đ ĩa Win2K/WinXP v ào ta chọn menu Start-> Settings -
> Control Panel -> Add/Remove Programs -> Add/Remove windows
components -> chọn Internet Information Server s-> Next
2. nạp một ứng dụng web l ên trình ch ủ iis
Sau khi cài trình web ch ủ IIS, để xem một trang ASP tr ước tiên ta phải nạp ứng
dụng chứa trang ASP l ên trình ch ủ Web IIS, các b ước thực hiện nh ư sau:
Bước 1: Mở trình chủ web IIS bằng cách v ào menu Start-> Settings ->
Control Panel -> Administrative Tools -> Internet Services Manager.
Bước 2:Tạo thư mục ảo (Virtual Directory) cho ứng dụng. Thông th ường mỗi
ứng dụng web đ ược đặt trong một th ư mục và được tham chiếu đến thông qua
địa chỉ URL.
Cách tạo thư mục ảo: Trên màn hình Internet Information Services ta
vàoDefault Web Site -> New-> Virtual Directory.
Trong ô nh ập liệu Alias của hộp thoại Virtual Directory Creation
Wizard ta nhập tên bí danh cho thư m ục ảo, bấm next.
Chọn đường dẫn th ư mục vật lý ch ứa ứng dụng ta quan tâm. Thông
thường thư mục chứa ứng dụng đ ược đặt trong C:\Inetpub\wwwroot,

42chọn thư mục vật lý chứa ứng dụng xong ta bấm Next để đến m àn hình
cấu hình bảo vệ và đặt quyền cho th ư mục ảo.
Đặt quyền cho th ư mục ảo như trong h ình 4.4. Có t ất cả 5 quyền gồm
Read (cho phép đ ọc nội dung trang),  Runscript  (cho phép th ực thi trang
kịch bản), Execute  (thực thi các ứng dụng CGI), Write (cho phép ghi
vào thư m ục ảo),Browse (cho phép xem toàn b ộ nội dung th ư mục thay
cho trang web m ặc định). Hai qu yềnRead và Run script  là cần thiết để
trang ASP có th ể truy xuất đ ược.
Chúng ta đ ặt lại các quyền bảo vệ th ư mục ảo và chế độ bảo mật bằng
cách nhấn chuột phải l ên thư mục ảo mới tạo, rồi v ào Properties.
Bước 3: Thiết lập trang mặc định cho th ư mục ảo
Khi máy client gõ m ột địa chỉ Web URL tham chiếu đến một ứng dụng m à
không đưa ra tên trang c ụ thể, lúc n ày trình ch ủ sẽ sử dụng trang mặc định. Ta có thể
thiết lập một danh sách các trang mặc định, khi ấy IIS sẽ t ìm theo th ứ tựưu tiên từ trên
xuống dưới.
Để lập trang Web mặc định cho th ư mục ảo. Từ m àn hình 4.5 ta vào m ục
Document.  Bạn có thể xoá hoặc th êm một trang mặc định v ào danh sách b ằng cách
chọnAdd hayRemove.
Bước 4:Để xem trang web ta mở tr ình duyệt webInternet Explorer -> gõđịa
chỉ của URL củ a trang web vào m ụcAddress
Nếu chúng ta đ ã tạo trang mặc định cho th ư mục ảo là “index.asp” thì ta ch ỉ cần gõđịa
chỉhttp://localhost/Example .
3. các khái ni ệm cơ bản về asp
3.1. Thành ph ần cơ bản của một trang A SP
Một trang ASP thông th ường có 4 phần:
Dữ liệu văn bản
Các tag HTML
Các đoạn mã chạy phía Client nằm trong đoạn tag <SCRIPT></SCRIPT>
Các đoạn mã ASPđược chạy phía Server nằm trong tag <% v à %>
Như vậy một trang ASP l à một trang HTML đ ược nhúng th êm phần xử lý viết
bằng mã HTML.
Ta có thể sử dụng nhiều ngôn ngữ Script khác nhau để viết trang ASP, v ì thế ta
phải chỉ định Script n ào được sử dụng trong trang, bằng khai báo
<%LANGUAGE=ScriptLanguage%> ở đầu trang. Ví dụ: Khai báo <%LANGUAGE=
VBScript%> ở đầu trang để sử dụng ngôn ngữ VBScript.
Ví dụ:Trang ASP sau là s ự kết hợp giữa các đoạn ASP, HTML v à JavaScript. Đo ạn
chương tr ình sau xu ất hiện ra m àn hình câu thông báo “Good Morning” khi th ời gian
hệ thống ở thời điểm buổi sáng, c òn thời gian buổi chiều t hì in ra câu “Hello”
<%@language=VBScript%>
<HTML>
<BODY>
<%
       Dim dtmHour
       dtmHour=Hour(Now())
       if dtmHour<12 Then

43%>
<B>Good Morning!</B>
<%
Else
%>
<B>Hello!</B>
<%
End if
%>
</BODY>
</HTML>
3.2. Nhập/Xuất dữ liệu
Để xuất dữ liệu của  đoạn chương trình chạy phía Client (đ ược đặt trong cặp tag
<SCRIPT></SCRIPT>) dùng phương th ứcdocument.write. Tương tự, để xuất dữ liệu
trong đoạn chương trình ASP ( đoạn lệnh đ ược đặt trong tag <% v à %>) dùng phương
thứcResponse.write.
Ví dụ:
Xuất chuỗi: Response.write”Learn ASP”
Xuất hằng kiểu số: Response.write 5
Xuất giá trị của biến a: Response.write a
Để nhập dữ liệu ta d ùng phương th ức Request
Cụ thể hai ph ương thức yêu cầu (Request), trả lời (Response ) sẽ được đề cập cụ
thể ở mục 4.1 v à 4.2
3.3.Hoạt động của ASP
Khi một trang ASP đ ược trình duyệt Web y êu cầu, trước tiên Web Server s ẽ
duyệt tuần tự trang ASP n ày và chỉ thực hiện những câu lệnh kịch bản ASP, kết quả l à
một trang thuần HTML sẽ đ ược đưa ra browser. Vi ệc đưa ra kết quả cho browser lầ n
lượt hay sau khi dịch xong tất cả các kịch bản l à do người tạo lập trang Web qui định.
Người dùng sẽ không thấy đ ược các lệnh kịch bản của ASP bởi v ì nóđãđược server
thực thi xong rồi gửi kết quả về cho browser d ưới dạng trang HTML.
4. các đối tượng cơ bản trong ASP
Đối tượng là khái niệm trừu t ượng nói về một “vật thể” (hay một structure) có
khả năng lưu trữ dữ liệu v à thao tác trên  các d ữ liệu để phục vụ cho một công việc n ào
đó. Trong đ ối tượng người ta gọi các dữ liệu l à các thuộc tính còn các thao tác là các
phương th ức. Các đối t ượng trong ASP cho phép ng ười lập trình giao ti ếp, tương tác
với cả server lẫn client. Trong ASP có hai loại đối t ượng là :
Các đối tượng cơ  bản: Application, Session, Server, Request, Response,
ObjectContext.
Các thành  phần (component) xây dựng sẵn: Dictionary, FileSystemObject,
AdRotator, Browser Capabilities...
4.1. Đối tượng Request
Khi người dùng yêu c ầu một trang hay đệ tr ình (submit) m ột biểu mẫu (form),
đối tượngRequest sẽ lưu trữ và cung cấp tất cả các thông t in từ browser (tr ình duyệt
Web) gửi đến server, đối t ượng này được xem nh ư là đối tượng nhận dữ liệu. Các tập

44hợp (collection), thuộc tính (properties) v à phương th ức (method) của đối t ượng này
được mô tả nh ư sau:
4.1.1. Các t ập hợp (Collection) của đối t ượng Request
Đối tượngRequest cung cấp 5 collection cho phép chúng ta truy xuất tất cả các
loại thông tin về y êu cầu của browser đối với server. Các collection  của đối tượng
Request bao gồm:
Client Certificate
Một tập các giá trị của tất cả các tr ường (field) hay các m ục (entry) trong  Client
Certificate  mà brows ẻ chuyển đi để tr ình cho server khi truy xu ất một trang
hay tài nguyên. Các thành ph ần của tập đều l à giá trị chỉ đọc (read - only).
Cookies
Cookies là một file văn bản có kích th ước nhỏ được lưu trữ trên máy client.
Mỗi khi người dùng thăm m ột Website, ta có thể bí mật gắn một tập tin chứa các thông
tin mà mình mu ốn lên đĩa cứng của họ, chẳng hạn nh ư thông tin v ề user, thông tin về
số lần truy cập website,...Tuy nhi ên cácCookies không ph ải được truy cập ngẫu nhi ên
bởi các Website m à chúng đư ợc truy cập bởi các domain tạo ra chúng.
CácCookies trong đối tượngRequest đều là thuộc tính chỉ đọc (read -only) do
đó ta chỉ có thể xem các giá trị cookies m à không th ể sửa đổi giá trị của chúng. Để
lấy giátrị của Cookies ta sử dụng cú pháp sau:
Request.Cookies(name)[(key)].attribute
Trong đó:
name: tên c ủa cookies (kiểu chuỗi).
key: khoá c ủa cookie cần lấy giá trị (kiểu chuỗi).
attribute: thông tin c ủa cookie, l à một trong các thông số sau:
+Domain: (chỉ đọc- read only) cookie ch ỉ được gửi cho đối t ượng Request của
domain này.
+Expires: (chỉ ghi- write only) ch ỉ định ngày mà Cookies h ết hiệu lực (expires),
nếu không chỉ định ng ày thì cookie s ẽ expires khi kết thúc phi ên làm việc.
+HasKeys : (chỉ đọc– read only) xác đ ịnh khoá của cookie có tồn tại không.
+Path: (chỉ ghi- write only) n ếu thuộc tính n ày được xác lập th ì chỉ cookie chỉ
được gửi cho những Request của đ ường dẫn n ày, nếu không th ì cookie ch ỉ được
gửi cho những Request thuộc đ ường dẫn của ứn g dụng.
+Secure: (chỉ ghi- write only) xác đ ịnh cookie có bảo mật hay không.
Mộtcookie có thể chứa đựng một tập hợp các giá trị. Ta nói cookie đó có nhiều
khoá.
Ví dụ:
<HTML>
<BODY>
<%
 Dim x, y
 For each x in Request.Cookies
 Response.write(“<P>”)
 If Request.Cookies(x).HasKeys Then

45    For each y in Request.Cookies(x)
Response.write(x & “:” & y & “=” &
            Request.Cookies(x)(y))
Response.write(“<br>”)
 Next
Else
     Response.Write(x & “=”& Request.Cookies(x) & “<BR>”)
End If
 Response.write “</p>”
Next
%>
</BODY>
<HTML>
Form
CácFormcho phép ng ười dùng nhập  vào dữ liệu thông qua các control HTML
như edit, radio button, check box,...Khi ngư ời dùng submit m ột biểu mẫu th ì tất cả các
giá trị của các control trong phân đoạn < FORM> sẽ được gửi lên Web Server khi đ ặt
giá trị của thuộc tính METHOD tro ng tag<FORM>  làPOST.
Các thành ph ần của đối t ượng này đều là giá trị chỉ đọc (read only).
Để truy xuất các giá trị của các control HTMl m à người dùng submit b ằng
phương th ứcPOST ta sử dụng cú pháp sau:
Request.Form( controlname )
Trong đó controlname  là tên của control m à ta cần lấy giá trị.
Ví dụ:
<HTML>
<BODY>
      Chao ban:
<%
     Response.Write(Request.Form(“Ho_Lot”))
  Response.Write(“ ” & Request.Form(“Ten”))
%>
</BODY>
</HTML>
QueryString
Khi người dùng yêu c ầu 1 trang đệ tr ình (submit) m ột biểu mẫu với ph ương
thứcGET thì tất cả các control HTML trong phân đoạn <FORM>  của biểu mẫu sẽ
được Browser gắn v ào URL theo t ừng cặp tên/giá trị.
QueryString  được dùng để lấy về các giá trị trong một biểu mẫu với ph ương
thức làGET.Tất cả các thông tin đ ược gửi từ biểu mẫu với ph ương thứcGET sẽ
được gắn vào URL trên thanh address c ủa browser v à do đó m ọi người có thể thấy
được các thông tin n ày, tuy nhiên lư ợng thông tin đ ược gửi này có giới hạn. Các th ành
phần của tập đều l à giá trị chỉ đọc (read -only).

46Để truy xuất các giá trị của các control HTML m à người dùng submit b ằng
phương th ứcGET ta sử dụng cú pháp sau:
Request.QueryString( controlname )
Ví dụ:
<HTML>
      Chao ban:
<BODY>
     Response.Write(Request.QueryString(“Ho_Lot”))
  Response.Write(“ ” & Request.QueryString(“Ten”))
</BODY>
</HTML>
ServerVariables
Khi cần lấy giá trị các biến môi tr ường của Server ta d ùng tậpServerVariables
Cú pháp:
Request.ServerVariables( variable)
với variable chỉ định giá trị g ì ta cần lấy. Sau đây l à một số giá t rị tiêu biểu của
variable
Biến Mô tả
ALL_HTTP Trả về tất cả các header m à client đ ã gửi, luôn luôn
theo sau HTTP và vi ết hoa
AL_RAW Trả về tất cả các header ở dạng thô
APPL_MD_PATH Trả về đường dẫn cho ứng dụng d ùng cho
DLL_ISAPI
APPL_PHYSICAL_PATH Trả về đường dẫn vật lý t ươngứng của đ ường dẫn.
AUTH_PASSWORD Trả về giá trị đ ã nhập vào trên h ộp thoại xác nhận
của client
AUTH_TYPE Cách thức mà server dùng đ ể kiểm tra xác nhận
người dùng(username)
AUTH_USER Trả về tên của người dùng (username)
CERT COOKIE Trả về ID duy nhất của client
CONTEXT_LENGTH Trả về kích th ước của dữ liệu m à client gửi
CONTEXT_TYPE Trả về kiểu dữ liệu
GATEWAY_INTERFACE
HTTP_<headername > Trả về giá trị chứa trong header headername
HTTP_USER_AGENT Trả về một chuỗi mô tả bro wser gửi yêu cầu
LOCAL_ADDR Trả về địa chỉ của server m à browser g ửi yêu cầu tới.
Ví dụ:Bạn có thể d ùng vòng l ặp để xem tất cả các biến của server nh ư sau:
<%
For each x in Request.ServerVariables
      Response.Write(x & “<BR>”)
Next

47%>
4.1.2. Thu ộc tính (Property) c ủa đối tượng Request
Đối tượngRequest chỉ có một thuộc tính duy nhất đó l àTotalBytes . Thuộc tính
TotalBytes  là thuộc tính chỉ đọc (read - only), nó tr ả về số byte dữ liệu m à người dùng
chuyển lên server...
4.1.3. Phương th ức (method) của đ ối tượng Request
Đối tượng Request cũng chỉ có một ph ương thức đó là BinaryRead. Phương
thức BinaryRead đ ược dùng để lấy dữ liệu đ ãđược client POST lên Server. Phương
thức này trả về một mảng các giá trị.
Cú pháp:
Request.BinaryRead(count)
trong đó coun t là một con số nguy ên chỉ rõ số byte cần đọc.
Phương th ức này sẽ không nhận đ ược dữ liệu nếu tr ước đó ta đ ã truy xuất đến
tạpRequest.Form . Ngược lại nếu ta đ ã gọi phương thức này thì ta s ẽ không nhận
được dữ liệu của các control HTML khi truy xuất tập Request.Form .
Ví dụ: Dùng phương th ứcBinaryRead  để đọc dữ liệu m à clientPOST lên và đưa vào
một mảng.
<%
Dim a,b
a = Request.TotalBytes
b = Request.BinaryRead(a)
%>
4.2. Đối tượng Response
Khi client có yêu c ầu một trang từ server th ì server có nhi ệm vụ thực thi các
đoạn VBScript trong trang ASP để tạo ra tập tin HTML rồi sau đó gửi cho client. Đối
tượngResponse  sẽ đảm nhiệm việc chuyển kết quả từ server cho client.
4.2.1. Các t ập hợp (Collection) của đối t ượng Response
Tập hợp của đối t ượngResponse  chỉ cócookies. Đối tượngResponse  có thể
xác lập giá trị của bất kỳ cookies nào mà ta mu ốn đặt trên hệ thống của client. Nếu
cookies không tồn tại trên client thì nó s ẽ được tạo ra.
4.2.2. Thu ộc tính (property) của đối t ượng Response
Buffer:Dùng để xác định xem k ết quả tạo ra bởi trang ASP có đ ược giữ lại
trong vùng đ ệm hay không. Thuộc tính Buffer nhận 1 trong 2 giá trị l à true hoặc
false. Nếu nhận giá trị True th ì kết quả được tạo ra bởi trang ASP sẽ đ ược
server giữ trong v ùng đệm cho đến khi tất cả các script của trang đ ược xử lý
xong, hay đ ến khi ph ương thứcFlush hoặc phương thức End được gọi. Giá trị
này  cần được xác lập tr ước tag <HTML> trong tập tin .asp. C òn nếu thuộc tính
Buffer nh ận giá trị False th ì kết quả sẽ đ ược gửi đi ngay khi nó đ ược xử lý.
Cú pháp:
Response.Buffer [= true | false]
Trong IIS phiên b ản từ 4.0 trở về tr ước false l à giá trị mặc định c òn từ phiên
bản 5.0 trở về sau th ì true là giá tr ị mặc định.
Ví dụ 1:Kết quả sẽ không đ ược gửi tới browser cho đến khi kết thúc v òng lặp.
<%Response.Buffer = true%>
<HTML>

48<BODY>
<%
For i = 1 to 100 do
     Response.write (i & “<br>”)
Next
%>
</BODY>
</HTML>
Ví dụ 2:Kết quả sẽ đ ược gửi tới browser mỗi lần lặp
<%Response.Buffer = false%>
<HTML>
<BODY>
<%
For i = 1 to 100 do
     Response.wri te (i & “<br>”)
Next
%>
</BODY>
</HTML>
CacheControl
Thuộc tính này dùng đ ể xác định xem proxy server có thể cất giữ kết quả đ ược
tạo ra bởi ASP hay không. Mặc định th ì proxy sẽ không cất giữ. CacheControl  chỉ có
thể nhận một trong hai giá trị đó l à “public” hoặc “private”. Nếu đặt thuộc tính n ày là
“private” thì ch ỉ những v ùngcache riêng mới có thể giữ c òn proxy server s ẽ không lưu
trữ những trang n ày. Còn n ếu đặt thuộc tính n ày là “public” thì proxy s ẽ cất giữ những
trang này.
Ví dụ:
<% Response.CacheCo ntrol = “Public”%>
hoặc
<% Response.CacheControl = “Private”%>
Charset
Đây là thu ộc tính kiểu chuỗi, thuộc tính n ày ghép tên c ủa tập ký tự v ào vùng
context-type của đối tượngResponse . Thuộc tính này chấp nhận bất cứ chuỗi ký tự
nào bất chấp chuỗi đó đún g hay sai. Giá tr ị mặc định l àISO- LATIN-1.
Cú pháp:
Response.Charset( charsetname )
Ví dụ:
<%Response.Charset = “ISO -8859-1”%>
ContextType
Đây là thu ộc tính kiểu chuỗi, thuộc tính n ày đặt kiểu hiển thị của nội dung
HTTP cho đ ối tượngResponse . Nếu một tr ang ASP không ch ỉ định thuộc tính
ContextType  thìcontend-type mặc định sẽ l à:content-type:text/html.
Cú pháp:
Response.ContentType [= contenttype ]

49Sau đây là m ột vài giá trị contenttype thông dụng:
<%Response.ContentType = “text/HTML”%>
<%Response.C ontentType = “image/GIF”%>
<%Response.ContentType = “text/JPEG”%>
<%Response.ContentType = “text/plain”%>
Ví dụ:Đoạn chương trình sauđây sẽ mở một spreadsheet tr ên browser (n ếu bạn đã cài
đặt Excel v ào máy )
<%Response.ContextType = “application/vnd.ms -excel”%>
<HTML>
<BODY>
<TABLE>
     <TR>
               <TD>1</TD>
               <TD>2</TD>
               <TD>3</TD>
               <TD>4</TD>
     </TR>
       <TR>
                 <TD>5</TD>
                  <TD>6</TD>
                    <TD>7</TD>
                   <TD>8</TD>
        </TR>
</TABLE>
</BODY>
</HTML>
Expires
Thuộc tínhExpiresđặt thời gian bao lâu (tính theo phút) một trang sẽ đ ược cất giữ ở
browser trư ớc khi nó hết hạn (expire). Nếu ng ười dùng quay l ại trang đó tr ước khi nó
hết hạn thì trangđã cất giữ trước đó sẽ đ ược hiển thị l ên. Nếu ta muốn một trang
khôngbao giờ hết hạn th ì tađặt thuộc tính Expire là-1.
Cú pháp:
Response.Expires [= number]
Ví dụ:Nếu ta muốn cho một trang sẽ hết hạn sau 24 giờ (=1400 phút) ta đặt nh ư sau:
<%
Response.Expires = 1440
%>
ExpiresAbsolute:
Tương tự như thuộc tínhExpires, thuộc tínhExpiresAbsolute đặt một ng ày và
giờ xác định m à một trang đ ược cất giữ tr ên browser s ẽ hết hạn.
Nếu ta chỉ định thời gian m à không ch ỉ định ngày cụ thể thì trang sẽ hết hạn tại
giờ chỉ định v ào ngày mà script đư ợc thực thi. C òn nếu ta chỉ định  ngày mà không ch ỉ
định thời gian th ì trangđược browser cất giữ sẽ bị hết hạn v ào lúc nửa đêm của ngày
chỉ định.

50Cú pháp:
Response.ExpiresAsolute [= [ date][time]]
Ví dụ:Đoạn mã sauđây chỉ định rằng trang sẽ hết hạn v ào lúc 4h00 chi ều ngày 11
tháng 10 n ăm 2003:
<%
Response. ExpiresAsolute = #October 11,2003 16:00:00#
%>
IsClientConnected: Thuộc tính n ày xác đ ịnh xem client có c òn nối kết
(connect) v ới server hay không. Thuộc tính n ày mang 1 trong 2 giá tr ị đó là true
hoặc false. Mang giá trị true nếu cl ient còn k ết nối tới server v à mang giá tr ị
false trong trư ờng hợp ng ược lại.
Cú pháp:
Response.IsClientConnected
Ví dụ:Đoạn code sau đây kiểm tra ng ười dùng còn k ết nối hay không?
<%
If Response.IsClientConnected = true then
   Response.Write (“Nguoi du ng con connect!”)
Else
   Response.Write (“Nguoi dung khong con connect!”)
End If
%>
Pics
Thuộc tính nay th êm một giá trị v ào nhãn Picsở phầnheader của đối tượng
Response.
Ví dụ:
<%
Response.PICS (“PICS -1.1<http://www.abc.com/file.html >
by” & chr(34) & “ xyz@yahoo.com ”& chr(34) &
“for” & chr(34) & “ http://www.XXX.com ” & chr(34) &
“on” & chr(34) & “2002.10.05T02:15 -0800” & chr(34) &
“r (n 2 s 0 v 1 1 2)” )
%>
Status
Thuộc tính này chỉ định giá trị của d òng trạng thái m à server tr ả về cho client
và ta có th ể dùng thuộc tính n ày để chỉnh sửa d òng trạng thái đó. Giá trị của d òng
trạng thái bao gồm: ba con số đầu ti ên là mã tr ạng thái v à mô tả chi tiết của m ã trạng
thái đó (chẳng hạn nh ư: 404Not Found ).
Cú pháp:
Response.Status = statusdescription
vớistatusdescription là dòng mô t ả trạng thái.
Ví dụ:Đoạn code sau đây sẽ kiểm tra quyền của user dựa v ào địa chỉ của họ.
<%
Dim IP
IP = Request.ServerVariables(“REMOVE_ADDR”)
If IP <> “172.16.20.99: Then

51Response.Status = “401 Unauthorized”
Response.Write = (Response.Status)
Response.End
End If
%>
4.2.3 Phương th ức (Method) của đối t ượng Response
AddHeader
Phương th ứcAddHeader thêm một header HTTP mới v à một giá trị cho HTTP
response. Một khi một header đ ược thêm vào thì ta không th ể gỡ bỏ nó ra.
Trong IIS 4.0, b ạn phải gọi ph ương thức này trước bất kỳ kết quả n ào gửi tới
browser. Trong IIS 5.0 b ạn có thể gọi ph ương thứcAddHeader tại bất cứ n ơi nào
trong script nhưng ph ải đứng  trước bất cứ lời gọi h àmResponse.Flush  nào trong
trang.
Cú pháp:
Response. AddHeader  name, value
Trong đó namelà tên của header c ònvaluelà giá trị của header
Ví dụ:
<%
Response.AddHeader “c ảnh báo”,”Máy của bạn có Virus”
%>
Chú ý:Tên của header không đư ợc chứa dấu gạch d ưới.
AppendToLog
Phương th ức này thêm m ột chuỗi v ào cuối mụclog của trình chủ. Bạn có thể
gọi phương thức này nhiều lần trong một script, mỗi lần gọi sẽ gắn th êm một chuỗi
vào mụclog của trình chủ.
Cú pháp:
Response.AppendToLog( string)
Ví dụ:
<%
Response.AppendToLog”Client co virus!”
%>
Chú ý:Chuỗi cần ghi v ào mục log không đ ược chứa bất kỳ dấu phẩy (,) n ào.
BinaryWrite
Phương th ức này ghi dữ liệu trực tiếp xuống Browser m à không ph ải chuyển
đổi bất kỳ ký tự n ào. Phương th ứcnày thường được dùng để ghi dữ liệu ảnh (BLOB)
từ cơ sở dữ liệu xuống browser.
Cú pháp:
Response.BinaryWrite (data)
Clear
Phương th ức này xoá tất cả các kết xuất HTML đ ược trình chủ đưa vào vùng
đệm. Nhưng phương th ức này không xoá ph ầnheadercủa đối tượngResponse  mà chỉ
xoá phần nội dung của đối t ượng Response . Nếu thuộc tính Buffer của đối tượng
Response  được đặt là false thì ph ương thức này sẽ gây ra lỗi lúc thi h ành (vì không có
vùng buffer thì l ấy gì mà xoá!!!)
Cú pháp:

52Response.Clear
Ví dụ:
<%
Response.Buffer = true
%>
<HTML>
<HEAD>
<TITLE>Ki ểm tra ph ương thức Clear</TITLE></HEAD>
<BODY>
<P>Đây là ph ần nội dung của trang Web. Nội dung n ày sẽ được gửi tới ng ười
dùng</P>
<P>Bắt đầu xoá Buffer</P>
<%
Response.Clear
%>
</BODY>
</HTML>
Kết quả khi d uyệt trang web n ày là ngư ời dùng không th ấy gì cả (vì trang
HTML mà Server đưa vào trong vùng đ ệm chưa kịp gửi đã bị xoá bởi việc gọi ph ương
thức clear tr ước khi gọi ph ương này).
Cú pháp:
Response.End
Ví dụ:
<HTML>
<BODY>
<P>Đoạn văn bản n ày sẽ được gửitới browser v à người dùng có thể đọc được</P>
<%
Response.End
%>
<P>Đoạn văn bản n ày sẽ không đ ược gửi và đã gọi phương thức End rồi</P>
</BODY>
</HTML>
Flush
Gọi phương thức này để chuyển các kết xuất HTML m à Server lưu gi ữ lại trong v ùng
đệm xuống brows er ngay lập tức. Nếu thuộc tính Buffer đ ược đặt là false thì thu ộc tính
này sẽ gây ra lỗi lúc thi h ành.
Cú pháp:
Response.End
Ví dụ:
<%
Response.Buffer = true
%>
<HTML>
<BODY>
<P>Đoạn văn bản n ày sẽ được gửi tới ng ười dùng ngay khi g ọi phương thức

53Flush</P>
<P>Một số đoạn văn bản khác sẽ đ ược gửi sau một lúc nữa!!!</P>
<%
Response.Flush
Dim i
For i = 1 to 1000
        Response.Write “ ”
         Response.Write “ Đây là đo ạn văn bản tiếp theo!”
       Response.Flush
%>
</BODY>
</HTML>
Redirect
Phương th ức này dùng đ ể chuyển ng ười dùng đến một trang khác đ ược chỉ định trong
đường dẫn URL.
Cú pháp:
Response.Redirect (URL)
Ví dụ sau đây minh hoạ việc đăng nhập của ng ười dùng.
Tạo tập tin login.asp với nội dung sau:
<HTML>
<HEAD>
<TITLE>Login to...</TITLE>
</HEAD>
<BODY>
<B>Login</B><BR>
<form method = “post” action = “validate.asp”>
Username: <input type = “text” size = “15%” name = “UserName”><BR>
Password: <input type = “password” size = “15%” name = “Password”>
<P>
<input type = “submit” value = “Login” name = “login”>
</P>
</BODY>
</HTML>
Tạo tập tin validate.asp với nội dung sau:
<HTML>
<BODY>
<%
Dim User, Pass
User = Request.Form(“UserName”)
Pass = Request.Form(“Password”)
If (User = “sv”) and (Pass = “1234”) Then
    Response.Redirect “success.asp”
Else
Response.Redirect “login.asp”
End If

54%>
</BODY>
</HTML>
Tạo tập tin success.asp với nội dung sau:
<HTML>
<BODY>
<P>Bạn đãđăng nhập thành công!</P>
</BODY>
</HTML>
Write
Phương th ức này dùng đ ể ghi dữ liệu ra tập tin kết xuất dạng HTML để gửi cho
browser.Dữ liệu này có thể là số, chuỗi,ngày,...
Cú pháp:
Response.Write (text)
Ví dụ:
<HTML>
<BODY>
<%
Response.Write (“Chào b ạn đến với ASP!” & “<BR>”)
Dim x
x = 100
Response.Write x
%>
</BODY>
</HTML>
4.3. Đối tượng Session
Khi bạn mở, đóng ứng dụng hoặc đang l àm việc với một ứng dụng n ào đó, máy tính s ẽ
biết bạn là ai. Nhưng khi làm vi ệc trên internet thì đó là một vấn đề khác: Web Server
không biết bạn là ai và bạn làm gì bởi vì dòngđịa chỉ htttp:// cung cấp trạng thái của
bạn.
ASP giải quyết vấn đề n ày bằng cách tạo ra một cookies duynhất cho mỗi
người dùng,cookies này được gửi cho client v à nó chứa đựng thông tin để nhận diện
ra bạn.Giao tiếp này được gọi là đối tượngSession.
Đối tượngSession được dùng để lưu trữ thông tin về những thay đổi đối với
một người dùng. Các bi ến được chứa trong đối t ượng Session chứa thông tin về một
người dùng và đư ợc dùng chung cho t ất cả các trang trong một ứng dụng. Khi có một
người dùng mới, server tạo ra một đối t ượng Session mới v à sẽ huỷ session đó khi
người dùng không k ết nối nữa hoặc khi sessio n hết hạn.
4.3.1. Tập hợp của đối t ượng Session
Contents
Tập hợpContents  chứa tất cả các phần tử đ ãđược gắn th êm vào đ ối tượngSession
trong quá trình th ực thi script.
Cú pháp:
Session.Contents (key)
Trong đó key là tên c ủa phần tử cần lấy.

55Ví dụ sau đây liệt kê tất cả các session đ ãđược dùng trong ứng dụng.
<HTML>
<BODY>
<CENTER>Các session trong t ập Contents
</CENTER>
<%
Dim x
For each x in Session.Contents
Response.Write (x & “=” & Session.Contents (x) & “<BR>”)
Next
%>
</BODY>
</HTML>
StaticObjec ts
TậpStaticObjects chứa tất cả các đối t ượng gắn v ào session v ới tag HTML <object>
Cú pháp:
Session.StaticObject(key)
Ví dụ:Đoạn chương trình sauđây hiển thị tất cả các đối t ượng trong tập
StaticObjects
<HTML>
<BODY>
<CENTER>Các đ ối tượng trong tập St aticObject
</CENTER>
<%
Dim x
For each x in Session.Contents
Response.Write (x & “<br>”)
Next
%>
</BODY>
</HTML>
4.3.2 Các thu ộc tính của đối t ượng Session
CodePage
Thuộc tínhCodePage cho biết tập ký tự sẽ đ ược dùng để hiển thị nội dung của
trang.Sauđây là một vài giá trịCodePage và mô tả của chúng.
1251– American English and most European languages
932– Japanese Kanji
Cú pháp:
Session.CodePage(= codepage)
Ví dụ:Đoạn chương trình sauđây hiển thị codepage của một trang.
<HTML>
<BODY>
<CENTER>Code Page của trang n ày là:
<%
Response.Write (Session.CodePage)

56%>
</CENTER>
</BODY>
</HTML>
LCID
Ta dùng thu ộc tính LCID để thiết lập hay nhận về một con số nguy ên mà nó xác đ ịnh
một vùng nào đó. D ữ liệu ngày, giờ và tiền tệ sẽ đ ược hiển thị dựa theo v ùngđó.
Cú pháp:
Session.LCID(= LCID)
Ví dụ:
<HTML>
<BODY>
<%
Response.Write (“LCID m ặc định:” & Session.LCID & “<br>”)
Response.Write (“D ạng tiền tệ:” & FormatCurrency(540)& “<br>”)
Session.LCID = 1036
Response.Write (“<p>”)
Response.Write (“LCID hi ện tại:” & Session.LCID & “<br>”)
Response.Write (“D ạng ngày:” & date() & “<br>”)
Response.Write (“D ạng tiền tệ:” & FormatCurrency(540) & “<br>”)
Response.Write (“</P>”)
Session.LCID = 3079
Response.Write (“</P>”)
Response.Write (“LCID hi ện tại:” & Session.LCID & “<br>”)
Response.Write (“D ạng ngày:” & date() & “<br>”)
Response.Write (“D ạng tiền tệ:” & FormateCurrency(540) & “<br>”)
Response.Write (“</P>”)
%>
</BODY>
</HTML>
Khi đó kết quả của tr ình duyệt sẽ là:
SessionID
Thuộc tínhSessionID trả về một con số i d duy nhất dùng để nhận diện cho mỗi ng ười
dùng. Con s ố này được server tạo ra v à bạn không thể thay đổi giá trị n ày được.
Cú pháp:
Session.SessionID
Ví dụ:Đoạn chương trình sauđây hiển thị ra m àn hình con s ố ID
<HTML>
<BODY>
<CENTER>S ố ID của bạn l à:
<%
Response.Write (Session.SessionID)
%>

57</CENTER>
</BODY>
</HTML>
Timeout
Thuộc tính này dùng đ ể thiết lập hay nhận về khoảng thời gian hiệu lực d ành cho đ ối
tượng Session trong ứng dụng (tính theo phút). Nếu ng ười dùng không refresh ho ặc
yêu cầu một trang trong kho ảng thời gian hiệu lực đó th ì session s ẽ kết thúc. Mặc định
thời gian còn hiệu lực cho một trang l à 20 phút.
Cú pháp:
Session.TimeOut [=number]
Ví dụ:
<HTML>
<BODY>
<P>
Thời gian hiệu lực mặc định l à:
Response.Write (Session.TimeOut)
</P>
<%Session.TimeOut = 30%>
<P>
Thời gian hiệu lực bây giờ l à:
<%Response.Write (Session.TimeOut)%>
</P>
</BODY>
</HTML>
4.3.3. Các phương th ức của đối t ượng Session
Abandon
Phương thcs Abandon dùng đ ể kết thúc session của ng ười dùng. Khi phương th ức
này được gọi, đối tượng Session hiện h ành chưa b ị xoá ngay m à sẽ tồn tại cho tới khi
tất cả các Script của trang hiện h ành được xử lý xong. Điều n ày có ngh ĩa là bạn có thể
truy cập các biến session trong c ùng trang m ặc dù bạn đã gọi phương thức Abandon
trước đó,nhưng truy c ập các biến session từ những trang khác th ì khôngđược.
Cú pháp:
Session.Abandon
Ví dụ:Tạo 2 tập tin file1.asp v à tập tin file2.asp trong c ùng một ứng dụng với nội
dung sau:
File1.asp
<HTML>
<BODY>
<%
Session(“Ten”) = “Bill Gate”
Session.Ab andon
Response.Write (Session (“Ten”))
%>
</BODY>

58</HTML>
File2.asp
<HTML>
<BODY>
<%
Response.Write (Session (“Ten”))
%>
</BODY>
</HTML>
Khi người dùng yêu c ầu trangfile1.asp thì kết quả in ra m àn hình là “Bill Gate”
nhưng khi ngư ời dùng yêu c ầu tiếp trangfile2.asp thì kết quả không hiển thị Bill Gate
như mong mu ốn  bởi vì Session(“Ten”) đã bị kết thúc ở file1.asp do gọi phương thức
Abandon .
Contents.Remove
Phương th ức này dùng đ ể xoá một phần tử ra khỏi tập Contents của đối t ượngSession.
Cú pháp:
Session.Contents.Remove (name | index)
Khi gọi phương thức này ta có th ể truyền v ào tên của phần tử cần xoá hoặc vị trí của
phần tử trong tập Contents.
Ví dụ:
<HTML>
<BODY>
<%
Session(“ptu1”) = (“Phan tu 1”)
Session(“ptu2”) = (“Phan tu 2”)
Session(“ptu3”) = (“Phan tu 3”)
Session(“ptu4”) = (“Phan tu 4”)
Response.Write (“T ập contents của Session lúc đầu:<br>”)
Dim x
For each x in Session.Contents
Response.Write (x & “=” & Session.Contents(x) & “<BR>”)
Session.Contents.Remove(“ptu3”)
Response.Write (“<P>Sau khi xoá ptu3:</P>”)
For each x in Session.Contents
Response.Write (x & “=” & Session.Contents(x) & “<br>”)
Session.Contents.Remove(2)
Response.Write(“<P>Sau khi xoá ph ần tử thứ 2:</P>”)
For each x in Session.Contents
Response.Write (x & “=” & Session.Contents( x) & “<BR>”)
%>
</BODY>
</HTML>
Kết quả khi thực hiện trang n ày như sau:
Contents.RemoveAll()

59Thay vì ch ỉ xoá một phần tử ta d ùng phương th ứcRemove thì phương thức này chỉ
xoá tất cả các phần tử ra khỏi tập Contents.
Cú pháp:
Session.Contents.RemoveAll()
4.3.4. Các s ự  kiện của đối t ượng Session
Session_OnStart
Sự kiện này xuất hiện khi tr ình chủ tạo một session mới. C ài đặt của sự kiện n ày được
đặt trong tập tin global.asa
Session_OnEnd
Sự kiện này xuất hiện khi session kết thúc. C ài đặt của sự kiện n ày cũng được đặt
trong tập tinglobal.asa
Chú ý:Trong cài đ ặt của sự kiện Session_OnEnd  ta không s ử dụng đ ược phương
thứcMapPath  vìở đây phương thức này không còn hi ệu lực.
4.4. Đối tượng Application
Một ứng dụng bao gồm một tập hợp các file kết hợp với nhau để xử lý hoặc
phục vụ cho một mục đích n ào đó. ASP cung c ấp một đối t ượng dùng để kết hợp các
file đó lại với nhau, đó l à đối tượngApplication .
Đối tượng Application đ ược dùng để lưu trữ các biến, qua đó các trang có thể
truy cập đến các biến n ày. Không giống như đối tượng Session chỉ d ùng cho m ột nối
kết cho mỗi ng ười dùng. Do đó đ ối tượng Application n ên chứa các thông tin m à có
thể được truy cập bởi nhiều trang trong ứng dụng (nh ư thông tin n ối kết cơ sở dữ liệu,
thông tin v ề số người dùng truy c ập,...) nghĩa là bạn có thể truy cập các thông tin n ày
từ bất cứ trang n ào trongứng dụng, nh ưng chúý là khi thay đổi các thông tin n ày sẽ
ảnh hưởng đến tất cả các trang khác trong ứng dụng.
4.4.1. Tập hợp của đối t ượng Application
Contents
Tập hợpContents  chứa tất cả các phần tử đ ãđược gắn th êm vào đ ối tượng
Application  trong quá trình th ực thi script.
Cú pháp:
Application.Contents(key)
Trong đó key là tên c ủa phần tử cần lấy.
Ví dụ sau đây liệt k ê tất cả các Application đ ãđược dùng trong ứng dụng.
<HTML>
<BODY>
<CENTER>Các bi ến Application trong tập Contents </CENTER>
<%
Dim x
For each x in Application.Contents
Response.Write (x & “=” & Application.Contents(x) & “<br>”)
Next
%>
</BODY>
</HTML>
StaticObjects

60Tập hợpStaticObject chứa tất cả các đối t ượng được gắn v àoứng dụng với tag
HTML <object>.
Cú pháp:
Application.StaticObjects(key)
Ví dụ:Đoạn code sau đây liệt k ê tất cả cácobject
<%
Dim x
For each x in Application.StaticObjects
Response.Write(x & “<br>”)
%>
4.4.2. Các phương th ức của đối t ượngApplication
Phương th ức này dùng đ ể xoá một phần tử ra khỏi tập Contents của đối t ượng
Application
Cú pháp:
Application.Contents.Remove(name | index)
Khi gọi phương thức này ta có th ể truyền v ào tên của phần tử cần xoá hoặc vị trí của
phần tử trong tập Co ntents.
Ví dụ:
<%
Application(“ptu1”) = (“Phan tu 1”)
Application(“ptu2”) = (“Phan tu 2”)
Application(“ptu3”) = (“Phan tu 3”)
Application.Contents.Remove = (“ptu3”)
%>
Contents.RemoveAll
Thay vì ch ỉ xoá một phần tử ta d ùng phương th ứcRemove thì phương thức này xoá tất
cả các phần tử ra khỏi tập Contents.
Cú pháp:
Application.Contents.RemoveAll()
Lock và Unlock
Bởi vì tất cả các ng ười dùng đều có thể truy cập đến các biến Application nên
có thể cùng lúc 2 hay nhi ều người dùng cùng thay đ ổi giá trị của biế n và điều này đối
tượngApplication  cung cấp hai ph ương thứcLock vàUnlock. Phương th ứcLock
ngăn cản người dùng khác thay đ ổi biến trong đối t ượngApplication  (dùng để đảm
bảo rằng tại một thời điểm chỉ có một ng ười dùng thay đ ổi các biến trong đối t ượng
Application). Phương th ứcUnlockcho phép ngư ời dùng thay đ ổi giá trị các biến trong
đối tượngApplication.
Cú pháp:
Application.Lock
Application.Unlock
Lưuý:Khi gọi phương thứcLock thì ta phải nhớ gọi ph ương thứcUnlock ngay khi
thực hiện xong.
Ví dụ:
<%
Application.Lock

61Application(“visits”) = Application(“visits”) + 1
Application.Unlock
%>
Trang này đư ợc truy cập :
<% = Appliction(“visits”)%>l ần!
4.4.3. Các s ự kiện (Events) của đối t ượng Application
Application_OnStart
Sự kiện này xuất hiện trước khi một phiên nối kết mới đầu ti ên được hình thành. S ự
kiện này được đặt trong file global.asa
Application_OnEnd
Sự kiện này xuất hiện khi ứng dụng kết thúc (khi web server dừng). Sự kiện n ày
được đặt trong file global.asa
4.5. Đối tượng Server
Đối tượng Servaer cung c ấp nhiều thuộc tính v à phương th ức dùng để truy cập
server. Đây là đ ối tượng dùng để quản lý những đặc tr ưng của trình chủ IIS và các
hành động liên quan t ới dịch vụ HTTP. Ngo ài ra đối tượng Server c òn cung c ấp khả
năng tạo kế thừa các th ành phần COM tr ên Server.
4.5.1. Các thu ộc tính của đối t ượng Server
Đối tượng Server chỉ có duy nhất một thuộc tính đó ScriptTimeOut.  Thuộc
tính này quy đ ịnh thời gian lớn nhất m à các lệnh kịch bản c ònđược thực hiện. Giá trị
mặc định là 90 giây.
Lưuý là giá trị timeout sẽ không hiệu lực khi server thực hiện các lệnh kịch bản.
Cú pháp:
Server.ScriptTimeOut = [number]
4.5.2. Các phương th ức của đối t ượng Server
CreateObject
Phương th ứcCreateObject dùng để tạo một thực thể của một đối t ượng. Các
đối tượng do ph ương thức này tạo ra chỉ có hiệu lực trong phạm vi một trang, do đó
chúng sẽ bị huỷ khi server xử lý trang ASP hiện h ành.
Để tạo một đối t ượng mà phạm vi của nó nh ưSession hayApplication , bạn có thể
dùng tag < object> trong file Global.asa  hoặc lưu trữ đối tượng trong biến Session hay
Applicaion .
Cú pháp:
Server.CreateObject(progID)
Trong đó progID là ki ểu của đối t ượng cần tạo.
Ví dụ:
<%
Dim adrot
Set adrot = Server.CreateObjet(“MSWC.AdRotator”)
........................................................
.......................................................
Set adrot = nothing
%>
Execute

62Thuộc tính Execute thực thi một trang ASP b ên trong m ột trang khác. Sau khi
thực thi xong file ASP đ ược gọi thì quyền điều khiển đ ược trả về cho file ASP ban đầu
(file gọi).
Cú pháp:
Server.Execute(path)
Với path là đường dẫn tới tập tin ASP cần thực thi.
Ví dụ:Tạo 2 tập tin file1.asp v à file2.asp và đ ặt trong c ùng thư m ục với nội dung sau:
File1.asp
<HTML>
<BODY>
<%
Response.Write “Đang ở file 1”
Server.Execute(“File2.a sp”)
Response.Write “Tr ở về file 1”
%>
</BODY>
</HTML>
File2.asp
<HTML>
<BODY>
<%
Response.Write “Đang ở file 2”
%>
</BODY>
</HTML>
GetLastError
Phương th ức này trả về một đối t ượngASPError  mô tả lỗi xuất hiện. Mặc định
trang Web dùng t ập tin\iishelp\common\500-100.asp để xử lý các lỗi trong ASP. Nếu
cần thì bạn có thể tạo hoặc thay đổi tập tin để đ ưa ra những câu thông báo thân thiện
hơn,...
Chú ý: Phương th ức này được dùng trước khi tập tin ASP gửi bất cứ nội dung g ì
xuống browser.
Cú pháp:
Server.GetLastError()
Ví dụ: Trong ví d ụ sau đây sẽ xuất hiện một lỗi chia cho 0
HTML>
<BODY>
<%
Dim i, tong, j
i = 0
j = 0
tong = 0
for i =1 to 10 do
tong = tong+1
next

63tong = tong/j
%>
</BODY>
</HTML>
HTMLEncode
Phương th ức này dùng đ ể mã hoá dạng HTML mộ t chuỗi
Cú pháp:
Server.HTMLEncode(string)
Ví dụ: Đoạn chương trình sauđây cho phép ngư ời dùng nhập vàousername  và
password , sau đó nh ấn nút login. Nếu ng ười dùnglogin sai thì sẽ bắt người dùng nhập
lạipassword .
HTML>
<BODY>
<%
Dim uname,upass
uname= Request.Form(“uname”)
upass = Request.Form(“upass”)
if(uname=”test”) and (upass=”test”) then
Response.Redirect(“main.asp”)
elseif (uname<>””) or (upass<>””) then
Response.Write(“Account nay khong hop le<BR>”)
end if
%>
<form name=”login” method=”POST” action=”login.asp”>
<TABLE border=”2”>
<TR>
   <TD>Dang nhap</TD></TR>
<TR>
   <TD>
    <TABLE border=”1”>
<TR>
         <TD>Username:</TD>
          <TD><input type=”text” name=”uname”
value=”<%=server.HTMLEncode(uname)%>”>
            </TD></TR>
 <TR>
        <TD>Password:</TD>
           <TD><input type=”password” name=”upass”></TD></TR>
</TABLE>
</TD>
</TR>
<TR>
<TD><input type=”submit” name=”submit” value=”Login”></TD>
</TR>
</TABLE>

64</FORM>
</BODY>
</HTML>
MapPath
Phương th ức này ánh x ạ một đườngdẫn nào đó sang m ột đường dẫn vật
lý.Phương thức này không đư ợc dùng trong s ự kiện Session_OnEnd  và
Application_OnEnd.
Cú pháp:
Server.MapPath(path)
Chú ý:Nếu path bắt đầu bằng ký tự / hoặc \ thì các ký t ự này đại diện cho đ ường dẫn
vật lý của th ư mục ảo của tập tin ASP hiện tại.
Ví dụ:Giả sử bạn có tập tin test.asp đặt trong th ư mụcC:\Inetpub\wwwroot \Script
với nội dung sau:
<HTML>
<HEAD>
<TITLE>Ki ểm tra MapPath</TITLE>
</HEAD>
<BODY>
<%
Response.Write(Server.MapPath(“test.asp”) & “<br>”)
Response.Wri te(Server.MapPath(“Script/test.asp”) & “<br>”)
Response.Write(Server.MapPath(“/Script/test.asp”) & “<br>”)
Response.Write(Server.MapPath(“/”) & “<br>”)
Response.Write(Server.MapPath(“ \”) & “<br>”)
%>
</BODY>
</HTML>
Khi duyệt trang test.asp n ày ta đượckết quả như sau:
Transfer
Phương th ức này gửi (chuyển) tất cả các thông tin về trạng thái (các biến
Session, các bi ến Application, các dữ liệu trong tập Request...) của tập tin ASP hiện tại
cho một tập tin ASP thứ hai. Khi trang thứ hai thực hiện xong th ìquyền điều khiển
không trả về cho trang tr ước đó (xem th êm phương th ức Execute).
Phương th ứcTransfer  là một dạng khác của ph ương thứcResponse.Redirect
nhưng lại hiệu quả h ơn bởi vì phương thứcResponse.Redirect  buộc Server phải giữ
lại mộtRequest giả trong khi phương th ứcServer.Transfer  thì chuy ển quyền điều
khiển cho một trang ASP khác tr ên server. (xem thêm phương th ức
Response.Redirect ).
Cú pháp:
Server.Transfer(path)
Ví dụ:Tạo 2 tập tin file1.asp vàfile2.asp và đặt trong c ùng thư m ục với nội dung  2
file như sau:
File1.asp
<HTML>
<BODY>

65<%
Response.Write “Dòng 1 trên file1.asp”
Server.Transfer(“File2.asp”)
Response.Write “Dòng 2 trên file1.asp”
%>
</BODY>
</HTML>
File2.asp
<HTML>
<BODY>
<%
Response.Write “Dòng 1 trên file2.asp”
Response.Writ e “Dòng 2 trên file2.asp”
%>
</BODY>
</HTML>
Mở trình duyệt lên và thực thifile1.asp. So sánh k ết quả này với kết quả ở ví  dụ của
phương th ức Server.Execute.
URLEncode
Phương th ức này dùng đ ể mã hoá một chuỗi URL.
Cú pháp:
Server.URLEncode (stringURL)
4.6. Đối tượng ASP Error
Đối tượngASPError  được dùng để hiển thị thông tin chi tiết của bất cứ lỗi n ào
xuất hiện trong các kịch bản của trang ASP. Đối t ượngASPError  được tạo ra khi
phương th ứcServer.GetLastError  được gọi, v ì thế thông tin về các lỗi c hỉ có thể
được truy cập bằng việc gọi ph ương thứcServer.GetLastError.
Đối tượngASPError  được bổ sung v ào ASP từ phiên bản 3.0 trở đi v à chỉ có
sẵn trong IIS 5.
Đối tượngASPError  không có phương th ức nào mà ch ỉ có các thuộc tính để
cung cấp các thông tin  về lỗi xuất hiện. D ưới đây là các thu ộc tính của đối t ượng
ASPError :
ASPCode
Thuộc tính này cho biết mã lỗi được tạo ra bởi IIS
Cú pháp:
ASPError.ASPCode
ASPDescription
Thuộc tính này trả về một chuỗi mô tả chi tiết lỗi xuất hiện.
Cú pháp:
ASPError.ASPDe scription
Category
Thuộc tính này cho bi ết nơi nào đưa ra l ỗi (do IIS  hay do ngôn ngữ kịch bản hay do
một thành phần phụ thêm nào đó).
Cú pháp:
ASPError.Category

66Column
Thuộc tính này cho biết vị trí cột thứ mấy trong tập tin ASP đ ã gây ra lỗi.
Cú pháp:
ASPError.Column
Description
Thuộc tính này mô tả ngắn gọn lỗi.
Cú pháp:
ASPError.Description
File
Thuộc tính này trả về tên tập tin ASP đ ã gây ra lỗi.
ASPError.File
Line
Thuộc tính này cho biết dòng thứ mấy trong tập tin ASP đ ã gây ra lỗi.
Cú pháp:
ASPError.Line
Number
Thuộc tính này trả về mã lỗi COM chuẩn của lỗi tạo ra.
Cú pháp:
ASPError.Number
Source
Thuộc tính này trả về đoạn m ã của dòng gây ra l ỗi.
Cú pháp:
ASPError.Source
Ví dụ:
<HTML>
<BODY>
<%
Dim objErr
Set objErr = Server.GetLastError()
Response.Write(“ASPCode = ” & objErr.ASPCode)
Response.Write(“<br>”)
Response.Write(ASPDescription=) &objErr.ASPDescription)
Response.Write(“<br>”)
Response.Write(“Category = ” & objErr.Category)
Response.Write(“<br>”)
Response.Write(“Column = ” & objErr.Co lumn)
Response.Write(“<br>”)
Response.Write(“Description = ” & objErr.Description)
Response.Write(“<br>”)
Response.Write(“File = ” & objErr.File)
Response.Write(“<br>”)
Response.Write(“Line = ” & objErr.Line)
Response.Write(“<br>”)
Response.Write(“Number =  ” & objErr.Number)

67Response.Write(“<br>”)
Response.Write(“Source = ” & objErr.Source)
Response.Write(“<br>”)
%>
</BODY>
</HTML>

68Chương5. Chỉ thị #include ,
Khi muốn chèn nội dung của một tập tin ASP v ào tập tin ASP khác tr ước khi
server thực thichúng ta dùng ch ỉ thị#include. Thông thư ờng các nội dung đó chứa
các hàm toàn c ục, các biến to àn cục, cácheader, cácfooter hoặc những g ì dùng chung
cho nhiều trang.
Cú pháp:
<!--#include file = filename -->
hoặc
<!--#include virtual = filename -->
Trong đó filename là tên c ủa tập tin m à nội dung của tập tin đó cần include v ào.
Từ khoáfile để chỉ chỉ rằng đ ường dẫn đến t ên tập tin cần include l à đường dẫn t ương
đối, đường dẫn n ày bắt đầu bằng th ư mục chứa tập tin. C òn từ khoávirtual để chỉ ra
rằng đường dẫn tới tập tin bắt đầu bằng th ư mục ảo.
Ví dụ: Giả sử ta có tập tin time.inc có chứa h àm dùng đ ể ghi ra m àn hình của browser
giờ hiện hành. Còn t ập tinDistime.asp  là tập tininclude tập tintime.inc. Hai tập tin
này được đặt trong c ùng thư m ục và với nội dung sau:
time.inc
<%
Sub DisplayTime
 Response.Write (Time)
End Sub
%>
distime.asp
<!--#include file =”time.inc” -->
<HTML>
<BODY>
<%
Response.Write(“Bây gi ờ là:”)
DisplayTime ‘ G ọi hàm trong t ập tintime.inc
%>
</BODY>
</HTML>
Lưuý:Dòng chỉ thị #incl ude không đư ợc đặt trong đoạn chứa các lệnh kịch bản.
6. tập tin global.asa
ASP cung c ấp cho bạn file cấu h ìnhglobal.asa , trong file này b ạn có thể đặt các
script xử lý các sự kiện hay các h àm, thủ tục, biến mang tính to àn cục. Fileglobal.asa
phải được đặt trong th ư mục gốc của ứng dụng v à mỗi ứng dụng chỉ đ ược phép có duy
nhất một file global.asa . Khi trang asp c ủa ứng dùng được triệu gọi lần đầu ti ên, trình
chủ IIS sẽ tìm xem trong th ư mục hiện tại của ứng dụng có file global.asp  không. N ếu
có thì trình  chủ sẽ nạp v à xử lý các sự kiện đ ược cài đặt trong file n ày, sau đó chuy ển
giao quyền xử lý lại cho trang ASP. Trong file global.asa , bạn chỉ được phép c ài đặt
và xử lý các sự kiện sau:

69Application_OnStart: Sự kiện này được phát sinh khi ng ười dùng đầu tiên
triệu gọi bất kỳ trang n ào trongứng dụng. Khi tr ình chủIIS khởi động lại hoặc
khi nội dung file global.asa  bị hiệu chỉnh th ì sự kiện này được phát sinh trở lại.
Sau khi x ử lý xong sự kiện n ày, trình ch ủ bắt đầy xử lý sự kiện
Session_OnStart  để chuẩn b ị cho phiên nối kết. Các biến Application  thường
được khởi tạo b ên trong s ự kiện này.
Session_OnStart:  Sự kiện này được gọi mỗi khi có một ng ười dùng mới yêu
cầu trang asp của ứng dụng Web trong lần đầu ti ên. Các bi ếnsessioncủa người
dùng cũng thường được khởi tạo bên trong s ự kiện này.
Session_OnEnd:  Sự kiện này được gọi khi phi ên làm vi ệc của ng ười dùng
chấm dứt. Phi ên làm vi ệc được xem là chấm dứt khi nó hết hạn (timeout hay
expired), m ặc định cho thời gian l àm việc củasession là 20 phút, b ạn có thể
tăng hay gi ảm thời gian n ày bằng cách thay đổi giá trị của thuộc tính Timeout
của đối tượngsession.
Application_OnEnde: Sự kiện này được gọi khi không c òn người dùng nào
tương tác v ới ứng dụng web của bạn nữa. Thông th ường thì sự kiện này được
gọi khi trình chủ IIS ngừng hoạt động. Thông qua sự kiện n ày ban có th ể giải
phống vùng nhớ đã cấp phát tr ước đó hoặc l ưu lại các thông tin, trạng thái cần
thiết xuống đĩa cứng để phục vụ cho quá tr ình khởi động trở lại sau đó.
Bạn cài đặt thủ tục xử lý sự kiện trong fileglobal.asa  theo mẫu sau:
<script language=”vbscript” runat=”server”>
Sub Application_OnStart
.........................
End Sub
Sub Session_OnStart
.........................
End Sub
Sub Session_OnEnd
........................
End Sub
Sub Application _OnEnd
.........................
End Sub
</script>
Ví dụ:Dưới đây là ví dụ minh hoạ cách c ài đặt và xử lý các sự kiện trong file
global.asa.
<script language=”vbscript” runat=”server”>
Sub Application_OnStart
 Application(“Status”) = “Application_OnSta rt”

70End Sub
Sub Session_OnStart
Response.Write(Application(“Status”) + “<br>”)
Response.Write(“Session_OnStart” + “<br>”)
End Sub
Sub Session_OnEnd
End Sub
Sub Application_OnEnd
End Sub
</script>
Bạn lưu fileglobal.asa  vào thư m ục của ứng dụng (giả sử là LearnASP). K ế tiếp là
bạn tạo một tập tin để kiểm tra file global.asa  với têntest.asp và đặt cùng thư m ục với
tập tinglobal.asa  với nội dung sau:
<HTML>
<HEAD>
<TITLE>Kiem tra file global.asa</TITLE>
</HEAD>
<BODY>
<B>
<%
Response.Write “Noi dung c ua trang ASP”
%>
</B>
</BODY>
</HTML>
Mở trình duyệt lên và bạn triệu gọi file test.asp. Kết quả sẽ đ ược thể hiện nh ư sau:
 Ngoài ra b ạn có thể đặt các h àm hay th ủ tục xử lý trong file global.asa để có thể các
trang trong ứng dụng có thể triệu gọi các h àm này.
7. Đối tượng dictionary
Đối tượngDictionary  được dùng để lưu trữ thông tin theo cặp t ên/giá trị. Đối
tượngDictionary có thể xem tương tự như mảng, tuy nhi ên đối tượngDictionary
được tạo ra để thao tác với dữ liệu một cách hiệu quả h ơn.
So sánh đ ối tượngDictionary với các mảng ta thấy:
+ Đối tượngDictionary dùng từ khoá (key) để nhận diện các phần tử (item) c òn
mảng thì sử dụng chỉ số.
+ Bạn không thể d ùng Redim đ ể thay đổi kích th ước của đối t ượng Dictionary
còn mảng thìđược.
+ Khi xoá m ột phần tử khỏi đối t ượngDictionary thì các ph ần tử còn lại sẽ tự
động thay thế, c òn các mảng thì không.
+ Mảng có thể có nhiều chiều c ònđối tượngDictionary không.

71+ Đối tượngDictionary được xây dựng với nhiều chức năng h ơn.
+ Đối tượngDictionary  truy cập thường xuyên các ph ần tử một cách ngẫu nhi ên
hiệu quả hơn mảng.
+ Đối tượngDictionary định vị các phần tử dựa tr ên nội dung hiệu quả h ơn.
7.1. Tạo đối tượng Dictionary
Đối tượngDictionary được tạo ra bởi đối t ượng Server bằng việc gọi ph ương thức
CreateOb ject như sau:
<%
Dim Dic
Set Dic = Server.CreateObjet(“Scripting.Dictionary”)
%>
Bởi vì hàmCreateObject của đối tượng Server trả về một đối t ượng nên để gán đối
tượng cho biến Dic ta dùng l ệnh Set.
Khi sử dụng xong thực thể của đối t ượngDictionary ta phải huỷ bỏ thực thẻ đó bằng
cách:
Set Dic = nothing
7.2. Các thu ộc tính của đối t ượng Dictionary
ComapareMode
Ta dùng thu ộc tínhComapareMode để thiết lập hoặc nhận về chế độ so sánh để
so sánh các khoá trong đ ối tượngDictionary.
Cú pháp:
Dictionary.Compa reMode [=mode]
Trong đó mode có th ể nhận một trong các giá trị sau:
0 = vbBinaryCompare – So sánh nh ị phân
1 = vbTextCompare – So sánh d ạng văn bản
2 = vbDatabaseCompare – So sánh cơ s ở dữ liệu
Ví dụ
<HTML>
<BODY>
<%
Dim Dic
Set Dic = Server.CreateObject( “Scripting.Dictionary”)
Dic.CompareMode = 1
Dic.Add “HN”, “Hà N ội”
Dic.Add “HCM”,”H ồ Chí Minh”
‘ Phương th ức Add sau đây sẽ sai bởi v ì khoá “hn”
‘ đã có rồi!
Dic.Add “hn”, “Hà Nam”
%>
</BODY>
</HTML>
Count
Thuộc tính này trả về số cặp t ên/giá trị (số phần  tử) trong đối t ượngDictionary.
Cú pháp:
Dictionary.Count

72Ví dụ:
<HTML>
<BODY>
<%
Dim Dic
Set Dic = Server.CreateObject(“Scripting.Dictionary”)
Dic.CompareMode = 1
Dic.Add “HN”, “Hà N ội”
Dic.Add “HCM”,”H ồ Chí Minh”
Dic.Add “HP”, “H ải Phòng”
Response.Writ e(“Số cặp tên/giá trị là:” & Dic.Count)
Set Dic = nothing
%>
</BODY>
</HTML>
Item
Dùng thu ộc tính n ày để gán hoặc lấy về giá trị của một phần tử trong đối t ượng
Dictionary .
Cú pháp:
Dictionary.Item (key)[ = newitem]
Ví dụ:
<HTML>
<BODY>
<%
Dim Dic
Set Dic = Server.CreateObject(“Scripting.Dictionary”)
Dic.Add “HN”, “Hà N ội”
Dic.Add “HCM”,”H ồ Chí Minh”
Dic.Add “HP”, “H ải Phòng”
Response.Write(“Giá tr ị của khoá HN l à:” & Dic.Item(“HN”))
Set Dic = nothing
%>
</BODY>
</HTML>
Key
Để thay đổi t ên của một khóa đã có trong đối tượngDictionary ta dùng thu ộc tính key
theo cú pháp sau
Dictionary.Key(key)[= newkey]
Ví dụ:
<HTML>
<BODY>
<%
Dim Dic
Set Dic = Server.CreateObject(“Scripting.Dictionary”)

73Dic.Add “HN”, “Hà N ội”
Dic.Add “HCM”,”H ồ Chí Minh”
Dic.Add “HP”, “ Hải Phòng”
Dic.Key(“HN”) = “HNOI”
Response.Write(“Giá tr ị của khoá HNOI l à:” & Dic.Item(“HNOI”))
Set Dic = nothing
%>
</BODY>
</HTML>
7.3. Các phương th ức của đối t ượng Dictionary
Add
Phương th ứcAdd dùng để thêm một cặp khoá/giá trị mới v ào đối tượng
Dictionary . Nếu khoá n ày đã có trong Dictionary  thì phương thức này sẽ bị sai.
Cú pháp:
Dictionary.Add(key, value)
Ví dụ:
<HTML>
<BODY>
<%
Dim Dic
Set Dic = Server.CreateObject(“Scripting.Dictionary”)
Dic.Add “Đ”, “Đ ỏ”
Dic.Add “X”,”Xanh”
Dic.Add “V”, “Vàng ”
Dic.Key(“T”) = “Tím”
Response.Write(“Giá tr ị của khoá T l à:” & Dic.Item(“T”))
Set Dic = nothing
%>
</BODY>
</HTML>
Exits
Để kiểm tra một khoá đ ã có trong đối tượngDictionary  hay chưa ta dùng
phương th ứcExits. Phương th ức này trả về true nếu khoá đ ãcó trongDictionary  và
trả vềfalse nếu khoá tồn tại.
Cú pháp:
Dictionary.Exits (key, value)
Ví dụ:
<HTML>
<BODY>
<%
Dim Dic
Set Dic = Server.CreateObject(“Scripting.Dictionary”)
Dic.Add “Đ”, “Đ ỏ”
Dic.Add “X”,”Xanh”
Dic.Add “V”, “Vàng”

74Dic.Key(“T”) = “Tím ”
If Dic.Exits(“V”) = true Then
Response.Write “Khóa V t ồn tại!”
Else
Response.Write(“Khoá V không t ồn tại!”)
End If
Set Dic = nothing
%>
</BODY>
</HTML>
Items
Không ph ải lúc nào ta cũng thao tác tr ên các khoá c ủa đối tượngDictionary  mà
đôi lúc ta c ũng phải thao tác tr ên dữ liệu của các khóa nh ư: tìm kiếm một giá trị n ào
đó, sửa đổi giá trị,...Nếu ta duyệt lần l ượt trên các khoá và l ấy giá trị của chúng để so
sánh thìắt hẳn sẽ mất nhiều thời gian. Đối t ượngDictionary  cung cấp cho ta ph ương
thứcItemsđể lấy một mảng các giá trị của các khoá, v à nhờ vào mảng này ta sẽ thao
tác trên dữ liệu dễ d àng hơn. Cú pháp c ủa phương thứcItems như sau:
Dictionary.Items
Ví dụ:
<HTML>
<BODY>
<%
Dim Dic
Set Dic = Server.CreateObject(“Scripting.Dictionary”)
Dic.Add “Đ ”, “Đỏ”
Dic.Add “X”,”Xanh”
Dic.Add “V”, “Vàng”
Dic.Key(“T”) = “Tím”
Response.Write (“<p>” & “Các giá tr ị:” & “</p>”)
Dim Arr, i
For i = 0 to Dic.Count -1
Response.Write(Arr(i) & “<br>”)
Next
Set Dic = nothing
%>
</BODY>
</HTML>
Keys
Thay vì tr ả về một mả ng các giá tr ị như phương th ứcItems thì phương thức
Keys lại trả về một mảng các khoá trong đối t ượngDictionary .
Cú pháp:
Dictionary.Keys
Ví dụ:
<HTML>
<BODY>

75<%
Dim Dic
Set Dic = Server.CreateObject(“Scripting.Dictionary”)
Dic.Add “Đ”, “Đ ỏ”
Dic.Add “X” ,”Xanh”
Dic.Add “V”, “Vàng”
Dic.Key(“T”) = “Tím”
Response.Write (“<p>” & “Các khoá:” & “</p>”)
Dim Arr, i
Arr = Dic.Keys
For i = 0 to Dic.Count -1
Response.Write(Arr(i) & “<br>”)
Next
Set Dic = nothing
%>
</BODY>
</HTML>
Remove
Phương th ức này xóa m ột phần tử (một cặp khoá/giá trị) ra khỏi đối t ượng
Dictionary. Cú pháp c ủa phương thức này như sau:
Dictionary.Remove(key)
Ví dụ:
<HTML>
<BODY>
<%
Dim Dic
Set Dic = Server.CreateObject(“Scripting.Dictionary”)
Dic.Add “Đ”, “Đ ỏ”
Dic.Add “X”,”Xanh”
Dic.Add “V”, “Vàng”
Dic.Key(“T”) = “Tím”
Dic.Remove(“Đ”)
Set Dic = nothing
%>
</BODY>
</HTML>
RemoveAll
Phương th ức này dùng đ ể xoá tất cả các phần tử của đối t ượngDictionary.
Cú pháp:
Dictionary.RemoveAll
8. Đối tượng filesystemobject
Đối tượng FileSystemObject c ung cấp thông tin về hệ thống tập tin, th ư mục
trên trình ch ủ và ta có thể sử dụng đối t ượng này để thao tác với các tập tin, th ư mục,...
8.1. Tạo đối tượng filesystemobject

76Bởi vìđối tượngFileSystemObject thao tác trên h ệ thống tập tin của tr ình chủ
(server) nên đ ối tượng này được tạo ra bởi Server theo cú pháp sau:
<%
Dim fso
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
%>
Lưuý:Khi dùng xong th ực thể của đối t ượngFileSystemObject ta phải huỷ thực thể
đó đi bằng cách:
Set fso = nothi ng
8.2. Các thu ộc tính của đối t ượng FileSystemObject
Đối tượngFileSystemObject chỉ có một thuộc tính duy nhất đó l à:
Drives: Thuộc tính này cho biết một tập tất cả các ổ đĩa tr ên máy tính.
Cú pháp:
[drivecoll = ] FileSystemObject.Drives
8.3. Các phương thức của đối t ượng FileSystemObject
BuilPath
Phương th ức này gắn một chuỗi v ào một đường dẫn đ ã cóđể tạo ra một đ ường
dẫn mới.
Cú pháp:
[newpath = ] FileSystemObject.BuildPath(path, name)
Trong đó:
+ path: là đư ờng dẫn đ ã tồn tại
+ name: là tên c ần gắn thêm vào Path
+ newpath: là đư ờng dẫn mới sau khi đ ã gắn tên vào
Ví dụ:
<HTML>
<BODY>
<%
Dim fso,NewPath
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
NewPath = fso.BuildPath(“C: \My Documents”, “BT”)
Response.Write (NewPath)
Set fso = nothing
%>
</BODY>
</HTML>
Trong ví d ụ trên, sau khi g ọi phương thứcBuildPath  thì biếnNewPath  sẽ có giá trị l à
“C:\My Documents \BT”
CopyFile
Phương th ức này sao chép m ột hoặc một số tập tin từ th ư mục này tới thư mục khác.
Cú pháp:
FileSystemObject.Copy src, de s [,ovr]
Trong đó:
src: là đư ờng dẫn tới tập tin cần sao chép, t ên tập tin cần chép có thể chứa các ký tự
thay thế như (*,?).

77des: là đư ờng dẫn của th ư mục cần chép tới, đ ường dẫn n ày không đư ợc chứa ký tự
thay thế (*,?).
ovr: nhận giá trị true hoặc false . Nếu ovr là true có ngh ĩa là cho phép chép đè lên các
tập tin đã có trong des. N ếu false th ì không cho phép chép đè. Giá tr ị mặc định của ovr
là true.
Ví dụ:Đoạn chương trình sauđây sao chép t ất cả các tập tin có đuôi .asp trong th ư
mụcC:\Web sang thư mụcD:\ASP
<HTML>
<BODY>
<%
Dim fso
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
fso.Copy “C: \Web\*.asp”, “D: \ASP”
Set fso = nothing
%>
</BODY>
</HTML>
CopyFolder
Phương th ức này sao chép m ột hoặc nhiều th ư mục.
Cú pháp:
FileSystemObject.Co pyFolder src, des [,ovr]
Ví dụ:Sao chép t ất cả các th ư mục con của th ư mụcC:\Web vào thư m ụcD:\ASP
<HTML>
<BODY>
<%
Dim fso
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
fso.Copy “C: \Web\*”, “D:\ASP”
Set fso = nothing
%>
</BODY>
</HTML>
CreateFolder
Phương th ức này tạo một th ư mục mới.
Cú pháp:
FileSystemObject.CreateFolder (Foldername)
Ví dụ:Tạo thư mụcC:\ASP
<HTML>
<BODY>
<%
Dim fso
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
fso.CreateFolder “C: \ASP”
Set fso = nothin g
%>

78</BODY>
</HTML>
CreateTextFile
Phương th ức này xoá một hoặc nhiều tập tin. Nếu tập tin không tồn tại th ì sẽ xuất hiện
lỗi.
Cú pháp:
FileSystemObject.CreateTextFile(filename[,Ovr[,Uni]])
DeleteFile
Phương th ức này xoá một hoặc nhiều tập tin. Nếu tập tin không t ồn tại thì sẽ xuất hiện
lỗi.
Cú pháp:
FileSystemObject.DeleteFile(filename[,bReadOnly])
Trong đó bReadOnly nh ận một trong hai giá trị. Nếu nhận giá trị true th ì các tập tin
mang thu ộc tính chỉ đọc (read -ony) cũng sẽ bị xoá. Nếu nhận giá trị fal se thì các t ập
tin mang thu ộc tính read -only sẽ không bị xoá.
DeleteFolder
Phương th ức này xoá m ột hoặc nhiều th ư mục. Nếu th ư mục không tồn tại th ì
phương th ức này sẽ gây ra lỗi.
Cú pháp:
FileSystemObject.DeleteFolder(foldername[,bReadOnly])
DrivExits
Phương th ứcDrivExits kiểm tra trên hệ thống tập tin của server có tồn tại một
ổ đĩa nào đó hay không? N ếu có thì phương thức này trả về true, c òn nếu không th ì sẽ
trả về false.
Cú pháp:
FileSystemObject.DrivExits(drive)
Trong đó drive là tên c ủa ổ đĩa cầ n kiểm tra.
Ví dụ:
<HTML>
<BODY>
<%
Dim fso
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
If fso.DrivExits(“C:”) = true Then
    Response.Write (“ ổ đĩa C tồn tại!”)
else
Response.Write(“ ổ đĩa C không tồn tại!”)
end if
Set fso = nothing
%>
</BODY>
</HTML>
GetAbsolutePathname
Phương th ức này trả về đường dẫn dạng đầy đủ của một đ ường dẫn t ương đối.
Cú pháp:

79FileSystemObject.GetAbsolutePathname(path)
Ví dụ:Giả sử đường dẫn hiện h ành làC:\ASP. Đoạn chương trình sauđây sẽ in ra
màn hình browse r dòngC:\ASP\Data\list.txt
<HTML>
<BODY>
<%
Dim fso, path
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
path = fso.GetAbsolutePathname(“Data \list.txt”)
    Response.Write (path)
Set fso = nothing
%>
</BODY>
</HTML>
GetBaseName
Phương th ức này trả về phần t ên của một tập tin hoặc t ên của thư mục ở cuối một
đường dẫn.
Cú pháp:
FileSystemObject.GetBaseName(path)
Ví dụ:Nếu path = “C: \ASP\Data\list.txt” thì hàm này s ẽ trả về “list”
GetDrive
Phương th ức này trả về một đối t ượngDrive mô tả mộtổ đĩa. Có đ ược đối
tượngDrive ta có thể thao tác tr ênổ đĩa màDrivemô tả bằng cách sử dụng các
phương th ức của đối t ượngDrive.
Cú pháp:
FileSystemObject.GetDrive(Drive)
Ví dụ:Đoạn chương trình sauđây trả về đối tượng Drive mô tả ổ đĩa C.
<HTML>
<BODY>
<%
Dim fso, drvC
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
Set drvC = fso.GetDrive(“C: \”)
Set fso = nothing
%>
</BODY>
</HTML>
GetDriveName
Phương th ức này trả về một chuỗi l à tên của mổ đĩa trong một đ ường dẫn.
Cú pháp:
FileSystemO bject.GetDriveName(path)
Ví dụ:Nếu path = “C: \ASP\Data\list.txt” khi g ọi hàm GetDriveName(path) ta s ẽ nhận
được chuỗi “C:”
GetExtensionName

80Phương th ức này trả về phần mở rộng của một tập tin (không bao gồm dấu chấm phân
cách giữa phần tên và phần mở rộn g).
Cú pháp:
FileSystemObject.GetExtensionName(path)
Ví dụ:Nếu path = “C: \ASP\Data\list.txt thì khi g ọi hàm GetExtensionName(path) ta
sẽ nhận được chuỗi “txt”.
GetFile
Phương th ức GetFile trả về đối t ượng File mô tả một tập tin đ ãđược chỉ định trong
đường dẫn truyền v ào.
Cú pháp:
FileSystemObject.GetFile(path)
GetFileName
Phương th ức này chỉ trả về phần t ên của một tập tin hay một th ư mục.
Cú pháp:
FileSystemObject.GetFileName(path)
Ví dụ:nếu path = “C: \ASP\Data” thì khi g ọi hàm GetFileName(path) ta s ẽ nhận được
chuỗi “Data”. Nếu path = “C: \ASP\Data\list.txt” thì khi g ọi hàm GetFileName(path) ta
sẽ nhận được chuỗi “list”.
GetFolder
Phương th ức GetFolder trả về đối t ượng Folder của một th ư mục.
Cú pháp:
FileSystemObject.GetFolder(path)
GetParentFolderN ame
Phương th ức này trả về thư mục cha của một th ư mục.
Cú pháp:
FileSystemObject.GetParentFolderName(path)
Ví dụ:Nếu path = “C: \ASP\Data” thì khi g ọi hàm GetParentFolderName(path) ta s ẽ
nhân được chuỗi ASP. Đây l à thư mục cha của th ư mục Data.
GetSpecia lFolder
Phương th ức này trả về đường dẫn tới một số th ư mục đặc biệt của hệ điều h ành.
Cú pháp:
FileSystemObject.GetSpecialFolder(foldername)
Trong đó foldername nh ận một trong các giá trị sau:
+WindowsFolder  hay 0: N ếu muốn nhận về th ư mục của hệ điều h ành (mặc định
windows 98 đó là thư m ục windows,đối với windows 2000 th ìđó là thư m ục winnt).
+SystemFolder  hay 1: N ếu muốn nhận về đ ường dẫn tới th ư mục System của hệ điều
hành.
+TemporaryFolder  hay 2: N ếu muốn nhận về đ ường dẫn tới th ư mục tạm thời
(TEM) của hệ điều h ành.
Ví dụ: Đoạn chương trình sauđây lấy thư mục hệ thống của hệ điều h ành. Nếu dùng
Windows 2000 thì trên màn hình browser s ẽ xuất hiện d òng“C:\WINNT\System32”
<HTML>
<BODY>
<%
Dim fso, path

81Set fso = Server.CreateObject(“Scripting.FileS ystemObject”)
path = fso.GetSpecialFolder(1)
Response.Write (path)
Set fso = nothing
%>
</BODY>
</HTML>
GetTempName
Phương th ức này trả về một t ên tập tin hoặc th ư mục tạm thời đ ược phát sinh ngẫu
nhiên.
Cú pháp:
FileSystemObject.GetTempName
Ví dụ:
<HTML>
<BODY>
<%
Dim fso, tfolder, tname, tfile
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
tfolder = fso.GetSpecialFolder(2)
tname = fso.GetTempName
Set tfile = tfolder.CreateTextFile(tname)
Response.Write (tfile)
Set fso = nothing
%>
</BODY>
</HTML>
MoveFile
Phương th ức này di chuy ển một hoặc nhiều tập tin từ n ơi này sang nơi khác.
Cú pháp:
FileSystemObject.MoveFile(src, des)
Trong đó src là nơi ch ứa các tập tin cần di chuyển di, des l à nơi mà các t ập tin cần
chép đến.
MoveFolder
Phương th ức này di chuy ển một hoặc nhiều th ư mục từ nơi này sang nơi khác.
Cú pháp:
FileSystemObject.MoveFile(src, des)
Trong đó src là nơi ch ứa các tập tin cần di chuyển đi, des l à nơi mà các t ập tin cần
chép đến.
OpenTextFile
Phương th ức này mở một tập tin v à trảvề một đối t ượng TextStream đ ược dùng để
truy cập đối tượng này.
Cú pháp:
FileSystemObject.OpenTextFile(fname, mode, creat, format)
Trong đó:
+ fname: là tên c ủa tập tin cần mở

82+ mode: dùng đ ẻ chỉ cách thức mở
+ creat: dùng đ ể chỉ định rằng nếu tập tin kh ông tồn tại thì có tạo tập tin mới hay
không
+ format: dùng đ ể chỉ ra rằng mở tập tin d ùng chuẩn ASCII hay Unicode.
8.4. Ví dụ minh hoạ
Sau đây là m ột ví dụ hiển thị một cửa sổ đăng nhập (login) cho phép ng ười
dùng gõ vào tên truy c ập (username) v à mật khẩu (password). Ch ương trình sẽ kiểm
tra cặp username v à password này có t ồn tại trong tập tin password.txt trong th ư mục
hiện tại của ứng dụng không? Nếu có th ì chương trình sẽ đưa người dùng đến trang
main.asp. N ếu không th ì chương trình sẽ thông báo v àbắt người dùng đăng nh ập lại.
Tập tin common.asp chứa các h àm mà ngư ời dùng định nghĩa trong đó có h àm
CheckAccount dùng đ ể kiểm tra xem username v à password truy ền vào có tồn tại
trong tập tin password.txt không? Nếu có th ì hàm này tr ả về true. Nếu không  thì hàm
này sẽ trả về false. Nội dung của common.asp nh ư sau:
<%
Function CheckAccount(uname,upass)
Dim fso    ‘ Bien chua doi tuong FileSystem
Dim ftxt    ‘ Bien chua doi tuong File
Dim sLine
Dim path
Dim uname_pass
uname = CStr(uname)
upass = CStr(upass )
uname_pass = uname & “:” & upass
CheckAccount = false ‘Mac dinh ban dau
path = Server.MapPath(“.”) & “ \Password.txt”
Set fso = Server.CreateObject(“Scripting.FileSystemObject”)
Set ftxt = fso.OpenTextFile(path)
While (ftxt.AtEndOfStream<>true) and (Ch eckAccount = false)
      stLine = ftxt.ReadLine
       if (uname_pass = stLine) then
        CheckAccount = true
end if
wend
ftxt.Close
Set ftxt = nothing
Set fso = nothing
End Function
%>
Tập tin login.asp l à tập tin mô tả giao diện với ng ười dùng. Nộidung của login.asp
như sau:
 <!--#include file = “common.asp”>

83<html>
<head>
<title>Login to...</title>
</head>
<body>
<b><font size=”6”>Login</font></b></p>
<%
Dim uname, upass
uname = Request.Form(“Uname”)
upass = Request.Form(“Upass”)
if (uname<>””) and  (upass<>””) then
  if CheckAccount(uname, upass) = true then
           Response.Redirect (“main.asp”)
 else
Response.Write (“<font color = red> Please check username and password!
</font>”)
end if
elseif uname<>”” then
Response.Write(“<font color = red>P lease enter passwor!</font>”)
elseif upass<>”” then
Response.Write (“<font color = red> Please enter username!</font>”)
end if
%>
<form method =”POST” action=”login.asp”>
<table border=”1” cellpadding=”0” cellspacing=”0” width=”27%”>
<tr>
  <td width=”10%” >Username</td>
  <td><input type=text size=”20” name=”Uname”
value=’<%= Server.HTMLEncode(Request.Form(“Uname”))% >’></td>
</tr>
<tr>
    <td width=”10%”>Password</td>
<td><input type=”password” size=”20” name=”Upass”></td>
</tr>
<tr>
 <td width=”100%” colsp an=”2”>
<p align=”center”>
<input type=”submit” value=”Login” name=”B3”> </td>
</tr>
</table>
</form>
</body>
</html>
Tạo tập tin main.asp. Khi bạn viết một ứng dụng web thực sự th ì trang main.asp chính
là trang chính c ủa ứng dụng.Giả sử tập tin main.asp với nội dung sau:

84<html>
<head>
<title>Trang web chính...</title>
</head>
<body>
<%
Response.Write (“Đăng nh ập thành công. Chào m ừng bạn đến trang web của chúng
tôi!”)
%>
</body>
</html>
Tạo tập tin password.txt v à đặt cùng thư m ục với ba tập tin tr ên với nội dung sau:
abc:abc
cobe:becon
nvlong:long1280
hung1254:meocon
Đây chính là danh sách các username và password mà ứng dụng cho phép đăng nhập
vào. Nếu muốn th êm người dùng, bạn thêm vào tập tin này các dòng t ươngứng.
Đặt 4 tập tin vừa tạo v ào trong c ùng một thư mục và tạo một th ư mục ảo với t ên
Myweb ch ỉ đến thư mục chứa 4 tập tin n ày.
Mở trình duyệt và gõ vào http://localhost/Myweb/login.asp . Kết quả sẽ hiển thị l ên
màn hình nh ư sau:
Khi người dùng gõ vào đúng username và password trong t ập tin password.txt th ì khi
nhấn nút login ng ười dùng sẽ được chuyển sang trang main.asp nh ư sau:
Nhưng khi g õ sai username và passwor thì m ột câu thông báo sẽ đ ược hiện lên và
bắt người dùng đăng nh ập lại như sau:
9. Đối tượng adrotator
Đối tượng AdRotator đ ược dùng để hiển thị các ảnh khác nhau mỗi khi ng ười
dùng yêu c ầu hoặc refresh một trang. Các thông tin về các ảnh hiển thị đ ược đặt trong
tập tin văn bản.
9.1. Cách t ạo đối tượng AdRotator
Để tạo đối t ượng AdRot ator ta dùng cú pháp sau:
Set ad= Server.CreateObject(“MSWC.AdRotator”)
ad.GetAdvertisement(“textfile.txt”)
9.2. Định dạng tập tin văn bản
REDIRECT URL
WIDTH 480
HEIGHT 100
BORDER 0
*
CITD.GIF
http://www.citd.edu.vn /
Đến với CITD
80
Microsoft.gif

85http://www.mircrosoft.com/
đến với Microsoft
20
Các dòng ở phía dưới dấu * l à các dòng ch ỉ hìnhảnh, địa chỉ trang web, d òng văn bản
để hiển thị nếu không hiển thị đ ược ảnh, v à tỉ lệ phần trăm số ng ười dùng truy c ập để
hiển thị các ảnh.
9.3. Các thu ộc tính của đối t ượng AdRotator
Border : chỉ định kích th ước của đ ường viền bao quanh phần quảng cáo.
Clickable : Chỉ định phần quảng cáo có hyperlink  không
TargetFrame : tên c ủa frame để hiển thị ảnh quảng cáo
Ví dụ:
<%
Dim adrot
set adrot = Server.CreateObject(“MSWC.Adrotator”)
adrot.Border = “2”
adrot.Clickable = false
adrot.TargetFrame = “targer=’_blank”’
Response.Write(adrot.Advertisement(“ads.txt”))
Set fso = nothing
%>
9.4. Các phươ ng thức của đối t ượng AdRotator
GetAdvertisement: Phương th ức này tr ả về đoạn HTML m à hiển thị mục quảng
cáo trên trang web.
Cú pháp:
AdRotator.GetAdvertisement(path)
Trong đó path là đư ờng dẫn tới tập tin văn bản mô tả các mục quảng cáo.
Bài tập chương 4
Bài 1.  Thiết kế v à cài đ ặt trang web hiển thị máy tính tay với các phép toán: cộng (+),
trừ (-), nhân (*), chia (/), lu ỹ thừa (^), căn (), b ình ph ương (x2), ngh ịch đảo (1/x).
Bài 2. Viết đoạn code d ùng đ ể đếm số lần truy cập v ào m ột trang web. Sau đó nh úng
đoạn code đó v ào trang web c ủa bạn để kiểm tra.
Bài 3. Tương t ự như câu 2 nhưng đ ếm số l ượt ng ười dùng đ ã login vào trang web.
Bài 4. Thiết kế v à cài đ ặt trang web hiển thị lịch (calendar). Trang web phải cho phép
người dùng xem l ịch tháng của một năm nào đó, xem l ịch của tháng tr ước, tháng kế
tiếp.
Bài 5. Thiết kế v à cài đ ặt trang web hiển thị hệ thống cây th ư mục của máy chủ.

86Chương 5: gi ới thiệu ado v à các kết nối cơ sở dữ liệu
1.giới thiệu
ADO (ActiveX Data Object) là m ột kỹ thuật mới do M icrosoft phát tri ển để l àm
việc với các c ơ sở dữ liệu, đ ược dùng đ ể cung cấp các khả năng kết nối v à xử lý tr ên
cơ sở dữ liệu.
Việc sử dụng ADO để truy cập v à xử lý c ơ sở dữ liệu trong trang ASP có thể
chia làm các bư ớc chính sau:
Kết nối với c ơ sở dữ li ệu thông qua OLEDB hoặc ODBC
Xây d ựng câu truy vấn dữ liệu v à yêu c ầu thực hiện câu truy vấn để thực hiện
thao tác x ử lý tr ên cơ s ở dữ liệu
Xử lý các kết quả về từ câu truy vấn
Ngắt kết nối với c ơ sở dữ liệu, giải phóng các t ài nguyên c ủa hệ thống đ ã dùng.
2. Kết nối với c ơ sở dữ liệu
2.1. Tạo connection string thông qua OLEDB, ODBC
Để có thể xử lý dữ liệu, b ước đầu ti ên chúng ta ph ải cung cấp các thông tin cần
thiết để hệ thống biết bạn muốn truy cập đến c ơ sở dữ liệu n ào. Connection string là
một chuỗi kí tự được dùng đ ể lưu tr ữ thông tin về dữ liệu nh ư sau:
-Thông tin v ề hệ quản trị c ơ sở dữ liệu đ ược dùng trong cơ s ở dữ liệu của bạn. C ơ
sở dữ liệu của bạn d ùng có th ể MS Access, MS SQL Server hay Oracle...
- Thông tin v ề vị trí đặt c ơ sở dữ liệu của bạn. Ví dụ nếu bạn d ùng MS Access, b ạn
phải chỉ ra c ơ sở dữ liệu của bạn đ ược lưu trong t ập tin .mdb n ào.
- Mô hình k ết nối c ơ sở dữ liệu: ADO nối kết với c ơ sở dữ liệu có thể xem nh ư
thông qua t ầng OLEDB hay tầng ODBC; từ tầng OLEDB có thể nối kết trực t iếp dựa
trên Provider đư ợc cung cấp cho từng hệ c ơ sở dữ liệu ri êng bi ệt hoặc thông qua
ODBC cung c ấp Driver cho từng hệ c ơ sở dữ liệu nh ư mô h ình và ta có các b ảng liệt
kê bên dư ới:

87Bảng sau liệt k ê các OLE DB connectio n string cho m ột số hệ quản trị c ơ sở dữ
liệu thông dụng:
Data Source OLE DB Connection String
Microsoft Access provider=Microsoft.Jet.OLEDB.4.0;
Data Source=đư ờng dẫn đến tập tin.mdb
Microsoft SQL Provider=SQLOLEDB.1; Data Source=
Server đường dẫn đến database trên server
Oracle Provider=MSDAORA.1; Data
Source=đư ờng dẫn đến database tr ên
server
Microsoft Indexing Service Provider=MSIDXS.1; Data
Source=đư ờng dẫn
Bảng sau liệt k ê các ODBC connection string cho m ột số hệ quản trị c ơ sở dữ
liệu thông dụn g:
Data Source Driver ODBC Connection String
Microsoft Access Driver={Microsoft Access
Diver(*.mdb)}; DBQ=đư ờng dẫn đến tập
tin.mdb
Microsoft SQL Server Driver={SQL Server};SERVER=đư ờng
dẫn đến database tr ên server
Oracle Driver=MSDAORA.1; DataADO
OLEDB
jet SQL oracle ODBC
Jet SQL Orac le
Access SQL Oracle Access SQL OracleOLEDB Layer
ODBC
Layer

88Source=đ ường dẫn đến database tr ên
server
Microsoft Exel Driver={Microsoft Exel
Driver(*.xls)};DBQ=đư ờng dẫn đến tập
tin.xls; DriverID=26
Microsoft Exel 97 Driver={Microsoft Exel
Driver(*.xls)};DBQ=đư ờng dẫn đến tập
tin.xls; DriverID=790
Paradox Driver={Microso ft Paradox
Driver(*.db)};DBQ=đư ờng dẫn đến tập
tin.db; DriverID=26
Text Driver={Microsoft Text
Driver(*.txt;*.csv)};DBQ=đư ờng dẫn
đến tập tin.xls; DefaultDir=đ ường dẫn
đến *.txt
Microsoft Visual FoxPro (with a database
container)Driver={Microsoft Visual  FoxPro
Driver};
SourceType=DBC;Sourcedb=đư ờng dẫn
đến tập tin.dbc
Microsoft Visual FoxPro (without a
database container)Driver={Microsoft Visual FoxPro
Driver};
SourceType=DBF;SourceDb=đư ờng dẫn
đến tập tin.dbf
2.2. Tạo connection string thông qua DSN
Ta có th ể xây dựng connection strings bằng cách tạo Data Source Name (DSN)
trong ODBC. M ột DSN chứa các thông tin sau:
oTên c ủa DSN
oTập tin c ơ sở dữ liệu m à nó tr ỏ tơí
oCon tr ỏ chỉ đến các driver kết nối với tập tin c ơ sở dữ liệu
oUserID và password đ ể truy xuất data store
oCác thông tin c ần thiết khác cho việc kết nối
DSN có ba lo ại: User, System v à File. User DSN b ị giới hạn trong phạm vi ng ười tạo.
Một user đăng nhập v ào mạng sẽ không thấy DSN của các user khác. System DSN
được lưu trên registry và đư ợc nhìn thấy bởi tất cả ng ười dùng trên máy c ục bộ bao
gồm các dịch vụ NT. File DSN chứa nội dung t ương đương nhưng dư ới dạng tập tin
văn bản chứ không phải trong registry
-Các bước tạo DSN cho c ơ sở dữ liệu Access
1. Mở cửa sổ điều khiển ODBC v à chọn System DS N. Vào Control Panel -> 32 bit
ODBC (window 98)
Vào Control Panel -> Administrator Tools -> Data Source (ODBC) (Windows 2000
hoặc Windows XP)
2. Nhấp vào Add đ ể tạo DSN mới. Chọn từ danh sách driver, driver bạn cần sử
dụng cho c ơ sở dữ liệu của m ình.ở đây là Access.
3. Đặt tên DSN

894. Chỉ ra cơ sở dữ liệu mf DSN trỏ tới bằng cách nhấp Select v à duyệt rồi chọn c ơ
sở dữ liệu.
Đối với Windows 9X, mọi ng ười đều có thể cấu h ình DSN
Đối với Windows NT/2000 (Professional hoặc Server) th ì chỉ có quyền Administrat or
hay uỷ quyền Admin mới có thể cấu h ình DSN.
Sau khi click nút Ađ đ ể Add DSN, chọn Driver Microsoft Access.
Đặt tên Data Source Name và nh ấn nút Select chỉ ra tập tin *.mdb chứa c ơ sở dữ liệu
MS Access
- Các bước tạo DSN cho c ơ sở dữ liệu SQL Server
Chúng ta cần phải biết một số thông tin sau tr ước khi tạo DSN cho c ơ sở dữ liệu SQL
Server
oĐịa chỉ mạng của database server
oKiểu mạng (network type) của server (Name pipes, TCP/IP...)
oPhương th ức bảo mật của server (NT hay SQL Server)
oMột tài khoản hợp lệ kh i đăng nhập vào server
oTên của cơ sở dữ liệu tr ên server
Đặt tên cho data source name và ch ỉ ra tên Server ch ứa database tr ên SQL Server
Chỉ ra login ID v à password c ủa database cần nối kết. Có thể chỉnh lại các cấu h ình
các kiểu kết nối mạng đến máy serv er nối chứa dữ liệu bằng cách nhấn Client
Configuration
Chọn ra database cần nối kết từ list box
Sau khi đ ã hoàn tất các bước trước ta nhấn nút Finish. Nhấn nút Test Data Source để
kiểm tra xem việc tạo DSN đ ã thành công hay ch ưa và các k ết nối với c ơ sở dữ liệu có
thực thi được hay không.
Nếu kết nối th ành công ta có thông báo như sau:
3. Các đối tượng của ADO
Mô hình các đối tượng ADO v à mối liên hệ đối tượng

90ADO có các đ ối tượng Connection, Command, Recordset, Record, Stream và
các tập hợp Errors Fields, Properities, Parameter nh ư hình trên. Các đối tượng trong
ADO và các m ối liên hệ giữa chúng đ ược thể hiện nh ư hình bên d ưới. Dựa tr ên mô
hìnhđối tượng của ADO sẽ triển khai v à mô tả một cách chi tiết các đối t ượng, các
thuộc tính và các phương th ức chức năng của mỗi đối t ượng được tạo và sử dụng cho
việc kết nối, truy vấn c ơ sở dữ liệu v à hiển thị dữ liệu thông qua các đối t ượng ADO
để hiển thị các tr ường của mẫu tin, hay kết quả câu truy vấn l ên trang web ASP.parameter errors properities properities
Connection Command
Record Recordset
Stream
Fields Fields Properities

91Đối tượng Connection
Đối tượng cho phép bạn nối kết với c ơ sở dữ liệu. Qua đó, nó cung cấp sự kết nối
giữa ADO v à một cơ sở dữ liệu n ào đó. Nó ch ứa ba thông tin:
oCơ sở dữ liệu
oGiao th ức (driver/provider) để trao đổi thông tin v ới
ousername và Password
Đối tượng Command
Đối tượng đ ược thiết kế để thực hiện các câu lệnh ở dạng các câu lệnh SQL nh ư
SELECT, INSERT, UPDATE, DELETE hay các câu l ệnh SQL thay đổi cấu trúc dữ
liệu nh ư ALTER TABLE hay DROP INDEX ho ặc có thể chứa các stor e procedure.
Đối tượng n ày thư ờng đ ược dùng đ ể chạy câu lệnh SQL không trả về bất kỳ mẫu tin
nào.
Đối tượng Recordset
Đối tượng chứa tập hợp các dữ liệu đ ược rút ra từ c ơ sở dữ liệu. Nó cho phép
thay đ ổi dữ liệu nh ư thêm, xoá, s ửa dữ liệu, hay di chuyển mẫu tin.
Đối tượng Record
Đối tượng Record l ưu tr ữ một h àng (m ẫu tin) trong Recordset, một th ư mục hay
tập tin trong File System.
Đối tượng Stream
Đối tượng đ ược thiết kế để quản lý dữ liệu dạng binary, nó đ ược dùng đ ể quản
lý dữ liệu BLOB (Binary Larg e Object) như h ìnhảnh hay mảng dữ liệu lớn.
3.1. Đối tượng Connectionerrors
connectioncollecti on
Recordset CommandActiveConne ction
collection
parametersexecute()ActiveCom mand execute()
FieldscollectionRecord
collectionsourceActiveConnection
GetChildrent()
open ()SourceRecord

923.1.1 Kết nối cơ sở dữ liệu qua đối t ượng Connection
ADO cung c ấp đối t ượng Connection để hỗ trợ cho việc tạo v à quản lý kết nối
cơ sở dữ liệu cần xử lý. Các thuộc tính v à phương th ức của đối t ượng n ày cho phép
bạn mở, đóng kết nối, đồng thời cho phép thực hiện các câu truy vấn dữ liệu.
Để có thiết lập kết nối c ơ sở dữ liệu, ta cần phải thực hiện các b ước sau:
oTạo một thể hiện (instance) của đối t ượng Connection từ phía server bằng lệ nh:
Server.CreateObject(“ADODB.Connection”)
oSử dụng ph ương th ức Open để mở kết nối c ơ sở dữ liệu. Tham số của ph ương
thức này là chu ỗi connection string, chuỗi n ày sẽ tương ứng với c ơ sở dữ liệu.
Ví dụ:minh h ọa cho việc tạo kết nối đến c ơ sở dữ liệu đ ượclưu b ằng MS Access
<%
strDSN=”Driver={Microsoft Access
Driver(*.mdb)}; DBQ=C: \path\filename.mdb”
‘ Tạo connection string
Set Conn=server.CreateObject(“ADODB.Connection”)
‘ Mở nối kết qua bằng connection string
Conn.Open strConn
%>
Khi c ần có một kết nối c ố định cho tất cả các trang ta có thể thiết lập tầm vực cho đối
tượng Connection bằng cách viết các thủ tục sau trong tập tin global.asa
-ở mức application:
<%
Sub Application_Onstrat()
Set objConn=Server.CreateObject(“ADODB.Connection”)
End Sub
%>
-ở mức Session:
<%
Sub Session_Start()
Set objConn=Server.CreateObject(“ADODB.Connection”)
End Sub
%>
3.1.2. Thao tác d ữ liệu thông qua đối t ượng Connection
Đối tượng Connection cung cấp ph ương th ức Execute để thực hiện một câu
lệnh truy vấn. Thao tác trên cơ s ở dữ liệu tr ước hết tạo instance cho đối t ượng
Connection, xây d ựng câu truy vấn SQL v à yêu c ầu hệ thống thực hiện thông qua
phương th ức Execute của đối t ượng Connection.
Cú pháp:
objConn.Execute CommandText, RecordAffected, Options
CommandTex t: Câu l ệnh SQL, t ên bảng hay Stored Procedure
Options: Quy đ ịnh loại CommandText
Hằng Giá tr ị Loại của CommandText
adCmdUnknown 0 Mặc định, không xác định
loại CommandText
AdCmdTable 1 CommandText là câu l ệnh

93SQL
adCmdTable 2 CommandText là tên b ảng
adCmdStore 4 CommandText là stored
procedure hay câu truy v ấn
Ví dụ minh hoạ thực hiện truy vấn mẫu tin v ào cơ s ở dữ liệu
<%
Dim objConn
Set objConn=Server.CreateObject(“ADODB.Connection”)
objConn.Open “DSN=CITDDB”
Dim sqlText
SqlText=”SELECT * FROM STUDEN TS”
Set objRS=objConn.Excute(sqlText)
%>
Ví dụ minh hoạ việc th êm m ẫu tin v ào cơ s ở dữ liệu
<%
Dim objConn
Set objConn=Server.CreateObject(“ADODB.Connection”)
objConn.Open “DSN=CITDDB”
Dim sqlText
SqlText=”INSERT INTO STUDENTS (HOTEN, NAMSINH, LOP, DIACHI,
PHONE) VALUE (‘Nguyen Thang’,’14/08/1974’, ‘CV=012003’, ’78 Truong Dinh
TPHCM’, ‘9317442’)”
Set objRS=objConn.Excute(sqlText)
%>
Các câu l ệnh DELETE, UPDATE cũng đ ược thực hiện t ương t ự
<%
Dim objConn
Set objConn=Server.CreateObject(“ADODB.Connection”)
objConn.Open “DSN=CITDDB”
Dim sqlText
SqlText=”UPDATE STUDENTS  SET DIACHI=’34 Truong Dinh TPHCM’,
NAMSINH=’07/06/1977’ WHERE HOTEN=’Nguyen Thang’”
Set objRS=objConn.Excute(sqlText)
%>
<%
Dim objConn
Set objConn=Server.CreateObject(“ADODB.Connection”)
objConn.Open “DSN=CITDDB”
Dim sqlText
SqlText=”DELETE STUDENTS  WHERE HOTEN=’Nguyen Nam’ AND
NAMSINH=’07/06/1977’”
Set objRS=objConn.Excute(sqlText)
%>
3.2. Thao tác cơ s ở dữ liệu bằng đối t ượng Command

94Để có thể thao tác v à thay đổi cơ sở dữ liệu bằng đối t ượng Command, ta phải
thực hiện các b ước sau trước khi sử dụng đối t ượng Command:
Khai báo và kh ởi tạo thể hiện (instance) của đối t ượng Command
Khởi tạo các thuộc tính đối t ượng
Trong đó thu ộc tính của đối t ượng Command nh ư sau:
ActiveConnection chứa instance đối tượng Connection đ ã
được khai báo
CommandText chứa câu lệnh SQL hay t ên bảng
CommandType chứa các thuộc tính quy định cho
CommandText
CommandTimeOut Thời gian để thực hiện câu lệnh, nếu việc
thực hiện v ượt quá thời gian đ ãđịnh này
sẽ có thông báo lỗi
Prepared True/false. True cho phép biên d ịch trước
thực thi câu lệnh v à false ngư ợc lại
Execute Thực thi câu lệnh
Giá trị của thuộc tính CommandType:
thuộc tính mô tả
adCmdText Câu lệnh SQL
adCmdTable tên bảng
adCmdStoreProc Store Procedure hay câu lệnh query
adCmdUnknown giá trị mặc định
Ví dụ:minh hoạ sử dụng đối t ượng Command
<%
strDSN=”Driver={Microsoft Access Driver(*.mdb)};
DBQ=C:\path\filename.mdb”
Set Conn=server.CreateObject(“ADODB.Connection”)
‘ Khởi tạo các tạo đối t ượng Command
Dim objCmd
Set ObjCmd=Server.CreateObject(“ ADODB.Command ”)
objCmd.ActiveConnection=objConn
sqlText=”INSERT INTO Customers(FirstName,LastName)
Values(‘Truc’,’Nguyen’)”
objCmd.CommandText=sqlText
objCmd.CommandType=adCmdText
objCmd.CommandTimeOut=30 ‘ tính bằng giây
objCmd.Prepared=false
objCmd.Execute
%>
3.3. Xử lý dữ liệu thông qua đối t ượng Recordset
Các phương th ức của đối t ượng recordset
Phương th ức Diễn giải
AddNew tạo mới record
Cancel huỷ các thao tác đang thực thi
Close Đóng đối tượng recordset và các đ ối

95tượng liên quan
Delete xoá record hay m ột tập record hiện h ành
Find tìm một record thoả m ãnđiều kiện
GetRows Lấy nhiều record đ ưa vào một mảng
GetString trả về recordset d ưới dạng một chuỗi
MoveFirst đưa vị trí của record hiện h ành về record
đầu tiên trong recordset
MoveLast đưa vị trí của record hiện h ành về record
cuối cùng trong recordset
MoveNext đưa vị trí của record hiện h ành về record
kế
NextRecordset xoá đối tượng Recordset hiện h ành và trả
về đối tượng recordset kế tiếp
Open mở một record
Requery cập nhật lại dữ liệu bằng cách thực hiện
lại câu lệnh truy vấn ban đầu
Resync Refresh l ại dữ liệu trong đối t ượng
Recordset hi ện hành
Save lưu Recordset xu ống file
seek tìm chủ mục của recordset
Update Lưu các thay đ ổi
Đối tượng Recordset có nhi ều phương thức để xử lý thao tác dữ liệu nh ư bảng
liệt kêở trên, trong đó các phương th ức thường sử dụng nh ư để tác động đến sự thay
đổi mẫu tin nh ưAddNew, Update, Delete ; di chuy ển vị trí các mẫu tin nh ư
MoveFirst, MovePrevious, MoveNe xt, MoveLast ; đóng m ở recordset nh ưOpen,
Close. Ta sẽ lần lượt đi vào chi tiết cách thức sử dụng các ph ương thức này một cách
cụ thể.
1.Phương th ức Open
Cú pháp:
objRs.Open  Source, Connection, CursorType, LockType, Options
Source tên bảng hay câu lệnh SQL hoặc Stored
Procedure
ActiveConnection chứa instance đối t ượng Connection đ ã
được khai báo hay chuỗi kết nối
CursorType Kiểu con trỏ m à cơ sở dữ liệu sử dụng
khi mở Recordset
LockType kiểu khoá sẽ đ ược sử dụng trong
Recordset.Bao g ồm 4 kiểu khoá:
Options Kiểu của truy vấn hay bảng đ ược miêu tả
bởi Source
Tham số CursorType:
Hằng số giá trịChức năng
adOpenForwardOnly 0 truy vấn tuần tự trong Recordset. Đây là
cursor mặc định

96AdOpenKeyset 1 không đư ợc truy xuất đến record đang
được user khác truy xuất
adOpenDynamic 2 cho phép s ửa đổi, th êm hay xoá ngay c ả
recordset đang đư ợc mở bởi user khác
adOpenStatic 3 không đư ợc phép thay đổi record khi nó
đang được mở bởi user khác
Tham sốLockType :có 4 kiểu khoá
Hằng số Giá trị Chức năng
adLockReadOnly 1 Khoá mặc định, các tr ường
trong recordset ch ỉ có thể
đọc không thể cập nhật
adLockPressimistic 2 Sự thay đổi dữ liệu sẽ có
tác động ngay lập tức tr ên
recordset
adLockOptimistic 3 Khoá mẫu tin hiện h ành
khi gọi phương th ức
Update
adLockBatchOptimistic 4 thực hiện việc cập nhật
theo lô
Tham số Options:
Hằng Giá trịLoại của CommandText
AdCmdText 1 tham số Source l à câu lệnh SQL
AdCmdTable 2 Tham số Source l à tên bảng
AdCmdStoredProc 4 Tham số Source l à stored procedure hay câu truy
vấn
AdCmdUnknown 0 tham số Source không xác định
AdCmdFile 256 Tham số Source l à file
AdCmdTableDirect 512 Tham số Source l à tên bảng
2.Phương th ứcAddNew: Phương th ức này cho phép t ạo mới mẫu tin, gán dữ
liệu mới vào các field c ủa mẫu tin, v à nó chỉ được cập nhật v ào cơ sở dữ liệu
khi ta gọi phương thức Update hay UpdateBatch
3.Phương th ức Update:  Phương th ức này được dùng để cập nhật lại mẫu tin
hiện thời trong c ơ sở dữ liệu
Ví dụ: Sinh vi ên có mã s ố CV-012003, mu ốn thay đổi số điện thoại ‘9817442’
Trước hết ta t ìm Sinh viên có  mã số CV-012003, n ếu tồn tại ta sẽ cập nhật số điện
thoại
objRs.Find “MASV=’CV -012003’”
objRs.(“Phone”)=’9817442’
objRs.Update
4.Phương th ức Delete: phương th ức này cho phép xoá m ẫu tin trong Recordset
Cú pháp:  objRs.Delete
hay objRs.Delete <tham s ố>
Tham số Mô tả
AdAffectCurrent xoá mẫu tin hiện h ành
AdAffectGroup xoá mẫu tin thoả điều kiện lọc

97Ví dụ:Xoá sinh viên mang h ọ tên ‘Nguyen Thang’
objRs.Find “HOTEN=’Nguyen Thang”
Else
objRs.Delete
End If
5.Phương th ức Close: Để ngắt kết nối với c ơ sở dữ liệu, ta  dùng phương th ức
Close có trong đ ối tượng Recordset cũng nh ư có trong đ ối tượng Connection.
Sau đó để giải phóng t ài nguyên h ệ thống đ ã dùng trong các đối tượng này, ta
dùng lệnh gán giá trị nothing cho các biến đối t ượng này.
<%
objRs.Close
Set objRs=Not hing
Conn.Close
Set Conn=nothing
%>
3.3.1. Lưu tr ữ dữ liệu trả về
ADO sử dụng đối t ượng Recorset để l ưu trữ kết quả trả về từ câu truy vấn dữ
liệu SELECT. V ì kết quả trả về của một câu truy vấn SELECT có thể có nhiều mẫu
tin, cho nên có th ể xem Recordset  như là m ột mảng các mẫu tin.
Thông thư ờng có 2 cách để lấy dữ liệu từ câu truy vấn đặt v ào biến Recordset
Thực hiện ph ương thức Execute của đối t ượng Connection cho câu lệnh truy vấn v à trả
về kết quả cho Recordset. Ví dụ nh ưSet rs=Conn.Execute(strSQL)
Tạo một thể hiện (instance) cho đối t ượng Recordset v à sử dụng ph ương thức Open,
kết hợp với đối t ượng Connection đ ã tạo
3.3.2. Hiển thị dữ liệu trả về
Khi muốn lấy được dữ liệu của một tr ường (field) trong một mẫu tin hiện h ành,
ta lấy chuỗi t ên của trường đó như là đ ối số cho đối t ượng Recordset hay đối số của
thuộc tính Fields của đối t ượng Recordset. Ví dụ để lấy dữ liệu của tr ường HOTEN
trong b ảng STUDENTS ta có thể d ùngobjRS(“HOTEN”)  hay
objRS.Fields(“HOTEN”)
Khi muốn dịch chuyển qua lại đến các mẫu tin được lưu trong đ ối tượng
Recordset, ta s ử dụng ph ương thứcMoveNext, MovePrevious, MoveFirst,
MoveLast và phải đi kèm với việc kiểm tra mẫu tin hiện h ành có đang ở vị trí đầu hay
ở cuối mẫu tin.
Khi muốn kiểm tra vị trí con trỏ mẫu tin hiện h ànhlà trước mẫu tin đầu hay
mẫu tin cuối trong Recordset, ta d ùng thuộc tínhBOF hoặcEOF để kiểm tra
Ví dụ minh hoạ thể hiện dữ liệu của tất cả mẫu tin có họ t ên bắt đầu là chữ ‘Nguyen’
của bảng STUDENTS
<%
Dim objConn
Set objConn=Server.CreateObject(“ADODB. Connection”)
objConn.Open “DSN=CITDDB”
Dim sqlText
SqlText=”SELECT *  FROM STUDENTS  WHERE HOTEN LIKE ’Nguyen%’”
Set objRS=objConn.Excute(sqlText)

98‘STUDENTS(HOTEN,NAMSINH,LOP)
Response.Write “&nbsp;” “H ọ tên” & “&nbsp;” & “Năm Sinh” & “&nbsp;” &
“Lớp”
Do until objRs.EOF
Response.Write i & “&nbsp;” & objRs.Fields(“HOTEN”)
& “&nbsp;” & objRs.Fields(“NAMSINH”) & “&nbsp;”
& objRs.Fields(“LOP”)
i=i+1
objRs.MoveNext
Loop
%>
3.4. Đối tượng Record
Đối tượng Record l ưu trữ một hàng (mẫu tin) trong recordset, một  thư mục hay
tập tin trong File System
Để sử dụng đối t ượng này ta phải khai báo thể hiện (instance) cho đối t ượng record
Dim objRec
Set objRec=Server.CreateObject(“ADODB.Record”)
Đối tượng Record có các ph ương thức:
Phương th ức Mô tả
Cancel huỷ việc thực  hiện trên record
Close đóng một đối tượng Record
CopyRecord copy một file hay th ư mục
DeleteRecord xoá một file hay th ư mục
GetChildren trả về một đối t ượng Recordset, mỗi d òng
của Recordset l ưu trữ tập tin trong th ư
mục
MoveRecord di chuyển một file  hay một thư mục
Open Mở một đối t ượng Record tồn tại, tạo
mới một file, hay tạo mới một th ư mục
1. Phương th ức Open
Sau khi tạo một instance của đối t ượng Record, ta có thể d ùng phương th ức này
để open, tạo mới một file hay tạo mới một th ư mục
Cú pháp:
objRec.Open (Source,
ActiveConnection,[Mode],[CreateOption],[Option],[Username],[Password])
Ví dụ:
Source là URL ch ỉ đến th ư mục:
<%
Dim objRec
Set objRec=Server.CreateObject(“ADODB.Record”)
objRec.Open “URL=http://localhost/sinhvien”
objRec.Open  “readme.txt”,objConn
%>
Source là m ột hàng (row) hi ện thời trong Recordset
<%

99Set objRs=Server.CreateObject(“ADODB.RecordSet”)
Set objRs=Server.CreateObject(“ADODB.Record”)
objRs.Open “SINHVIEN”,”DSN=CITDDB”
objRec.MoveFirst
objRec.Open objRs
%>
2. Phương  thức CopyRecord:
Phương th ức CopyRecord d ùng đ ể chép một file hay một th ư mục từ n ơi này
đến nơi khác
Cú pháp:
objRec.CopyRecord (Source, Destination, username, psword, opt, async)
Source: Tên hay thư m ục của tập tin cần copy
Destination: v ị trí cần co py đến
username: userID có quy ền truy cập đối với Destination
Psword: m ật khẩu
opt: ch ế độ Copy. Mặc định adCopyUnspeacified. Nếu bạn muốn ghi đ è có th ể
dùng adCopyOverWrite.
async: n ếu là true, th ực thi bất đồng bộ
Tương t ự cho ph ương th ứcMoveRecord
3. Phương th ức DeleteRecord:
Phương th ức DeleteRecord cho phép  xoá một file hay một th ư mục chỉ định
nào đó.
Cú pháp:
objRec.DeleteRecord (Source, Async)
3.5. Đối tượng Stream
Đối tượng Stream d ùng đ ể lưu tr ữ luồng dữ liệu dạng text hoặc nhị phân
Trướckhi s ử dụng đối t ượng n ày cần phải khai báo thể hiện (instance):
Set objStream = Server.CreateObject(ADODB.Stream)
Các phương th ức của đối t ượng Stream:
Phương th ức Mô tả
Close đóng đ ối tượng Stream
CopyTo chép m ột số ký tự hoặc bytes từ đối t ượng Strea m này
sang đ ối tượng Stream khác
Flush gửi nội dung của đối t ượng Stream
LoadFromFile lấy nội dung của một đối t ượng v ào đối tượng Stream
Open mở một đối t ượng Stream từ URL hay đối t ượng
Record
read đọc số l ượng bytes trong đối t ượng Stream chứa dữ
liệu nhị phân
ReadText đọc số ký tự  trong đối t ượng Stream chứa nội dung l à
text
SaveToFile lưu n ội dung đối t ượng Stream xuống tập tin
SetEOS thiết lập thuộc tính của EOS đối với vị trí hiện thời
SkipLine bỏ qua một d òng khi đọc một TextStream

100Write ghi m ột số đối t ượng bytes của dữ liệu nhị phân v ào
đối tượng Stream
WriteText ghi d ữ liệu dạng Text v ào đối tượng Stream
4. Tập hợp errors
Xử lý lỗi l à phần quan trọng trong việc tạo các ứng dụng. Bạn cần phải xử lý
khéo léo các l ỗi dự đoán sẽ xảy ra cũng nh ư cần có một c ơ chế để xử lý những lỗi
không đoán trư ớc được. Điều n ày cho phép b ạn kiểm soát d òng ch ương tr ình  khi có
lỗi xảy ra, cung cấp cho ng ười dùng cu ối những thông báo lỗi có ý nghĩa h ơn và đ ề
xuất cách xử lý.
Mô hình đối tượng ASP không hỗ trợ chức năng xử lý lỗi, công việc n ày do đ ối
tượng Error có sẵn của ngôn ngữ kịch bản thực hiện nh ư VBScript. Đ ối tượng Error bị
hạn chế v ì nó ch ỉ hỗ trợ phát biểu “ On Error Resume Next ”
Thuộc tính Mô t ả
Description Trả về phần mô tả lỗi
HelpContext Trả về ID của chủ đề trong phần hệ
thống trợ giúp
HelpFile Trả về đ ường dẫn v à tập tin trợ giúp
Nativeerror Trả về m ã lỗi từ provider hay data source
Number Trả về số hiệu lỗi
Source Trả về t ên đối tượng hay ứng dụng
nguồn gốc lỗi
SQLState Trả về 5 ký tự m ã lỗi SQL
Ví dụ:Hiển thị thông báo lỗi khi kết nối đến c ơ sở dữ liệu bị lỗi
<html>
<body>
<%
set objconn=Server.CreateObject(“ADODB.Connection”)
objconn.Provider=”Microsoft.Jet.OLEDB.4.0”
on error resume next
objconn.Open(Server.Ma pPath(“northwind1.mdb”))
if objconn.Errors.Count >0 then
set objErr=Server.CreateObject(“ADODB.Error”)
%>
<%
for each objErr in objConn.Errors
if objErr.Number<>0 then
response.Write(“<p>”)
response.Write(“Description:”)
response.Write(“objErr.Description & <br />”)
response.Write(“Help context:”)
response.Write(objErr.helpContext & “<br />”)
response.Write(“Help File:”)
response.Write(“objErr.HelpFile & “<br />”)
response.Write(“Native error”)
response.Write(objErr.Nativeerror & “<br />”)

101response.Write(“E rror number”)
response.Write(objErr.Number & “<br />”)
response.Write(“Error source”)
response.Write(objErr.Source & “<br />”)
response.Write(“SQL state:”)
response.Write(objErr.SQLState & “<br />”)
response.Write(“</p>”)
End if
Next
End if
objconn.close
%>
</body>
</html>
5. stored procedure
Stored Procedure là t ập các câu lệnh T -SQL đư ợc bi ên dịch tr ước, nó có nhiều
thuận lợi h ơn so v ới việc sử dụng các câu lệnh SQL b ên trong chương tr ình c ủa bạn:
Thực hiện nhanh h ơn, ti ết kiệm thời gian khi thực hiện công vi ệc. Giảm sự l ưu
thông các gói d ữ liệu tr ên m ạng
Có th ể dễ d àng truy ền tham số v ào Stored Procedure và truy xu ất dữ liệu
Nâng cao tính b ảo mật thông qua việc chỉ định quyền truy cập đối với Stored
Procedure
Cú pháp:
CREATE PROC[EDURE] procedure_name {:number}
[{@parameter data_type} [VARYING]=default]
[OUTPUT][,...n]
[WITH]{RECOMPILE | ENCRPTION | RECOMPILE,
EMCRYTION}
[FOR REPLICATION]
As sql_satement [...n]
Ví dụ:
Stored procedure không có tham s ố,: tạo stored procedure hiển thịi m ã số, tên
và đi ạchỉ của sinh vi ên
CREATE PROCEDURE sp_Sinhvien
AS
SELECT MASV, HOTEN, DIACHI, NAMSINH
FROM SINHVIEN
Bạn có thể sử dụng Query Analyer trong SQL SERVER để thực thi stored
procedure trên
EXEC sp_Sinhvien
Stored procedure có tham s ố: tạo stored procedure t ìm kiếm thông tin của sinh
viên, tham s ố truyền v ào là mã s ố sinh vi ên (MSSV)
CREATE PROCEDURE sp_TimSinhvien
(@MSSV varchar(15))
AS

102SELECT MSSV, HOTEN, DIACHI, NAMSINH
FROM SINHVIEN
WHERE ( MASV=@MSSV )
Stored Procedure v ới đối tượng Command:
Chương tr ình minh hoạ: stored procedure đ ược gọi thông qua đối t ượng Command
<%@LANGUAGE=VBScript%>
<HTML>
<HEAD>
<TITLE>Stored procedure qua đ ối tượng ADO</TITLE>
</HEAD>
<BODY>
<%
Dim MSSV
MSSV=’CV -01-2003’
Set objConn=Server.CreateObject(“ADODB.Connection”)
objConn.Open “DSN=CITDDB”,sa
Set objCmd=Server.CreateObject(“ADODB.Command”)
Set objCmd.CommandText=”sp_TimSinhvien ‘
“& CStr(MSSV) &” ’ ”
Set objRS=objCmd.Execute
Response.Write (“Thông tin c ủa sinh vi ên có mã s ố:” & MSSV & “<BR>”)
Response.Write (“<TABLE BORDER=1>”)
Do Until Not objRS.EOF
Response.Write(“<TR>”)
Response.Write(“<TD>” & objRS(“MSV”) & “</TD>”)
Response.Write(“<TD>” & objRS(“HOTEN”) & “</TD>”)
Response.Write(“<TD>” & objRS(“NAMSINH”) & “</TD>”)
Response.Write(“<TD>” & objRS(“DIACHI”) & “</TD>”)
Response. Write(“</TR>”)
objRS.MoveNext
Loop
Response.Write(“</TABLE>”)
objRS.Close
Set objRS=Nothing
Set objConn=Nothing
%>
</BODY>
</HTML>
Stored procedure v ới đối tượng Recordset:
Chương tr ình minh ho ạ: stored procedure đ ược gọi thông qua đối t ượng Command
<%@LAN GUAGE=VBSript%>
<HTML>
<HEAD>
<TITLE>Stored procedure qua đ ối tượng ADO</TITLE>
</HEAD>

103<BODY>
<%
Dim MSSV
MSSV=’CV -01-2003’
Set objConn=Server.CreateObject(“ADODB.Connection”)
objConn.Open “DSN=CITDDB”,sa
sqlText=”sp_TimSinhvien ‘ ”&CStr(MSSV) &” ’ ”
SetobjCmd=Server.CreateObject(“ADODB.Recordset”)
objRs.Open sqlText, objConn
Response.Write (“Thông tin c ủa sinh vi ên có mã s ố:” & MSSV & “<BR>”)
Response.Write (“<TABLE BORDER=1>”)
Do Until Not objRS.EOF
Response.Write(“<TR>”)
Response.Write(“<TD>” & objRS(“ MSV”) & “</TD>”)
Response.Write(“<TD>” & objRS(“HOTEN”) & “</TD>”)
Response.Write(“<TD>” & objRS(“NAMSINH”) & “</TD>”)
Response.Write(“<TD>” & objRS(“DIACHI”) & “</TD>”)
Response.Write(“</TR>”)
objRS.MoveNext
Loop
Response.Write(“</TABLE>”)
objRS.Close
Set objRS=Nothing
Set objConn=Nothing
%>
</BODY>
</HTML>
6. xÂY D ựNG WEBSITE BằNG ASP
Trong ph ần này sẽ minh hoạ một số ví dụ việc sử dụng ADO để kết nối v à thao
tác d ữ liệu, v à một số b ài tập
Ví dụ 1: Chúng ta mu ốn hiển thị chỉ những mẫu tin từ bảng “Custo mers” trong
database northwind có CompanyName b ắt đầu với chữ A (chú ý l ưu tập tin với t ên m ở
rộng .asp):
 <HTML>
<BODY>
<%
Set conn=Server.CreateObject(“ADODB.Connection”)
conn.Provider= “Microsoft.Jet.OLEDB.4.0”
conn.Open “c:/webdata/northwind.mdb”
Set rs=Server.CreateObject(“ADODB.Recordset”)
sql=” SELECT Companyname, Contactname FROM
Customers
WHERE CompanyName LIKE ‘A%’”
rs.Open sql, conn
%>

104<table border=”1” width=”100%”>
<tr>
<%for each x in rs.Fields
response.write(“<th>” & x.name & “</th>”)
next%>
</tr>
<%do until rs.EOF%>
<tr>
<%for each x in rs.Fields%>
<td><%Response.Write(x.value)%></td>
<%next
rs.MoveNext%>
</tr>
<%Loop
rs.Close
conn.close%>
</table>
</BODY>
</HTML>
Kết quả hiển thị nh ư sau:
Ví dụ 2: Hiển thị danh sách khách h àng sau khi ch ọn lựa tên nư ớc của khách h àng
(chú ý l ưu tập tin  với t ên m ở rộng.asp), danh sách các n ước được lấy từ bảng Country,
tên khách hàng đư ợc lấy từ bảng Customers trong database northwind:
Kết quả sẽ hiển thị nh ư sau:
<HTML>
<BODY>
<%
Set conn=Server.CreateObjec t(“ADODB.Connection”)
conn.Provider= “Microsoft.Jet.OLEDB.4.0”
conn.Open(Server.MapPath(“northwind.mdb”))
Set rs=Server.CreateObject(“ADODB.Recordset”)
sql=” SELECT DISTINCT Country FROM Customers ORDER BY Country”
rs.Open sql, conn
country=request.form(“c outry”)
%>
<form method=”post’>
Choose Country<select name=”country”>
<%do until rs.EOF%>
response.write(“<option>”)
if rs.fields(“coutry”)=country then
response.write(“selected”)
end if
response.write(“>”)
response.write(rs.fields(“Country”))

105rs.MoveNext
Loop
rs.Close
set rs=Nothing%>
</select>
<input type=”submit” value=”Show customers”>
</form>
<%
if country<>”” then
sql=”SELECT Companyname, Contacname, Country FROM Customers WHERE
country=”&country &””
set rs=Server.CreateObject(“ADODB.Recordset”)
rs.Op en sql, conn
%>
<table width=”100%” cellspacing=”0” cellpadding=”2” border=”1”>
<tr>
<th>Companyname</th>
<th>Contactname</th>
<th>Country</th>
</tr>
<%
do until rs.EOF
response.write(“<tr>”)
response.write(“<td>” & rs.fields(“companyname”) & “< /td>”)
response.write(“<td>” & rs.fields(“contactname”) & “</td>”)
response.write(“<td>” & rs.fields(“country”) & “</td>”)
response.write(“</tr>”)
rs.MoveNext
loop
rs.close
conn.Close
set rs=nothing
set conn=nothing
%>
</table>
<%end if%>
</BODY>
</HTML>
Ví dụ 3: Hiển thị thông tin khách h àng t ừ bảng Customers, ta sử dụng ph ương th ức
QueryString c ủa đối t ượng Request để lấy thông số sort truyền v ào, d ựa vào thông s ố
này đ ể sắp xếp thứ tự theo t ên trư ờng đ ược truyền v ào, lưu thành t ập tin
demo_sort_3.asp:
<HTML>
<BODY>
<table border=”1” width=”100%” bgcolor=”#fff5ee”>

106<tr>
<th align=”left” bgcolor=”#b0c4de”>
<a href=”demo_sort_3.asp?sort=companyname”>Company</a>
</th>
<th align=”left” bgcolor=”#b0c4de”>
<a href=”demo_sort_3.asp?sort=contactname”>Contact</a>
</th>
</tr>
<%
if request.querystring(“sort”)<>”” then
sort=request.querystring(“sort”)
else
sort=”companyname”
end if
Set conn=Server.CreateObject(“ADODB.Connection”)
conn.Provider= “Microsoft.Jet.OLEDB.4.0”
conn.Open(Server.MapPath(“northwind.mdb”))
Setrs=Server.CreateObject(“ADODB.Recordset”)
sql=” SELECT Companyname, Contactname FROM Customers ORDER BY ” & sort
rs.Open sql, conn
do until rs.EOF
response.write(“<tr>”)
for each x in rs.Fields
response.write(“<td>” & x.value & “</td>”)
next
rs.MoveNext
response.write(“</tr>”)
Loop
rs.Close
conn.Close
%>
</table>
</BODY>
</HTML>
Bài tập 1: Ta sẽ xây dựng mô h ìnhứng dụng cho việc bán h àng qua m ạng, xây dựng
một cơ sở dữ liệu, qua đó vận dụng các đối t ượng của ADODB để có thể kết nối với
cơ sở dữ liệu sao c ho có th ể hiển thị v à cung c ấp được thông tin cho khách h àng. Ch ủ
yếu giới thiệu cách thức thiết kế một ứng dụng web có các chức năng nh ư sau: xem
thông tin chi ti ết của một mặt h àng, ch ọn lựa h àng và tính ti ền
Hướng dẫn:
Tạo cơ sở dữ liệu gồm có hai bảng giỏ hàng “basket” và thành ph ần chi tiết của một
giỏ hàng đ ãđược chọn mua “basket_detail”
Dưới đây l à cách th ức để tạo bảng bằng tập tin script cho SQL Server
CREATE TABLE [dbo].[basket]

107([shopper_id] [varchar] (32) NOT NULL, [basket_id] [int]
IDENTITY (1 000,1) NOT NULL
PRIMARY KEY CLUSTERED,
[basket_name] [varchar] (100) NULL,
[default_basket] [bit] NULL,
[date_created] [datetime] NULL,
[date_modified] [datetime] NULL) ON [PRIMARY]
CREATE TABLE [dbo].[basket_detail]
([basket_id] [int] NOT NULL
FOREIGN  K EY REFERENCES basket(basket_id),
[sku] [varchar] (25) NOT NULL,
[sku_name] [varchar] (100) NOT NULL,
[sku_qty] [int] NOT NULL,
[sale_price] [money] NOT NULL,
[list_price] [money] NOT NULL,
[adjuste_price] [money] NOT NULL,
PRIMARY KEY (basket_id, sku) ON [ PRIMARY]
Sau khi đ ã tạo được cơ sở dữ liệu, ta cần phải xây dựng các trang chính có giao diện
như sau:
Trang hiển thị tất cả các thông tin các mặt h àng ví dụ tên mặt hàng, hình ảnh đi
kèm, giá, giá gi ảm, mã số mặt hàng,...để cho phép khách h àng chọn lựavà đặt mua
mặt hàng này cho vào gi ỏ. Trang n ày chúng ta có th ể làm tĩnh hoặc động tức l à ta có
thể liệt kê sẵn các mặt h àng lên trang này, ho ặc lấy dữ liệu từ c ơ sở dữ liệu để hiển thị
bằng cách tạo th êm bảng chứa sản phẩm cần bán.Từ trang n ày có thể xem thông tin v ề
giỏ hàng của khách h àng bằng nhấn đến nút “your basket”.
Sau khi đ ã chọn mua “buy”  đ ược sản phẩm cho phép hiển thị danh sách các
mặt hàng đã chọn lựa một cách chi tiết.
Với trang n ày cho phép khách hàng xoá “Delete” m ặt hàng này n ếu không chọn
mua, cho  phép thay đ ổi số lượng hàng cần mua chỉ việc nhấn nút “update”, ghi nhận
các mặt hàng mà khách hàng đ ã mua “save basket” ghi nh ận mã số giỏ hàng đã chọn
và có thể tiếp tục chọn lựa mặt h àng cho gi ỏ hàng mới, và “checkout” đ ể kết thúc chọn
và mua hàng. Có th ể cho phép tiếp tục chọn lựa các mặt h àng khác “continue
shopping”.
Cập nhật các thông tin mặt h àng vào gi ỏ hàng hiện hành
Các hàm ti ện ích trong tập tin basket_util.asp
<%
‘ Hàm thêm m ột mặt hàng đã chọn vào giỏ hàng của khách h àng
Function FcnAddBasket            (ConnObj, usr_GUID, proID,
prodname,prodquantity,prodlistprice,prodsaleprice)
dim strAddCode,rsAdd
set rsAdd=server.CreateObject(“ADODB.RECORDSET”)
rsAdd.Open “EXEC sproc_addToBasket” & chr(39) & usr_GUID & chr(39)
&”, “& ch r(39) & proddID & chr(39) &”.”& chr(39) & prodname & chr(39) &”,”&
prodquantity &”, “ & prodlistprice &”,” & prodsaleprice, ConnObj

108strAddCode=rsAdd(“errorcode”)
FcnAddtoBasket=strAddCode
rsAdd.Close
set rsAdd=nothing
End Function
‘Hàm xoá toàn b ộ hàng đã có trong gi ỏ hàng
Function FcnDeleteBasket
(ConnObj, usr_GUID, bID)
dim rsDel
set rsDel=server.CreateObject(“ADODB.RECORDSET”)
rsDel.Open “EXEC sproc_DelBasket” & chr(39) & usr_GUID & chr(39) &”,
“& chr(39) & bID, ConnObj
FcnDeleteBasket=rsDel(“erro rcode”)
rsDel.Close
set rsDel=nothing
End Function
‘Hàm xoá toàn b ộ hàng trong gi ỏ hàng
Function FcnMakeDefBasket
(ConnObj, usr_GUID, bID)
dim rsDef
set rsDef=server.CreateObject(“ADODB.RECORDSET”)
rsDef.Open “EXEC sproc_MakeDefaultBasket” & chr(39)  & usr_GUID &
chr(39) &”, “& chr(39) & bID, ConnObj
FcnMakeDefBasket=rsDef(“errorcode”)
rsDef.Close
set rsDef=nothing
End Function
‘ Hàm cập nhật vào giỏ hàng
Sub SubUpdateBasket(updStr)
dim updConn
set updConn=server.CreateObject(“ADODB.Connection”)
updConn.ConnectionString=strBasketDSN
updConn.Open
updConn.Execute updStr
updConn.Close
Set updConn=nothing
End Sub
‘ Hàm lấy mã số của giỏ h àng của khách h àng
Function FcnGetBasket
(ConnObj, usr_GUID)
dim rsTemp
set rsTem=server.CreateObject (“ADODB.RECORDSET”)

109rsTemp.Open “EXEC sproc_getBasket” & chr(39) & usr_GUID & chr(39) ,
ConnObj
set FcnGetBasket=rsTemp
End Function
‘ Hàm lưu gi ỏ hàng hiện tại của khách h àng
Function FcnSaveBasket
(ConnObj, usr_GUID, bName,bID)
dim rsSave
set rsSave=server.CreateObject(“ADODB.RECORDSET”)
rsSave.Open “EXEC sproc_SaveBasket” & chr(39) & usr_GUID & chr(39) &”,
“& chr(39) & bName &chr(39) &”,” & bID, ConnObj
FcnSaveBasket=rsSave(“errorcode”)
rsSave.Close
set rsSave=nothing
End Function
‘ Hàm lấy giỏ hàng trước của khách h àng nếu có
Function FcnGetSavedBaskets
(ConnObj, usr_GUID)
dim rsTempSaved
set rsTempSaved=server.CreateObject(“ADODB.RECORDSET”)
rsTempSaved.Open “EXEC sproc_GetSavedBaskets” & chr(39) & usr_GUID
&chr(39), ConnObj
set FcnSavedBa skets=rsTempSaved
Set rsTempSaved=nothing
End Function
‘ Thủ tục hiển thị thông báo lỗi phát sinh
Sub writeError
Response.Write(“<font color=’red’><p>An error occured while processing your
basket request!<br>Please contact the site Administrator<p></font>” )
End Sub
‘ Thủ tục hiển thị thông báo giỏ h àng đãđược lưu
Sub writeSavedBasketMessage
Response.Write(“<h4>Your Saved Baskets</h4><p><font color=’brown’>You do not
have any saved basket at this time</font><p>”)
End Sub
‘ Thủ tục hiển thị thông báo mặt h àng đã có trong gi ỏ hàng
Sub writeDuplicateEntryMessage
Response.Write”<font color=’green’>You already have this product in your
basket</font>”
End Sub
‘ This function returns a 32 character GUID from SQL Server
Function FcnGenerateGUID(ConnObj)
dim strGUID ,rsGUID
set rsGUID=server.CreateObject(“ADODB.RECORDSET”)
rsGUID.Open “EXEC sproc_createGUID”, ConnObj

110strGUID=rsGUID(“guid”)
FcnGenerateGUID=strGUID
rsGUID.Close
set rsGUID=nothing
End Function
‘ Thủ tục lấy 32 ký tự guid từ SQL v à ghi giá tr ị cookie
SubSubCreateNReturnGUID
Dim myGUID
‘Call function to return a GUID
myGuid=FcnGenerateGUID(BaskConn)
‘append created userGuid to cookie...
Response.Cookies(“shopGuid”)(“Guid”)=myGuid
Response.Cookies(“shopGuid”).expires=”August 30,2020”
End Sub
%>
<%Sub B asketHeader To display Basket Header%>
<table cellspacing=”1” cellpadding=”1” border=”0” width=”500”>
<tr bgcolor=”gray”>
<th><b><font size=” -1” color=”#ffffff”>Item</font></b></th>
<th><b><font size=” -1” color=”#ffffff”>Item ID</font></b></th>
<th><b><fon t size=”-1” color=”#fffff”>Qty</font></b></th>
<th><b><font size=” -1” color=”#fffff”>Unit<br>Price</font></b></th>
<th><b><font size=” -1” color=”#fffff”>Sale<br>Price</font></b></th>
<th><b><font size=” -1” color=”#fffff”>Total</font></b></th>
</tr>
<%End S ub%>
<% Sub BasketManager  ‘To Manage Saved Baskets%>
<p>
<h4>Your Saved Baskets</h4>
<form name=”BaskMgr” method=”POST” action=”basket.asp”>
<table cellspacing=”2” cellpadding=”1” border=”0” width=”500”>
<th align=”left” bgcolor=”gray”><b><font size=” -1”color=”#ffffff”>Basket
Name</font></b></th>
<th align=”left” bgcolor=”gray”><b><font size=” -1” color=”#ffffff”>Date
Created</font></b></th>
<th>&nbsp;</th>
<th>&nbsp;</th>
<!--Loop to populate table -->
<%
do
Dim strBName,strĐateCreate,intSavedBaskID
intSavedBaskID=rsSavedBaskets(“basket_id”)
strBName=rsSavedBaskets(“basket_name”)
strĐateCreate=rsSavedBaskets(“date_created”)
%>

111<tr>
<td><%=strBName%></td>
<td><%=strDateCreated%></td>
<td align=”center”><a
href=”basket.asp?bntMkDef=<%=intSavedBaskID%>”><b>Mak e
Default</b></a></td>
<td align=”center”><a
href=”basket.asp?bntDelSaved=<%=intSavedBaskID%>”><b>Delete</b></a></td>
</tr>
<%
rsSavedBaskets.moveNext
loop until rsSavedBaskets.eof
rsSavedBaskets.close
set rsSavedBaskets=nothing
%>
<!--End Loop -->
</table>
</form>
<%End Sub%>
Các store procedure dùng trong các hàm ti ện ích
CREATE PROCEDURE sproc_createBasket
@shopperid varchar(32)
/* DESCR:Checks for existing default basket for shopper*/
/* Returns the basker ID, if non exits, creates one */
declare@baskID int
set nocount on
SELECT @baskID=basket_id FROM basket WHERE shopper_id=@shopperid AND
default_basket=1
IF (@baskID IS NULL) OR (@baskID=”)
BEGIN --create and return a new basket
INSERT INTO
basket(shopper_id,default_basket,date_created,date_modified )
VALUES(@shopperid,1,getdate(),getdate())
IF @@ERROR!=0
BEGIN
SELECT @baskID=1
RETURN@baskID
END
SELECT @baskID=basket_id FROM basket WHERE shopper_id=@shopperid AND
default_basket=1
--add the default basket name (=BasketID)
UPDATE basket SET
basket_nam e=@baskID
WHERE shopper_id=@shopperid AND default_basket=1 RETURN @baskID
END

112ELSE
BEGIN --return existing basket
RETURN @baskID
END
set nocount off
CREATE PROCEDURE sproc_addToBasket
@shopperid varchar(32),
@sku varchar(25)
@skunamevarchar(150),
@qty int,
@listprice money,
@salepricemoney
/*DESCR:Inserts new product into shopper basket tables */
/*RETURNS: interger errorcode; 0=success,1=error */
AS
DECLARE @basketID int
DECLARE @subtotal money
--calculate subtotal
SET@subtotal=@saleprice * @qty
set nocount on
--get the default basket ID by calling sproc_createBasket
EXEC @basketID=sproc_createBasket @shopperid
--check returned value. If=1, then return error!
If @basketID=1
BEGIN
SELECT @basketID AS ‘errorcode’
RETURN
END
--start the insert transaction
BEGIN TRAN InsertBasket
--do the insert into the basket_detail table
INSERT INTO
basket_detail(basket_id,sku,sku_name,sku_qty,sale_price,list_price,adjusted_price)
VALUES
(@basketID,@sku,@skuname,@qty,@saleprice,@listprice,@subtotal)
--do error checking
IF @@ERROR!=0
BEGIN
--rollback transaction!
ROLLBACK TRAN InsertBasket
--return error code
SELECT 1 AS ‘errorcode’
RETURN
END

113--update the basket modified time
UPDATE basket SET date_modified=getdate() WHERE shopper_id=@shopperid
AND basket_id=@basketID
--do error checking
IF  @@ERROR!=0
BEGIN
--rollback transaction!
ROLLBACK TRAN InsertBasket
--return error code
SELECT 1 AS ‘errorcode’
RETURN
END
--commit transaction
COMMIT TRAN InsertBasket
--return success code(0)
SELECT 0 AS ‘errorcode’
CREATE PROCEDURE sproc_createGUID
/*DESCR:this sp creates a 32 character GUID */
/*RETURNS: 32 character GUID alpha -numeric */
AS
set nocount on
DECLARE @guid_val varchar(100)
SET @guid_val=REPLACE(CONVERT(varchar(100),NEWID()),’ -’,”)
--Return the GUID value
SELECT @guid_v al as ‘guid’
set nocount off
CREATE PROCEDURE sproc_deleteBasket
@shopperguid varchar(32)
@basketid int
/*DESCR:Deletes shopper’s entire basket content */
/* Uses a Transaction -either whole basket ****/
/* deleted or its left as is ! */
/*RETURNS: Int: 0= success,1=error */
AS
--disable the row count message
set nocount on
--begin a transaction
BEGIN TRAN BasketDeletion
--delêt contents of basket in foreign key table
DELETE FROM basket_detail
WHERE basket_id=@basketid
--do error checking
IF @@ ERROR!=0

114BEGIN
--rollback the transaction!
ROLLBACK TRAN BasketDeletion
--return error code
SELECT 1 AS ‘errorcode’
RETURN
END
--delete contents of basket table (PK table)
DELETE FROM basket
WHERE shopper_id=@shopperguid
AND basket_id=@basketid
--do error checking
IF @@ERROR!=0
BEGIN
--rollback the transaction!
ROLLBACK TRAN BasketDeletion
--return error code
SELECT 1 AS ‘errorcode’
RETURN
END
-no errors, commit the transaction!
COMMIT TRAN BasketDeletion
--return success code
SELECT 0 AS ‘errorcode’
set nocount off
CREATE PROCEDURE sproc_getBasket
@shopperid varchar(32)
/*DESCR:Returns recordset of shopper’s default basket */
/*RETURNS: Returns recordset of shopper’s default basket */
AS
set nocount on
--get the RS
SELECT
bd.basket_id,bd.sku,bd.sku -
name,bd.sku_qty,bd.s ale_price,bd.list_price,bd.adjusted_price,bt.basket_name
FROM basket_detail bd,basket bt
WHERE     bd.basket_id=bt.basket_id
AND bt.default_basket=1
AND bt.shopper_id=@shopperid
set nocount off
CREATE PR OCEDURE sproc_getSavedBaskets
@shopperid varchar(32)

115/* Retrieves all saved baskets by shopper*/
/* Returns recordset of all saved baskets by shopper */
AS
set nocount on
--get the RS
SELECT
bt.basket_id,bt.basket_name,bt.default_basket,bt.date_created,bt. date_modified
FROM basket bt
WHERE bt.shopper_id=@shopperid
AND bt.default_basket=0
set nocount off
CREATE PROCEDURE sproc_makeDefaultBasket
@shopperguid varchar(32)
@basketid int
/* Makes the specified basket shopper’s default basket */
/* RETURNS: Int: 0=success,1=error   ****/
AS
--disable the row count message
set nocount on
--begin a transaction
BEGIN TRAN BasketDefault
--set shopper’s existing default basket to 0
update basket set default_basket=0 w here shopper_id=@shopperguid
--do error checking
IF @@ERROR!=0
BEGIN
--rollback the transaction!
ROLLBACK TRAN BasketDefault
--return error code
SELECT 1 AS ‘errorcode’
RETURN
END
--set the new default basket
update basket set default_basket=1 where shoppe r_id=@shopperguid and
basket_id=@basketid
--do error checking
IF @@ERROR!=0
BEGIN
--rollback the transaction!
ROLLBACK TRAN BasketDefault
--return error code
SELECT 1 AS ‘errorcode’
RETURN
END

116-no errors,commit the transaction!
COMMIT TRAN BasketDefault
--return success code
SELECT 0 AS ‘errorcode’
set nocount off
CREATE PROCEDURE sproc_saveBasket
@shopperid varchar(32)
@basketname varchar(100)
@basketid int
/* DESCR: Saves specified basket for shopper */
/* RETURNS: interger errorcode: 0=succes,1=error ****/
AS
set nocount on
UPDATE basket
SET basket_name=@basketname,default_basket=0,date_modified=getdate()
WHERE shopper_id=@shopperid
AND  basket_id=@basketid
--do error checking
IF @@ERROR!=0
BEGIN
--return error code
SELECT 1 AS ‘errorcode’
RETURN
END
ELSE
--return success code
SELECT 0 AS ‘errorcode’
set nocount off
CREATE PROCEDURE sproc_updateBasket
@shopperid  varchar(32)
@basketid int,
@sku varchar(25)
@qty  int
/* DESCR: Updates shopper’s default basket */
/* RETURNS:interger errorcode: 0=success,  1=error */
AS
set nocount on
--do the update
IF @qty=0
BEGIN --delete this sku from basket
DELETE FROM basket_detail WHERE basket_id=@basketid AND sku=@sku
UPDATE basket SET date_modified=getdate() WHERE shopper_id=@shopperid
AND basket_id=@basketid

117--do error checking
IF @@ERROR!=0
BEGIN
--return error code
SELECT 2 AS ‘errorcode’
RETURN
END
END
ELSE
BEGIN
UPDATE basket_detail SET sku_qty=@qty,adjusted price=(@qty*sale pric) WHERE
basket id=@basketid AND sku=@sku
UPDATE basket SET date_modified=getdate()
WHERE shopper_id=@shopperid AND basket_id=@basketid
--do error checking
IF @@ERROR!=0
BEGIN
--return error code
SELECT 1 AS ‘errorcode’
RETURN
END
END
--return success code
SELECT 0 AS ‘errorcode’
set nocount off
Bài tập 2:
Một siêu thị muốn thông báo cho  các khách hàng c ủa mình mỗi khi có mặt h àng mới
về. Hãy viết một ứng dụng web hỗ trợ công việc tr ên bằng các chức năng sau:
a.Cho phép ngư ời dùng điền vào thông tin c ủa khách h àng như tên đăng nh ập,
mật khẩu, họ t ên, địa chỉ liên lạc, điện thoại, địa chỉ em ail... và các ch ủng loại
mặt hàng mà ngư ời dùng muốn thông tin khi có mặt h àng mới thuộc chủng loại
này.
b.Cho phép ngư ời dùng cập nhật lại các thông tin đ ãđăng ký. Đ ể thực hiện đ ược
thao tác này, ngư ời dùng phải đăng nhập đúng với t ên và mật khẩu đãđăng ký.
c. Cho phép qu ản lý liệt k ê danh sách các khách hàng đ ãđăng ký theo t ừng chủng
loại mặt hàng.
Hướng dẫn:
-Xây dựng csdl quản lý thông tin khách h àng, mặt hàng, loại mặt
hàng.
-Xây dựng các trang trong đó có các form cho phép đăng ký khách
hàng, đăng nh ập để cung cấp thông tin.
-Xây dựng các câu truy vấn để liệt k ê danh sách khách hàng theo
chủng loại mặt h àng.

118Tài liệu tham khảo
1. ASP 3.0, ASP.NET
Nguyễn Phương Lan (ch ủ biên) của Nhà Xuất Bản Giáo Dục năm 2001
2.  ASP Database (d ịch và tổng hợp)
SAIGON BOOK của Nhà Xuất Bản Trẻ năm 2002
3. Xây dựng trang web động ASP
4. Building an Intranet
5. HTML & CGI Unleased
John December & Mark Ginsburg_USA:Sams.net,1996_830 tr;23 cm
6. Intranet bible
Ed Tittel & James M.Stewart_USA: IDG Books Worldwide, 1997_854 t r,23 cm

119Mục lục
Chương 1: các khái ni ệm cơ bản................................ ................................ ...............1
1.Mạng máy tính l à gì?................................ ................................ ............................... 1
2.Internet là gì? ................................ ................................ ................................ ...........1
3.Địa chỉ IP l à gì?................................ ................................ ................................ .......2
4.Giao thức SMTP,POP3 ................................ ................................ ........................... 3
5.Giao thức FTP................................ ................................ ................................ ..........3
6.Giao thức HTTP ................................ ................................ ................................ .......4
7.Giao thức NNTP ................................ ................................ ................................ ......4
8.Giao thức Chat................................ ................................ ................................ .........4
9.URL................................ ................................ ................................ .......................... 6
10.Hyperlink  là gì?................................ ................................ ................................ ......6
11.Web Browser là gì? ................................ ................................ ................................ 7
12.Web Server là gì? ................................ ................................ ................................ ...7
13.Website là gì? ................................ ................................ ................................ .........7
14.World Wide Web (www) là gì? ................................ ................................ .............8
15.Sự khác biệt giữa Internet v à WorldWideWeb ................................ ...................... 8
16.Web page là gì? ................................ ................................ ................................ ......8
Chương 2: Lập trình web v ới ngôn ngữ si êu văn bản HTML ................................ 10
1.khái niệm ngôn ngữ  HTML................................ ................................ ..................... 10
2.Lập trình web v ới ngôn ngữ html ................................ ................................ ............10
2.1.Các thành ph ần cơ bản của HTML ................................ ................................ .12
2.2.Tạo trang Web ................................ ................................ ................................ .12
2.3.Cấu trúc của một tập tin HTML ................................ ................................ ......13
2.4.Xem trang HTML b ằng trình duyệt Web................................ ........................ 13
2.5.Các tag cơ b ản trong HTML ................................ ................................ ............13
2.5.1.Tag chú gi ải................................ ................................ ................................ ..14
2.5.2.Các tag đ ịnh dạng văn bản ................................ ................................ ............20
2.5.3.Các tag đ ịnh dạng h ìnhảnh................................ ................................ ..........22
2.5.4.Các tag đ ịnh dạng trang ................................ ................................ ................ 23
2.5.5.Các tag t ạo danh sách(list) ................................ ................................ ............28
2.5.6.Tạo liên kết(link)................................ ................................ .......................... 29
2.5.7. Một số ký tự đặc biệt trong HTML ................................ ............................. 30
2.5.8.Các tag dùng thi ết kế bảng ................................ ................................ ...........33
2.5.9.Các tag dùng t ạo Form................................ ................................ ................. 38
2.6.Các tag t ạo Frame (khung) ................................ ................................ ..............38
2..6.1.Tạo Frame có dạng h àng................................ ................................ .............40
2.6.2.Tạo Frame có dạng cột ................................ ................................ ................. 40
2.6.3.Kết hợp tạo Frame vừa dạng h àng vừa có dạng cột ................................ .....41
2.7.Các hi ệu ứng Dynamic HTML (DHTML) ................................ ...................... 41
2.7.1.Tạo chuỗi ký tự chuyển độ ng................................ ................................ ....... 41
2.7.2.Thay đ ổi hình dạng chuột khi đi qua một ô trong bảng ............................... 2
Chương 3: Giới thiệu ngôn ngữ kịch bản vbscript v à javascript .......................... 43
1.giới thiệu ngôn ngữ vbscript v à javascript ................................ ............................... 44

1202.ngôn ng ữ vbscript ................................ ................................ ................................ .....44
2.1.Chú thích m ột dòng lệnh................................ ................................ ................. 44
2.2.Cách khai báo biến, hằng, mảng ................................ ................................ ......44
2.2.1.Khai báo bi ến................................ ................................ ................................ 45
2.2.2.Khai báo h ằng................................ ................................ ............................... 45
2.2.3.Khai báo m ảng................................ ................................ .............................. 46
2.3.Các ki ểu dữ liệu ................................ ................................ ............................... 47
2.4.Các toán t ử cơ sở................................ ................................ ............................. 48
2.5.Các lệnh xử lý điều kiện rẽ nhánh ................................ ................................ ...48
2.5.1.Cấu trúc If...Then ................................ ................................ .......................... 48
2.5.2.Cấu trúc If..Then...Else ................................ ................................ ................. 49
2.5.3.Cấu trúc Select Case5 ................................ ................................ ................... 0
2.6.Cấu trúc lặp ................................ ................................ ................................ ...........50
2.6.1.Cấu trúc Do...Loop ................................ ................................ ....................... 51
2.6.2.Cấu trúc While...Wend ................................ ................................ ................. 51
2.6.3.Cấu trúc For...Next ................................ ................................ ....................... 52
2.6.4.Cấu trúc For Each...Next ................................ ................................ ..............52
2.7.Khai báo hàm và th ủ tục................................ ................................ ....................... 52
2.7.1.Khai báo hàm ................................ ................................ ................................ 53
2.7.2.Khai báo th ủ tục................................ ................................ ............................ 53
3.Ngôn ngữ javascript ................................ ................................ ................................ .53
3.1.Chú thích m ột hay nhiều d òng lệnh................................ ................................ .53
3.2.Cách khai báo bi ến,mảng5 ................................ ................................ ..............3
3.2.1.Cách khai báo bi ến................................ ................................ ....................... 54
3.2.2.Khai báo m ảng................................ ................................ .............................. 54
3.3.Các ki ểu dữ liệu trong javascript ................................ ................................ .....54
3.3.1.Dữ liệu kiểu số ................................ ................................ .............................. 55
3.3.2.Kiểu ký tự................................ ................................ ................................ .....55
3.3.3.Kiểu chuỗi................................ ................................ ................................ .....55
3.3.4.Kiểu luận lý ................................ ................................ ................................ ..56
3.3.5.Kiểu ngày................................ ................................ ................................ ......57
3.4.Các lệnh xử lý điều kiện rẽ nhánh ................................ ................................ ...57
3.4.1.Cấu trúc If ................................ ................................ ................................ .....57
3.4.2.Cấu trúc If..else ................................ ................................ ............................. 57
3.4.3.Cấu trúc switch...case ................................ ................................ ................... 58
3.5.Cấu trúc lặp ................................ ................................ ................................ ......58
3.5.1.Cấu trúc For ................................ ................................ ................................ ..58
3.5.2.Cấu trúc While ................................ ................................ .............................. 59
3.5.3.Cấu trúc Do ...While................................ ................................ ...................... 59
3.6.Khai báo hàm ................................ ................................ ................................ ...60
4.Sử dụng vbscript v à javascript trong trang web ................................ ....................... 61
4.1.Chèn đo ạn vbscript/javascript v ào trang HTML ................................ .............61
4.2.Xuất/nhập dữ liệu trong vbscript v à javascript ................................ ...............62
4.2.1.Xuất dữ liệu ................................ ................................ ................................ ..61
4.2.2.Nhập dữ liệu ................................ ................................ ................................ .62

1215.Xử lý các sự k iện khi tương tác v ới các thành phần trên trang web ........................ 62
Chương 4:
Lập trình webđộng với ngôn ngữ lập tr ình ASP................................ ................... 66
1.Giới thiệu về asp ................................ ................................ ................................ ......66
2.nạp một ứng dụng web l ên trình ch ủ iis................................ ................................ ...67
3.các khái ni ệm cơ bản về asp ................................ ................................ ..................... 68
3.1.Thành ph ần cơ bản của một trang asp ................................ ............................. 68
3.2.Nhập/xuất dữ liệu ................................ ................................ ............................ 69
3.3.Hoạt động của asp ................................ ................................ ............................ 69
4.Các đối tượng cơ bản trong asp ................................ ................................ ................ 69
4.1.Đối tượng Request ................................ ................................ ........................... 69
4.1.1.Các t ập hợp của đối t ượng Request ................................ .............................. 70
4.1.2.Thu ộc tính của đối t ượng Request ................................ ................................ 73
4.1.3.Phương th ức của đối t ượng Request ................................ ............................. 73
4.2.Đối tượng Response ................................ ................................ ........................ 73
4.2.1.Các t ập hợp của đối t ượng Response ................................ ........................... 73
4.2.2.Thu ộc tính của đối t ượng Response ................................ ............................. 74
4.2.3.Phương th ức của đối t ượng Response ................................ .......................... 77
4.3.Đối tượng Session ................................ ................................ ............................ 81
4.3.1.Tập hợp của đối t ượng Session ................................ ................................ ....81
4.3.2.Các thu ộc tính của đối t ượng Session................................ .......................... 82
4.3.3.Các phương th ức của đối t ượng Session ................................ ...................... 84
4.3.4.Các s ự kiện của đối t ượng Session ................................ ............................... 86
4.4.Đối tượng Application ................................ ................................ ..................... 86
4.4.1.Tập hợp của đối t ượng Application ................................ .............................. 86
4.4.2.Các phương th ức của đối t ượng Application ................................ ................ 87
4.4.3.Các s ự kiện của đối t ượng Application ................................ ........................ 88
4.5.Đối tượng Server ................................ ................................ ............................. 88
4.5.1.Các thu ộc tính của đối t ượng Server ................................ ............................ 88
4.5.2.Các phương th ức của đối t ượng Server ................................ ........................ 88
4.6.Đối tượng ASP Error ................................ ................................ ....................... 93
5.Chỉ thị #include ................................ ................................ ................................ ........94
6.tập tin global.asa ................................ ................................ ................................ .......95
7.đối tượng dictionary ................................ ................................ ................................ .97
7.1.Tạo đối tượng dictionary ................................ ................................ ................. 98
7.2.Các thu ộc tính của đối t ượng dictionary ................................ ......................... 98
7.3.Các phương th ức của đối t ượng dictionary ................................ ..................... 100
8.đối tượng filesystemobject ................................ ................................ ....................... 103
8.1.Tạo đối tượng filesystemobject ................................ ................................ .......103
8.2.Các thu ộc tính của đối t ượng filesystemobject ................................ ...............103
8.3.Các phương  thức của đối t ượng Filesystemobject ................................ ..........103
8.4.Ví dụ minh hoạ ................................ ................................ ................................ 109
9.đối tượng adrotator ................................ ................................ ................................ ...112
9.1.Cách t ạo đối tượng AdRotator ................................ ................................ .........112
9.2.Định dạng tập tin văn bản ................................ ................................ ................ 112

1229.3.Các thu ộc tính của đối t ượng AdRotator ................................ ......................... 113
9.4.Các phương th ức của đối t ượng AdRotator ................................ ..................... 113
Chương 5: giới thiệu ado v à các kết nối cơ sở dữ liệu ................................ ............114
1.giới thiệu................................ ................................ ................................ .................. 114
2.kết nối với c ơ sở dữ liệu................................ ................................ ........................... 114
2.1.Tạo connection string thông qua OLEDB,ODBC ................................ ...........114
2.2.Tạo connection string thông qua DSN ................................ ............................ 116
3.các đối tượng của ADO ................................ ................................ ............................ 117
3.1.Đối tượng Conn ection................................ ................................ ..................... 120
3.1.1.Kết nối cơ sở dữ liệu qua đối t ượng Connection ................................ ..........120
3.1.2.Thao tác d ữ liệu thông qua đối t ượng Connection ................................ .......120
3.2.Thao tác cơ s ở dữ liệu bằng đối t ượng Command ................................ ..........122
3.3.Xử lý dữ liệu thông qua đối t ượng Recordset ................................ ................. 123
3.3.1.Lưu tr ữ dữ liệu trả về................................ ................................ .................... 125
3.3.2.Hiển thị dữ liệu trả về ................................ ................................ ................... 126
3.4.Đối tượng Record ................................ ................................ ............................ 126
3.5.Đối tượng Stream ................................ ................................ ............................ 128
4.tập hợp errors ................................ ................................ ................................ ...........128
5.stored procedure ................................ ................................ ................................ .......130
6.xây dựng website bằng asp ................................ ................................ ...................... 133

BỘLAOĐỘNG-THƯƠNGBINHVÀXÃHỘI
TỔNGCỤCDẠYNGHỀ
GIÁOTRÌNH
NĂM2012Môđun:LẬPTRÌNHWEB
Mãsố:ITPRG-06
NGHỀ:LẬPTRÌNHMÁYTÍNH
Trìnhđộ:Caođẳngnghề

2Tuyênbốbảnquyền:
Tàiliệunàythuộcloạisáchgiáotrình
Chonêncácnguồnthôngtincóthể
được
phépdùngnguyênbảnhoặctríchdùng
chocácmụcđíchvềđàotạovàtham
khảo.
Mọimụcđíchkháccóýđồlệchlạchoặc
sửdụngvớimụcđíchkinhdoanhthiếu
lành
mạnhsẽbịnghiêmcấm.
TổngCụcDạynghềsẽlàmmọicáchđể
bảovệbảnquyềncủamình.
TổngCụcDạyNghềcámơnvàhoan
nghênhcácthôngtingiúpchoviệctu
sửa
vàhoànthiệntốthơntàIliệunày.
Địachỉliênhệ:
Dựángiáodụckỹthuậtvànghềnghiệp
TiểuBanPháttriểnChươngtrìnhHọc
liệu
………………………………………………
................................................................

3LỜITỰA
Đâylàtàiliệuđượcxâydựngtheochươngtrìnhcủadựángiáodụckỹthuậtvàdạy
nghề,đểcóđươcgiáotrìnhnàydựánđãtiếnhànhtheohaigiaiđoạn.
Giaiđoạn1:XâydựngchươngtrìnhtheophươngphápDACUM,kếtquảcủagian
đoạnnàylàbộkhungchươngtrìnhgồm230trangcấpđộ2và170trangcấpđộ3.
Giaiđoạn2:29giáotrìnhvà29tàiliệuhướngdẫngiáoviênchonghềlậptrìnhmáy
tính2cấpđộ.
Đểcóđượckhungchươngtrìnhchúngtôiđãmờicácgiáoviên,cácchuyêngiađang
làmviệctronglĩnhvựccôngnghệthôngtincùngxâydựngchươngtrình.
Tronggiaiđoạnviếtgiáotrìnhchúngtôicũngđãcónhữngsựđiềuchỉnhđểgiáo
trìnhcótínhthiếtthựcvàphùhợphơnvớisựpháttriểncủalĩnhvựccôngnghệthôngtin.
Môđunlậptrìnhwebnàynhằmcungcấpchosinhviênnhữngkỹnăngbanđầucho
việcxâydựngcáctrangwebđộngmàcôngcụchủyếulàMacromediaDreamweaver.
Trongquátrìnhbiênsoạn,mặcdùđãcốgắngthamkhảonhiềutàiliệuvàgiáotrình
khácnhưngtácgiảkhôngkhỏitránhđượcnhữngthiếusótvàhạnchế.Tácgiảchânthành
mongđợinhữngnhậnxét,đánhgiávàgópýđểcuốngiáotrìnhngàymộthoànthiệnhơn.
Tàiliệunàyđượcthiếtkếtheotừngmôđun/mônhọcthuộchệthốngmôđun/môn
họccủamộtchươngtrình,đểđàotạohoànchỉnhnghềLậptrìnhmáytínhởcấptrìnhđộbậc
caovàđượcdùnglàmGiáotrìnhchohọcviêntrongcáckhoáđàotạo,cũngcóthểđượcsử
dụngchođàotạongắnhạnhoặcchocáccôngnhânkỹthuật,cácnhàquảnlývàngườisử
dụngnhânlựcthamkhảo.
Đâylàtàiliệuthửnghiệmsẽđượchoànchỉnhđểtrởthànhgiáotrìnhchínhthức
tronghệthốngdạynghề.

4MỤCLỤC
ĐỀMỤC TRANG
LỜITỰA...............................................................................................................................................3
MỤCLỤC.............................................................................................................................................4
GIỚITHIỆUVỀMÔNHỌC...............................................................................................................8
CÁCHÌNHTHỨCHỌCTẬPCHÍNHTRONGMÔNHỌC...........................................................11
BÀI1:CÁCTHÀNHPHẦNCƠBẢNCỦAHTML
1.1.Giớithiệuvàthuậtngữ...............................................................................................................12
1.2.TổngquanvềHTML...................................................................................................................15
1.2.1Cấutrúctrangweb...................................................................................................................15
1.2.2Cúpháptagtổngquátcủamộtthẻ(tag)trongHTML........................................................15
1.2.3Tagđầutrang<HTML></HTML.............................................................................................16
1.2.4Tagbắtđầu<HEAD></HEAD................................................................................................16
1.2.5Tagtiêuđề<TITLE></TITLE>................................................................................................16
1.2.6Tagthântrang<BODY></BODY>.........................................................................................17
1.2.7Tagxuốngdòngsangđoạnmới<P></P>............................................................................19
1.2.8Tagxuốngdòngkhôngsangđoạnmới<BR></BR>..........................................................19
1.2.9Tagthêmđườngthẳngnằmngang<HR></HR>................................................................20
1.2.10Tagđậm<B></B>.................................................................................................................21
1.2.11Tagnghiêng<I></I>..............................................................................................................21
1.2.12Taggạchdưới<U></U>......................................................................................................21
1.2.13Taggạchgiữa<S></S>.......................................................................................................21
1.2.14Tagđậmlogictype<STRONG></STRONG>..................................................................21
1.2.15Tagnghiênglogictype<EM></EM>..................................................................................21
1.2.16Taggạchnganglogictype<STRIKE></STRIKE>...........................................................21
1.2.17Tagchỉsốlogictype<SUB></SUB>.................................................................................21
1.2.18Tagmũlogictype<SUP></SUP>......................................................................................21
1.2.19Tagđịnhfontchữcơsở<BASEFONT></BASEFONT>..................................................22
1.2.20Tagfontchữ<FONT></FONT>...........................................................................................22
1.2.21Tagnhạcnền<BGSOUND>.................................................................................................23
1.2.22Tag6mứctiêuđề<Hn></Hn>.............................................................................................23
1.2.23Ðịnhnghĩatag<A></A>........................................................................................................24
1.2.24Nhúnghìnhảnh,âmthanhvàotrangWeb.........................................................................24
BÀI2:THAOTÁCVỚIPHẦNMỀMTẠOWEB
2.1.GiớithiệuvềIIS-InternetInformationServices.....................................................................28
2.1.1IISlàgì?......................................................................................................................................28
2.1.2IIScóthểlàmđượcgì?............................................................................................................28
2.1.3IIShoạtđộngnhưthếnào?...................................................................................................28
2.1.4CàiđặtIIS...................................................................................................................................28
2.2.XâydựngWebSitebằngphầnmềmMacromediaDreamweaverMX2004.....................30

52.2.1TổngquanvềMacromediaDreamweaverMX2004...........................................................30
2.2.2Làmviệcvớivănbản...............................................................................................................32
2.2.3Làmviệcvớicáchìnhảnh.......................................................................................................37
2.2.4Làmviệcvớibảng(Table).......................................................................................................42
BÀI3:ĐINHDẠNGVĂNBẢNVÀTẠOẢNHCHOTRANGWEB
3.1Giớithiệu.......................................................................................................................................49
3.2CácloạiảnhđượchỗtrợtrongHTML......................................................................................49
3.3Chènmộthìnhảnh.....................................................................................................................49
3.4Sửaảnh.........................................................................................................................................51
3.5Chuyểnđổiảnh.............................................................................................................................54
3.6Cácchứcnăngkhác...................................................................................................................56
BÀI4:LIÊNKẾT
4.1Kháiniệmvềsiêuliênkết...........................................................................................................59
4.2Tạosiêuliênkết............................................................................................................................59
4.2.1TạoBookmark...........................................................................................................................59
4.2.2Tạoliêuliênkết(Hyperlink).....................................................................................................60
4.3XemmãHTMLcủasiêuliệnkết................................................................................................62
BÀI5:TẠODANHSÁCH,KHUNG,BIỂUMẪUVÀTHIẾTKẾBẢNG
5.1Địnhnghĩamộtdanhsách..........................................................................................................65
5.2Thiếtkếbảng................................................................................................................................67
5.3Tạobiểumẫu................................................................................................................................69
5.4GửidữliệubiểumẫuquaInternet.............................................................................................70
5.5Tạokhung(Frame)......................................................................................................................70
BÀI6:ĐAPHƯƠNGTIỆN-MULTIMEDIA
6.1KháiniệmvềMultimedia(đaphươngtiện)..............................................................................76
6.2.SửdụngMacromediaFlashđểthiếtkếhìnhảnh,Flash......................................................76
6.2.1TổngquanvềMacromediaFlash...........................................................................................76
6.2.1.1Cácthaotáccơbản..............................................................................................................76
6.2.1.2Côngcụ(Tools)......................................................................................................................77
6.2.1.3Cácthaotác...........................................................................................................................79
6.2.1.4Ảnh...........................................................................................................................................81
6.2.1.5Âmthanh................................................................................................................................81
6.3.Hoạthình......................................................................................................................................82
6.4.Hoạtcảnh.....................................................................................................................................88
6.5.ĐưaFLASHvàoWeb.................................................................................................................94
6.5.1NộidungtrangHTMLdoFlashxuấtbản..............................................................................94
6.5.2Nhúngtậptin.GIFđượcxuấtbảnvàotrangHTML............................................................96

66.5.3Giảithíchcácthẻ......................................................................................................................97
BÀI7:THIẾTLẬPCÁCSTYLE
7.1KháiniệmcơbảnvềCSS........................................................................................................100
7.2TrìnhbàytrangWebvớicácStyle..........................................................................................100
7.3Styletrêndòng...........................................................................................................................113
7.4Giớithiệutrangstyle.................................................................................................................114
7.5Bộchọn......................................................................................................................................119
7.6Thayđổinguyêntắc.................................................................................................................126
7.7Chúgiảitrongtrangstyle........................................................................................................127
7.8Giànhquyềntrìnhduyệt...........................................................................................................128
7.9Dàntrang....................................................................................................................................128
BÀI8:NHỮNGKIẾNTHỨCCƠBẢNVỀJAVASCRIPT,
VBSCRIPTVÀCÁCỨNGDỤNG
8.1KháiniệmvềngônngữJavaScriptvàVBScript(ASP).....................................................131
8.1.1GiớithiệuvềASP...................................................................................................................131
8.1.2LậptrìnhvớiASP...................................................................................................................139
8.2.ĐưacácđoạnScriptvàotrongtrangWeb..........................................................................142
8.3.Thiếtlậpcácthưviệnprocedure,functioncho1ứngdụngWEB...................................142
8.3.1Địnhnghĩathủtục..................................................................................................................143
8.3.2Địnhnghĩahàm......................................................................................................................144
8.3.3Sửdụngthưviệnhàm,thủtục.............................................................................................144
8.4.Mộtsốbàitậpứngdụngmẫu................................................................................................144
BÀI9:ỨNGDỤNGKỸTHUẬTLẬPTRÌNH
XÂYDỰNGTRANGWEB
9.1NhắclạicáccâulệnhSQL.......................................................................................................148
9.2CáclệnhliênkếtCSDL.............................................................................................................151
9.3Mộtsốbàitậpứngdụngmẫu..................................................................................................153
BÀI10:LIÊNKẾTTRANGWEBĐẾNHỆCSDL
XÂYDỰNGCÁCTRANGWEBĐỘNG
BẰNGMACROMEDIADREAMWEAVERMX2004
10.1.Xâydựngtrangmaster(trangchính)vàdetail(chitiết)bằngchứcnăngDetail
Page.......................................................................................................................................................157
10.2.TạotrangmastervàdetailbằngchứcnăngMasterDetailPageSet............................159
10.3.Bàithựchànhcơsởdữliệu.................................................................................................160
10.3.1Tạomộtsitemới...................................................................................................................160
10.3.2Chènthẻ<%Includevàotrang.........................................................................................161
10.3.3Chènđốitượngvàtạokếtnốicơsởdữliệu...................................................................161

710.3.4Tạotrangchènmớidữliệu................................................................................................164
10.3.5Tạotrangchèndữliệutựđộng.........................................................................................164
10.3.6TạotrangDeletedữliệu.....................................................................................................165
10.3.7Tạotrangđăngnhập(LogIn)............................................................................................166
10.3.8Tạotrangchỉnhsửa(cậpnhật)dữliệu..........................................................................166
10.3.9Tạotrangtìmkiếmhiểnthịdữliệungaydướiformtìm.................................................166
10.3.10Tạotrangtìmkiếmsửdụngapplicationobject.............................................................168
10.3.11TạotrangMastervàtrangDetailkhikhôngcódữliệutạomớihoàntoàn..............170
10.3.12Tạotrangmastervàdetailkhiđãcódữliệu.................................................................170
10.3.13Tạokếtnốibằnglệnh........................................................................................................172
10.3.14ChènFlash..........................................................................................................................173
10.3.14.1TạonútFlash..................................................................................................................173
10.3.14.2TạodòngtitlebằngFlash..............................................................................................174
10.3.15Tạokếtnốivớiwebasp.net.............................................................................................175
10.3.16Viếtchữlênthanhtrạngthái............................................................................................176
10.3.17SửdụngFreemenubluestyle1cấp..............................................................................178
10.3.18Thayđổimàusắc...............................................................................................................179
10.3.19TạohiệuứngHover...........................................................................................................181
10.3.20Tạomenuthunhỏ..............................................................................................................182
10.3.21Tựtạomenufreemenustyle...........................................................................................182
10.3.22TạoPopUpmenu...............................................................................................................183
10.3.23SửdụngCss.......................................................................................................................183
10.3.24Đổifontchữ........................................................................................................................183

8GIỚITHIỆUVỀMÔĐUN
Vịtrí,ýnghĩa,vaitròmôđun:
LậptrìnhWeblàmộtmôđunquantrọngđốivớingườilậptrìnhviên.Trongthờiđại
côngnghệthôngtintoàncầuhiệnnay,việcnắmvữngcáckiếnthứclậptrìnhwebcơbản
giúplậptrìnhviêntiếpcậnnhanhchóngvớihầuhếtcáccôngnghệmớihiệnnay,làmnền
tảngđểpháttriểncácứngdụngthươngmạiđiệntử.
GiáotrìnhnàylàmộtthànhphầncủahệthốnggiáotrìnhcủaTổngcụcdạynghề.
GiáotrìnhđượcbiênsoạntheochươngtrìnhchínhquycôngnhânlànhnghềngànhCông
nghệthôngtin.
Mụctiêuthựchiệncủamôđun:
Họcxongmôđunnàyhọcviêncókhảnăng:
-Xâydựngđượccáctrangchủ,trênđócócácứngdụngphụcvụcácmụctiêucụthể,có
khảnăngliênkếtđếncáctrangWebkhác
-TrìnhbàytrêntrangWebhệthốngthôngtintổnghợpbaogồm:vănbản,hìnhảnh,âm
thanhvớinhiềukiểuđịnhdạngkhácnhau
-ỨngdụngmộtsốngônngữlậptrìnhcơbảnvàotrangWEBphụcvụcôngviệctínhtoán,
tạocáchiệuứngtrêntrangWEB
-TạođượccáctrangWebđộngliênkếtđếncáchệCSDLchotruớchoặcxâydựngmới
phụcvụchocácứngdụng,cụthểtrongchươngtrìnhpháttriểnCNTTquốcgia.
-SosánhsựkhácnhaugiữacácngônngữlậptrìnhtrênWebtừđóchọncôngcụphù
hợptrongthiếtkếvàthicôngtrangWEBbảođảmkỹthuậtvàtínhmỹthuật
Nộidungchínhcủamônhọc:
BÀI1:CÁCTHÀNHPHẦNCƠBẢNCỦAHTML
BÀI2:THAOTÁCVỚIPHẦNMỀMTẠOWEB
BÀI3:ĐINHDẠNGVĂNBẢNVÀTẠOẢNHCHOTRANGWEB
BÀI4:LIÊNKẾT
BÀI5:TẠODANHSÁCH,KHUNG,BIỂUMẪUVÀTHIẾTKẾBẢNG
BÀI6:ĐAPHƯƠNGTIỆN–MULTIMEDIA
BÀI7:THIẾTLẬPCÁCSTYLE
BÀI8:NHỮNGKIẾNTHỨCCƠBẢNVỀJAVASCRIPT,VBSCRIPTVÀCÁCỨNG
DỤNG
BÀI9:ỨNGDỤNGKỸTHUẬTLẬPTRÌNHXÂYDỰNGTRANGWEB
BÀI10:LIÊNKẾTTRANGWEBĐẾNHỆCSDLXÂYDỰNGCÁCTRANGWEB
ĐỘNGBẰNGMACROMEDIADREAMWEAVERMX2004

9SƠĐỒMỐILIÊNHỆGIỮACÁCMÔĐUNVÀMÔNHỌCTRONGCHƯƠNGTRÌNH
HọckỳI HọckỳII HọckỳIII HọckỳIV
Kỹnăngtinhọc
vănphòng
CơsởtoánhọcHệthống
máytính
Anhvăn
chotinhọcGiaodiện
ngườimáy
Lậptrình
cănbản
Mạngcănbản
Kỹnăng
Giaotiếp
Kỹnăng
Internet&WWW
Phầncứng
máytínhLậptrình
nângcao
Lậptrìnhhướng
đốitượng
Cấutrúcdữliệu
vàthuậtgiải
Cơsởdữliệu
ThiếtkếWeb
Antoàn
laođộngLậptrình
Web
Phântíchthiết
kếhệthống
Thiếtkếhướng
đốitượng
ỨngdụngCNTT
trongdoanhnghiệp
Côngnghệ
phầnmềm
Hướngdẫnđồ
ántốtnghiệpCôngnghệĐa
phươngtiện
Lậptrình
VisualBasicQuảnlýdựán
phầnmềm
Thi
tốtnghiệpHệcơsởdữ
liệu
MôitrườngPT
Phầnmềm

10Lậptrìnhweblàmộtmôđuncơsởcủacôngnhânlànhnghề.Đểhọctốtmonhọcnày,họcviêncầnphảihọcquamônlậptrìnhcănbản,
KỹnăngInternetvàWWW.
KỹthuậtAntoànvàbảohộlaođộnglàmôđuncơbảnvàbắtbuộc.Mọihọcviênphảihọcvàđạtkếtquảchấpnhậnđượcđốivớicác
bàikiểmtrađánhgiávàthikếtthúcnhưđãđặtratrongchươngtrìnhđàotạo.
Nhữnghọcviênquakiểmtravàthimàkhôngđạtphảithuxếpchohọclạinhữngphầnchưađạtngayvàphảiđạtđiểmchuẩnmớiđượcphép
họctiếpcácmôđun/mônhọctiếptheo.
Họcviên,khichuyểntrường,chuyểnngành.nếuđãhọcởmộtcơsởđàotạokhácrồithìphảixuấttrìnhgiấychứngnhận;Trongmộtsố
trườnghợpcóthểvẫnphảiquasáthạchlại.

11CÁCHÌNHTHỨCHỌCTẬPCHÍNHTRONGMÔĐUN
1-Họctrênlớpvề:
-CúphápcácthẻHTML.
-CúpháptậplệnhVBScript.
-CúphápcáclệnhthaotácdữliệucủaSQL.
-Phươngphápbảomậtcơsởdữliệu.
2-Họctạiphònghọcthựchànhởtrườngvề:
-SửdụngphầnmềmthiếtkếwebMacroDreamweaverMX.
-SửdụngphầnmềmthiếtkếFlashMacroFlashMX.
.-Thiếtkếcơsởdữliệuvàsửdụngchotrangweb.
-XâydựngmộtứngdụngwebđộngthựctiễndùngngônngữVBScript.
YÊUCẦUVỀĐÁNHGIÁHOÀNTHÀNHMÔĐUN
Kỹnăngthựchành:
-SửdụngthànhthạophầnmềmhỗtrợthiếtkếWebvàFlash
-Xâydựngđượchệthốngbảomậtchotrangweb.
-Kếthợpthànhthạosựhổtrợcủađaphươngtiệntrongtrangweb.
Tháiđộhọcviên:
-Cẩnthậnlắngngheýkiếnvàthảoluậntrongnhómthiếtkế
-Họcviêncầntuânthủcácbàitậpthựchànhtheothứtựcácchương,từdễđếnkhó.
Đánhgiáthôngquakiểmtratrắcnghiệm:
-Dùngphầnmềmthitrắcnghiệm.
-Kiểmtratrắcnghiệmcóthểtrêngiấyhoặctrênmáytính.
-Xâydựngngânhàngcâuhỏi,họcviênsẽnhậnđượcmộtbộđểphátsinhngẫunhiênvà
chấtlượngcácđềnhưnhau(trungbình,khá,giỏi,xuấtsắc).
-Thờigianlàmbàituỳtheosốlượngcáccâutrongđề.
-Thangđiểm100chiađềuchocáccâu.
-Kếtquảđánhgiádựavàobàilàmtheođiểmđạtđược.
Thựchành:Đánhgiáthôngquakhảnănggiảihoànthànhchươngtrình(đềkiểmtra)đềra.
Thangđiểm:(đánhgiácâuhỏitrắcnghiệm)
0-49:Khôngđạt
50-69:Đạttrungbình
70-85:Đạtkhá
86-100:ĐạtGiỏi

12BÀI1:CÁCTHÀNHPHẦNCƠBẢNCỦAHTML
Mụctiêu:
-SửdụngđượccấutrúctổngthểcủaHTML,cácthẻHTML
-Nhậndạngtêntậptin,cácđịachỉURL
1.1Giớithiệuvàthuậtngữ
-HTMLlàgì?
HTML(hayHypertextMarkupLanguage-Ngônngữliênkếtsiêuvănbản)làngôn
ngữđánhdấuchuẩndùnglậptrìnhcáctàiliệuWorldWideWeb,tàiliệulàcáctậptinvăn
bảnđơngiản.NgônngữHTMLdùngcáctaghoặccácđoạnmãlệnhđểchỉchocáctrình
duyệt(Webbrowsers)cáchhiểnthịcácthànhphầncủatrangnhưtextvàgraghics,vàđáplại
nhữngthaotáccủangườidùngbởicácthaotácấnphímvànhắpchuột.HầuhếtcácWeb
browser,đặcbiệtlàMicrosoftInternetExplorervàNetscapeNavigator,nhậnbiếtcáctagcủa
HTMLvượtxanhữngchuẩnHTMLđặtra.MicrosoftFrontPagechỉdùngđểđọcvàviếtcác
tậptinHTMLmàkhônghiểungônngữHTMLyêucầuphảilàmgì.
-DynamicHTML(DHTML-HTMLđộng):làngônngữHTMLmởrộnglàmtănghiệu
ứngtrìnhbàyvănbảnvàđốitượngkhác.TrongFrontPage,bạncóthểsửdụngthanhcông
cụDHTMLEffectsđểlàmtăngcườnghiệuứngchocácthànhphầncủamàkhôngcầnlập
trình.
-ActiveDataObjects(ADO):Cácthànhphầngíupcácứngdụngcủangườidùng
(clientapplications)truycậpvàchếtácdữliệucủacơsởdữliệutrênserverqua1nhàcung
cấp.
-ActiveServerPage(ASP):là1tàiliệuchứascriptnhúngtrênserver.Webservers
tươngthíchASPcóthểchạycácscriptnày.Trênmáytrạm,1ASPlà1tàiliệuHTMLchuẩn
cóthểđượcxemtrênbấtkỳmáynàotrênWebbrowsernào.
-ActiveX:1tậphợpcáckỹthuậtchophépcácthànhphầnphầnmềmtươngtácvới
mộtthànhphầnkháctrongmôitrườngmạng,bấtchấpngônngữcủathànhphầnđượctạo
ra.ActiveXđượcdùnglàmchínhyếuđểpháttriểnnộidungtươngtáccủaWorldWideWeb,
mặcdùnócóthểsửdụngtrongcácứngdụngngười-máyvàcácchươngtrìnhkhác.
-URL(UniformResourceLocator):địachỉtớimộttrạmInternethaymạngnộibộ,là
1chuỗicungcấpđịachỉInternetcủa1WebsitetàinguyêntrênWorldWideWeb,đitheo
sau1nghithức.URLthườngdùnglàhttp://,đểchỉđịnhđịachỉWebsitetrênInternet.
NhữngURLkháclàgopher://,ftp://,mailto://...
-Bookmark:1vịtrítrên1trangwebcóthểlàđíchcủa1hyperlink.1bookmarkcó
thểápdụngcho1chuỗikýtựtồntạitrêntrangngăncáchbởibấtkỳkýtựnào.Bookmarks
chophéptácgiảlinkđến1phầnđãchỉđịnhtrêntrang.Trong1URL,1bookmarkđược
đánhdấuphíatrướcbằngdấuthăng(#).Cũngđượcgọilàneo(anchor).

13-Webbrowser(Trìnhduyệtweb):Phầnmềnphiêndịchđánhdấucủacácfilebằng
HTML,địnhdạngchúngsangcáctrangWeb,vàthểhiệnchúngchongườidùng.Vài
browsercóthểchophépngườidùnggởinhậne-mail,đọcnewsgroups,vàthựchiệncácfile
soundhoặcvideođãđượcnhúngvàtrongtàiliệuWeb.
-Script:Mộttậpcácchỉlệnhdùngđểbáochochươngtrìnhbiếtcáchthựchiệnmột
thủtụcquiđịnh,nhưđăngnhậpvàohệthốngthưđiệntửchẳnghạn.Cáckhảnăngscript
đượccàisẵntrongmộtsốchươngtrình.Bạnphảitìmhiểucáchviếtscriptđóbằngloạingôn
ngữkhôngkhácgìngônngữlậptrìnhmini.Cómộtsốchươngtrìnhghiscriptnàymộtcách
tựđộngbằngcáchghilạinhữnglầngõphímvàchọndùnglệnhcủabạnkhibạntiếnhành
thủtụcnày.Cácscriptgiốngnhưcácmacro,trừmộtđiềulàthuậtngữmacrođượcdành
riêngđểchỉnhữngscriptnàomàbạncóthểkhởiđầubằngcáchấnmộttổhợpphímdobạn
tựquyđịnh.
-StructuredQueryLanguage-SQL:Trongcáchệquảntrịcơsởdữliệu,đâylà
ngônngữvấnđápdoIBMsoạnthảođượcsửdụngrộngrãitrongmáytínhlớnvàhệthống
máytínhmini.SQLđangđượctrangbịtrongcácmạngkhách/chủnhưlàmộtphươngpháp
làmchocácmáytínhcánhâncókhảnăngthâmnhậpvàocáctàinguyêncủacáccơsởdữ
liệuhợptác.Ðâylàloạingônngữđộclậpvớidữliệu;ngườisửdụngkhôngphảibậntâm
đếnvấnđềdữliệusẽđượcthâmnhậpvàobằngcáchnàovềmặtvậtlý.Theolýthuyết,
SQLcũngđộclậpvớithiếtbị;cóthểdùngcùngmộtngônngữvấnđápđểthâmnhậpvào
cáccơsởdữliệutrênmáytínhlớn,máytínhmini,vàmáytínhcánhân.Tuynhiên,hiệnnay
cómộtsốphiênbảncủaSQLđangbịcạnhtranh.SQLlàmộtngônngữvấnđápsúctíchchỉ
với30lệnh.Bốnlệnhcơbản(SELECT,UPDATE,DELETE,vàINSERT)đápứngchobốn
chứcnăngxửlýdữliệucơbản(phụchồi,cảitiến,xoá,vàchènvào).CáccâuhỏicủaSQL
gầngiốngcấutrúccủamộtcâuhỏitiếngAnhtựnhiên.Kếtquảcủacâuhỏisẽđượcbiểu
hiệntrongmộtbảndữliệubaogồmcáccột(tươngứngvớicáctrườngdữliệu)vàcáchàng
(tươngứngvớicácbảnghidữliệu).
-HypertextTransferProtocol-HTTP:Giaothứctruyềnsiêuvănbản
-Hyperlink:Siêuliênkết
-Website:nghĩahẹp:trangweb,nghĩarộng:chỗchứaweb.
-HTTPaddress:địachỉHTTP,vídụ:http://www.dalattech.edu.vn
-Database:cơsởdữliệu,khodữliệu.Mộtbộsưutậpcácthôngtinvềmộtchủđề,
đượctổchứchợplýđểthànhmộtcơsởchocácthủtụccôngviệcnhưtruytìmthôngtin,rút
racáckếtluận,vàthànhlậpcácquyếtđịnh.Bấtkỳmộtsưutậpthôngtinnàophụcvụcho
cácmụcđíchnàyđềuđượccoilàmộtcơsởdữliệu,ngaycảtrườnghợpcácthôngtinđó
khôngđượclưutrữtrongmáytính.Thựcra,"tổtiên"củacáchệcơsởdữliệudoanh
thươngphứctạphiệnnaylànhữngtệpđượcgiữtrêncáctấmbìa,cómangmãsố,vàđược
xếptrongcácphònglưutrữtrướcđây.Thôngtinthườngđượcchiarathànhnhiềubảnghi
(record)dữliệukhácnhau,trênđócómộthaynhiềutrườngdữliệu.

14-Table:bảngtrongchươngtrìnhquảnlýcơsởdữliệuliênquan,đâylàcấutrúccơ
sởcủaviệclưutrữvàhiểnthịdữliệu,trongđócáckhoảnmụcdữliệuđượcliênkếtvới
nhaubởicácquanhệhìnhthànhdoviệcđặtchúngtheocáchàngvàcáccột.Cáchàngứng
vớicácbảnghidữliệucủacácchươngtrìnhquảnlýdữliệuhướngbảng,vàcáccộtthìứng
vớicáctrườngdữliệu.
-Hypertext:vănbảncủamộttàiliệutruytìmkhôngtheotuầntự.Ngườiđọctựdo
đuổitheocácdấuvếtliênquanquasuốttàiliệuđóbằngcácmốiliênkếtxácđịnhsẵndo
ngườisửdụngtựlậpnên.
Trongmộtmôitrườngứngdụnghepertextthựcsự,bạncóthểtrỏvào(highlight)bấtkỳtừ
nàocủatàiliệuvàsẽtứckhắcnhảyđếncáctàiliệukháccóvănbảnliênquanđếnnó.Cũng
cónhữnglệnhchophépbạntựtạochoriêngmìnhnhữngdấuvếtkếthợpquasuốttàiliệu.
Cáctrìnhứngdụnghypertextrấthữuíchtrongtrườnghợpphảilàmvớimộtsốlượngvăn
bảnlớn,nhưcácbộtừđiểnbáchkhoavàcácbộsáchnhiềutập.
-Multimedia:đaphươngtiện,đamôitrường,đatruyềnthông
Mộtphươngphápgiớithiệuthôngtinbằngmáytính,sửdụngnhiềuphươngtiệntruyền
thôngtinnhưvănbản,đồhoạvàâmthanh,cùngvớisựgâyấntượngbằngtươngtác.
-WorldWideWeb-WWW:LàmộtdịchvụcủaInternet.Ðâylàmộthệthốngdùng
đểtruytìmvàphụchồicáctàiliệuhypertextthựchiện.
-FileTransferProtocol-FTP:địnhướctruyềntệp,giaothứctruyềntệp.Trong
truyềnthôngkhôngđồngbộ,đâylàmộttiêuchuẩnnhằmbảođảmtruyềndẫnkhôngbịlỗi
chocáctệpchươngtrìnhvàdữliệuthôngquahệthốngđiệnthoại.ChươngtrìnhFTPcũng
đượcdùngđểgọitênchođịnhướctruyềntệpUNIX,mộtđịnhướchướngdẫnviệctruyền
dữliệu.
-Internet:Mộthệthốnggồmcácmạngmáytínhđượcliênkếtvớinhautrênphạmvi
toànthếgiới,tạođiềukiệnthuậnlợichocácdịchvụtruyềnthôngdữliệu,nhưđăngnhậptừ
xa,truyềncáctệptin,thưtínđiệntử,vàcácnhómthôngtin.
Internetlàmộtphươngphápghépnốicácmạngmáytínhhiệnhành,pháttriểnmộtcách
rộngrãitầmhoạtđộngcủatừnghệthốngthànhviên.
NguồngốcđầutiêncủaInternetlàhệthốngmáytínhcuảBộQuốcPhòngMỹ,gọilàmạng
ARPAnet,mộtmạngthínghiệmđượcthiếtkếtừnăm1969đểtạođiềukiệnthuậnlợicho
việchợptáckhoahọctrongcáccôngtrìnhnghiêncứuquốcphòng.
ARPAnetđãnêucaotriếtlýtruyềnthôngbìnhđẳng(peer-to-peer),trongđómỗimáy
tínhcủahệthốngđềucókhảnăng"nóichuyện"vớibấtkỳmáytínhthànhviênnàokhác.
BấtkỳmạngmáytínhnàodựatrêncơsởthiếtkếcủaARPAnetđềuđượcmôtảnhưmột
tậphợpcáctrungtâmđiệntoántựquản,mangtínhđịaphươngvàtựđiềuhành,chúng
đượcliênkếtdướidạng"vôchínhphủnhưngcóđiềutiết".
SựpháttriểnthiếtkếcủamạngARPAnetđơnthuầnchỉdonhữngyêucầuvềquânsự:Mạng

15nàyphảicókhảnăngchốnglạimộtcuộctấncôngcóthểvôhiệuhoámộtsốlớncáctrạm
thànhviêncủanó.
TưtưởngnàyđãđượcchứngminhlàđúngkhiMỹvàcácđồngminhthamgiavào
cuộcchiếntranhvùngVịnh.
SựchỉhuyvàmạngkiểmsoátcủaIrak,đượctổchứcmôphỏngtheocôngnghệ
ARPAnet,đãchốnglạimộtcáchthànhcôngđốivớicácnổlựccủalựclượngđồngminh
nhằmtiêudiệtnó.
ÐólàlýdotạisaocôngnghệcónguồngốctừARPAnethiệnnayđangđượcxuất
cảngmộtcáchrộngrãi.
MạngInternetnguyênthuỷđượcthiếtkếnhằmmụcđíchphụcvụviệccungcấp
thôngtinchogiớikhoahọc,nêncôngnghệcủanóchophépmọihệthốngđềucóthểliên
kếtvớinóthôngquamộtcổngđiệntử.
Theocáchđó,cóhàngngànhệmáytínhhợptác,cũngnhưnhiềuhệthốngdịchvụ
thưđiệntửcóthuphí,nhưMCIvàCompuservechẳnghạn,đãtrởnênthànhviêncủa
Internet.
-Password:mậtkhẩu,mậtlệnh.Mộtcôngcụbảovệantoàn,dùngđểxácđịnh
đúngngườisửdụngđượcphépđốivớimộtchươngtrìnhmáytínhhoặcmạngmáytính,và
đểxácđịnhcácphạmviquyềnhạncủahọnhưchỉđọcra,đượcđọcvàghi,hoặcđượcsao
chépcáctệp.
1.2TổngquanvềHTML
1.2.1Cấutrúctrangweb
<HTML>
<HEAD>
<TITLE>Tiêuđềtrangweb</TITLE>
</HEAD>
<BODY>
Thântrangweb
</BODY>
</HTML>
1.2.2Cúpháptagtổngquátcủamộtthẻ(tag)trongHTML
Khitrìnhduyệt(webbrowser)hiểnthịnộidung1trangwebnósẽtìmkiếmtrongđó
nhữngđoạnmãđặcbiệtlàcáctagđượcđánhdấubởikýhiệu<và>,vàcăncứvàođóđể
thểhiện.Cúpháptổngquátcủa1tag:
<tên_tagthuộc_tính_1=giá_trị_1thuộc_tính_2=giá_trị_2...>...</tên_tag>
hoặcđơngiảnnhấtlà:<tên_tag>Chuỗivănbản</tên_tag>
tên_taggõvàodạngchữthườnghoặchoađềuđượcvàcáctagcóthểlồngvàonhau.
Vídụ:
-tagchữđậm<B>cúpháp<B>chuỗivănbảninđậm</B>

16-tagxuốnghàng<P>cócúpháp<PALIGN=align-type>mộtđoạnvănbản</P>
HTML Kếtquả
Dòngchữnàythường Dòngchữnàythường
<b>Dòngchữnàyđậm</b> Dòngchữnàyđậm
<i>Dòngchữnàynghiêng</i> Dòngchữnàynghiêng
<fontcolor="#800000"face="Verdana">Ðâylàđoạn
vănthứnhấtmàuđỏcóphônglà
Verdana.</font><p><fontcolor="Black"
face="Verdana">Ðâylàđoạnvănthứhaimàuôliucó
phôngcũnglàVerdana.</font></p>Ðâylàđoạnvănthứnhấtmàuđỏ
cóphônglàVerdana.
Ðâylàđoạnvănthứhaimàuôliu
cóphôngcũnglàVerdana.
<b><i>Dòngchữnàyvừađậmvừanghiêng</i></b>Dòngchữnàyvừađậmvừa
nghiêng
Ðoạnnàycanhtrái.</font><palign="center"><font
face="Verdana">Ðoạnnàycanhgiữa.</font></p><p
align="right"><fontface="Verdana">Ðoạnnàycanh
phải.</font>Ðoạnnàycanhtrái.
Ðoạnnàycanhgiữa.
Ðoạnnàycanhphải.
1.2.3Tagđầutrang<HTML></HTML>:Tag<HTML>ởđầutrangwebtĩnhvà</HTML>ở
cuốitrang.Trangwebđượcbắtđầuvàkếtthúcbởitagnày.
1.2.4Tagbắtđầu<HEAD></HEAD>:Tag<HEAD>đánhdấuđiểmbắtđầu
phần_đầu_headingcủatrangweb.Tag</HEAD>cóthểbỏqua.
1.2.5Tagtiêuđề<TITLE></TITLE>:Tag<TITLE>chỉđịnhtiêuđềcủacủatrangweb.Tiêu
đềnàysẽxuấthiệntrênthanhtiêuđềcủatrìnhduyệt(webbrowser:InternetExplorerhoặc
NetscapeNavigator).Tagnàychỉhợplệkhiđưavàobêntrongphần<HEAD>
Vídụ:
HTML Kếtquả
<html>
<head>
<title>Webdemo</title>
</head>
<body>
HelloWorld!
</body>
</html>-Trênthanhtiêuđềxuấthiện:
Webdemo-MicrosoftInternetExplorer
-Nộidungtrangwebxuấthiện:
HelloWorld!
1.2.6Tagthântrang<BODY></BODY>:dùngchỉđịnhbắtđầuvàkếtthúcphầnnộidung
trangweb.Tagnàyđượcđịnhnghĩanhưsau:

17<BODY
BACKGROUND=url
BGCOLOR=color
BGPROPERTIES=FIXED
LEFTMARGIN=n
LINK=color
TEXT=color
TOPMARGIN=n
VLINK=color>
trongđó:
Thuộctính Diễngiải
urlViếttắtcủaUniformResourceLocators:là1chuỗicungcấpđịa
chỉInternetcủa1WebsitehoặctàinguyêntrênWorldWideWeb,
theocùnglànghithứcprotocolcủasitehoặctàinguyêntruycập
vào.Nghithứcthườngdùnghttp://,chocácđịachỉInternetcủa
mộttrangweb.VàidạngURLkháclàgopher://,chocácđịachỉ
Internetcủa1thưmụcdịchvụgopher,vàftp://,chocácđịachỉtài
nguyênFTP.Trongtag<BODY>tathườngdùngdạngURLlà
file://,têntậptinảnh.GIF,.JPG,.BMP.Khilưutrangweb,bạnsẽ
xácđịnhthưmụcmớisẽlưutrữtậptinảnh.
colorMàudạng#NNNNNNvớiN:0,1,...,F.Hoặctênnhữngmàuđãquy
địnhtrướcnhư:AQUA,BLACK,Black,FUCHSIA,GRAY,
GREEN,LIME,MAROON,NAVY,OLIVE,PURPLE,#800000,
SILVER,TEAL,WHITE,YELLOW.
BACKGROUND=urlChỉđịnhảnhnềnchotrangweb,urllàđịachỉvàtêntậptinlàm
ảnhnền.
BGCOLOR=color Chỉđịnhmàunềnchotrangweb
BGPROPERTIES=FIXEDChỉđịnhảnhnềntrangwebkhôngcuộnkhicuộnthanhscrollbar.
LEFTMARGIN=n Chỉđịnhlềtráitrangweb,nlà1sốnguyêndươngtínhtheopixel
LINK=colorChỉđịnhmàuchocáchyperlinkkhichưađược"duyệt"trongtrang
web.
TEXT=color Chỉđịnhmàuvănbảntrongtrangweb
TOPMARGIN=n Chỉđịnhlềtrêntrangweb,nlà1sốnguyêndươngtínhtheopixel
VLINK=colorChỉđịnhmàuchocáchyperlinkkhiđãđược"duyệt"trongtrang
web.

18Vídụ:
HTML Kếtquả
<BODYBGCOLOR=YELLOWTEXT=#800000>
Chàomừngthếkỷmới
</BODY>Chàomừngthếkỷmới
<BODYBGCOLOR="#0000FF"TEXT="#FFFFFF">
Chàomừngthếkỷmới
</BODY>Chàomừngthếkỷmới
<html>
<head>
<title>Webdemo</title>
</head>
<BODYtext=BLACKbackground="images/so01871_1.gif"
topmargin="20"leftmargin="25"link=#800000
vlink=GREEN>
<palign="center"><b>Danhmụccôngviệc</b><p><a
href="#Nộidungmục1">Mục
1</a></p>
<p><ahref="#Nộidungmục2">Mục2</a></p>
<p><ahref="#Nộidungmục3">Mục3</a></p>
<p></p>
<p><aname="Nộidungmục1">Nộidungmục1</a></p>
<p></p>
<p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><aname="Nộidungmục2">Nộidungmục2</a></p>
<p></p>
<p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><aname="Nộidungmục3">Nộidungmục3</a></p>
<p>&nbsp;</p>
</BODY>-fileảnhnền:so01871_1.gif
-Vìkhôngđưavàothuộctính
bgproperties="fixed"nênảnhnền
bịcuộn
-lềtrái=25
-lềtrên=20
-màuvănbảnđen
-màuhyperlinkchưaduyệtlàđỏ
-màuhyperlinkđãduyệtlàxanh

19</html>
1.2.7Tagxuốngdòngsangđoạnmới<P></P>:ngắtvănbảnsangđoạn(paragraph)mới.
Thànhphần</P>cuốiđoạnkhôngnhấtthiếtphảicó.Tagnàyđượcđịnhnghĩanhưsau:<P
ALIGN=align-type>,ALIGN=align-typedùngchỉđịnhcanhđoạnmới.align-type=LEFT(canh
trái),RIGHT(canhphải)hoặcCENTER(canhgiữa).
Vídụ:
HTML Kếtquả
Có2trìnhduyệthiệnđangđượcsửdụngrộngrãilà:
<palign=left>-NetscapeNavigator<palign=center>-
VàInternetExplorerCó2trìnhduyệthiệnđangđượcsử
dụngrộngrãilà:
-NetscapeNavigator
-VàInternetExplorer
1.2.8Tagxuốngdòngkhôngsangđoạnmới<BR></BR>:ngắtxuốngdòngmớinhưng
vẫnthuộccùngmộtđoạnhiệnhành.</BR>khôngnhấtthiếtphảicó.
Vídụ:
HTML Kếtquả
Prontpagehaytựthêmvàocácchuỗimã
thaythếchoviệcđưacáckýtựvào
sourcetrangwebnhư:<BR>-chuỗi"&reg;"
thaythếkýtự(R).<BR>-chuỗi"&lt;"thaythế
dấu<.Prontpagehaytựthêmvàocácchuỗimã
thaythếchoviệcđưacáckýtựvào
sourcetrangwebnhư:
-chuỗi"&reg;"thaythếkýtự(R).
-chuỗi"&lt;"thaythếdấu<.
1.2.9Tagthêmđườngthẳngnằmngang<HR></HR>:thêmđườngthẳngnằmngang
trongtrangweb.Tagnàyđượcđịnhnghĩanhưsau:
<HR
ALIGN=align-type
COLOR=color
NOSHADE
SIZE=n
WIDTH=m>
trongđó:
-ALIGN=align-tpye:canhlềchođườngthẳngngang,align-typecóthểlàLEFT,
RIGHT,CENTER
-COLOR=color:màuđườngthẳngngang
-NOSHADE:khôngcóbóng
-SIZE=n:độđậmcủađườngthẳngngang,ncógiátrịlàsốnguyêntínhtheođơnvị
pixel.

20Vídụ:
HTML Kếtquả
<HR
ALIGN=CENTER
COLOR=#800000
NOSHADE
SIZE=3
WIDTH=200>
<HR
ALIGN=LEFT
COLOR=BLACK
SIZE=2
WIDTH=150>
1.2.10Tagđậm<B></B>:Hiểnthịvănbảnđậmtheophysicaltype
1.2.11Tagnghiêng<I></I>:Hiểnthịvănbảnnghiêngtheophysicaltype
1.2.12Taggạchdưới<U></U>:Hiểnthịvănbảngạchdướitheophysicaltype
1.2.13Taggạchgiữa<S></S>:Hiểnthịvănbảngạchgiữa(strikeout)theophysicaltype
Vídụ:
HTML Kếtquả
Dòngnàythôngthường Dòngnàythôngthường
<b>Dòngnàyđậm</b> Dòngnàyđậm
<i>Dòngnàynghiêng</i> Dòngnàynghiêng
<u>Dòngnàygạchdưới</u> Dòngnàygạchdưới
<s>Dòngnàygạchgiữa</s> Dòngnàygạchgiữa
<b><i>Dòngnàyvừađậmvừa
nghiêng</b></i>Dòngnàyvừađậmvừanghiêng
<i><u>Dòngnàyvừanghiêngvừagạch
dưới</u></i>Dòngnàyvừanghiêngvừagạchdưới
1.2.14Tagđậmlogictype<STRONG></STRONG>:Hiểnthịvănbảnđậmtheologictype
1.2.15Tagnghiênglogictype<EM></EM>:Hiểnthịvănbảnnghiêngtheologictype
1.2.16Taggạchnganglogictype<STRIKE></STRIKE>:Hiểnthịvănbảngạchdướitheo
logictype
1.2.17Tagchỉsốlogictype<SUB></SUB>:Hiểnthịvănbảndạngchỉsốtheologictype

211.2.18Tagmũlogictype<SUP></SUP>:Hiểnthịvănbảndạngmũtheologictype
Vídụ:
HTML Kếtquả
Dòngnàythôngthường Dòngnàythôngthường
<strong>Dòngnàyđậm</strong> Dòngnàyđậm
<em>Dòngnàynghiêng</em> Dòngnàynghiêng
<strike>Dòngnàygạchgiữa</strike> Dòngnàygạchgiữa
<strong><em>Dòngnàyvừađậmvừa
nghiêng</strong></em>Dòngnàyvừađậmvừanghiêng
<em><u>Dòngnàyvừanghiêngvừagạch
dưới</u></em>Dòngnàyvừanghiêngvừagạchdưới
H<sub>2</sub>SO<sub>4</sub> H2SO4
X<sup>y</sup> xy
1.2.19Tagđịnhfontchữcơsở<BASEFONT></BASEFONT>:chỉđịnhfont,size,màuvăn
bảnchocácvănbảnkhôngđịnhdạngvàdùngvớitag
<BASEFONT
SIZE=n
FACE=name
COLOR=color>
Trongđó:
SIZE=n:chỉđịnhkíchthướcvănbản,ntừ1đến7.Giátrịmặcnhiênlà3.
COLOR=color:màuvănbản
FACE=name:tênfont
1.2.20Tagfontchữ<FONT></FONT>:chỉđịnhfont,size,màuvănbản.Ðịnhnghĩanhư
sau:
<FONT
SIZE=n
FACE=name
COLOR=color>
Trongđó:
SIZE=n:chỉđịnhkíchthướcvănbản,ntừ1đến7.Thêmdấucộng+hoặctrừ-phía
trướcđểchỉđịnhviệctănghoặcgiảmkíchthướcsovớikíhcthướcđãđịnhtrong
BASEFONT.
COLOR=color:màuvănbản
FACE=name:tênfont

22Vídụ:Vănbảnthường
HTML Kếtquả
<basefontsize=3>
<fontsize=5>Kíchthớcvănbảnlà5</font>
<p><fontsize=+1>Kíchthớcvănbảnlà4</p></font>
<p><fontsize=+2>Kíchthớcvănbảnlà5</p></font>
<p><fontsize=-1>Kíchthớcvănbảnlà2</p></font>Kíchthướcvănbảnlà5
Kíchthướcvănbảnlà4
Kíchthướcvănbảnlà5
Kíchthướcvănbảnlà2
1.2.21Tagnhạcnền<BGSOUND>:địnhnhạcnềnchotrangtưliệu.Tagnàyđượcđặt
dướitag</HEAD>nhưngtrêntag<BODY>.Ðịnhnghĩanhưsau:
<BGSOUND
SCR=url
LOOP=n>
Trongđó:
url:chỉđịnhtậptinnhạc.CáckiểunhạccóthểlàWAV,AU,MIDI,….
n:chỉsốlầnlặplạibàinhạc.Nếun=-1hoặcinfinitethìsẽlặpđếnkhinàođóngtrang
web.
Vídụ:
<HTML>
<TITLE>BackgroundSound</TITLE>
<HEAD>
</HEAD>
<BGSOUND
SCR="sound/bgs.wav"
LOOP=-1>
<BODY>
Enjoymysound.
</BODY>
</HTML>
1.2.22Tag6mứctiêuđề<Hn></Hn>
Dùngđểtạocácchuỗitiêuđềtonhỏtùyýtùytheocấptiêuđềđótrongtrangweb.
Có6cấptiêuđềkhácnhauđượcđịnhnghĩanhưsau:
<Hn>Textxuấthiệntrongtiêuđề</Hn>
vớinlàmộtsốtừ1đến6

23Vídụ:
HTML Kếtquả
<H1>Tiêuđềcấp1</H1> Tiêuđềcấp1
<H2>Tiêuđềcấp2</H2> Tiêuđềcấp2
<H3>Tiêuđềcấp3</H3> Tiêuđềcấp3
<H4>Tiêuđềcấp4</H4> Tiêuđềcấp4
<H5>Tiêuđềcấp5</H5> Tiêuđềcấp5
<H6>Tiêuđềcấp6</H6> Tiêuđềcấp6
1.2.23Ðịnhnghĩatag<A></A>(Hypelink-siêuliênkết):
a)Ðịnhnghĩa1bookmarkvàhyperlinktrongcùngtrangweb:bookmarklàkỹthuậtchỉ
định1địnhdanh(đích)đểhyperlinknhảyđếnđầuđoạnvănbản.
<Aname="tên">chuỗikýtựđầuđoạnvănbản</A>
Vídụ:
<Aname="Ndphần1">Nộidungphần1</A>baogồmcácnộidungchitiếtsau...
Khiđótrongphầnkhaibáohyperlinkbạnkhaibáotheocúphápsau:
<ahref="#tên_của_bookmark_đã_khai_báo">Chuỗihướngdẫnnhảyđếnđầuđoạncó
bookmark="tên_của_bookmark_đã_khai_báo"</a>
Vídụ:<ahref="#Ndphần1">Xemnộidungphần1</a>
b)Hyperlinkđếnmộttrangwebkhác:
Cúpháp:
<AHREF="địa_chỉ_trang_web_sẽ_nhảy_tới">Chuỗidiễngiảihyperlink</A>
Vídụ:
<AHREF="http://www.dalattech.edu.vn">Linkđếntrangwebchủcủahãngmáytính
Microsoft.</A>
<AHREF="trang_chu.htm">Linkđếntrangwebtrang_chu.htmtrongcùngthư
mục.</A>
<ATARGET="viewer"HREF="sample.htm">Clickvàođâyđểmởtrangweb
sample.htmtrongcửasổ"viewer".</A>
<AHREF="http://www.dalattech.edu.vn"><IMGSRC="images/bullet.gif">Clickvàoảnh
nàyđểlinkđếntrangwebcủaMicrosoft</A>
<AHREF="mailto:admin@kythuatdalat.edu.vn">admin@kythuatdalat.edu.vn</A><br>
1.2.24Nhúnghìnhảnh,âmthanhvàotrangWeb
-Thẻ<IMG>:Thêmhìnhảnhhoặcphimvàotrangweb.Ðịnhnghĩa
<IMG
ALIGN=align-type
ALT=text

24SRC=url
BORDER=n
HEIGTH=n
WIDTH=n
HSPACE=n
VSPACE=n>
Trongđó:
-ALIGN=align-type:lềchoảnhhaychovănbảnbaoquanhảnh.GiátrịcóthểlàTOP,
MIDDLE,BOTTOM,LEFT,RIGHT.
-ALT=text:vănbảnhiểnthịhaythaythếchohìnhảnhkhichức"ShowPicture"trong
trìnhduyệtbịtắt.
-SRC=url:chỉđịnhảnh
-BORDER=n:đườngviềnảnh.Nếuảnhđượcdùngchohyperlinkthìđườngviềncó
màutrùngvớimàuhyperlink.Nếuảnhkhôngdùngchohyperlinkthìđườngviềnkhônghiển
thị.
-HEIGTH=n,WIDTH=n:chỉđộcaovàđộrộngcủaảnh.Ðơnvịbằngpixel.
-HSPACE=n,VSPACE=n:chỉđịnhkhoảngcáchtừảnhđếnvănbảnquanhnótheo
chiềungangvàdọc.
Vídụ:
<AHREF="index.htm"><IMGSRC="images/btoc.gif"ALT="[cácnộidung]"
ALIGN=MIDDLEHSACE=5VSPACE=5>Nộidung</A></P>
-Thẻ<EMBED>:thêmđốitượngâmthamvàotrangweb.
Cúpháp:
<EMBED
ALIGN=align-type
SRC=url
HEIGTH=n
WIDTH=n
…
>
-Cácthamsốthuộctínhtươngtựthẻ<IMG>
Vídụ:
<EMBEDSRC="nhac/muatrenphohue.mp3"ALIGN=MIDDLEHSACE=5
VSPACE=5>MưatrênphốHuế

25Bàithựchànhsố1:
SửdụngNotepadđểthựchiệnbàithựchànhnày.
1.ViếtmãHTMLchotrangWebvớitiêuđềtranglà“Sửdụngtiêuđề”,thêmvàophần
Bodycủatrangmộtdòngvănbảnởtiêuđềmức3(H3)vớinộidung“ĐâylàtrangHTML
đầutiêncủatôi”.Lưutậptinvớitêntrang1.htm.
<HTML>
<HEAD>
<TITLE>Sửdụngtiêuđề</TITLE>
</HEAD>
<BODY>
<H3>ĐâylàtrangHTMLđầutiêncủatôi</H3>
</BODY>
</HTML>
2.TạomộttrangWebvớitiêuđề“Sửdụngthẻphânđoạn”đểtạohaiđoạnvănbản,
giữahaiđoạnvănbảnnàyđượcngăncáchnhaubởimộtđườngkẽngang.Lưutậptinvới
têntrang2.htm.
<HTML>
<HEAD>
<TITLE>Sửdụngthẻphânđoạn</TITLE>
</HEAD>
<BODY>
<P>
aaaaaaaaa
</P>
<HRalign=centerwidth=50%>
<P>
bbbbbb
</P>
</BODY></HTML>
3.TạomộttrangWebđểhiểnthịthôngtinlịchhọcnhưsauvàlưuvớitêntrang3.htm
đểhiểnhịratrìnhduyệtkếtquảsau:
Thứhai
9giờ-11giờ:Kếtoánđạicương
Thứba

2610giờ-11giờ:ThiếtkếWeb
Thứtư
Thứnăm
Nghĩ
Thứsáu
4.Mởtrang1.htmbằngNotepadvànhậpthêmmộtvàidòngvàophầnthântrang
(Body).Sửdụngcácthẻ<Font>đểđịnhdạngmàuchữchovănbảnmớithêmvào,sửdụng
thẻ<BR>đểxuốngdòngmới.Thêmvàocôngthức“H2SO4”,“n2-3n+1”,…
BÀI2:THAOTÁCVỚIPHẦNMỀMTẠOWEB
Mụctiêuthựchiện:
-ThiếtkếđượcmộtWebSitetrênmộtphầnmềmtạoWebMacromediareamweaver
MXđápứngyêucầuđặtra.
-Tổchứcđượchệthốngthưmụctậptinlưutrênđĩa.
-Nhúngđượcâmthanh,hìnhảnhvàotrongmộttrangWeb
2.1GiớithiệuvềIIS-InternetInformationServices
2.1.1IISlàgì?
MicrosoftInternetInformationServiceslàmộtứngdụngserverchuyểngiaothôngtin
bằngviệcsửdụnggiaothứcchuyểnđổisiêuvănbảnHTTP.
2.1.2IIScóthểlàmđượcgì?
XuấtbảnmộtHomepagelênInternet.
TạocácgiaodịchthươngmạiđiệntửtrênInternet(Quátrìnhgiaodịch,đặthàng…)
ChophépngườidùngtừxacóthểtruyxuấtCơsởdữliệu(DataBaseRemote
Access)
2.1.3IIShoạtđộngnhưthếnào?
Hình2.1:môhìnhhoạtdộngISS
Web,vềcơbảnthựcsựlàmộthệthốngcácyêucầu(Request)vàcácđápứng
(Response).IISphảnhồilạicácyêucầuđòithôngtincủaWebBrowser.IISlắngnghecác
yêucầuđótừphíaUserstrênmộtmạngsửdụngWWW.
2.1.4CàiđặtIIS
ĐốivớiWindowXP:

27-VàoStartControlPanelAddorRemovePrograms
-ChọntabAdd/RemoveWindowsComponentsđánhdấuvàoôInternetInformation
Services(IIS).
Hình2.2:wndowsCompnentsWinzard
-NhấnnútDetails…,cửasổhiệnra,đánhdấumụcFrontpage2000ServerExtensions
vàWoldWideWebService,nhấnOK.
Hình2.3:internetInformationServices
-NhấnNextđểcàiđặtFinishhoàntất.
2.2XâydựngWebSitebằngphầnmềmMacromediaDreamweaverMX2004

282.2.1TổngquanvềMacromediaDreamweaverMX2004
DreamweaverlàmộtchươngtrìnhVisualEditorchuyênnghiệpđểtạovàquảnlýcác
trangweb.Dreamweavercungcấpcáccôngcụphácthảotrangwebcaocấp,hỗtrợcáctính
năngDHTML(DynamicHTML)màkhôngcầnviếtcácdònglệnhgiúpcácbạnkhôngbiếtlập
trìnhwebcũngcóthểthiếtkếđượccáctrangwebđộngmộtcáchdễdàng,trựcquan.Với
Dreamweaverbạncóthểdễdàngnhúngcácsảnphẩmcủacácchươngtrìnhthiếtkếweb
khácnhưFlash,Fireworks,Shockwave,Generator,Authorwavevv...
VớiDreamweaverbạncóthểquảnlýcácLocalvàRemotesitegiúpchoviệcquảnlý
cáctrangwebtrongcácsitecụcbộvàcácwebsiteđiềukhiểntừxacóthểđồngbộ.
NgoàiraDreamweavercònchophépbạnchỉnhsửatrựctiếpHTML.VớiCodeView
bạncóthểnhanhchóngbổsunghoặcxóabỏmộtHTMLmàkhôngcầnthoátkhỏicửasổtài
liệu.ChếđộsoạnthảotrangwebbằngHTMLgiúpcácbạncóthểthiếtkếtrangtrựctiếp
bằngngônngữHTML.
DreamweavercònhổtrợcácHTMLStylesvàCascadingStyleSheetgiúpbạnđịnh
dạngtrangwebnhằmtăngtínhhấpdẫnkhiduyệtcáctrangwebnày.
VùnglàmviệccủachươngtrìnhDeamweaverrấtlinhđộngvàdễsửdụnggồmcác
thànhphầnnhưsau:Document,Launcher,ObjectPalette,PropertyInspector,Floating
Palettevàcáccontextmenu(menungữcảnh)...đểmởcácthànhphầnnàybạncóthểvào
menuWindow->chọntêncủathànhphầncầnhiểnthị.
Hình2.4:menungữcảnh

29+Launcher:cóchứacácnútđểmởvàđóngcácInspectorvàcácPaletteđượcdùng
thườngxuyênnhất.BạncũngcóthểtruycậpLaunchertạiMiniLaunchertạigócphảicủa
cửasổDocument.
Hình2.5:ObjectPalette
2.2.2Làmviệcvớivănbản
Đặtcontrỏtạivịtrímuốnnhậpvănbảntrongcửasổtàiliệu(Document)sauđónhậpdữ
liệuvào.ĐểnhậpvănbảncótiếngviệtbạnhãycàiđặtcácthamchiếuFontnhưsau:
a)CàiđặtcácthamchiếuFonts/Encoding.
SửdụngcácthamchiếuFonts/Encodingđểcàiđặtviệctạomãfontmặcđịnhdànhcho
cáctrangtàiliệumớivàcàiđặtcácfontmàDreamweaverdùngđểhiểnthịmỗimộtchếđộ
tạomãfont.Việctạomãchotàiliệu(trangweb)sẽxácđịnhcáchmàtrangwebđượchiển
thịtrongtrìnhduyệt.ChọnEdit->Preferences,chọnmộtchếđộtạomãtừselectboxDefault
Encoding.Chếđộtạomãmặcđịnhđượclưucùnglúcvớitàiliệutrongthẻ<META>được
chènởđầutàiliệu.VídụnếubạnchỉđịnhWesternEuropeanthìthẻ<meta>phátsinhbên
sourcecodengônngữHTMLlà:<metahttp-equiv="Content-Type"content="text/html;
charset=iso-8859-1">.ĐểchỉđịnhcácfontdùngchoUSEnglishvàtấtcảcácthứtiếngTây
ÂuhãychọnesternEuropean.ĐểcàiđặtfontchocácthứtiếngViệthãychọnVietnamese.

30
Hình2.6:Đểcàiđặtfontchocácthứtiếng
HãychọnkiểutạomãchẳnghạnnhưWesternEuropeanhoặcVietnamesetừFonts.
TạiProportionalFontchọnfontvàkíchthướchiểnthịmặcnhiênkhisoạnthảotrangweb
(vídụ:TimesNewRoman,size=12pt).
+FixedFontlàfontmàDreamweaverdùngnhằmhiểnthịvănbảnbêntrongcácthẻ
<PRE>,<CODE>,<TT>
+CodeViewlàfontđượcdùngchotấtcảcáctext(vănbản)bêntrongHTML
Hình2.7:chọnfont
+TạihộpthoạiPropertyInspectortạiselectboxDefaultfonthãychọnEditfontlisthoặc
chọnmenuText->Font->EditFontlistsẽxuấthiệnhộpthoạisau:
Hình2.8:EditFontList
+TạiAvailableFontshãychọnfontsthườngdùng(vídụfontTimesNewRoman)sauđó
Clicknút<<.FontsđượcchọnsẽhiệntronghộpChosenFontsvàsẽhiệntronghộpdanh

31sáchcácFontListthườngdùng.Lưuý,hiệnnaycácFontUnicodeđượclàmchuẩncho
Internet,tạiselectboxchọnfonttronghộpthuộctínhPropertyInspectorthìmớiphátsinh
đượcthuộctínhface<fontface="TimesNewRoman"...>thìmớihiệnđượcfonttiếngviệt
khiduyệttrangwebtrongtrìnhduyệt.
Hình2.9:hìnhminhhoạ
Lưuý:BạnnênEditFontListmỗilầnmộtfontvàbạnthựchiệnviệcEditFontlistnày
chocácfontbạnthườngdùng.
b)Địnhdạngvănbản:
BạncóthểđịnhdạngtexttrongcửasổtàiliệuDocumentbằngcáchcàiđặtcácthuộc
tínhtronghộpPropertyInspector.Đểđịnhdạngvănbảntrướctiênhãybôiđenvănbản
muốnđịnhdạngrồisauđóchọncácthayđổitrênhộpthuộctínhPropertyInspector.Nếu
hộpPropertyInspectorkhôngmởhãychọnmenuWindow->Properties
Hình2.10:địnhdạngvănbản
Lưuý:TronglúcđịnhdạngvănbảnbạncóthểsửdụnghộpPropertyInspectorhoặc
bạncóthểsửdụngmenuTextđểđịnhdạngvănbảnvìcónhữngchứcnăngmàhộpthuộc
tínhPropertyInspectorkhôngxâydựngsẵnchobạn(vídụnhưvănbảnđượcgạch
dưới,gạchnganghoặcbạncóthểsửdụngchếđộthiếtkếwebbằngngônngữHTMLđể
thiếtkếthêmnhữngthuộctínhcầnthiết(vídụnhưbạnmuốnvănbảnđựoccanhđều<p
align="justify"...>
NếubạnđangthaotácvớicácBulletshayNumberingbạncóthểClicknútListItemtrên
thanhPropertyInspectorđểcàiđặtmộtsốthôngsốsau:

32
Hình2.11:listPropertive
+ChọnkiểuListTypelàBullethayNumbering,chọnkiểuStyle.Nếubạnđangthaotác
vớinumberingbạncóthểchosốtăngtừmấytạiStartCount.TạiResetCounttobạncóthể
nhậpvàogiátrịsốtrởvềmặcnhiên(thườnglà1).
ĐểhiệnchếđộthiếtkếtrangwebởngônngữHTMLbạncóthểclicknút<>ShowCode
View.
Hình2.12:ShowCodeView
c)Tạosiêuliênkết(Hyperlink)chovănbản:
VớiDreamweaverbạncónhiềucáchđểtạosiêuliênkếtđếncáctrangwebkháchoặc
cáctậptintàiliệu,hìnhảnh,âmthanh(Sound),Phim(Video)hoặccácchươngtrìnhcóthể
tảixuống(Download).Thườngcócácloạisiêuliênkếtsau:
1)InternalLink:LiênkếtđếncáctàiliệutrongcùngWebsite(LocalSite).
2)ExternalLink:LiênkếtcáctàiliệubênngoàiLocalwebsite(vídụnhưlinktớicác
WebServerkháctrênInternet,FTPServerkháctrênInternet,cácTelnetServer,cácNews
Servervv...)
3)E-mailLink:tạomộtsiêuliênkếtchophépngườisửdụnggởiEmail.
4)LinktoNameAnchors(còncóthểgọilàBookmark):Tạosiêuliênkếtnhảyđếnmột
vịtrínàođótrongtrangwebhiệnhành.

33
Hình2.13:cáchchọnfileliênkết
Nguyêntắcchungkhibạntạomộtsiêuliênkếtchovănbản(text),hìnhảnh(image),
Hotpotcủabảnđồhìnhảnh(hotpotofImagemap):hãychọnvănbảnhoặchìnhảnhhoặc
HotpotmuốntạosiêuliênkếtsauđóclicknútBrowseForfile(tạoInternalLink)trênhộp
thuộctínhPropertyInspectorcủađốitượngtươngứngđangchọn.
Khibạnchỉđườngdẫntớitrangwebbạnsẽthấyđịachỉcủatrangwebnàyhiệntạiđịa
chỉURLnhưhìnhvẽ.
TạihộplinkcủahộpPropertyInspectorxuấthiệnđườngdẫncủatậptinbạnđangliên
kếttớitheokiểucụcbộ(trênđĩacứng)nhưngnếubạnđãsavelạicótênbạnsẽcókiểu
đườngdẫnlàtươngđối.Bạnnênlưutrangweblạitrướckhitạosiêuliênkếtđểkhônghiện
thôngbáonhắcnhởmỗikhitạosiêuliênkết.
Hình2.14:PropertyInspector
BạncóthểđịnhTargetchosiêuliênkết(nơihiểnthịnộidungcủatrangwebkhiclick
vào).
TacócácloạiTargetsau:
•_bank:nộidungtrangwebsẽhiệnraởcửasổmới(NewWindow).

34•_parent:nộidungsẽhiệnởtrangcha
•_self:nộidunghiệnởtranghiệnhành
•_top:nộidunghiệnởtoàntrang(Wholepage)
Chúý:NếubạntạomộtExternallinktớimộtWebServer,FTPServer,NewsServervv..
bạnkhôngcầnClicknútBrowseForFilemàhãynhậpvàođịachỉcủaServer(máychủ)mà
bạnđangmuốnliênkếttới.
Vídụ:http://www.dalattech.edu.vn/,http://www.dalat.gov.vn/rauhoadl,vv...
Hình2.15:hìnhminhhoạ
TạosiêuliênkếtđểReplyEmail:
(vídụ:dinhnamit@yahoo.com,admin@dalattech.edu.vn)
+HãyClicknútInsertEmailLinkbạnsẽthấyhộpthoạisau:
Hình2.16:EmailLink
+TạihộpthoạiTexthãynhậpvàochuổihiểnthị.
+TạihộpE-mail:hãynhậpvàođịachỉEmailmuốngởiđến.
2.2.3Làmviệcvớicáchìnhảnh
VớiDreamweaverbạncóthểchèncáchìnhGIFvàJPGvàotrongtrangwebhoặccóthể
địnhảnhnềnchocáctrangwebhoặcảnhnềnchocáclớp(Layer).
Đểchènhìnhảnhvàotrangweb:đặtcontrỏtạivịtrímuốnchènảnh,chọnmenuInsert
->ImageshoặcClicknútInsertImagetrênhộpObjectPalletesauđóchỉđườngdẫnđến
hìnhảnhmàbạnmuốnchènvào.

35
Hình2.17:Đểchènhìnhảnhvàotrangweb
SaukhichènảnhvàođươctrangWebbạncóthểClickchuộtchọnảnhđểxuấthiệnhộp
thuộctínhPropertyInspectorđểđịnhnghĩacácthuộctínhcủahìnhảnh.
Hình2.18:hộpthuộctínhPropertyInspector
Đểđịnhđượcbộsoạnthảoảnhbênngoài(ExternalImageEditor)khibạnnhấpnút
EditbạnhãyvàomenuEdit->PreferenceschọnExternalcodeeditor.

36
Hình2.19:fileTypes/Editors
TronghộpExtensionshãychọnkiểuảnhmàbạnmuốnchỉnhsửahoặcbạncóthểClick
dấu(+)đểthêmmộtkiểuảnhmàbạnmuốnchỉnhsửa,nhấpnút(+)bênEditorssauđóbạn
hãychỉđườngdẫnđếntậptinchươngtrìnhsoạnthảoảnh(vídụnhưphotoshop.exe)
Tạobảnđồhìnhảnh(ImageMap/Hotpot):
HãychọnảnhsauđóchọncôngcụvẽHotpotvuông(RectangularHotpotTool),tròn
(OvalHotpotTool)haybấtkỳ(PolygonHotpotTool)trênhộpPropertyInspectorcủahình
ảnhsauđóvẽmộttọađộtrênảnhmàbạnmuốntạođócósiêuliênkếtsẽxuấthiệnhộp
thuộctínhcủaHotpotnhưhìnhvẽ.
Hình2.20:Tạobảnđồhìnhảnh
HãyClicknútBrowseForFileđểchỉđườngdẫnđếntậptincầnLinktới,nếubạnmuốn
tạoExternalLinkthìnhãynhậpđịachỉcủaWebserverhayFTPServertạihộpLink.Nhập
vàomộtchúthíchtrênđiểmHotpotkhimousedichuyểnquanótạiAlt.Bạncóthểchỉđịnh
Targetchonộidungcủasiêuliênkết(thamkhảocácloạiTargetởphầntrên).
TronglúcthaotácvớiHotpotbạncóthểdùngbiểutượngmũitênđểchọnHotpotđểdi
chuyểnhaythayđổikíchthướctọađộcủađiểmsiêuliênkết.
Chúý:NếubạnsửdụngnhiềubảnđồhìnhảnhtrongcùngmộttrangWebthìbạnphải
chắcrằngmỗibảnđồphảicómộttênduynhất.BạncóthểđặttênbảnđồtạihộpTextbox
Map.

37TạoRolloverImage:
RolloverImagelàmộthìnhảnhthayđổikhimousedichuyểnquanó.MộtRolloverchứa
2hìnhảnh:
+Ảnhsơcấp(PrimaryImage):làhìnhảnhđượchiểnthịkhitrangđầutiênđượcload.
+Ảnhđảo(RolloverImage):làảnhsẽxuấthiệnkhimousedichuyểntrênảnhsơcấp.
Chúý:khibạntạomộtRolloverthìcảhaihìnhảnhphảicókíchthướcgiốngnhau,nếu
cáchìnhkhôngcókíchthướcgiốngnhauthìDreamweavertựđộngđịnhlạikíchthướchình
ảnhthứhaiđểkếtvớicáctínhchấtcủahìnhảnhthứnhất.
Cáchtạo:
+HãyđặtcontrỏtạivịtrímuốnchènRollover.
+ChọnInsert->ImageObjects->RolloverImagetừmenuInserthoặcClicknútInsert
RolloverImagetrênthanhObjectPalette,bạnsẽthấyxuấthiệnhộpthoạisau:
Hình2.21:InsertRolloverImage
+TạiOriginalImagehãyClicknútBrowseđểtìmảnhgốc(PrimaryImage).
+TạiRolloverImagehãyClicknútBrowseđểtìmảnhđảo(RolloverImage).
+HãychọnPreloadRolloverImagekhibạnmuốnDreamweavertảitrướchìnhảnh
Rollovervàocachecủabộduyệtđểtăngnhanhtốcđộloadtrangweb.
+TạiAlternatetext,hãynhậpchuỗivănbảnhiểnthịkhirêchuộtlênhìnhảnh.
+TạiWhenClick,GoToURLhãyClicknútBrowseđểtìmtậptinmuốntạosiêuliênkết
hoặcnhậpvàođịachỉURLtạitextboxnày.
TạoNavigationBar:
BạncóthểtạomộtNavigationbartheochiềunganghoặcchiềuđứngbằngcáchchọn
mụcInsert->ImageObjects->NavigationBarhoặcClicknútInsertNavigationBartrên
hộpObjectPallettesẽxuấthiệnhộpthoạisau:

38
Hình2.22:InsertNavigationBar
+TrongtrườngElementNamehãynhậpvàotêncủaphầntửNavigationbar.
+TạiUpImagehãynhấpBrowsevàchỉđườngdẫnđếnhìnhảnhđượchiểnthịbanđầu
(vídụa1.gif).
+TạiOverImagehãynhấpBrowsevàchỉđườngdẫnđếnhìnhảnhđượchiểnthịkhi
mousedichuyểnquaảnh(vídụa2.gif).
+TạiDownImagehãynhấpBrowsevàchỉđườngdẫnđếnhìnhảnhđượchiểnthịkhi
mouseClickvàoảnh(vídụa2.gif,hoặcbạncóthểthiếtkếthêmmộtảnha3.gif).
+TạiOverWhileDownImagehãynhấpBrowsevàchỉđườngdẫnđếnhìnhảnhđược
hiểnthịkhimouseClickvàoảnhtronglúcdichuyểncontrỏlênhìnhảnhđó(bạncóthể
khôngcầnthiếtkếtrạngtháinày).
+TạiWhenClicked,GotoURLhãyClicknútBrowseđểchỉđườngdẫnđếntậptinmà
màbạnmuốnLinktớihoặcnhậpvàođịachỉExternalURLmàbạnmuốnLinktới.
+HãychọntùychọnPreloadImage.Nếubạnkhôngchọntùychọnnàysẽtạorasự
chậmtrễkhimouseOverquaảnh.
+ShowdownImageInitially:Hiểnthịảnhởtrạngtháinhấnmousekhitrangvừamớitải
xuống.
+HãychọnkiểuNavigationbarnằmdọchayngangtạiInsert.
+HãychọnUseTablesđểchèncácphầntửNavigationbartrongTable.
+Hãynhấpnút+đểthêmmộtphầntửNavigationmớihoặcclicknút-đểloạibỏphầntử
Navigationđangchọn.
+ĐểsắpxếpcácphầntửbạncóthểClicknútmũitênlênhayxuống.
*Lưuý:BạnchỉchènđượcmộtNavigationBartrongcùngmộttrangWeb.

39SaukhitạoxongđượcNavigationBarnếumuốnchỉnhsửalạibạnhãychọnMenu
Modify>Navigation.
2.2.4Làmviệcvớibảng(Table)
TablelàmộtcôngcụthiếtkếWebnhằmsắpxếpdữliệuvàcáchìnhảnhtrênmộttrang
HTML.VớiDreamweaverbạncóthểdễdàngchuyểnđổigiữamộtthiếtkếTablevàthiếtkế
Lớp.CảTablevàlớpđềuchophépbạnđiềukhiểnvịtrícủacácphầntửcủatrangWeb
nhưngcáclớpthìkhôngđượchổtrợtrongcáctrìnhduyệttừ3.0vàtrướcđó.
ChènTable:
ĐểchènTablebạnchọnmenuInsert->TablehoặcClicknútInsertTabletrênthanh
ObjectPalettebạnsẽthấyhộpthuộctínhcủaTablenhưsau:
Hình2.23:table
+TronghộpRowshãynhậpvàosốhàngcủaTable.
+TronghộpColumnshãynhậpvàosốcộtcủaTable.
+TronghộpCellPaddinghãychỉđịnhkhoảngcáchtừTextsovớicạnhcủaTable.
+TronghộpCellSpacinghãynhậpvàokhoảngcáchgiữacácCell.
+TronghộpTablewidthhãynhậpvàochiềurộngcủaTabledướidạngsốPixelhoặc
dướidạngmộttỷlệphầntrămcủacửsổtrìnhduyệt.
+TronghộpBorderthicknesshãynhậpvàođườngviềncủaTable,nếubạnmuốnTable
làdạnglướibạnhãynhậpvàogiátrịlà0.
ĐịnhdạngTable:
ĐểđịnhdạngTablebạnhãydichuyểnMousevàocáccạnhcủanósauchoxuấthiện
đượchìnhmũitên4đầusauđóClickchọnTablebạnsẽthấyxuấthiệnhộpthuộctínhcủa
Tablenhưhìnhvẽ:

40
Hình2.24:ĐịnhdạngTable
ĐịnhdạngCell:
ĐểđịnhdạngcellbạnhãyDragchọncácCellmuốnđịnhdạngbạnsẽthấyxuấthiệnhộp
thuộctínhcủaCellnhưsau:
Hình2.25:ĐịnhdạngCellbằngthanhcôngcụ
Chúý:KhibạnđịnhdạngCellngoàicácthuộctínhcủaCelltrênhộpthuộctínhbạncó
thểchọncácCellmuốnđịnhdạngbằngcáchDragmousechọnsauđóClickphímphải
chuộtvàocácCellđãchọnsauđóchọnmenuTablevàchọncáclệnhthíchhợptrênmenu
này.

41
Hình2.26:ĐịnhdạngCellbằngchuột
ĐểchỉnhsửaTablehoặcCellbạncòncóthểchọnmenuModify->Tablebạncũngthấy
đượcmenunhưhìnhtrên.
Hình2.27:ĐểchỉnhsửaTablehoặcCell
ĐịnhdạngTabletheocácmẫuchotrước(PresetDesign)
Hình2.28:ĐịnhdạngTabletheocácmẫuchotrước
1)ChọnbảngsauđóchọnmenuCommand->FormatTablebạnsẽthấyxuấthiệnnhiều
mẫutablechosẵnbạnhãychọnmộttrongnhữngmẫunày.

42
Hình2.29:trongFormatTable
2)TronghộphộithoạimớixuấthiệnbạnhãychọnmộtkiểuTablebêndanhsáchbêntráivà
bạncũngcóthểthayđổicácthuộctínhtùychọnchoTable.
SắpxếpdữliệuchoTable:
Hình2.20:SắpxếpdữliệuchoTable
•ChọnTablesauđóchọnmenuCommand->SortTablebạnsẽthấyhộpthoạisauđây:
Hình2.21:SortTable

43•ChọncộtđểphânloạitạiSortBy
•TạiOrderchọnkiểusắpxếptheoAlphabehaytheosốvàchọnkiểusắpxếptăngdần
AscendinghaygiảmdầnDescending
MacromediaDreamweaver4.0MediaspaceClub#14
•Đểthựchiệnviệcsắpxếpthứcấptrêncộtkháchãychỉđịnhcáctùychọnphânloại
trongmenuThenby.
•TùychọnSortincludethefirstrowchophépbạnsắpxếpluôndòngđầumàthường
làtiêuđềcủaTablekhôngđượcdichuyển,bạnđừngchọnoptionnàynếuTablecótiêuđề.
ChènTabletrongTable:
MộtTablecóthểnằmtrongmộtTablekhác,tuynhiênchiềurộngcủanóbịgiớihạnbởi
chiềurộngcủaôquađóxuấthiện.
Hình2.22:ChènTabletrongTable
Đểthựchiệnbạnlàmnhưsau:
+ĐầutiênbạnhãychènvàotrangWebmộtTablebằngmenuInsert->TablehoặcClick
nútInsertTabletrênhộpObject.HãyđặtvịtrícontrỏtạiômàbạnmuốncóTablethứ2rồi
cũngchọnInsert->Table.
Bàithựchànhsố2:
SửdụngMacromediaDreamweaverđểthựchiệnbàithựchànhnày.
1.SửdụngMacromediaDreamweaverđểthiếtkếlạicáctrangWebcủabàitập1.
2.TạohaitrangHTMLtênlàa.htmvàb.htm.
a)Trongtranga.htmtạoliênkếtđếntrangb.htm.
<HTML>
<BODY>
<P>ĐâylàtàiliệutrangA
<BR>
<AHREF="b.htm">Nhấnvàođâyđểmởtrangb</A>
</BODY>
</HTML
b)Trongtrangb.htmtạoliênkếttrởlạitranga.htm.
Cácemtựhoànthànhbàitậpnày!
3)TạotrangHTMLvớinộidungsau(nộidungởđâychỉmangtínhchấtminhhọa,họcviên
cóthểgõnộidungbấtkỳ):

44-Table:bảngTrongchươngtrìnhquảnlýcơsởdữliệuliênquan,đâylàcấutrúccơ
sởcủaviệclưutrữvàhiểnthịdữliệu,trongđócáckhoảnmụcdữliệuđượcliênkếtvới
nhaubởicácquanhệhìnhthànhdoviệcđặtchúngtheocáchàngvàcáccột.Cáchàngứng
vớicácbảnghidữliệucủacácchươngtrìnhquảnlýdữliệuhướngbảng,vàcáccộtthìứng
vớicáctrườngdữliệu.
-Hypertext:vănbảncủamộttàiliệutruytìmkhôngtheotuầntự.Ngườiđọctựdo
đuổitheocácdấuvếtliênquanquasuốttàiliệuđóbằngcácmốiliênkếtxácđịnhsẵndo
ngườisửdụngtựlậpnên.Trongmộtmôitrườngứngdụnghypertextthựcsự,bạncóthểtrỏ
vàobấtkỳtừnàocủatàiliệuvàsẽtứckhắcnhảyđếncáctàiliệukháccóvănbảnliênquan
đếnnó.
-Multimedia:đaphươngtiện,đamôitrường,đatruyềnthôngMộtphươngphápgiới
thiệuthôngtinbằngmáytính,sửdụngnhiềuphươngtiệntruyềnthôngtinnhưvănbản,đồ
hoạvàâmthanh,cùngvớisựgâyấntượngbằngtươngtác.
-WorldWideWeb-WWW:TrongcácmáytínhcócơsởUNIXvàđượcnốivới
mạngInternet.Ðâylàmộthệthốngdùngđểtruytìmvàphụchồicáctàiliệuhypertextthực
hiện.Ðượcxâydựngđầutiênởmộtphòngthínghiệmvậtlý,WWWthườngxuyênnhận
đượccácthôngtinbổsungnhờnhữngngườisửdụngđónggópthêmcáctàiliệuđãđược
đánhchỉsố.
-FileTransferProtocol-FTP:địnhướctruyềntệp,giaothứctruyềntệp.Trong
truyềnthôngkhôngđồngbộ,đâylàmộttiêuchuẩnnhằmbảođảmtruyềndẫnkhôngbịlỗi
chocáctệpchươngtrìnhvàdữliệuthôngquahệthốngđiệnthoại.ChươngtrìnhFTPcũng
đượcdùngđểgọitênchođịnhướctruyềntệpUNIX,mộtđịnhướchướngdẫnviệctruyền
dữliệu.
-Internet:Mộthệthốnggồmcácmạngmáytínhđượcliênkếtvớinhautrênphạmvi
toànthếgiới,tạođiềukiệnthuậnlợichocácdịchvụtruyềnthôngdữliệu,nhưđăngnhậptừ
xa,truyềncáctệptin,thưtínđiệntử,vàcácnhómthôngtin.
4)TạobảngdanhmụcđểliênkếtđếncácphầncủatrangWebtrên.
Table
Hypertext
Multimedia
WorldWideWeb–WWW
FileTransferProtocol–FTP
Internet
………………………………
………………………………

45
BÀI3:
ĐINHDẠNGVĂNBẢNVÀTẠOẢNHCHOTRANGWEB
Mụctiêuthựchiện:
Họcxongbàinàyhọcviênsẽcókhảnăng:
-TrìnhbàytrangWeb
-Địnhdạngvàthiếtlậphiệuứngcácđoạntext
-ChènhìnhảnhvàxửlýảnhtrêntrangWeb
3.1Giớithiệu
ĐểtrangWebthêmsốngđộng,cácnhàthiếtkếthườngđưavàotàiliệuHTMLcủamình
nhữnghìnhảnhmangtínhchấtquảngcáo,trangtrí,cũngnhưnhữngthôngtinmàhọcần
cungcấpchongườisửdụng.Hiệnnay,hailoạiảnhđượchỗtrợvàđọcđượcbởitrìnhduyệtlà
GIFvàJPEG.Cácbạnsẽđượctìmhiểurõhơnvềđặcđiểmcủahaikhuôndạngảnhnàyở
phầndướiđây.Trongbàinày,chúngtasẽtìmhiểuvềcáchđịnhdạngvănbảnvàtạoảnh
chotrangwebtrongmôitrườngProntPage.
3.2CácloạiảnhđượchỗtrợtrongHTML
CácảnhtrêncáctrangWebphảicóđịnhdạnghoặclàGraphicsInterchangeFormat(GIF)
hoặclàJointPhotographicExpertGroupformat(JPEG).FrontPagechophépimportcácảnh
theocácđịnhdạngsau:GIF,JPEG(standardandprogressive),BMP(WindowsandOS/2),TIFF,
TGA,RAS,EPS,PCX,vàWMF.Khiđó,FrontPagechuyểnđổicácảnhđượcimportedthành
ảnhGIF(chocácảnhchứatới256màu)hoặcảnhJPEG(chocácảnhchứatrên256màu)khi
trangđượclưutrữtrongFrontPagewebhiệnthời.
3.3Chènmộthìnhảnh
3.3.1Chènảnhtừmộtfile
Cóthểchèncácloạiảnh:GIF,JPEG,BMP(WindowsandOS/2),TIFF,TGA,RAS,EPS,
PCX,vàWMF.KhichènmộtảnhkhôngthuộcđịnhdạngGIFhoặcJPEG,nótựđộng
chuyểnthànhảnhGIF(đốivớiảnhmàu8bitshoặcíthơn)hoặcảnhJPEG(đốivớicácảnh
màulớnhơn8bits).
1.TrongFrontPageEditor,chọntrangmuốnchènảnh.
2.ChọnInsert/Picture.XuấthiệnhộphộithoạiPicture:
3.KíchnútFromFile
.

46Hình3.1:Chènảnhtừmộtfile
4.TronghộphộithoạiSelectFilesửdụnghộpLookInvàhộpliệtkêcácfilesvàcác
foldersđểtìmtớicácfilevàfolderchứaảnh.ChọnloạifiletừhộpFilesofType.Chọnảnh
muốnchènvàkíchOK.
3.3.2ChènảnhtừFrontPagewebhiệnthời
Cácloạiảnhđượcphépchèn:GIF,JPEG,BMP(WindowsandOS/2),TIFF,TGA,RAS,
EPS,PCX,vàWMF.KhichènảnhkhôngthuộcloạiGIFhoặcJPEG,nótựđộngchuyển
thànhảnhGIF(đốivớiảnhvớibitsmàuhoặcnhỏhơn)hoặcảnhJPEG(đốivớiảnhlớnhơn
8bitsmàu).
1.TrongEditor,kíchtrangmuốnchènảnh.
2.ChọnInsert/Picture.
3.TronghộphộithoạiPicture,chọnảnhmuốnchèn.
4.KíchOK.
3.3.3ChènảnhtừWorldWideWeb
KhichènảnhtừWorldWideWeb,ảnhluônluônđượclấyvềtừvịtríxácđịnhcủanó.
Chúý:
Nếumáytínhcủabạnđượcđặtsaumộtfirewall,đầutiênbạnphảixácđịnhproxyserver
củamìnhtrongmụcProxiescủahộphộithoạiOptionstrongcửasổFrontPageExplorertrước
khibạncóthểchènảnhtrựctiếptừWorldWideWeb.
TrongFrontPageEditor,đặttrỏtexttạinơimuốnchènảnh.
1.ChọnInsert/Picture.
2.KíchnútWorldWideWeb.TrìnhduyệtWebđượcmở.
3.TrongtrìnhduyệtWeb,gõvịtrívàtêncủaảnhbạnmuốnchèn(vídụnhư,
http://www.microsoft.com/sample.gif)vàấnENTERđểhiệnảnh.
4.QuayvềhộphộithoạiPicturevàkíchOKđểchènảnh.
3.3.4Chènclipart
1.FrontPagecóMicrosoftClipGallery,làcôngcụđểxem,chènclipart,pictures,
sounds,videoclips,vàảnhđộng(animations).
2.TrongFrontPageEditor,kíchtrangbạnmuốnchènclipart.
3.ChọnInsert/ClipartđểmởMicrosoftClipGallery.
4.TrongClipGallerychọnảnh,picture,soundfile,hoặcvideo,vàkíchInsert.
3.3.5Chènmộtvideoclip
FrontPagecóhaiphươngphápđểchènmộtvideoclipvàotranghiệnthời.
Ghichú:NếubạnđãcàiđặtMicrosoftInternetExplorer,bạncóthểlậptứcxemtrước
videoclipbằngcáchchọnmụcPreviewtrongFrontPageEditor.
1.TrongFrontPageEditor,chọnInsert/ActiveElements/Video.
2.TronghộphộithoạiVideo,địnhvịvideobạnmuốnchèntừFrontPagewebhiệnthời,
từWorldWideWeb,hoặchệthốngfilecủabạn.NếubạnđãcàiMicrosoftOffice
2000,kíchClipArtđểchènvideocliptừMicrosoftClipGallery.

473.KíchOK.
3.3.6CáchchènmộtvideocliptừMicrosoftClipGallerycủaMicrosoftOffice.
1.TrongFrontPageEditor,chọnInsert/ClipArt.
2.ChọnmụcVideos.
3.Chọnvideoclipmuốnchèn.
4.KíchInsert.
3.4Sửaảnh
Làmmộttrongcáccáchsau:
-TừFrontPageEditorhoặcExplorer,kíchđúpảnhcầnsửa.
-TrongFrontPageEditor,chọnảnhvàsửdụngbấtkìlệnhsửaảnhnàotrênthanh
côngcụpicture.
CáchsửdụngcácnúttrênthanhcôngcụPicture
-NútBevel
:đặtgócnghiêngchoảnhtrongkhônggianbachiều.
-NútText
:chèntextchoảnh.NếulàảnhJPEG,FrontPageEditornhắcbạn
chuyểnthànhảnhGIF,vìtextkhôngđượchỗtrợtrênảnhJPEG.NếuFrontPage
chuyểnkiểuảnh,sốmàucủaảnhcóthểbịgiảmvàkíchthướcfilecóthểlớnhơn.
Sauđó,gõtexttronghìnhchữnhậttrênảnh.Cóthểthayđổikíchthướcmiềntextvà
dichuyểnnótớicácvịtríkhácnhưcácđốitượngđồhoạthôngdụng.Việcchèntext
vàoảnhkhônglàmthayđổifileảnhtrongFrontPagewebcủabạn.
-NútMoreContrast
:tăngđộtươngphảncủaảnh
-NútLessContrast
:giảmđộtươngphảncủaảnh.
-NútMoreBrightness
:tăngđộsángcủaảnh.
-NútLessBrightness
:giảmđộsángcủaảnh.
-NútBlackandWhite
:chuyểnthànhảnhđentrắng.
-NútCrop
:dùngđểcắtxénảnh.FrontPagehiệnhìnhchữnhậtbaoquanhmột
phầnảnh.CóthểthayđổikíchthướchìnhchữnhậtvàấnEnter.
-NútFlip
:đểlậtdọcảnh.
-NútRotateLeft
:quayảnh900ngượcchiềukimđồnghồ.
-NútRotateRight
:quayảnh900theochiềukimđồnghồ.
-NútReverse
:đểlậtngượcảnh.
-NútWashout
:đểgiảmđộtươngphảnvàđộsángcủaảnh.Thườngđượcdùng
khitạoảnhnềnchotrang.
-NútRestore
:đểphụchồilạiảnhcũ.

48-Thayđổicáchsắpđặtảnh
1.TrongFrontPageEditor,chọnảnhtrêntrang,sauđóchọnEdit(hoặcshortcut
menu)/PictureProperties(Alt+Enter).Xuấthiệnhộphộithoại
Hình3.2:PictureProperties
2.ChọnmụcAppearancecủahộphộithoạiPicturePropertiesvàchọncáclựachọnsau:
-Alignment:điềuchỉnhcáchdónghàng
-BorderThickness:điềuchỉnhđộdàykhung
-HorizontalSpacing:điềuchỉnhkhoảngcáchngangsovớilềtráivàphảicủatrang.
-VerticalSpacing:khoảngcáchdọcđiềuchỉnhsovớilềtrênvàdướicủatrang.
3.KíchOK.
-Tạothumbnailpicture:Thumbnailpicturelàphiênbảnnhỏcủaảnhtrêntrang,chứa
hyperlinkvớikíchthướcthậtcủaảnh.
-TrongFrontPageEditor,chọnảnh.
-ChọnTools/AutoThumbnail(Ctrl+T).
-Tuỳbiếnvideoclip:Dùngthủtụcnàyđểtuỳbiếnvideocliptrêntrangkíchhoạtkhixem
trêntrìnhduyệtWeb.
Ghichú:đểsửanộidungcủavideo,kíchđúpđểmởnótrongvideoeditorđượccàitrong
máytínhcủabạn.Nếutrongmáytínhkhôngcàivideoeditor,thìkhôngthểsửavideo.
1.TrongFrontPageEditor,chọnvideoclipmuốntuỳbiếnvàchọnEdit/Picture
Properties.

49
Hình3.3:videoPictireproperties
2.TronghộphộithoạiPictureProperties,kíchmụcVideovàchọncáctuỳchọn:
-NếumuốnvideochạyvớinútVCRchophépngườisửdụngđiềukhiểnplayback,chọn
checkboxShowControlsinBrowser.
-ChỉđịnhsốlầnvideolặplạibằngcáchgõsốtrongtrườngLoophoặcchọncheckbox
Foreverđểtiếptụcchơi.
-ChọntuỳchọntrongmụcStart:OnFileOpenkhởitạovideokhitrangđượcgọitrong
trìnhduyệtWebcủangườisửdụng;OnMouseOverkhởitạovideokhingườisửdụngdi
chuyểnchuộttrênvideo.
Ghichú:NếubạnđãcàiđặtMicrosoftInternetExplorer,bạnlậptứccóthểxemvideoclip
trêntrangkíchhoạtbằngcáchchọnmụcPreviewtrênFrontPageEditor.
-Thayđổikíchthước(Resample)fileảnh
Resampleảnhlàthayđổikíchthướcfileảnhchohợpvớikíchthướchiệnthờicủanó.
Bạncóthểthayđổikíchthướcfilelớnhơnhoặcnhỏhơn.
5.TrongFrontPageEditor,chọnảnh.
6.Chọnmộttrongcácnútđiềukhiểnkíchthướcvàdãnrộnghoặccohẹpảnh.
7.KíchnútResample
trênpicturetoolbar.
-Thayđổikíchthướcảnh
TrongFrontPageEditor,kíchảnhđểchọnnó.Xuấthiện8nútđiềuchỉnhảnh.Đểthay
đổikíchthướcảnhlàmmộttrongcácviệcsau:
-Đưatrỏchuộtvàomộttrongcácnútđiềukhiểnvàrêchuộtđểlàmthayđổikíchthước.
-ChọnEdit/PictureProperties.TrongmụcAppearance,chọnSpecifySizetrongphần
Size.Cóthểđiềuchỉnhkíchthướcảnhtheocácđiểm(pixels)hoặctheotỉlệphầntrăm.Để
thayđổikíchthướcảnhtỉlệvớikíchthướccũ,chọnnútKeepAspecttrướckhithayđổicác
giátrịHeightvàWidth.
-Tạoảnhtrongsuốt
Tạomàutrongảnhtrongsuốtthườngđượcápdụngchoảnhnềncủatrang.
8.TrongFrontPageEditor,chọnảnh.
9.KíchnútMakeTransparent
.ContrỏchuộtbiếnthànhdạngMakeTransparent.

5010.Trongảnh,kíchmàumuốnlàmchotrongsuốt.
11.NếulàảnhJPEG,FrontPagenhắcbạnchuyểnthànhảnhGIFformat,vìsựchuyển
thànhmàutrongsuốtkhônghỗtrợchoảnhJPEG.
3.5Chuyểnđổiảnh
ChuyểnthànhảnhGIF
12.TrongFrontPageEditor,chọnảnhmuốnchuyển
13.ChọnEdit/PictureProperties.ChọnmụcGeneral:
Hình3.4:PictureProperties
14.TronghộphộithoạipicturePropertieschọnGIFtrongphầnType.Nếuchọn
Interlaced,ảnhsẽchuyểnthànhđịnhdạnginterlacedGIF.
15.KíchOK.

51
Hình3.5:greneralpicturepropertive
ChuyểnthànhảnhJPEG
16.TrongFrontPageEditor,chọnảnhmuốnchuyểnđổi.
17.ChọnEdit/PictureProperties.
18.TronghộphộithoạiPictureProperties,chọnJPEGtrongphầnType.
19.QualitylàIntegertrongkhoảng1-100.Qualitycàngtăng,độnénảnhcànggiảm
làmchofileảnhlớnnhưngchấtlượngcao.Qualitygiảm,độnéntănglàmgiảmkích
thướcfilenhưngchấtlượngkém.GiátrịQualityngầmđịnhlà75.Đểthaychấtlượng
ảnhJPEG,thayđổigiátrịtrongtrườngQuality.
20.TrongtuỳchọnProgressivePasseschọn0(zero)đểchỉđịnhJPEGchuẩn.Nếu
chọnsốcaohơn,ảnhđượcchọnsẽchuyểnthànhdạngJPEGcao(progressive).
21.KíchOK.
3.6Cácchứcnăngkhác
-ImportảnhvàoFrontPageweb
KhiimportmộtảnhtứclàbạnđặtbảncopycủanóvàoFrontPagewebcủamình.Để
importnhanhmộthoặcnhiềuảnhvàoFrontPagewebhiệnthời,kéochúngtừdesktopcủa
bạnvàoFolders,AllFiles,Navigation,hoặcHyperlinksviewcủaFrontPageExplorer.Để
importcácảnhvàodanhsáchimport,màtừđóbạncóthểđổitênvàimportchúngvào
FrontPageweb.
TrongFrontPageExplorer,chọnFile/Import.Xuấthiệnhộphộithoại:

52
Hình3.6:Import
-Đểbổsungảnhvàodanhsáchimport,kíchAddFile.TronghộphộithoạiAddFile
toImportList,sửdụnghộpLookInvàhộpliệtkêcácfilevàcácfoldersđểtìmnơilưutrữ
ảnh.ChọnảnhvàkíchOpen.
-Đểbổsungtoànbộnộidungcủamộtfoldervàodanhsáchimport,kíchAddFolder.
TronghộphộithoạiBrowseForFolder,tìmvàchọnfolder,kíchOK.
-ĐểthayđổiURLcủabấtkìảnhnàotrướckhiimportnó,hoặcđổitên,hoặcthayđổi
thưmụcchứaảnhtrênFrontPageweb,kíchEditURLđểmởhộphộithoạiEditURL.Trong
FilelocationbêntrongtrườngFrontPageweb,gõURLtươngđốitớigốc(root)của
FrontPagewebhiệnthời.Vídụ,NếubạngõURLpictures/picture.gif,ảnhsẽđượclưutrữ
vàofolderảnhdướifoldergốccủaFrontPagewebhiệnthời.SaukhithayđổiURL,kíchOK.
-ĐểimportảnhvàcácfileskháctrêndanhsáchimportvàoFrontPageweb,kíchOK.
Trongkhicácfilesđangđượcimported,bạncóthểdừnglạibằngcáchkíchStop.
-Chỉđịnhđộảnhcóđộphângiảithấp
BạncóthểhiệnảnhcóđộphângiảithấptrongkhivẫndownloadảnhđẹptừWebserver.
ĐiềuđósẽtiếtkiệmthờigiankhikếtnốivớiInternet.
22.TrongFrontPageEditor,chọnảnh
23.ChọnEdit/PictureProperties.ChọnmụcGeneral.
24.TrongvùngAlternateRepresentationscủahộphộithoạiPictureProperties,kích
BrowsebêncạnhtrườngLow-Resvàlàmmộttrongcácviệcsau:
-TronghộphộithoạiSelectAlternatePicture,chọnlow-resolutionpicturefiletobeused,
vàkíchOK.
-KíchnútWorldWideWebđểchuyểntớitrìnhduyệtWebngầmđịnhcủabạn.Tìmvị
trícủafileảnhcóđộphângiảithấptrênWorldWideWeb,sauđóquayvềFrontPagebằng
cáchnhấntổhợpphímALT+TAB.
-KíchnútFileđểchọnfileảnhcóđộphângiảithấptừổđĩacụcbộhoặctừmạng.
Nếubiếtđườngdẫnđầyđủvàtênfilecủafiletext,hãygõnótrongtrườngFileName.
25.KíchOKđểđónghộphộithoạiPictureProperties.
Ghichú:đầutiênbạnphảitạophiênbảnphângiảithấpcủaảnhtrêntrangwebcủa
mìnhtrướckhisửdụngchúng.Đểlàmđiềuđó,hãymởảnhtrongmộtphầnmềmpicture
editingvídụnhưMicrosoftPictureComposervàgiảmmàutrênảnh.Bạnchỉđịnhsốmàuít
hơnchophiênbảnphângiảithấpcủaảnh,nósẽhiệntrêntrìnhduyệtWebnhanhhơn.Vì
ảnhcóđộphângiảithấpđượcdùngđểgiữchỗ(placeholder)choảnhcóđộphângiảicao,
bạnkhôngcầnthayđổiđộrộngvàđộcaocủaảnh.

53-Đặthyperlinkngầmđịnhchoảnh
Hyperlinkngầmđịnhcủaảnhlàđíchcủahyperlinkđốivớibấtkìdiệntíchnàokhông
chứahotspot.
25.Kíchảnhđểchọnnó.
26.ChọnEdit/PictureProperties.
27.TrongmụcGeneral,chọnđíchcủahyperlinkngầmđịnhnhưURLtrongtrường
LocationhoặckíchBrowseđểchỉđịnhđíchcủahyperlinkngầmđịnhtronghộphội
thoạiCreateHyperlink.
28.Saukhitạohyperlink,kíchOKđểđónghộphộithoạiPictureProperties.
-Tạotextthaythếchoảnh
Tạotextthaythếchoảnhđểhiệnvịtrícủaảnhkhiảnhbịmờhoặckhôngthểhiệnđược
trêntrìnhduyệtWeb.MộtsốtrìnhduyệtWebhiệntextthaythếtrongkhiđanggọiảnh.
29.TrongFrontPageEditor,chọnảnh.
30.ChọnEdit/PictureProperties.ChọnmụcGeneral.
31.TrongvùngAlternateRepresentationscủahộphộithoạiPictureProperties,gõtext
thaythếtrongtrườngText.
Bàithựchànhsố3
1.TạomớimộttrangHTMLbằngDreamweaver,lưulạitrangwebnàyvớitênBaiTho.htm
lênmộtthưmụctrênổđĩa,thiếtlậptiêuđề,màunền,nhạcnềnchotrang.
-ChènvàomộtMarqueeởđầutrangvớidòngchữĐÔIDÉP(tiếngViệtcódấu),thiếtlập
kíchthước,chọnfont(VNI-),chọnmàusắcvàhướngdichuyểnchoMarquee.
-Nhậpnộidungvàsửdụngcácthẻ<P>,<UL>,<OL>đểđịnhdạnhcácđoạnthơnhưsau:

54
2.Sửdụngphầnmềmtạoảnhđộng(GifAminatorhoặcmộtphầnmềmtạoảnhkhác)đểtạo
mộtảnhđộngvớinhiềuframevàlayer.Xuấtảnhvớiđịnhdạng.GIFvàchènảnhnàyvào
trangweb.
--------------------
BÀI4:LIÊNKẾT
Mụctiêu:
-TạođượccácmớiliênkếttừmộttraqngWebnàyđếnmộttrangWebkhác
-TổchứccácmốiliênkếtPictureBullets
PlainBullets
Numbers

554.1Kháiniệmvềsiêuliênkết
-ĐặctrưngcơbảncủangônngữHTMLchínhlàtínhsiêuliênkết.Tínhsiêuliênkếtthể
hiệnởtấtcảmọiloạitàiliệumàngườiđọctựdođuổitheocácdấuvếtliênquanquasuốttài
liệuđóbằngcácmốiliênkếtxácđịnhsẵndongườisửdụngtựlậpnên.Mộtkháiniệmquan
trọngđượcsửdụngtrongliênkếtlàHypertext.
Trongmộtmôitrườngứngdụnghypertextthựcsự,bạncóthểtrỏvào(highlight)bấtkỳ
từnàocủatàiliệuvàsẽtứckhắcnhảyđếncáctàiliệukháccóvănbảnliênquanđếnnó.
Cũngcónhữnglệnhchophépbạntựtạochoriêngmìnhnhữngdấuvếtkếthợpquasuốttài
liệu.Cáctrìnhứngdụnghypertextrấthữuíchtrongtrườnghợpphảilàmvớimộtsốlượng
vănbảnlớn,nhưcácbộtừđiểnbáchkhoavàcácbộsáchnhiềutập.
TrongbàinàychúngtasẽtìmhiểuvềliênkếtquamôitrườngProntPage2002
(ProntPageXP).
4.2Tạosiêuliênkết
4.2.1TạoBookmark
-Chọnđốitượngcầnđặttên(lưuý,đốitượngởđâycóthểlàđốitựongTexthoặchình
ảnh,…).
-VàomenuInsertBookmark,trongphầnBookmarknamenhậptênchođốitượng.

56
Hình4.1:ĐặttênchođốitượngBookmark
4.2.2Tạoliêuliênkết(Hyperlink)
-Chọnđốitượngcầnliênkết
-VàoInsertHyperlink(hoặcnhấnCtrl+Khoặcnhấnvàonútlẹnhcóhìnhquảcầu)
-TạiphầnAddress,nhậpvàođịachỉURLhoặcchọntậptincầnliênkết.
Hình4.2:LiênkếttớimộtđịachỉURL
-NếumuốnliênkếttớimộtBookmarktrongtrangwebvừatạothìnhấnvàonút
Boomark…chọntênBookmark:

57
Hình4.3:LiênkếttớimộtBookmark
-NếutrangcósửdụngFramethìbạncóthểchỉđịnhcholiênkếtđượchiểnthịtrong
phầnFramenàobằngcáchnhấnvàonútTagetframe,cửasổhiệnrachophéptachọncác
thamsố:
Hình4.4:ChọnFramehiểnthị
+SameFrame:tranghiểnthịđúngvớiframechứatrangcóchứađườnglink
+WholePage:tranghiểnthịtoànbộcửasổ(khôngthuộcmộtframenào)
+NewWindow:tranghiểnthịởmộtcửasốmới(khôngthuộcframenào)
+ParentFrame:tranghiểnthịởframecha(baoframecóchứađườnglink)
4.3XemmãHTMLcủasiêuliệnkết
BâygiờchúngtahãyxemHTMLđãsinhranhữngthẻgìtrongnhữngcôngviệctavừa
thựchiện,từđócácbạncóthểnắmbắtđượcnhữngđoạnmãchủyếutạonênsựsiêuliên
kếtthúvịnày.
Nhưởtrên,chúngtađãtạoramộtbookmarktênlàcntt(ởnộidungCôngnghệthông
tin)vàliênkếtđoạnvănbảnCôngnghệthôngtintớibookmarknày,HTMLđãsinhrađoạn
mãvớithẻ<a>…</a>sau:

58<atarget="_self"href="#cntt">Côngnghệthôngtin</a>
-NếumuốnliênkếtđếnmộtđịachỉURL,cácbạnchỉcầnthayđổithuộctínhhref=<địa
chỉURL>.
-Nếumuốnthayđổiframehiểnthị,chúngtathayđổithuộctínhtarget.
-Ðôikhinộidungtrangwebdàivàchiếmnhiềutrangmànhình,nhưngnộidunglạicó
mốiliênhệchặtchẽ,hayvì1lýdonàođómàtakhôngmuốntoànbộnộidungnàyđược
chứatrongcùng1trangwebvàchiaranhiềutrang.Khiđótacầnđặtcáchyperlinkngay
đầutrangwebđểkhicầnngườidùngcóthểclickvàođóđểđiđếnmộtđoạntưliệuhọquan
tâmmàkhôngcầnphảikéoscrollbarđếnđoạnđó.
-Ðịnhnghĩatag<A></A>nhưsau:
a)Ðịnhnghĩa1bookmarkvàhyperlinktrongcùngtrangweb:bookmarklàkỹthuật
chỉđịnh1địnhdanh(đích)đểhyperlinknhảyđếnđầuđoạnvănbản.
<Aname="tên">chuỗikýtựđầuđoạnvănbản</A>
Vídụ:
<Aname="Ndphần1">Nộidungphần1</A>baogồmcácnộidungchitiếtsau...
Khiđótrongphầnkhaibáohyperlinkbạnkhaibáotheocúphápsau:
<ahref="#tên_của_bookmark_đã_khai_báo">Chuỗihướngdẫnnhảyđếnđầuđoạncó
bookmark="tên_của_bookmark_đã_khai_báo"</a>
Vídụ:
<ahref="#Ndphần1">Xemnộidungphần1</a>
b)Hyperlinkđếnmộttrangwebkhác:
Cúpháp:
<AHREF="địa_chỉ_trang_web_sẽ_nhảy_tới">Chuỗidiễngiảihyperlink</A>
Vídụ:
<AHREF="http://www.dalattech.edu.vn">Linkđếntrangwebchủcủahãngmáytính
Microsoft.</A>
<AHREF="trang_chu.htm">Linkđếntrangwebtrang_chu.htmtrongcùngthưmục.</A>
<ATARGET="viewer"HREF="sample.htm">Clickvàođâyđểmởtrangwebsample.htm
trongcửasổ"viewer".</A>
<AHREF="http://www.dalattech.edu.vn"><IMGSRC="images/bullet.gif">Clickvàoảnh
nàyđểlinkđếntrangwebcủaMicrosoft</A>
<AHREF="mailto:admin@kythuatdalat.edu.vn">admin@kythuatdalat.edu.vn</A><br>
Bàithựchànhsố4:
1.Tạo3trangHTMLlầnlượttênDoan1.htm,Doan2.htmvàDoan3.htmchứanộidung3
đoạnthơởbàithựchànhsố3,lưu3tậptinnàycùngthưmụcvớitậptinBaiTho.htm.
-Tạo3nútliênkếtđến3trangDoan1.htm,Doan2.htm,Doan3.htmtrên:
-Tạomộtmenungangliênkếtđến3trangDoan1.htm,Doan2.htm,Doan3.htmtrên:Màusắcnútliênkếtthayđổikhiđưachuộtlên.

59
2.TạomớimộttrangHTMLvàlưuvớitênHotSport.htm,chènmộthìnhảnhgồmnhiều
nhânvậtvàotrangweb,tạocácHotSportlêntrênkhuônmặtcủatừngngườiđểkhinhấn
chuộtvàokhuônmặtcủangườinàothìsẽliênkếtđếntrangthôngtinriêngcủatừngngười
(cáctrangthôngtinriêngnàycácemtựthiếtkế).
-DùngAutoShapes,vẽcáchìnhsauvàotrangwebtrên,tạocácHotSporttrêncáchìnhngôi
saovàmặttrờiđểkhitanhấnvàochúngsẽliênkếtđếnmộthìnhảnhthực.
BÀI5:TẠODANHSÁCH,KHUNG,BIỂUMẪUVÀTHIẾTKẾBẢNG
Mụctiêu:
-Tạocácdanhsách,theothứtự,khôngtheothứtự,danhsáchlồngnhau
-Thiếtkếvàđịnhdạngcácbảng,thiếtkếvàđịnhdạngkhung
-Tạomẫubiểu,tạocáchộpnhậpdữliệu,tạocácnút,gởidữliệumẫubiểuthôngquae-
mail
5.1Địnhnghĩamộtdanhsách
-Thẻ<DL></DL>
Cúpháp:
<DL>Đềmụcdanhdách
<DT>Danhsáchmức1</DT>
<DT>Danhsáchmức1</DT>
……
<DD>Danhsáchmức2</DD>Trêntrờicaocómuônngàn
ánhsao,trênđồngxanhcó
muônngàncâylúa,chimtrong
rừngcómuônngàntiếngca,cây
trongrừngcómuônngànláhoa.
A,á,à,…Nhưngmặttrờichỉcó
mộtmàthôivàmẹemchỉcó
mộttrênđời.Duynhất

60<DD>Danhsáchmức2</DD>
……
<DT>Danhsáchmức1</DT>
<DD>Danhsáchmức2</DD>
</DL>
Vídụ:TrongphầnHTMLchúngtagõvàođoạnlệnhsau:
<html>
<head>
<title>Viduvedanhsach</title>
</head>
<body>
<b><DL>Đềmụcdanhdách</b>
<DT>Danhsáchmức1</DT>
<DT>Danhsáchmức1</DT>
<DD>Danhsáchmức2</DD>
<DD>Danhsáchmức2</DD>
<DT>Danhsáchmức1</DT>
<DD>Danhsáchmức2</DD>
</DL>
</body>
</html>
Kếtquảhiểnthịtrongtrìnhduyệt:
-Thẻ<UL><LI></UL>,<OL><LI></OL>:Danhsáchsắpxếp(OrderedList),danhsách
khôngsắpxếp(UnorderedList)vàdanhsáchcácđịnhnghĩa(DefinitionList).Danhsáchsắp
xếpbắtđầubằngtag<OL>,danhsáchkhôngsắpxếpbắtđầubằng1trongcáctagsau:
<UL>,<DIR>và<MENU>,danhsáchcácđịnhnghĩabắtđầubằngtag<DL>.Ðểthểhiện
mỗimộtmẫutrongdanhsáchsắpxếpvàkhôngsắpxếpdùngtag<LI>.
UL,DIR,MENU:danhsáchkhôngsắpxếpkiểubullet,mỗimẫubắtđầubằngtagLI.
Vídụ:danhsáchkiểubullet(khôngsắpxếp).
<UL>
<LI>Ðâylàmục1trongdanhsách.
<LI>Ðâylàmục2trongdanhsách.

61</UL>
Kếtquảtrìnhduyệtnhưsau:
Ðâylàmục1trongdanhsách.
Ðâylàmục2trongdanhsách.
OL:danhsáchsắpxếp.Mỗimụctrongdanhsáchcũngbắtđầubằng<LI>.
-ÐinhnghĩaOL:
<OLSTART=nTYPE=order-type>trongđó:
START=n:chỉđịnhchỉsốbắtđầu
TYPE=order-type:chỉđịnhkiểuchỉsố.Cóthểlàmộttrongcácgiátrịsau:
A:sửdụngkýtựlớnA,B,C,...
a:sửdụngkýtựnhỏa,b,c,...
I:sửdụngsốLaMãlớnI,II,III,...
i:sửdụngsốLaMãnhỏi,ii,iii,...
1:sửdụngsố1,2,3,...
Vídụ:
<OLTYPE=I>
<LI>NghithứcHTTP
<LI>NghithứcFTP
<LI>NghithứcSMTP
</OL>
Kếtquảtrìnhduyệtnhưsau:
I.NghithứcHTTP
II.NghithứcFTP
III.NghithứcSMTP
5.2Thiếtkếbảng
-Thẻ<TABLE><TR><TD></TABLE>:sửdụngtag<TABLE>đểbắtđầuvàkếtthúc1
bảng.Sửdụngkèmtheovớitag<TR></TR>đểthêm1dòngtrongbảngvàtag<TD></TD>
đểthêmvào1ôtrêndòng.
Vídụ:
<TABLE>
<TR><TD>Ô11<TD>Ô12
<TR><TD>Ô21<TD>Ô22
</TABLE>
Kếtquảtrìnhduyệtnhưsau:
Ô11Ô12
Ô21Ô22
Ðểđóngkhungchobảng,sửdụngthuộctínhBORDER
Vídụ:
<TABLEBORDER=1>
<TR><TD>Ô11<TD>Ô12
<TR><TD>Ô21<TD>Ô22
</TABLE>

62Kếtquảtrìnhduyệtnhưsau:
Ô11 Ô12
Ô21 Ô22
Chiềurộngmặcđịnhcủabảngsẽlàchiềurộnglớnnhấtcủadòngrộngnhấttrongbảng.
Ðểchỉđịnhchiềurộngcácbảng,sửdụngthuộctínhWIDTH=n%đểquyđịnhchiềurộng.
Vídụ:
<TABLEBORDER=1WIDTH=100%>
<TR><TD>Ô11<TD>Ô12
<TR><TD>Ô21<TD>Ô22
</TABLE>
Kếtquảtrìnhduyệtnhưsau:
Ô11 Ô12
Ô21 Ô22
Ðểthêmtiêuđềchobảng,sửdụngtag<CAPTION></CAPTION>.Mặcđịnhtiêuđềcủa
bảngnằmởtrênvàcanhlềgiữa.Tuynhiêncóthểthayđổibằngcáchdùngthuộctính
ALIGNbêntrongCAPTION.
Vídụ:
<TABLEBORDER=1WIDTH=100%>
<CAPTION>Tiêuđềcủabảng</CAPTION>
<TR><TD>Ô11<TD>Ô12
<TR><TD>Ô21<TD>Ô22
</TABLE>
Kếtquảtrìnhduyệtnhưsau:
Tiêuđềcủabảng
Ô11 Ô12
Ô21 Ô22
Ðểthêmvàocácôtrảidàitrênnhiềucột,dòngkhác,dùngthuộctínhCOLSPAN=nvà
ROWSPAN=n.
Vídụ:
<TABLEBORDER=1WIDTH=100%>
<CAPTION>Tiêuđềcủabảng</CAPTION>
<TR><TD>Ô11<TDCOLSPAN=2>Ô12trảidàitrên2ô
<TR><TD>Ô21<TD>Ô22<TD>Ô23
</TABLE>
Kếtquảtrìnhduyệtnhưsau:
Ô11 Ô12trảidàitrên2ô
Ô21 Ô22 Ô23
-ÐịnhnghĩaTABLE(bảng):
<TABLE
ALIGN=align-type

63BACKGROUND=url
BGCOLOR=color-type
BORDER=n
CELLPADDING=n
WIDTH=n%>
Trongđó:
ALIGN=align-type:lềcủabảng,cógiátrịlàLEFThoặcRIGHT
BACKGROUND=url:chỉđịnhảnhnềncủabảng
BGCOLOR=color-type:màunềncủabảng
BORDER=n:đườngviềnbảng,ntínhbằngpixel
CELLPADDING=n:khoảngcáchtừôtớinộidungcủaô,đơnvịpixel
WIDTH=n:độrộngcủabảng,ntínhtheo%(phảicódấu%theosau)
-ÐịnhnghĩaTR(dòng):
<TR
ALIGN=align-type
BACKGROUND=url
BGCOLOR=color-type
VALIGN=v-align-type>
Trongđó:
ALIGN=align-type:lềcủacácôtrongdòng,cógiátrịlàLEFT,RIGHThoặcCENTER
BACKGROUND=url:chỉđịnhảnhnềncủadòng
BGCOLOR=color-type:màunềncủadòng
VALIGN=v-align-type:lềtheochiềudọcchovănbảntrongcácôtrêndòng.Giátrịcó
thểlà:TOP,BOTTOM,MIDDLE.
-ÐịnhnghĩaTD(ô):
<TD
ALIGN=align-type
BACKGROUND=url
BGCOLOR=color-type
COLSPAN=n
ROWSPAN=n
VALIGN=v-align-type>
Trongđó:
ALIGN=align-type:lềvănbảntrongô,cógiátrịlàLEFT,RIGHThoặcCENTER
BACKGROUND=url:chỉđịnhảnhnềnchoô
BGCOLOR=color-type:màunềncủaô
COLSPAN=n:ôtrảirộngtrênncột
ROWSPAN=n:ôtrảidàitrênnhàng
VALIGN=v-align-type:lềtheochiềudọcchovănbảntrongcácô.Giátrịcóthểlà:
TOP,BOTTOM,MIDDLE.
TH:tạoôtiêuđề.TươngtựnhưTDchỉkháclàvănbảnđượcthểhiệnởdạngnghiêng.

645.3Tạobiểumẫu
-Thẻ<form>…</form>:làcôngcụchủyếutạoracáctrangwebcótínhchấttươngtác.
-Biểumẫuchophépngườisửdụngnhậpthôngtinhoặctùychọncáckhảnăngcósẵn.
-Thẻ<form>thườnggắnvớimộtchươngtrìnhthựcthi,thườnggọilà“script”,chương
trìnhnàysẽthựchiệnmộtcôngviệcnàođókhingườisửdụngnhấtvàonútSubmit.
-Cúpháp:
<FORMMETHOD=<Phươngthức>ACTION=<Đườngdẫnđếnchươngtrình>
[nộidungtrongFORMcóthểlàvănbảnhoặccácthẻFORM]
<inputtype=submitvalue=“NútSubmit”>
</FORM>
-Phươngthức:gồmphươngthứcPOSTvàGET.
+KhidùngphươngthứcPOST,dữliệugửiđisẽkhôngđượchiểnthịtrênđịachỉURL.
+KhidùngphươngthứcGET,dữliệugửiđiđượchiểnthịtrênđịachỉURL.
-CácthẻForm:cóthểlàthẻ<input>,<TextArea>,<Button>,<option>,…
5.4GửidữliệubiểumẫuquaInternet
-KhingườisửdụngnhấnnútSubmit,thôngtintrongformsẽđượcgửiđilênServerđể
yêucầu(Request)Servertrảlời(ServerAnswer).TrênServerđãđượccàiđặtcácchương
trìnhứngdụng(cóthểbằngmộtngônngữWebC++,ASP,Java,…),cácchươngtrìnhứng
dụngnàysẽtựđộngxửlýthôngtingửiđitừngườisửdụng(Client)vàphảnhồithôngtin
(Response).PhươngthứcnàyđôikhingườitacòngọilàYêucầu–Đápứng,tứclànên
ClientthìRequestcòntrênServersẽResponse.Cácbạncóthểhìnhdungtiếntrìnhgửi
thôngtinquanInternervớisơđồsau:
Hình5:Cáchthứctraođổithôngtinquachươngtrình
5.5Tạokhung(Frame)

65-ThẻFrame:<FRAMESET><FRAME></FRAMESET>:
Sửdụngtag<FRAMESET>và</FRAMESET>đểchiacửasổtrìnhduyệtthànhnhiều
cửasổconframe.Tag<FRAMESET>đượcdùngkèmvớitag<FRAME>đểđịnhnghĩa1
frame.
Vídụ:tạotrangwebcótênlà2frame.htmchứa2frame,frame1bêntráichứanộidung
trangwebpage_1.htmvàframe2bênphảichứanộidungtrangwebpage_2.htm.
<html>
<head>
<title>Trangwebcó2khung</title>
</head>
<framesetcols="150,*">
<framename="muc_luc"target="noi_dung"src="http://localhost/html/page_1.htm">
<framename="noi_dung"src="http://localhost/html/page_2.htm">
</frameset>
</html>
Mỗiframecó1tên,vídụframetráicóname="muc_luc"vàframephảicó
name="noi_dung".Ðểtạoliênkếttừframemuc_lucvớiframenoi_dungtachỉđịnhtrong
framemuc_lucnhưsau:target="noi_dung".src=file:đểchỉđịnhratrangwebthểhiệntrên
khung.Cáctrangwebpage_1.htmvàpage_2.htmcầntạoratrướckhitạotrangweb
2frame.htmchứachúng.Nộidungcủatrangwebpage_1.htmtrongtag<HEAD></HEAD>
cókhaibáosau:
<head>
<basetarget="noi_dung">
</head>
Ðểkhôngxuấthiệnscrollbarvàbordercủaframe,khiđóbạnthêmthuộctính
scrolling="no"vàframeborder=0vàotag<FRAME>,vídụ:
<framename="muc_luc"target="noi_dung"src="http://localhost/html/page_1.htm"
scrolling="no">
Ðểtạocácliênkếthyperlinkgiữatrangpage_1.htmvớicáctrangwebkhácnhư
page_2.htm,page_3.htm,...đểthểhiệntrênkhungbênphảithìtrongnộidungtrang
page_1.htmcónộidungnhưsau:
<html>
<head>
<title>Trangmụclục</title>
<basetarget="noi_dung">
</head>
<body>
<p>Mụclụccôngviệc</p>
<p><ahref="page_2.htm">page2</a></p>
<p><ahref="page_3.htm">page3</a></p>
</body>
</html>

66Khiđótrongtrìnhduyệtbạnclickvàocáchyperlinkthìcáctrangwebpage_2.htmvà
page_3.htmsẽmởratươngứngởframebênphải(framenoi_dung)nhờkhaibáo
target="noi_dung".
Bàithựchànhsố5:
1.Thiếtkếcácbảngsau:
a)
BẢNGTHỐNGKÊCÁCHỘGIAĐÌNHTRONGPHƯỜNG
STTHọvàTênPhái
NgàySinhĐịachỉ
thườngtrúNghề
nghiệp NữNam
1
2
3
4
5
b)
Nềnxanh,chữtrắng (chènhìnhảnhvàođây)
Nềnđỏ,chữvàng (chènhìnhảnhvàođây)
(chènhìnhảnhvàođây)
Nềnxanhlácây,chữđen
2.Tạomớimộttrangframegồm2frame(2khungtráivàphải),tạotrangmớicho2
framenàyvàlưulạivớitênlầnlượtlàLeft.htmvàRight.htm,lưutrangframevớitênlà
index.htm(3tậptinnàyđượclưutrêncùngmộtthưmục
D:\tên_bạn\ThucHanhFrame\Bai2).
-NhậpnộidungchophầntrangRight.htm(nộidungvàhìnhảnhgiớithiệuvềbạn).
-TạocácliênkếtchophầntrangLeft.htmgồmcácmụcsau:
3.Tạomới1trangframegồm3khungvàlưutấtcảcáctrangcủaframenàylênthưmục
D:\tên_bạn\ThucHanhFrame\Bai3
(cácemtựhoànthànhbàitậpnày!)Mỗichuyênmụcđượcđặttrongmộtôcủabảngmột
cột,liênkếtđếnmộttrangthôngtintươngứng(các
trangthôngtinnàycácemtựthiếtkế),khichọnmục
nàothìthôngtinmụcđósẽhiểnthịởphầnFrame
bênphải.

674.Mởtrangframeindex.htmđãthiếtkếởbài3,chiaFramebênphảithành2frameconvà
đặttêncho2frametrênvàdướinàylầnlượtlàTopvàMain.
-TạotrangmớichoframeTopvàlưuvớitênTop.htm,chènvàotrangnàymột
menusaubằngcôngcụXaraWebstyle3.0:
(Mỗitabliệnkếtđếnmộttrangthôngtintươngứngnhưởbàitập2)
-ThiếtlậpthuộctínhchocácFrameđểkhixemtrêntrìnhduyệtInternet,ngườisử
dụngkhôngthểthayđổiđượcđộrộngcủacácFrame.
-ThiếtlậpthuộctínhchotrangFrameđểẩncácđườngviền(Borders)khixemtrên
trìnhduyệtInternet.
5.Tạomới3trangHTML(NormalPage)vàlưuvớitênlầnlượtlàbanner.htm,menu.htm
vàContent.htmtrênthưmụcD:\tên_bạn\ThucHanhFrame\Bai5
-TạomớimộttrangFrame,lựachọnFrametheomẫusau:
(Banner)
(Menu) (Content)
vàlưutậptinvớitênindex.htmtrêncùngthưmụcvới3tậptinHTMLvừatạo.
-Đặttrangkhởitạocho3framelà3tậptintươngứngbanner.htm,menu.htmvà
Content.htm
6.TạomớimộttrangHTMLvàlưuvớitênDatHang.htmtrênthưmục
D:\tên_bạn\ThucHanhFormvớigiaodiệnnhưsau:
hình6:phiếuđặthàng
Yêucầu:+KhinhấnnútLàmlại,cácđiềukhiểnsẽtrởlại(Reset)trạngtháibanđầu.

68+KhinhấnnútĐặthàng,mộttrangThongBao.htmsẽđượcmởrađểthôngbáo
chokháchhàngbiếtlàđãđặthàngthànhcông.
7.TạomớimộttrangHTMLvàlưuvớitênDangKyThanhVien.htmtrênthưmục
D:\tên_bạn\ThucHanhFormvớigiaodiệnnhưsau:
hình7:dangkíthànhviên
Yêucầu:+Ràngbuộctênsửdụngkhôngđượcngắnhơn3kýtựvàkhôngđượcdàiquá20
kýtự,chỉđượcnhậpkýtựchữcái,chữsốvàdấugạchnối(_).
+KhinhấnnútĐăngký,nếudữliệuhợplệ,mộttrangthôngbáosẽđượcmởra
đểthôngbáochothànhviênbiếtđãđăngkýthànhcông.
--------------------
BÀI6:ĐAPHƯƠNGTIỆN-MULTIMEDIA

69Mụctiêu:
-ThiếtkếđượccácảnhđộngchotrangWeb
-ThiếtkếđượccácFlashnhúngvàotrangWeb
6.1KháiniệmvềMultimedia(đaphươngtiện)
-Multimedia:đaphươngtiện,đamôitrường,đatruyềnthông.
Mộtphươngphápgiớithiệuthôngtinbằngmáytính,sửdụngnhiềuphươngtiệntruyền
thôngtinnhưvănbản,đồhoạvàâmthanh,cùngvớisựgâyấntượngbằngtươngtác.
-Mộtsốkỹthuậttạofileâmthanh,hìnhảnh
-Hiệnnaytrênthịtrườngxuấthiệnrấtnhiềuphầnmềmtạoâmthamvàhìnhảnhvới
cácmứcchấtlượngkhácnhau,việclựachọnphầnmềmsửdụngchobảnthânvàdoanh
nghiệp,côngtyphụthuộcvàotúitiền,nhucầuvànhânlực.Cácbạncóthểsửdụngmộtsố
phầnmềmxửlý,thiếtkếđồhọanhưPhotoshop,CorelDraw,…Hayđểtạonhanhcáchình
ảnhthiếtkếWebmàkhôngcầnnhiềukỹnăng,bạncóthểsửdụngphầnmềmtạobanner,
nútlệnh…nhưMacromediaFlash,WebStyle,Cool3D,…phầnmềmtạoVideochấtlượng
caonhưUleadVideo,phầnmềmthunhạcvớiđịnhdạnhMP3nhưSuperMP3Recorder.
-Trongchươngnày,chúngtôixingiớithiệutớicácbạnmộtsốkỹthuậttạohìnhảnh
độngbằngphầnmềmMacromediaFlashMX.
6.2SửdụngMacromediaFlashđểthiếtkếhìnhảnh,Flash
6.2.1TổngquanvềMacromediaFlash
Cáckháiniệmcơbản:
•Thuộctính(Properties):làcáctínhchấtápdụngchođốitượng(lớp,hìnhvẽ,…)
•Lớp(Layer):lànơichứacáchìnhvẽ,đốitượng,đượcxemlàthànhphầncủatiếntrình
hoạthình.Cáclớpđượcxếpvàchồnglênnhau(chephủnhau),cóbaonhiêulớpcũng
được.
•Lớpdẫn(GuideLayer):làlớpdùnglàmkhung,sườnđểbốtrícáclớpkhác.
•Khung(Frame):cửasổthaotác.
•Tậptin.FLA:TậptinchứađốitượngcủaFlash.
•Tậptin.SWF:TậptinđãchuyểnsanghoạthìnhcủaFlash.
6.2.1.1Cácthaotáccơbản
+Địnhtrangin:File\Pagesetup.
+MenuView:
Goto:ChuyểnđấncáckhunghoặccáccảnhtrongFilmđanglàmviệc.
Zoomin,ZoomOut:Phóngto,thunhỏcủasổlàmviệc.
Magnification:điềuchỉnhtỉlệcửasổlàmviệc.(ShowFrame,ShowAll:Hiện1tấtcả
cáckhunglàmviệc).
Outlines:chuyểntoànbộcácđốitượngtrênkhunglàmviệcradạngđườngnétkhông
cótômàuđểlàmviệcnhanhhơn.
Fast:Tắttínhnăngbỏđườngrăngcưa(antialiasing)đểvẽnhanhhơn.

70Antialias:làmtrơncácđườngnétngoàicủahìnhvẽ(trừtext)
AntialiasText:làmtrơncácđườngnétngoàicủahìnhvẽkểcảvănbản.
Timeline:hiểnthịcửasổtiếntrình.
WorkArea:hiểnthịhoặccheđivùnglàmviệc.
Rulers:Hiệnẩncâythước.
Grid\ShowGrid:hiệnẩnđườnglưới(ôlưới).
Grid\SnaptoGrid:bậttắttínhnăngchođốitượngbámdínhôlưới.
Grid\EditGrid:điềuchỉnhôlưới.(Accuracy:chínhxác)
Guiders:cácchếđộcholớpdẩn.
HideEdges:Hiệnẩngờbaođốitượng.
HidePanels:hiệnẩncácPanel(instance,info,character,mixer)
+MenuWindows:
NewWindow:mởcảnhlàmviệctrongcửasổmới
Toolbasr:trìnhbàyToolbar(Main,Status,Controller)
Tools:hiệnẩnthanhcôngcụTools.
Panels:hiệncácthànhphầncửasổlàmviệckhác.
Panelset:bốtrílạicácthànhphầncửasổdạngmặcđịnh.
SavePanelLayout:ghilạibốtrícủamộtthànhphầncửasổ.
CloseAllPanel:đóngtấtcảcácthànhphầncửasổkhác.
Action,MovieExplorer,Output,Debugger:Mởcáccửasổchứcnăngkhác..
Cascade,Tile:sắpcáccửasổlàmviệctheolớp,látgạch.
6.2.1.2Côngcụ(Tools)

71
1/.ArrowTool(V):dùngchọn,drag,sắpđặtcácđốitượngvẽ.
Snaptoobjects:cácđốitượngvẽsẽbámdínhvàolướihoặccác
đốitượnggầnkếkhidichuyển,quay,codãn.
Smooth:làmmềmcácđườngvàhìnhdạngđơngiản.
Straighten:làmthẳngcácđườngvàhìnhdạngđơngiản.
Rotate:xoaycácđốitượng.(nếumuốnxoaychínhxácphảichỉnh
gócxoaytrongkhungTransform[Window\Panels\Transfrom])
Scale:thayđổikíchthướccácđốitượng(cokéo).
2/.Subselecttool(A):dùngchọnđốitượng,thànhphầncủahình.
3/.LineTool(N):dùngvẽđườngthẳng.
4/.LassoTool(L):chọnđốitượnglàmviệcvớicáctínhnăngđặc
biệthơn.(chọnxongdoubleclick).
Magicwand:dùngchọncácđốitượngvớivùngcóhìnhdạngbấtkỳ.
Magicwandproperties:xáclậpcácthuộctínhchoMagicwnad.
Polygonmode:dùngchọncácđốitượngtheođượcđagiácbấtkỳ.
5/.TextTool(T):côngcụdùngtạovănbản(muốnxuốngdòng
nhấnEnter).
6/.PenTool(P):dùngtạocácnétthẳnghoặccong.
7/.OvalTool(O):dùngvẽhìnhtrònhoặcEllipse.
8/.RectangleTool(R):dùngvẽhìnhvuônghoặchìnhCN.
RoundRectangleradius:dùngđịnhgóctrònchohình(Corner
radius)
9/.PencilTool(Y):dùngvẽđườngbằngtay.
PencilMode:chọn1chếđộvẽ:Straighten:vẽđườngthẳng
trơn_gấpkhúc;
Smooth:vẽđườngmềmmại_cong;Ink:khônlàmgìvớinétvẽ.
10/.Brush(B):Vẽtheonétcọ.
Brushmode:Paintnormal:vẽtrênvùnglàmviệc(đè);PaintFills:
vẽcácvùngcóthểtômàunhưngkhôngvẽtrêncácđườngnét;Paint
behind:vẽquanhcácđốitượng,khôngđè,chỉvẽdướicáchình;Paint
inside:vẽbêntrongvùngđượctômàu,khôngvẽđèlênnét,nếu
khôngcóvùngtômàuthìvẽkhôngtácdụng;Paintselection:chỉvẽ
bêntrongvùngtômàuđãđượcchọn.
Brushsize:chọnkíchthướcnétvẽ
Brushshape:chọnnétvẽ.
Lockfill:bậttắtkiểutômàugradient.
11/.InkBottleTool(S):dùngthayđổimàucủanétbaoquanhhình
(màunét).

7212/.PaintBucketTool(K):dùngtômàucáchìnhđượctạoratừ
đườngviền(màubêntronghình).
Gapsize:chọnmộtcáchtôtronghình:Don’tclosegap:hìnhkhônglỗ
hở;Closesmallgaps:hìnhcólổnhỏ;Closelargegaps:hìnhcólỗhở
lớn;Closemediumgaps:hìnhcólỗhỗtrungbình.
Lockfill:bậttắtchếđộtôvớikiểumàuGradient.
Transformfill:chophépcodãn,quay,xônghiêngvớikiểutô
GradienttrongHình.
13/.DropperTool(I):dùngchophéplấymẫutô,kiểuđườngnétcủa1
đốitượngrồiápdụngmẫutôđócho1đốitượngkhác.(chọn1mẫu
rồiquétvào1mẫukhác)
14/.EraserTool(E):dùngxóađườngnét,vùngtômàuvàcáchình
dạng.
Erasermode:chọnchếđộxóa:Erasenormal:xóanétvàmàutô;
Erasefill:chỉxóamàutô;Eraselines:chỉxóađườngnét;Erase
selectedfills:chỉxóavùngtômàuđangchọn,khôngxóanét;Erase
inside:xóabêntrong1vùngcótômàu,khôngxóanét.
Faucet:xóađườngnétvàvùngtômàu.
Erasershape:chọnnétxóa
15/.HandTool(H):dùngdichuyển“bằngtay”quanhvùnglàmviệc.
16/.ZoomTool(M,Z):dùngphóngto,thunhỏvùnglàmviệc
Enlarge:phóngtovùnglàmviệc.
Reduce:thunhỏvùnglàmviệc.
6.2.1.3Cácthaotác
Thaotácchọn:
+Chọnthôngthường:Clickđâuchọnđó.
+Chọnđườngnétvàmàutô:Doubleclick.
+Chọnbằngđườngbao:chọncôngcụArrowTool,tạođườngbaokhuvựcchọn.
+Chọnnhiều:đèShifttrongkhiclickchọn.
+Chọntấtcả:Ctrl+A.
Thaotáccopy:chọn,Ctrl+C
Thaotácdán:thựchiệncopy,thựchiện1trong:
Ctrl+V:dánbìnhthường.
Ctrl+Shift+V:dántạichổ.
Nhânbản(Duplicating):chọn,Ctrl+D|đèCtrl+kéochuột.
Xoá:chọn,Delete.
Dichuyển:chọn,drag|đèShift+mũitên(8pixel)|mũitên(1pixel).
Nhóm:chọncácđốitượngcầnnhóm,Modify\Group.

73Bỏnhóm:chọn,Modify\Ungroup.
Phânđoạn:
+Phânđoạnbằnghìnhvẽ:tạocáchìnhbêntrongnhau,dragchúngtáchnhau.
+Phânđoạnbằngđường:tạohình,chọncôngcụPencilTool,chọnInk,vẽcắtlát(slicing)
quahìnhtađược2hìnhphânđoạn.
Kếtnốicáchình:(chỉdùngchohìnhtrêncùnglớp,cùngmàuvàkhôngcóđườngnét)
Chọn1hìnhkéolênhìnhkia,chúngsẽkếtnốithành1.
Thaotáctrênhình:
+Modify\Shape\Convertlinestofills:chuyểnđườngnétthànhhìnhdạngcóthểtômàu.
+Modify\Shape\Expandfill:mởrộngvùngtôcủa1hình(expand:mởrangoài,Inset:mở
vàotrong,Distance:khoảngmở)
+Modify\Shape\Softenfilledges:làmmềmđườngbiêncủahình(Distance:khoảngcách
giữabiênmềmvàbiênngoài;Step:sốbướccủabiênmềm)
+Modify\Transform\Scale:codãn.
+Modify\Transform\Rotate:xoay.
+Modify\Transform\Flip…:lậtngangdọc.
+Modify\Transform\EditCenter:chỉnhtâmhìnhchephủ
Đặtthuộctínhchokhung:Modify\Moviehiệnhộpthoại:
+Framerate:chứatốcđộhoạtcảnhchoframe
+Dimension:kíchthướcngangdọcchoframe
+Match:khungvừavớimáyinhoặcnộidung.
+Backgroundcolor:chọnmàunềnchoframe
+Rulersunit:chọnđơnvịđotrênthướclàmviệc
Thaotácvănbản:chọn,menuTextchọncácmụcsau:
+Font:chọnfont.
+Size:chọnkíchthước.
+Style:chọnkiểu.
+Align:canhbiên.
+Tracking:codãncỡchữ.
+Character:hiệncửasổthànhphầnCharacter.
+Paragraph:hiệncửasổthànhphầnParagraph.
+Táchrờivănbản:chọn,Modify\BreakApart(cóthểsửatừngkýtự,tômàu…
Canhbiên:chohiệncủasổthànhphầnAlign(Window\Panels\Align|Ctrl+K)
Chọn1trong:

74
Alignleftedge:canhvềcạnhtrái
Alignhorizontalcenter:canhvềgiữa(ngang)
Alignrightedge:canhvềcạnhphải
Aligntopedge:canhvềcạnhđầu
Alignverticalcenter:canhvềgiữa(dọc)
Alignbottomedge:canhvềcạnhđáy
Distributetopedge:canhvềđầu
Distributeverticalcenter:
Distributebottomedge:
Distributeleftedge:
Distributehorizontalcenter:
Distributerightedge:
Matchwidth:
Matchheight:
Matchwidthandheight:
Spaceevenlyvertically:
Spaceevenlyhorizontally:
6.2.1.4Ảnh
+Flashcóthểchènvàocáctậptinảnhdạng:.BMP,JPG,GIF(tĩnh),PNG.
+Chènảnh:menuFile\Importchọntêntậptinảnh.(làđốitượngchephủcóthểthaotác
nhưđốitượnghìnhvẽ)
+Phânrãảnh:chọnảnh,Modify\BreakApart.
+SửdụngcửasổthànhphầnLibrary:Window\Library.
+Tốiưuảnh:MởcửasổLibrary,Rightclick,chọnProperties,xáclậpcáctínhchất(Allow
smoothing:chophéplàmmềmđườngnét,Compression:chọn1phươngphápnén,Quality:
nhậpchấtlượngnén)
+Lấy1bảnsaotừLibrary:DragtừkhungLibraryra.
+Ảnhđộng.Gif:nạpvàquansáttrênthanhtiếntrình(Timeline).
6.2.1.5Âmthanh(SOUND)
+Flashchophépchènvàocáctậptinâmthanhdạng.Wav,.Mp3.
+Chènâmthanh:File\Importchọntêntậptinâmthanh(âmthanhđượcđưavàoLibrary).
6.3Hoạthình
TạoHoạthình:
Cách1_Tạohoạthìnhbằngcáckhunghìnhnốitiếp:làcáchchohiệnliêntiếpcác
khunghìnhbiếnđổinốitiếpnhau.
+Tạohìnhtrênkhunglàmviệc.

75+Clickchọn1khunghìnhtrênthanhTimeLine,chọnInsert\KeyFrame(tađược1khung
hìnhhoágiốngvớikhungtrướcđó),thựchiệnthêm,bớt,thayđổitrênkhunghìnhtùyý.
+Lậplạibướctrênchođếnkhikếtthúchoạthình.
+NhấnEnterđểkiểmtra.
Cách2_Tạohoạthìnhbằngcáchbiếnđổihìnhdạng:làcáchcho1hìnhbiếnđổi
dạngthànhmộthìnhkhác.Flashsửdụngphépbiếnhìnhtheocáchlôgicnhất(cóthểtạora
cácdạnghìnhngoàiýmuốn).Khôngthểbiếnđổihìnhdạngcácbiểutượng,ảnh,nhóm.
+Tạohìnhtrênkhunglàmviệc.
+Clickchọn1khunghìnhtrênTimeline,chọnInsert\BlankKeyFrame(tađượckhung
hìnhkhoárỗng),Tạo1dạnghìnhkhác.
+Trởvềkhunghình1,chọnWindow\Panels\InstancechọnthẻFramevàquiđịnhnhư
sau:
Label:nhậptênbấtkỳ(sẽhiệntrênthanhtiếntrình,tuỳchọn)
Tweening:chọnShape(biếnhìnhtheonét).
++Easing:chỉnhtốcđộ(Easingin:hoạthìnhchậm,
EasingOut:hoạthìnhnhanh)
++Blend:chọncáchthiếtlậpchobiếnhình(Angular:tốtchogócvàđườngthẳng,
Distribute:tốtchocácđườngcong,trơn).
+Lậplạibướctrênchođếnkhikếtthúchoạthình.
+NhấnEnterđểkiểmtra.
Địnhcácđiểmbiếnhình:
+ChứcnăngShapeHint:cóthểco<=26điểmShapeHint(a!z)
++Bắtđầutừkhunghìnhđầutiên,Modify\Transform\AddShapeHint,tathấyxuấthiện
chấmđỏ,dichuyểnchấmnàyđếnvịtríthamchiếutrênhình.
++ClickchọncáckhunghìnhkếtiếpđểdichuyểnShapeHint….
++Tươngtựchocáckhunghìnhkhác.
+Hiện/ẩnShapeHint:View\ShowShapeHint.
+GỡbỏShapeHint:ClickchọnFramecầngởbỏ,Modify\Transform\RemoveAllHints.
Tạocácdạnghoạthìnhsau:
1/.Cánhquạtquay,Bánhxequay.
2/.Biếnđổichử,hình….

76Cách3_Tạohoạthìnhbằngcáchbiếnđổichuyểnđộng:làcáchcho1hìnhdichuyển,
codãn,xoay…đểthànhhìnhdạngkhác.Chophépbiếnđổihình,biểutượng,nhóm,khối
vănbản.
+Tạohìnhtrênkhunglàmviệc.
++Clickchọn1khunghìnhcáchquãng(N)trênTimeline,chọnInsert\Frame(tađượcN-
1khunghìnhgiốngnhưkhung1).
++Rightclicktạikhunghình1(đầu),chọnCreateMotionTween,chọn
Window\Panels\InstancechọnthẻFramevàquiđịnhnhưsau:
Label:nhậptênbấtkỳ(sẽhiệntrênthanhtiếntrình,tuỳchọn)
Tweening:chọnMotion(biếnhìnhtheochuyểnđộng).
"Scale:nếuchọnsẽchophépcodãnkhichuyểnđộng.
Easing:chỉnhtốcđộ(Easingin:hoạthìnhchậm,EasingOut:hoạthìnhnhanh)
Rotate:chọncáchquay(None:không,Auto:tựđộng,CW:quaytheochiềukimhđồng
hồ,CCW:quayngượckimđồnghồ)
Times:nhậpsốlầnquaytrongkhichuyểnđộng.
"Orienttopath:chọnkhichuyểnđộngtheo1đườngdẫn.
"Synchronize:chọnkhicầnđồngbộcáckhunghình.
"Snap:chọnkhimuốnhìnhbiếnđổibámvàođườngdẩntrênlớpdẩn.
++Tạikhunghìnhcuối,chọnhìnhđãcóởkhung1vàdichuyển,xoay,codãntùyý.
+Enterđểkiểmtra.
+Muốnchỉnhsửaphảitrởvềkhunghìnhđầu,cuối.
+CửasổthànhphầnInstance:
ThẻInstance:thểhiệnhình
ThẻEffect:hiệuứngmàu
ThẻFrame:quiđịnhdạngquay
ThẻSound:hiệuứngâmthanh
Biếnđổichuyểnđộngtheo1đườngdẫn(MotionwithOrienttopath):
+Tạohoạthìnhbiếnđổichuyểnđộng(nhớchọnOrienttopathvàSnap).
+ClicknútAddGuideLayertrênthanhtiếntrình,tađượcmộtlớpdẫntrênlớphoạthình
(kiểmtratênlớphoạthìnhcóthụtvàosovớilớpdẫnkhông?).
+Clickchọnlớpdẫn,chọncôngcụPencilTool,chếđộSmooth,nétSolid,thựchiệnvẽ1
đườngchuyểnđộngtrênlớpdẫn.

77+ClicktạiClock(ổkhoá)đểkhoáđườngchuyểnđộngtrênlớpdẫnkhôngchosửa.
+Clickchọnlớphoạthình(đừngquên).
+Clicktạikhunghìnhđầu,kéotâmcủanóđếnđầuđườngchuyểnđộng.
+Clicktạikhunghìnhcuối,kéotâmcủanóđếncuốiđườngchuyểnđộng.
+Enterđểkiểmtra.
+Chúý:cóthểtạonhiềuhìnhkhácnhautrênnhiềuFrameđểcùngchuyểnđộngvới
nhau;cóthểdùngnhiềulớpdẫnhoặclớpdẫnchungcónhiềuđườngdẫn.
Lớp(Layer)vàFrame:
1/.Frame:làcáckhunglàmviệcdùngchứacácđốitượng.
Khungrỗng:Làkhunghìnhchưalàmviệc(khôngchứagìcả)
KhungKhóa:Làkhunghìnhlàkhunghìnhnơichứacácđốitượng,thiếtlậpchuyển
động,….
Khungthường:Làkhunghìnhhiểnthịnộidungcủakhunghìnhkhoágầnnhất.
2/.CácthaotácFrame:
+Thêm1frame:
++Insert\Frame|F5:chènthêm1khunghìnhthườngtạivịtríchọn.
++Insert\Keyframe|F6:chènthêm1khunghìnhkhóatạivịtríchọn(trướcđólàcác
khunghìnhthường).
++Insert\BlankKeyframe|F7:chènthêm1khunghìnhkhóarỗngtạivịtríchọn(trướcđó
cũnglàcáckhunghìnhthường).
+Xóa1frame:chọnkhunghìnhcầnxóa,rightclick,chọnRemoveFrame.
+Copy,cắt,dán:chọn,rightclick,chọnCopyFrames,CutFrames,PasteFrames.
+ClearFrame:chuyển1khunghìnhkhoáthànhkhunghìnhbìnhthường.
3/.Cácthaotáctrênlớp:
+Thêm1lớp:
++ClicknútInsertLayer|Insert\Layer:chèn1lớp.
++ClicknútAddGuideLayer|Insert\MotionGuide:chèn1lớpdẫn.
+Chọnlớp:Clicktạilớp(xemcódấuchưa?)
+Xóa1lớp:chọnlớpcầnxoá,rightclick,chọnDeleteLayer|clicktạithùngrác.
+Thayđổithứtựcủa1lớp:Dragchuộtcáclớplêntrênhoặcxuốngdưới.
+Đặtthuộctínhcholớp:chọnlớp,rightclick,chọnProperties:tên,hiện\ẩn,khóa,loại,
màunền,Outlines,chiềucao..
++Guide:lớpdẫn.(ởtrênlớphoạthìnhchuyểnđộng)
++Guided:lớplàlớphoạthìnhchuyểnđộngtheolớpdẫn(ởdướilớpdẫnvàthụtvàoso
vớilớpdẫn).
++Mask:lớpdùnglàmmặtnạ(ởtrênlớpche)
++Masked:lớpbịmặtnạche|lớpche(ởdướilớpmặtnạ,chỉthấyđượcqua1đối
tượngđặccủalớpmặtnạ).

784/.Thanhtiếntrình(Timeline):
Vịtríkhung Sốkhung/giây Thờigianđãchiếu
hình6.1:Thanhtiếntrình(Timeline)
+NútOnionSkin:xemvàchỉnhsửanhiềukhunghìnhcùnglúc(cáckhunghìnhtrong
phạmviOnionSkinsẽhiệnrachochỉnhcùnglúc).
+NútOnionSkinOutlines:tươngtựOnionSkinnhưngcáchìnhtrênkhunghiệndưới
dạngđườngviền.
+NútEditMultipleFrames:hiệnvàchosửanhiềukhunghìnhcùnglúc.
+NútModifyOnionMarkers:dichuyểnphạmviOnionSkin.
++AlwaysShowMarkers:luônhiệndấuOnionSkin.
++AnchorOnion:khoádấuOnionSkin.
++Onion2,Onion5,OnionAll:đánhdấu2,5hoặctấtcảcáckhunghìnhchungquanh.
+Showalllayerasoutlines:hiệnẩncáchtrìnhbàycáclớpởdạngđườngviền.
+Lock/Unlockalllayers:Khoáhoặcbỏkhoácáclớp.(khoásẽkhôngchọnđược).
+Show/Hidealllayers:hiệnẩncáclớp.(ẩnsẽkhôngthấygìcả).
5/.QuảnlýcácScenne:ClickchọncôngcụEditScenetrênthanhtiếntrình,chọn1
cảnh.
6/.QuảnlýcácFrame:ClickchọncôngcụEditSymbolstrênthanhtiếntrình,chọn1
biểutượngcầnsửa.
hình6.2:EditSymbols

79Chúý:
Cáckhungcó--------!màutímlàkhungbiếnđổichuyểnđộng.
Cáckhungcó--------!màuxanhlàkhungbiếnđổihìnhdạng.
Cáckhungcó-------làkhungkhôngxácđịnhrõchuyểnđộnggì(cóthểbịsai!)
Biểutượng(Symbol)
1/.KN:làđốitượngđượctạoranhằmmụcđíchsửdụngnhiềulầnmàkhôngphảitạolại,
biểutượngđượccấttrữtrongthưviện.Biểutượngđượcchiathành3loạisau:
+Graphic:biểutượngdạngđồhọađượctạoratừcáchìnhvẽ,hìnhảnhcótínhchấttĩnh
(khôngchuyểnđộng).
+Button:biểutượngdạngcácnútnhấn,thườngđượcphốihợpvớilậptrìnhđểtạocác
điềukhiệnchođoạnFilm.
+Movie:biểutượngdạngđoạnFilm,chứatoànbộcácphầntửcủađọanFilm:hìnhảnh,
âmthanh,chuyểnđộng….
2/.Tạobiểutượng:
+Graphic:Tạohìnhảnh,nhóm….chọnInsert\ConverttoSymbol,hiệnhộpthoại:
hình6.3:sybolproperties
nhậptên,chọnGraphic,OK,xongmởcửasổthànhphầnLibraryđểkiểmtralại.
+Button:Tạodạngnút,chọnInsert\ConverttoSymbol,hiệnhộpthoại:chọnButton,OK.
+Movie:Tạođoạnhoạthình,chọnLayer,chọnđoạnhoạthìnhvừatạo,Rightclick,chọn
CopyFrames,chọnInsert\NewSymbol,hiệnhộpthọaiSymbolProperties,đặttênchọn
MovieClip,OK.Flashchuyểnsangchếđộtạohoạthình,Rightclicktạikhung1,chọnPaste
Frames.xongclicknútScenetrênthanhtiếntrìnhđểtrởvề.
3/.Cácthaotáctrênbiểutượng:
+Sửa:chọnbiểutượngtrênLibrary,chọnEdit\EditSymbols,sửaxongclicknútScene.
(DoubleClicktạibiểutượngđểsửa)
+SửaButton:khisửabiểutượngButton,tathấtcó4khung:Up,Over,Down,Hit,mỗi
khungthểhiệntrạngtháikhácnhaucủabiểutượngnút,tacóthểthêm,bớt,bỏtrốngcác
khungnhằmtạocác“đápứng”vớisựdichuyểncontrỏtùyý,sửaxongclicknútScene.
Up:KhungnàythểhiệnButtonkhicontrỏkhôngởtrongphạmvinút.
Over:KhungnàythểhiệnButtonkhicontrỏởtrongphạmvinút.
Down:KhungnàythểhiệnButtonkhingườidùngclickvàonút.
Hit:KhungnàythểhiệnButtonkhidichuyểncontrỏ,nútcóthểđượcthayđổivịtrí,hình
dạng.NúttrongkhungHitsẽkhôngthấytrongđoạnhoạthình.

80+Xoá:Rightclick,chọnDelete.
+Lấyrasửdụng:DragtừLibraryraFrame.
+Nhânbản:Rightclick,chọnDuplicates.
SửdụngThưviệntậptincủaFlash.
1/.Giớithiệu:
Flashchophéptacóthểsửdụnglạicáchìnhảnh,âmthanh,đoạnFilm,biểutượngcó
sẵnchứatrongcáctậptinđãtạorahoặctậptinmẫu.Cáctậptinnàyđượcxemnhưmột
thưviệnchứacácthànhquảtalàmviệc,cóthểcórấtnhiềutậptinđượcdùnglàmthưviện.
2/.CácThaotác:
+Mởthưviệncủa1tậptin:File\OpenasLibrary,chọntêntậptin.Fla,Open.Cóthể
mởnhiềutậptinlàmthưviện.
+Mởthưviệndùngchung:File\OpenasSharedLibrary,chọntêntậptin.Fla,Open.
3/.Sửdụng:(trongcácthưviệncóhìnhảnh,đoạnFilm,biểutượng,nút)Dragtừthư
việnbỏvàoFrame.
4/.Sửdụngthưviệnchung:
Window\CommonLibraries,chọn1loại.Sửdụngnhưcácthưviệnkhác.
hình:6.4:CommonLibraries
Yêucầu:
+Hiệuứnglớpmặtnạ
+Hiệuứngchiếusáng
+HiệuứngX_Ray
+Hiệuứngcửasổ
6.4Hoạtcảnh
1/.Giớithiệu:
Làsựliênhệqualạigiữacácđoạnhoạthình,cảnh,khunghìnhkhitrìnhchiếu.Hoạt
cảnhcóthểthựchiệntốtnhờcácthiếtlậptươngtáchoặclậptrình(Scripting).
2/.Kháiniệmcơbản:
+Sựkiện:làtìnhhuốngxảyrahoặcthờiđiểmthiếtlậpđãđến.
+Đích:làđốitượngbịtácđộngbởihànhđộngkhixảyrasựkiện.
+Hànhđộng:làmộttácđộng,tươngtáctrênđíchkhisựkiệnxảyra.

813/.Sựkiện:
CácsựkiệncủaMouse:
+Press:Sựkiệnxảyrakhingườidùngnhấnchuộttrênnút.
+Release:Sựkiệnxảyrakhingườidùngnhấnvànhảchuộttrênnút.
+ReleaseOutside:Sựkiệnxảyrakhingườidùngnhấnvànhảnútchuộtbênngoàinút.
+RollOver:Sựkiệnxảyrakhingườidùngdichuyểncontrỏlênphíatrêncủanútnhấn.
(cuộnlên)
+RollOut:Sựkiệnxảyrakhingườidùngdichuyểncontrỏrakhỏiphạmvicủa
nút.(Cuộnra)
+DragOver:Sựkiệnxảyrakhingườidùngnhấnnúttrongphạmvinút(khôngnhả),kéo
contrỏrangoàiphạmvinútvàdichuyểntrởlạiphạmvinút.(Dragtrong)
+DragOut:Sửkiệnxảyrakhingườidùngnhấnnúttrongphạmvinút(khôngnhả),kéo
contrỏrangoàiphạmvinút.(Dragngoài)
Cácsựkiệncủabànphím:
Sựkiệnxảyrakhingườidùngnhấn1kýtự,phímmũitên,Backspace,Insert,Home,End,
Pageup,PageDown.Sựkiệnbànphímcóphânbiệtchữinvàchữthường.
4/.Cáchànhđộng:Cónhómsau:BasicsAction,Actions,Operators,Functions,
Properties,Objects.Chươngtrìnhtachỉnghiêncứu1sốhànhđộngsau:
+Goto:làmchođoạnFilmnhảyđếnkhunghìnhhoạtcảnh.
hình6.5:Cácsựkiệncủabànphím
Cócácthamsố:
Scene:chọncảnhbắtđầuchohànhđộngGoTo
Type:chọnFramecóthểlàtheosố,theonhãn,Frametrước,Framesau.
Frame:nhậpsốlàkhunghìnhthứmấy.
GotoandPlay:nếuchọnsẽlàGotoandPlay(Chuyểnđếnvàthựchiện)cònkhônglà
Gotoandstop(Chuyểnđếnvàdừng).
Vd:Chuyểnđếnvàchiếukhung1,theosựkiệnnhấnvànhảchuột.
on(release){
gotoAndPlay(1);
}

82+Play:chođoạnhoạthìnhbắtđầuthựchiện.
Khôngcóthamsố.
+Stop:chođoạnhoạthìnhngừnglại.
Khôngcóthamsố.
+ToggleHighQuality:bậttắtchếđộkhửrăngcưa.
Khôngcóthamsố
Vd:
on(release){
toggleHighQuality();
}
+StopallSound:Tắttấtcảcácâmthanh.
Khôngcóthamsố.
+GetURL:MởcửasổtrìnhduyệtWebvớiđịachỉURLđểnhận1địachỉxácđịnh.
hình6.6:MởcửasổtrìnhduyệtWebvớiđịachỉURL
Cócácthamsốsau:
URL:chứađịachỉURLnơitruycập.
Window:xácđịnhcửasổtảiURL
Self:TảiđịachỉURLvàocửasổlàmviệc.
Blank:MởcửasổmớivàtảiđịachỉURLvàođó.
Parent:MởđịachỉURLvàocửasổchacủacửasổhiệntại.
Top:nếuđoạnhoạthìnhFlashvớihànhđộngGetURLđangnằmtrong
khungHTMLthìsẽloạibỏkhungđểtảiURLvàocửasổ.
Variables:chọnbiếntrongđoạnhoạthìnhđượcxửlýrasao?
Don’tsend:Khônggởicácbiến.
SendusingGet:GởicácbiếnnốitiếpvàođịachỉURL.
SendusingPost:GởicácbiếntáchbiệtvớiURL.
+FSCommand:gởidữliệuđếnứngdụngsửdụngđoạnhoạthìnhnhưtrìnhduyệtWeb.
FSCommandđượcdùngkhiđoạnhoạthìnhFlashtươngtácvớiJavaScripttrêntrangWeb.
+Load/UnloadMovie:Nạp1đoạnFilmởđịachỉURLhoặcloạibỏđoạnhoạthìnhđã
nạp.

83Cócácthamsốsau:
URL:đườngdẫnđếntậptin.Swfcầntảivào.(htpt://www.ngcuong……)
Location:địnhmứchayđíchbịhànhđộngtácđộng
Level:tậptin.Swftảivàođượcđặttrong1mứcvàcó1sốmức.
Target:tậptin.Swftảivàokhônggiancủađoạnhoạthình.
Variables:chọnbiếntrongđoạnhoạthìnhđượcxửlýrasao?(tươngtựGET
URL).
+TellTarget:Xácđịnhmộttiếntrìnhthựchiệnhànhđộng.
Cóthamsốsau:
Target:chứatênnhãnmộtđoạnhoạthìnhcầnthựchiệnhànhđộng.
+IfFrameisLoaded:Xácđịnhmộtkhunghìnhnàođóđãđượcnạphaychưa?,nếunạp
rồithìthựchiệnhànhđộngnàođócònchưathìbỏqua(khônglàmgìcả).
Khôngthamsố.
+OnMouseEvent:Chọncácsựkiệnxảyradochuộtlàđốitượngphátsinhthayvìcác
hànhđộng,cóthểđịnhphímchosựkiệnbànphím.
+If:Kiểmtramộtcâulệnhđiềukhiểnnàođóđúnghaysaiđểthựchiệnhànhđộng.
+Loop:Thựchiệnmộtnhómhànhđộngnhiềulầnkhiđiềukiệncònđúng.
+Call:Gọithựchiệnmộtnhómcáchànhđộngđượcgắnvớimộtkhunghình.
+SetProperty:Đặtcácthuộctínhchođoạnhoạthình.
+SetVariable:Tạo1biếnmớihoặcđặtgiátrịchobiến.
+Dupplicate/RemoveMovieClip:Nhânbảnhoặcgỡbỏđoạnhoạthình.
+DragMovieClip:ChophépđoạnhoạthìnhcóthểDragđượctheocontrỏ.
+Trace:Hiễnthịmộtthôngbáo.
+Comment:Chứanộidungchúthíchchohànhđộng.
Chúý:Cáchànhđộngkhôngchỉlàriênglẻmàthườnghaylồngnhauđểtạocáctươngtác
phứctạp(đòihỏiphảicókiếnthứclậptrình).
5/.Càiđặttươngtáchoạtcảnh:
NhấnCtrl+Alt+AđểhiệncửasổthànhphầnAction,Clickchọnđốitượngcầncàiđặt,
Clickdấu+trêncửasổ,chọnhànhđộng,cungcấpthamsố…
Nếumuốnxoáthìclickchọndấu–(trừ).
KiểmTravàXuấtBảnHoạtHình
1)MenuControl:Dùngkiểmtrahoạthình.
+Play:Trìnhchiếuhoạthình.
+Rewind:Quaytrởlạikhunghìnhđầutiên.
+StepForward:Dịchchuyểntới1khunghình(bênphải)
+StepBackward:Dịchchuyểnlui1khunghình(bêntrái)
+TestMovie:Kiểmtratậptin.FLAđượcdịchthànhdạnghoạthình.SWF.
+TestScene:Kiểmtracảnhđượcchuyểnthànhdạnghoạthình.SWF.

84+DebugMovie:Kiểmtratậptin.FLAđượcdịchthànhdạnghoạthình.SWFvàcóhiện
cửasổDebugđểxemnộidungcácbiến,Codechươngtrình.
+LoopPlayback:Lậplạicácchuyểnđộnghoạthình.
+PlayallScene:Lậplạiviệcthựchiệnchuyểnđộngtấtcảcáccảnh.
+EnableSimpleFrameActions:Chophépđápứnglạicáchànhđộngđãcài(càicác
tươngtáchoạtcảnh).
+EnableSimpleButtons:Chophépcácnút(Button)cóhiệulựcvớicáctrạngthái:Up,
Over,Down,Hit.
+MuteSounds:Tắttoànbộâmthanh.
++Kiểmtranút:chọnControl\EnableSimpleButtons,trướckhiTest.
++Kiểmtracáchànhđộng:chọnControl\EnableSimpleFrameActions,trướckhi
Test.
2)Xuấtbản:
1/.Xuấttậptinhoạthình:
File\ExportMovie,nhậptêntậptinxuất(.SWF).
2/.Xuấttậptinảnh:
File\ExportImage,nhậptêntậptinxuất(.SWF).
3/.Thiếtlậpcácthamsốxuấtbản:
File\PublishSettings,hiệnhộpthoạicó3thẻsau:
+ThẻFormats:
Type:chọn1kiểuchotậptinxuất.
FileName:dùngđặttênchotậptinxuất.
UseDefaultNames:Flashsẽđặttênmặcđịnh.
+ThẻFlash
hình6.7:flashPublishSettings
LoadOrder:chọnthứtựnạptậptinhoạthìnhkhitảilêntrangWeb.

85BottomUp:nạplớpdướicùngtrước.
TopDown:nạplớptrêntrước.
Options:chọncáctùychọnkhác.
GerenateSizeReport:sẽtạotậptin.TXTchứathôngtincủahoạthình.
OmitTraceActions:loạibỏcáchànhđộngTrace(dấuhiệuCode)rakhỏihoạthìnhvà
khôngchongườikhácxemmãnguồn(chươngtrìnhScript).
Protectfromimport:bảovệkhôngchongườikhácsửdụngtậptinhoạthìnhcủabạn
(ngườikháckhôngthểImporttậptinvàosửdụnglại).
DebuggingPemitted:chophépgỡlỗichươngtrình(khicóchươngtrình)
Password:nhậpmậtmãchoProtectfromimport,DebuggingPemitted.
JPEGQuality:XácđịnhcấpđộnénchocácảnhBitmapcủatậptinhoạthình,0:làchất
lượngthấp,100:làchấtlượngcao.
AudioStream,AudioEvent:chophépđịnhmứcđộnén,tốcđộtruyền,chấtlượngcho
âmthanhtheoluồngvàsựkiện.
OverrideSoundSettings:ghiđèthôngsốvềâmthanhlêncácthiếtlậpâmthanhđã
thiếtlậptrướcđó.
Version:chọnphiênbảnxuấtbản.
+ThẻHTML:
Template:chọn1dạngtrangHTMLmẫuđểđặttậptinhoạthìnhlêntrangnày.
Dimensions:chọnvừa,đơnvịhoặctỉlệchotậptinhoạthìnhtheotrangHTML.
(cungcấpđơnvịhoặctỉlệchoWidth,Height).
PlayBack:chọncáctùychọntrìnhchiếutrêntrangHTML
-PauseatStart:hoạthìnhsẽkhôngtrìnhchiếuchođếnkhingườidùngclicknútPlay.
-Loop:hoạthìnhtựđộngtrìnhchiếulặpđilặplại.
-DisplayMenu:thanhDisplaysẽhiệntrongcửasổtrìnhduyệtkhinạphoạthình.
-Devicefont:chophépsửdụngfonthệthốngkhimáytínhcủabạnkhôngcófontnhưđã
định.
Quality:chọnchấtlượngthểhiệnhoạthìnhtheotốcđộCPUcủamáytính.
WindowMode:chọnchếđộcửasổhoạthình
-Window:thểhiệndạngcửasổ.
-Opaque:nộidungcủatrangHTMLsẽchuyểnxuốngphíasaucửasổhoạthình.(không
thấyđượcdocửasổhoạthìnhmờđục)
-TransparentWindowless:làmchonềncủacửasổhoạthìnhtrởnêntrongsuốt.(thấy
nộidungbêndướinó).
HTMLAlignment:chọncanhbiênhoạthìnhtrêntrangHTML.
Scale:địnhkíchthướccủacửasổhoạthình.
-Default:theogiátrịởDimension(khôngvừacửasổ).
-NoBorder:hoạthìnhkhôngcóđườngviềntrongcửasổ(khôngvừacửasổ).

86-ExactFit:codãnhoạthìnhtheotỉlệchínhxácvớikhungcửasổ(vừavớicửasổ).
FlashAligment:canhbiênhoạthìnhtrongcửasổtheochiềudọcchiềungang.
ShowWarningMessages:chophéphiệncácthôngbáovềtìnhtrạngtrangHTMLmẫu
cócầnphảisửađổihoặchiệuchỉnhgìkhông?.
4/.Xemtrướckhixuấtbản:File\PublishPreview,chọndạngcầnxem.
5/.Xuấtbản(dịch)thànhtậptin.SWF:File\Publish,sẽcótậptinxuấtbảnnhưđãđịnh.
6.5ĐưaFLASHvàoWeb
6.5.1NộidungtrangHTMLdoFlashxuấtbản
<html>
<head>
<title>Flower</title>
</head>
<bodybgcolor="#FFFFFF">
<p>
<objectclassid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#ver
sion=5,0,0,0"
WIDTH="360"HEIGHT="360">
<paramname="movie"value="Flower.swf">
<paramname="quality"value="high">
<paramname="bgcolor"value="#FFFFFF"><embedsrc="Flower.swf"quality="high"
bgcolor="#FFFFFF"
WIDTH="360"HEIGHT="360"
TYPE="application/x-shockwave-flash"
PLUGINSPAGE="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod
_Version=ShockwaveFlash">
</object>
</p>
</body>
</html>
Hoặc:
<html>
<head>
<title>HTMLWithFlash5</title>
</head>
<bodybgcolor="#FFFFFF">
<p>
<objectclassid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"

87codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#ver
sion=5,0,0,0"
WIDTH="210"HEIGHT="252">
<paramname="movie"value="Flower.swf">
<paramname="quality"value="high">
<paramname="bgcolor"value="#FFFFFF"><embedsrc="Flower.swf"quality="high"
bgcolor="#FFFFFF"
WIDTH="360"HEIGHT="360"
TYPE="application/x-shockwave-flash"
PLUGINSPAGE="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod
_Version=ShockwaveFlash">
</object>
</p>
<p>IntroducationaWebPagewithFlash5</p>
<p>&nbsp;</p>
</body>
</html>
hình6.8:NộidungtrangHTMLdoFlashxuấtbản
6.5.2Nhúngtậptin.GIFđượcxuấtbảnvàotrangHTML
MacromediaFlash5MediaspaceClub#17
<html>
<head>
<title>Flower</title>
<metaname="GENERATOR"content="MicrosoftFrontPage3.0">

88</head>
<body>
<tableborder="0"cellpadding="3"width="100%">
<tr>
<tdalign="right"valign="top"width="50%"><imgsrc="Flower.gif"width="360"
height="360"
alt="Flower.gif(6931bytes)"><br>
<fontsize="2"><em>GifFileofFlash5</em></font></td>
<tdvalign="top"width="40%"><fontsize="3"face="Arial"><strong>YourHeadingGoes
Here</strong></font><p><font
size="2"face="Arial">Loremipsumdolorsitamet,consectetueradipiscingelit,seddiem
veroerosetaccumsanet
iustoodiodignissimquiblanditpraesentluptatumzzrildelenitaugueduisdolorete
feugatnullafacilisi.</font></p>
<p><fontsize="2"face="Arial">Utwisienimadminimveniam,quisnostrudexercitaion
dolorsitamet,
consectetueradipiscingelit,seddiemnonummynibheuismodtinciduntutlacreetdolore
magnaaliguameratvolutpat.
</font></p>
<p><fontsize="2"face="Arial">Duisautemdolorinhendreritinvulputatevelitesseet
iustoodiodignissimqui
blanditpraesentluptatumzzrildelenitaugueduisdoloreteeugatnullafacilisi.
</font></td>
<tdwidth="10%"></td>
</tr>
</table>
</body>
</html>
+Nếunhúngtậptin.JPGthìmãHTMLlà:
<imgsrc="Flower.jpg"width="360"height="360"alt="Flower.jpg(10323bytes)"><br>
6.5.3Giảithíchcácthẻ
+Thẻ<Object>:dùngvớitrìnhduyệtInternetExplorercủaMicrosoft.
<ObjectClassid=”mãsố”Width=”value”Height=”value”CodeBase=”Url”>
<ParamName=”Movie”Value=”tênfile.Swf”>
<ParamName=”Quality”Value=”chấtlượng”>
<ParamName=”Bgcolor”Value=”màu”>
<ParamName=”Play”Value=”True|False”>
<ParamName=”Loop”Value=”True|False”>

89</Object>
+Thẻ<Embed>:dùngvớitrìnhduyệtCommunicator/NavigatorcủaNetscape.
<EmbedSCR=”têntậptin.Swf”Width=”value”Height=”value”
Play=”True|False”Quality=”chấtlượng”Loop=”True|false”Bgcolor=”màu”
Pluginspage=”Url”>
</Embed>
+Cácthuộctính:
++MOVIE:đườngdẫncủatậptin.Swf.(bb)
Vd:File://MyWeb/Flash/Movie99.swf
Vd:Http://MyWeb/myFlash/Movie98.swf
++SCR:đườngdẫncủatậptin.Swf.(bb)
++Width:quiđịnhkíchthướcngang.(bb)
++Height:quiđịnhkíchthướcdọc.(bb)
++Classid:chứaIDkiểmsoátActiveXcủaFlashLayer,cầnnhậpchínhxáctheođúng
sốLicencecủađĩađãcài.(bb)
++Codebase:Url,chứaIDkiểmsoátActiveXcủaFlashLayerđượctảixuốngInternet
Explorer(bb)
++Pluginspage:Url,chứaIDkiểmsoátActiveXcủaFlashLayerđượctảixuống
Netscape(bb)
++Name:chứatênthuộctínhdùngđặtthuộctính.(khôngbb)
++Play:kiểmsoáttìnhtrạngtrìnhchiếucủahoạthìnhkhinạplêntrangHTML,
True:chiếungay,False:chờngườisửdụngtácđộng.(mặcđịnhlàTrue,khôngbb)
++Bgcolor:thiếtlậpmàunềnchođoạnhoạthình.(khôngbb)
++Quality:chấtlượngthểhiệnhoạthìnhtheotốcđộCPUcủamáytính,cóthểlà:
Low,Autolow,Autohigh,High,Best(mặcđịnhlàHigh,khôngbắtbuộc).
++Loop:cho/khôngchohoạthìnhtrìnhchiếulậpđilậplại,True:cho,False:chỉchiếu1
lần.(mặcđịnhlàTrue,khôngbb)
++Scale:quiđịnhcửasổhoạthình.(mặcđịnhlàShowall,khôngbb)
-Showall:hoạthìnhhiệnđủtrongcửasổ.
-Noborder:hoạthìnhhiệntrongcửasổkhôngcóđườngviền,cóthểbịcắttheokhung.
-Exactfit:hoạthìnhhiệntheotỉlệkhớpvớicửasổ.
++SAlign:Canhbiênhoạthìnhtheocửasổ.(khikíchhoạthình<>kíchthướccửasổ,
mặcđịnhlàcanhgiữatâmcửasổ,khôngbbvìkhôngcầnthuộctínhnày)
-T:canhTop.
-B:canhBottom.
-L:canhLeft.
-R:canhRight.
-TL:canhTop_Left.

90-TR:canhTop_Right.
-BL:canhBottom_Left.
-BR:canhBottom_Right.
++WMode:thayđổichếđộmàucủacửasổhoạthình.(mặcđịnhlàWindow,khôngbb)
-Window:hoạthìnhnằmtrongcửasổcóchấtlượngtốtnhất.
-Opaque:nộidungtrêntrangHTMLđượcđưalêntrênkhunghình.(vìcửasổmờđục
khôngthấyđược)
-Transparent:Nềncủahoạthìnhtrongsuốt,cóthểthấyđượcbêndướihình.
++Swliveconnect:dùngkhitrongFlashcólậptrìnhJavaScripting,True:chophépJava,
False:khôngcóJava.(mặcđịnhlàFalse,khôngbb).
Bàithựchànhsố6:
1.DùngcôngcụMacromediaFlashMX2004,hãythiếtkếmộtlogovàbannervềtrường
củabạnvàchènvàotrangweb.
2.DùngcôngcụMacromediaFlashMX2004làmmộtđoạnfilmFlashvàchènvàotrang
web.
BÀI7:THIẾTLẬPCÁCSTYLE

91Mụctiêuthựchiện:
Họcxongbàinàyhọcviênsẽcókhảnăng:
-XâydựngvàlưutrữcácStylebêntrongmộtWebSite
-TrìnhbàytrangWebvớicácStyle
7.1KháiniệmcơbảnvềCSS
Bảngkiểu(stylesheet)làmộttậphợpnhữngđịnhnghĩavềkiểumàcóthểápdụng
chonhữngphầntửcủamộttrangHTML.Haynóimộtcáchkhácbảngkiểuchỉđơnthuầnlà
nhữngtậptinvănbảnchứanhữngmãđịnhdạngthíchhợp.CònCSS,haychỉđơngiảnlà
style,chophépbạngánnhiềuthuộctínhcùnglúcchotấtcảphầntửnàođượcđánhdấu
bằngmộtthẻcụthểtrêntrangWeb.MặcdùcóthểđịnhdạngbằngthẻHTML,nhưngstyle
vẫncónhiềuưuđiểmvượttrội.Nóitómlạicsslàchuẩnxácđịnhcáchthứcấnđịnhkiểuvà
đượcgọilàCascadingStyleSheets-Trangkiểuxếplớp.Trướckhichúngtaxétcặnkẽphần
nàychúngtôinêuracácbàiminhhoạtrongphầnsau.
7.2TrìnhbàytrangWebvớicácStyle
Bàiminhhoạ1:
<HTML><HEAD><TITLE>Bài1</TITLE></HEAD><BODY>
<H1>VôLý?!!</H1>
<IMGSRC=cogai.jpgALIGN=left>
<BR>Cũngchẳngbiếtvìđâumàkhóc
<BR>Khianhđiquakhôngkịpnhìnmình.
<BR>Bướcvộivã,cóđiềugìphíatrước.
<BR>Cóđiềugìmàkhôngphảilàem?
<BR>Nỗimủilòngcứthếngậptrongtim
<BR>Khôngbiếtgiócứàolêntừngđợt
<BR>Cũngchẳngbiếtvìsaomìnhchẳngtanthànhnước
<BR>Chảyngượcchiềuđườnganh.
</BODY></HTML>
Kếtquảbài1trêntrìnhduyệtlà:

92VôLý?!!
Cũngchẳngbiếtvìđâumà
khóc
Khianhđiquakhôngkịpnhìn
mình.
Bướcvộivã,cóđiềugìphía
trước.
Cóđiềugìmàkhôngphảilàem?
Nỗimủilòngcứthếngậptrongtim
Khôngbiếtgiócứàolêntừngđợt
Cũngchẳngbiếtvìsaomìnhchẳngtanthànhnước
Chảyngượcchiềuđườnganh.
Bàiminhhoạ1làtrangwebbìnhthườngkếtquảnhưhìnhtrên.Bâygiờtatiếptục
xétbàiminhhoạ2sau:
Bàiminhhoạ2
<HTML><HEAD><TITLE>Bàiminhhoạ2</TITLE>
<STYLE>
DIV.yellowback{background:yellow}
</STYLE>
</HEAD><BODY>
<H1>VôLý?!!</H1>
<IMGSRC=cogai.jpgALIGN=left>
<BR><DIVCLASS=yellowback>Cũngchẳngbiếtvìđâumàkhóc
<BR><DIVCLASS=yellowback>Khianhđiquakhôngkịpnhìnmình.<BR><DIV
CLASS=yellowback>Bướcvộivã,cóđiềugìphíatrước.
<BR><DIVCLASS=yellowback>Cóđiềugìmàkhôngphảilàem?
<BR><DIVCLASS=yellowback>Nỗimủilòngcứthếngậptrongtim
<BR><DIVCLASS=yellowback>Khôngbiếtgiócứàolêntừngđợt
<BR><DIVCLASS=yellowback>Cũngchẳngbiếtvìsaomìnhchẳngtanthànhnước
<BR><DIVCLASS=yellowback>Chảyngượcchiềuđườnganh.
</BODY></HTML>
Vớibàiminhhoạ2mãnguồngiốngnhưmãnguồncủabàiminhhoạ1,chỉcókháclà
thêmmộtđoạnmã:
<STYLE>
DIV.yellowback{background:yellow}

93</STYLE>
Đâylàđoạnmãdẫntớikếtquảnhưhìnhtrênvàchínhchúngtađangsửdụnghiệulựccủa
cáchứngdụngbảngkiểu.Bâygiờtađivàonghiêncứucụthể.
Kếtquảminhhoạ2trêntrìnhduyệtlà:
VôLý?!!
Cũngchẳngbiếtvìđâumàkhóc
Khianhđiquakhôngkịpnhìn
mình.
Bướcvộivã,cóđiềugìphía
trước.
Cóđiềugìmàkhôngphảilàem?
Nỗimủilòngcứthếngậptrongtim
Khôngbiếtgiócứàolêntừngđợt
Cũngchẳngbiếtvìsaomìnhchẳngtanthànhnước
Chảyngượcchiềuđườnganh.
Đâylàđoạnmãdẫntớikếtquảnhưhìnhtrênvàchínhchúngtađangsửdụnghiệu
lựccủacáchứngdụngbảngkiểu.Bâygiờtađivàonghiêncứucụthể.
Bàiminhhoạ3:
<HTML>
<HEAD>
<TITLE>Bai1</TITLE>
<STYLE>
H1{Font-Size:16pt;Font-weight:bold;color:red}
H2{Font-style:italic;Font-Size:24pt;COLOR:green}
SPAN{Font-weight:bold;Font-style:italic}
</STYLE>
</HEAD>
<BODY>
<SPAN>
<SPAN>TrườngthptLongChâuSa</SPAN>
<H1>TrườngTHPTLongChâuSa</H1>
<H2>TrườngTHPTLongChâuSa></H2>
<BODY>
</HTML>

94Vớibài3thìdòngvănbảntrongH1cócỡ16,chữđậmvàcómầuđỏ;cònvănbảntrongH2
cókiểuchữnghiêng,cỡ24vàmầugreen.DòmgvănbảntrongSPANlàkiểuchữnghiêngvà
đậm(xemkếtquảtrongtrìnhduyệt).Bạnđọctựtrảlờichomìnhvềsựkhácnhaugiữatrang
webcósửdụngbảngkiểuvàkhôngsửdụngbảngkiểu.Bạntựviếtbài1ởdạngkhông
dùngbảngkiểu.Đểhiểurõhơntatiếptụcxétbàiminhhoạdướiđây:
Bàiminhhoạ4:
<HTML>
<HEAD>
<TITLE>Bai2</TITLE>
<STYLE>
H1{Font-Size:16pt;Font-weight:bold;color:red}
H2{Font-style:italic;Font-Size:24pt;COLOR:green}
SPAN{Font-weight:bold;Font-style:italic}
</STYLE>
</HEAD>
<BODY>
<SPAN>
<SPAN>TrườngthptLongChâuSa</SPAN>
<H1>TrườngTHPTLongChâuSa</H1>
<H2>TrườngTHPTLongChâuSa</H2>
<H2STYLE=Font-Size:36pt>TrườngTHPTBCLONGCHÂUSA</H2>
</BODY></HTML>
Bàitiếptheo
<HTML>
<HEAD>
<TITLE>bai3</TITLE>
<STYLETYPE=”text/css”TITLE=”lcsa”>
BODY{color:white}
P{color:blue;
font-size:12pt;
font-family:Arial}
H1{color:red;
Font-size:18pt}
</STYLE>

95</HEAD>
<BODY>.
TrườngTHPTBCLongChâuSa
</BODY>
</HTML>
Vớiđoạnmãtrêntacầnhiểu:
1/<STYLETYPE=”text/css”hiểulàtoànbộcácvănbảntrongtrangwebđềuđượcbiểudiễn
theokiểucss
2/BODY{color:white}<BODY>TrườngTHPTLongChâuSa</BODY>
đềucómầu:white.
3/P{color:blue;font-size:12pt;font-family:Arial}toànbộđoạnvăn
nằmtrongđoạn<p>đềucómầu:bluevớicỡchữlà12pt,phôngchữlàArial.
4/H1{color:red;Font-size:18pt}tiêuđềcómầuđỏvớicỡchữlà18pt
-SPANlàmộtphầntửdòng,cónghĩalànócóthểthamgiavàođoạnvănbản
vàkhôngtạoramộtngắtdòng.NgoàiratacũngcóthểbiểudiễnthẻSPAN:
SPAN{color:rgb(0,0,255)};SPAN{color:#ggbbff}
<HTML>
<HEAD>
<TITLE>Bai4</TITLE>
<STYLE>
SPAN{
Font-weight:bold;Font-style:italic
}
</STYLE>
</HEAD>
<BODY>
<palign="left"><fontcolor="#800000">
<SPAN>TRƯỜNGTHPTBCLONGCHÂUSA</SPAN>
</font><br><fontcolor="#800080">TRƯỜNGLONGCHÂU
SA</font><br>
<fontcolor="#008000">
<SPAN>TRƯỜNGTHPTLONGCHÂUSA</SPAN></font><BR>
<fontcolor="#FF00FF">TRƯỜNGTHPTLONGCHÂU
SA</font><BR>

96<fontcolor="#0000FF">
<SPAN>TRƯỜNGTHPTPHONGCHÂU</SPAN></font><BR>
<fontcolor="#008080">TRƯỜNGTHPTPHONGCHÂU</font><BR>
</p>
</BODY>
</HTML>
Ởbàiminhhoạ4,cóxuấthiệnhaithẻ:<STYLE>và<SPAN>
-Thẻ<STYLE>phảinằmtrongphần<HEAD>.Dùngquyđịnhdạngbiểumẫuchung
khihiểnthị,giúpngườisoạnthảođỡmấtcônglặpđilặplạicùngmộtquyđịnh.
Bàiminhhoạ5:
<HTML>
<HEAD>
<TITLE>Bai5</TITLE>
<LINKHREF="styles.css"REL=STYLESHEETTYPE="Text/css">
</HEAD>
<BODY>
<SPAN>
<SPAN>TrườngthptLongChâuSa</SPAN>
<H1>TrườngTHPTLongChâuSa</H1>
<H2>TRƯỜNGTHPTLONGCHÂUSA</H2>
<H2STYLE=Font-Size:36pt>TrườngTHPTBCLONGCHÂUSA</H2>
</BODY>
</HTML>
Vớibàiminhhoạ5tasửdungmộtkháiniệmLINK.ThẻLINKchứathuộctínhHREF.
Giốngnhưthể<IMG>HREFsẽxácđịnhvịtrícủatậptinđích.ThuộctínhRELsẽđịnhrõ
rằngliênkếtnàylàmộtthamchiếuđếnmộtbảngkiểuvàthuộctínhTYPEđịnhróloạibảng
kiểu.Tạithờiđiểmhiệntạithìtext/csslàloạibảngkiểuđượchỗtrợphổbiếnduynhất.Bảng
kiểuliênkếtcóảnhhưởngtớihồsơHTML.MọiphầntửtronghồsơHTML,màthẻcủa
chúngđượcđịnhnghĩatrongtậptinstyle.csssẽđượcthểhiệnbằngcáchsửdụngkiểuđã
đượcxácđịnh.
Bàiminhhoạ6:
<HTML>
<HEAD>

97<TITLE>Bai6</TITLE>
<STYLE>
.large"{Font-Size:24pt}
.small{Font-Size:8pt}
</STYLE>
</HEAD>
<BODY>
Standardtext
<H2CLASS="small">TrườngthptLongChâuSa</H2>
<SPANCLASS="large">TrườngTHPTLongChâuSa</SPAN>
<PCLASS="small">TrườngthptLongChâuSa</p>
<BCLASS="large">TrườngthptbcLongChâuSa</B>
</BODY>
</HTML>
Vớibàiminhhoạ6tađãsửdụngtớikháiniệmCLASS(smallvàlarge).csscóthểhỗ
trợchoviệctạolớp.Nóimộtcáchđơngiảnhơn,bạnmuốntạocáclớpcủaphầntửB-Kiểu
chữinđậm,nhưngtrongđịnhnghĩalớpsẽlàmthayđổikíchcỡphôngchữcủanhữngphần
tửBxácđịnh.BạncóthểápdụngmộtlớpvàomộtphầntửbằngthuộctínhCLASSnhư
trongthẻ<B>củbàitrên..nhưvậylớpđượcxácđịnhbởitêncủaselector,tứclàbạncóthể
sửdụngchothẻbấtkìnàotrongtrangwebcủamình
Bàiminhhoạ7:
<HTML>
<HEAD>
<TITLE>Bai7</TITLE>
<STYLE>
SPAN{
Font-family:“ArialWestern”,Verdana,sans-serif;
Font-style:italic;
Font-variant:small-caps;
Font-weight:700;
Font-Size:18pt;
}
</STYLE>
</HEAD>

98<BODY>
Thissentenceisstandardtextthathasnocustomstyle.
Thissentenceisalsostandardtextthathasnocustomstyle.
<HR>
<SPAN>ThistextusesthecustomSPANstylewecreated.</SPAN>
<HR>
Asyoucansee,somepartsofthisparagraph<SPAN>useour
CustomSPANstyle,</SPAN>andsomedonot.Thisparagraph
Demonstrateshowthetwotypesoftextcaninteractandhow
Linespacingorwrappingcanbeaffectedbymixingstyles.
</BODY>
</HTML>
Trongbàiminhhoạ7tađãsửdụngcácthuộctínhvềFONTSvàTEXT.Đólà:
1/Font-Familyxácđịnhkiểuchữmàtrìnhduyệtsửdụngkhihiểnthịfont
2/Font-Variantđượcthiếtlậplàsmall-caps:mọichữcáiđềuviếthoa
3/Font-weighcócácgiátrịnormal,bold:đậm,border:đậmhơn,lighter:nhạthơn
4/Font-sizekíchcỡphôngchữ
5/Font-styleđượcthiếtlậpkiểuchữnormalvàkiểuchữnghiêng(italicvàoblique)
6/Text-Align=left/right/center/justify
7/Text-Indentxácđịnhdòngđầutiêntrongkhốivănbảnsẽđượcthụtvàomột
khoảngcógiátrịlà(theođơnvị:emhoặcpx)
8/Text-Decorationcóthểthiếtlậplàunderline,overline,line-through,blinkhoặc
name.Underline,overline,line-throughUserlàmxuấthiệnnhữngđườngthẳngdọctheovăn
bảnởnhữngchiềucaokhácnhau
9/Text-transformkiểmsoátviệcviếthoavănbản.Capitelize:viếthoachữcáiđầu
tiêncủamọitừ,uppercase:Viếthoamọichữcáicủamọitừ.Lowercase:viếtthường,
none:loạibỏchếđộviếthoađượcthừahưởng.
10/Vertical-Alignchophéptathiếtlậpvănbảnlàsubscript(sub)hoặcsuperscript
(super).Thuộctínhnàykhôngchophépbạnthiếtlậpchínhxáckhoảngcáchmàvănbảnsẽ
đượcdichuyểnđi
11/Letter-spacingkiểmsoátkhoảngcáchgiữamỗikítựtrongvănbảnvànóthường
đượcthểhiệntheođơnvịđolàemhoặcpx
12/Line-Heightxácđịnhkíchthướctổngthểcủadòngvănbản,baogồmkhoảng
trắngphíatrênvàdướikítự.ThểDIVlàthẻsohàngvănbảntheolề.Chẳnghạnnhư:
<DIVALIGN=”Left”>THPTLongChâuSa</DIV>

99<DIVALIGN=”center”>TrườngTHPTLongChâuSa</DIV>
<DIVALIGN=”right”>TrườngTHPTLongChâuSa</DIV>
XongcácthẻDIVvàSPANtựchúngkhôngtạorahiệuứngnhiềulắm.Tuynhiên,có
thểkếthợpchúngvớicáclớpIDđểtạocácthẻHTMLtuỳbiến.DIVdùngchocácphầntử
cấpđộkhối,cònSPANdùngchocácphầntửnộituyến.cácthẻP.BODY,H1,TABLElàthẻ
cấpđộkhối,cònFONT,IMGlàthẻcấpđộnộituyến.Bâygiờtatómtắtcácmẫucâulệnh
trongđịnhdạngvănbảntheokiểudáng:
Chọnhọphôngchữ:ĐểđặthọphôngchữtagõtrongthẻSTYLE
Font-family:font1,font2,font3,…Vídụ:
<HTML>
<HEAD>
<STYLE>
H1{font–family:”Arial”,”NuevaRoman”}
P{font–family:“Arial”,”MyriodRoman”,”Verdana”}
</STYLE>
</HEAD><BODY>
<P>Đâylàtrangwebmôtảvềcáchlựachọncácphông</P>
<H1>Chàocácbạnđếnvớichươngtrìnhhọcweb</H1>
<P>Thisistheelement<EM>withitsdefault</EM>styleas
displayedinthebrowser</P>
</BODY>
</HTML>
Tạochữnghiêng:GõFont-style:obligue(tạochữnghiêngkhôngchân),hoặc
italic(tạochữnghiêngcóchân),hoặcnormal(bỏchữnghiêng)
<HTML>
<HEAD>
<STYLE>
H1{font–family:”Arial”,”NuevaRoman”}
P{font–family:“Arial”,”MyriodRoman”,”Verdana”}
P.intro{Font-style:italic}
P.introEM{Font-style:normal}
</STYLE>
</HEAD><BODY>
<P>Đâylàtrangwebmôtảvềcáchlựachọncácphông</P>

100<H1>Chàocácbạnđếnvớichươngtrìnhhọcweb</H1>
<Pclass=intro>Bạnđánhvàidong<EM>vàođây</EM>để
minhhoạstyle</P>
</BODY>
</HTML>
Tạochữđậm:GõFont-weight:bold,bolder,lighter(bolderhay
lighter-tạogiátrịtươngđốisovớiđộđậmnhạthiệnthời),hoặc
normal(huỷbỏđộđậmnhạthiệnthời).
<HTML>
<HEAD>
<STYLE>
H1{font–family:”Arial”,”NuevaRoman”}
P{font–family:“Arial”,”MyriodRoman”,”Verdana”}
P.intro{Font-style:italic;Font-weight:bold}
P.introEM{Font-style:normal}
</STYLE>
</HEAD><BODY>
<P>Đâylàtrangwebmôtảvềcáchlựachọncácphông</P>
<Pclass=intro>Bạnđánhvàidòng<EM>vàođây</EM>để
minhhoạstyle</P>
<H1>Chàocácbạnđếnvớichươngtrìnhhọcweb</H1>
</BODY>
</HTML>
Thiếtlậpkíchcỡphông:GõFont-size:xx-small,xsmall,small,medium,large,x-large,
xx-largehoặcgõkíchcỡphôngtươngđối,hoặcchocỡphôngchínhxác:12pt,15pt,hoặc
gõtỉlệphầntrăm150%
<HTML>
<HEAD>
<STYLE>
H1{Font-size:20pt;Font-weight:normal;font–
family:”Arial”,”NuevaRoman”}
P{Font-size:10ptfont–family:“Arial”,”Myriod
Roman”,”Verdana”}
P.intro{Font-style:italic;Font-weight:bold}

101P.introEM{Font-style:normal}
</STYLE>
</HEAD><BODY>
<P>Đâylàtrangwebmôtảvềcáchlựachọncácphông</P>
<Pclass=intro>Bạnđánhvàidòng<EM>vàođây</EM>để
minhhoạstyle</P>
<H1>Chàocácbạnđếnvớichươngtrìnhhọcweb</H1>
</BODY>
</HTML>
Thiếtlậpđộcaodòng:GõFont-height:10pthoặc10pxhoặcgõ100%_tỷlệsovới
kíchcỡphông.Hoặccóthểthiếtlậpđồngthờitoànbộcácgiátrịchophông:Normal,
obligue,italic,bolder,lighterhoặcsmall-laps….
<HTML>
<HEAD>
<STYLE>
H1{Font-size:20pt;Font-weight:normal;font–
family:”Arial”,”NuevaRoman”}
P{Font-height:15ptFont-size:10ptfont–family:
“Arial”,”MyriodRoman”,”Verdana”}
P.intro{Font-style:italic;Font-weight:bold}
P.introEM{Font-style:normal}
</STYLE>
</HEAD><BODY>
<P>Đâylàtrangwebmôtảvềcáchlựachọncácphông</P>
<H1>Chàocácbạnđếnvớichươngtrìnhhọcweb</H1>
<Pclass=intro>Bạnđánhvàidòng<EM>vàođây</EM>để
minhhoạstyle</P>
</BODY>
</HTML>
Đặtmàuchữvănbản:Gõcolor:colornone,#rrggbbhoặcrgb(r,g,b)hoặcgõrgb
r%,g%,b%).
<HTML>
<HEAD>
<STYLE>

102H1{color:yelow;Font-size:20pt;Font-weight:normal;font–
family:”Arial”,”NuevaRoman”}
P{Font-height:15ptFont-size:10ptfont–family:
“Arial”,”MyriodRoman”,”Verdana”}
P.intro{Font-style:italic;Font-weight:bold}
P.introEM{Font-style:normal}
</STYLE>
</HEAD><BODY>
<P>Đâylàtrangwebmôtảvềcáchlựachọncácphông</P>
<H1>Chàocácbạnđếnvớichươngtrìnhhọcweb</H1>
<Pclass=intro>Bạnđánhvàidòng<EM>vàođây</EM>để
minhhoạstyle</P>
</BODY>
</HTML>
Thayđổinềnvănbản:GõBackground:transparenthoặcgõcolorhoặcurl
(image.gif)hoặcnếumuốngõrepeatđểxếpảnhliêntục:
Repeat-x:xếpảnhliêntụctheochiềungang
Repeat-y:xếpảnhliêntụctheochiềuđứng.
No-repeat:Huỷbỏchếđộxếpảnh.Pixelhoặccolorđểchỉđịnhnềncốđịnhhoặc
cuộncùngảnh.
<HTML>
<HEAD>
<STYLE>
H1{Background:green;color:yelow;Font-size:20pt;Font-
weight:normal;font–family:Arial}
P{Font-height:15pt;Font-size:10pt;font–family:
“Arial”,”MyriodRoman”,”Verdana”}
P.intro{Font-style:italic;Font-weight:bold}
P.introEM{Font-style:normal}
</STYLE>
</HEAD><BODY>
<P>Đâylàtrangwebmôtảvềcáchlựachọncácphông</P>
<H1>Chàocácbạnđếnvớichươngtrìnhhọcweb</H1>
<Pclass=intro>Bạnđánhvàidòng<EM>vàođây</EM>để

103minhhoạstyle</P>
</BODY>
</HTML>
Điềukhiểnkhoảngcách:GõWord-spacing:length(cógiátrịthườngbằngpixel,
point,em,v.v…).
<HTML>
<HEAD>
<STYLE>
H1{lefter-spacing:5em;Background:green;color:yelow;Font-
size:20pt;Font-weight:normal;font–family:Arial}
P{text-indent:8pt;Font-height:15pt;Font-
size:10pt;font–family:Arial,MyriodRoman,Verdana}
P.intro{text-indent:0pt;Font-style:italic;Font-weight:bold}
P.introEM{Font-style:normal}
</STYLE>
</HEAD><BODY>
<P>Đâylàtrangwebmôtảvềcáchlựachọncácphông</P>
<H1>Chàocácbạnđếnvớichươngtrìnhhọcweb</H1>
<Pclass=intro>Bạnđánhvàidòng<EM>vàođây</EM>để
minhhoạstyle</P>
</BODY>
</HTML>
Chỉđịnhkhoảngcáchgiữacácchữcái:Gõletter-spacing:length.Đểthụtlềgõtext-
indent:%.(ápdụngbàitrên)
Thiếtlậpthuộctínhkhoảngtrốngtrắng:Gõwhite-space:prehoặcnowrep(giữchocác
phầntửtrêncùngmộtdòng)hoặcnormal(theochếđộbìnhthường).(ápdụngbàitrên)
Cănlềvănbản:GõText-align:left,right,center,justify(cănđềuvănbảncảhaibên)
(ápdụngbàitrên)
Đểgạchchâncácdòngchữ:GõText-decoration:underline,hoặcgõoverlinehoặcline-
through(gạchbỏdòngchữ)hoặcgõnone(đểhuỷbỏ).
Thayđổikiểuchữ:GõText-transform:
Cepitelize:Chuyểnchữcáiđầuthànhchữhoa.
Uppercase:chuyểntấtcảthànhchữhoa.
Fowercase:Chuyểntấtcảthànhchữthường.

104None:trởlạinhưtrước.
Chuyểnchữhoanhỏ:GõFont-variant:small-caps(hoặcnone).
Chúngtađãxétcácbàitậpvềcss,đểbạnđọchiểurõhơncáchsửdụngcsstrongcác
trangwebđộngchúngtôitổnghợplạimộtsốthủthuấtvềcáchlậptrìnhtrangwebđộng
theocss,cáctrangwebđãnêuởtrênphầnlớntasửdụngcáckiếnthức:Môtảstyletrên
dòng,môtảtrangStyle,môtảtrangstyletrongjavascript,địnhnghĩathuậtngữtrangstyle,
liệtkênhữnglợiíchcủatrangstyle,liệtkênhữngkỹthuậtứngdụngcủatrangstyle,giải
thíchphântầng(Cascading)
7.3Styletrêndòng
MộtđặctínhquantrọngcủaDynamicHTMLlàbạncóthểthayđổistylecủavôsố
thànhphầnHTMLtrêntrangsaukhikiểnthịnótrongtrang.Thayđổicólẽđáplạitươngtác
ngườidùnghoặcthayđổitrạngtháinhưbiếncốchỉnhlạikíchthước.
Cóhaicáchthayđổistylecủatrang:
+Đổistyletrêndòng
+Viếtkịchbảnđổistyle
Thôngquastyletrêndòng,cóthểtạostyleđộngmàkhôngthêmbấtcứkịchbảnnào
vàotrang.
“Styletrêndòng”làstylegánchothànhphầncụthể.Stylekhôngápdụngchomọithành
phầnthuộcloạihaylớpnàođó.ĐịnhnghĩaStyletrêndòngbằngthuộctínhSTYLEchothẻ
củathuộctính.Vídụ,nếumuốnấnđịnhmàu<H1>(Heading1)ởmàuđỏ,bạnấnđịnh
thuộctínhSTYLEcủathẻH1.
<H1STYLE=”color:red”>
StyleObjectchophépsửađổistyletrêndòngbấtcứlúcnàothôngquakịchbản.Style
ObjecthỗtrợtừngthuộctínhmàCSShỗtrợchostyle.Muốnứngdụngthuộctínhtrongviết
kịchbản:
+XoádấugạchnốikhỏitênthuộctínhstyleCSS.
+Đổimẫutừđầucủatừđứngsaudấugạchnốisangchữhoa.
Vídụthuộctínhfont–weighttrongCSStrởthànhfontWeighttrongDHTML.Hoặctext–
aligntrởthànhtextAlign,…
Chúngtasẽdùngstyletrêndòngđểấnđịnhthuộctínhthànhphần<P>.Xemđoạnmãnày
trongInternetExplorer.
<HTML>
<HEAD>
<TITLE>Thiếtlậpthuộctính</TITLE>
</HEAD>

105<BODY>
<Pstyle=”color:aqua;font–style:italic;text–align:center;”>
Thisparagraphhasaninlinestyleappliedtoit
<BR>
<P>Thisparagraphisdisplayedinthedefaultstyle.
<BR.
<P>canyouseethe<SPANstyle
=color:red>difference</SPAN>inthisline
</BODY>
</HTML>
7.4Giớithiệutrangstyle
Trangstylelànơiquảnlývàđiềukhiểnstyle.Trangstylemôtảhìnhthứcvàtrìnhbày
tàiliệuHTMLkhihiểnthịtrênmànhình,hoặcthậmtrítrongbảnin.Trongthựctế,cóthể
xemnólàtemplateđặtcơsởchotàiliệuHTML.Ngoàira,cóthểxácđịnhchínhxácvịtrívà
hìnhthứccủacácthànhphầntrêntrangvàtạohiệuứngđặcbiệt.Vídụ,tạostyleđịnhstyle
cho<H1>làđậmnghiêngvàmàuxanh.Hoặchiểnthịthànhphần<P>ởmàuđỏvớiphông
chữArial.
Cóthểquyđịnhthôngtinstylemongmuốnởmọinơi–trangstyle.Trangstylecóthể
liênkếtvớitấtcảcáctrangwebsitenhằmtạovềnhấtquántrêntoànbộsite.Quyđịnhnhiều
trangstylevàkếtchúngcùngtậphợptrangWeb,tăngthêmtínhlinhhoạttrongquátrìnhtạo
trangWeb.
NgàynaytrangWebthậmchíkhôngcótrangstyle.Khôngcónguyêntáccứngnhắc
vềchuyệnnày.giảnhưkhôngđịnhrõstyle,trìnhduyệtápdụngquyướcriêng.Vídụ,luôn
hiểnthịđềmục<H1>theocùngmộtcách.Đoạnvàlềcũngthế.Tuynhiên,thôngquatrang
style,cóthểquyđịnhcáchthứchiểnthịđềmục<H1>trongtrìnhduyệt.
Vềmặtlýthuyết,cóthểứngdụngcôngnghệtrangstylebấtkỳvớiHTML.Nhưngtrongthực
tế,chỉhỗtrợcôngnghệCSS(CascadingStyleSheet).BảnthânCSSlàchuẩnđangđược
W3CpháttriểnđểứngdụngtrongtrìnhduyệtWeb.
BảngởcuốichươngliệtkêmộtsốthuộctínhCSSkhảdụngtrongDynamicHTML.
Khiápdụngtrongkịchbản,xoádấugạchnốivàviếtmẫutựđầucủatừđứngsaugạchnối.
Vídụ,font–sizeđổithànhfontsize.Bâygiờtaxétmộtsốnộidung:
-TrangstyleJavascipt
NetscapehỗtrợCSS.NócũnghỗtrợtrangstyleđượcviếtbằngJavaScriptvàtheo
môhìnhtàiliệu(DOM).Khixácđịnhtrangstyle,cóthểkhaibáokiểulà:
“text/CSS”–TrongtrườnghợpnàynótìmcúphápCSS.

106“text/JavaScript”–TrongtrườnghợpnàynótìmcúpháptrangstyleJavaScript.
KhiápdụngcúphápJavaScripttrongthànhphần<STYLE>,bạnphảiđịnhrõthuộc
tínhthẻcủađốitượngdocument.
TrongDOM,cácthànhphầnHTMLđượcxemlàđốitượng.Đốitượngcóthuộctính
cóthểtruycậpđểxácđịnhhìnhthứcvàstylecủathànhphần.Đếnphiênthuộctínhđóng
chứcnăngnhưđốitượngthuộctậphợpthuộctính.Vídụ,trangWebđượcxemlàđốitượng
document.Đốitượngdocumentcóthuộctínhthẻ.ThuộctínhthẻcóđốitượngH2.Đối
tượngH2cóthuộctínhcolorcóthểtruycậpvàthayđổikhicần.
Document.tags.H2.color=“limegreen”;
Äthuộctínhthẻápdụngchotàiliệuhiệnhành,dođócóthểlượcbỏtàiliệukhỏicầu
lệnhdocument.tags.
<HTML>
<HEAD>
<STYLETYPE=“text/javascript”>
tags.P.fontSize=”25pt”;
tags.P.marginLeft=”15pt”;
tags.H2.color=”hotpink”;
</STYLE>
</HEAD>
<BODY>
<H2>ThisisanH2elementwithastyleapplied</H2>
<BR>
<P>Thisisparagraphelement
</BODY>
</HTML>
Mọithànhphầnkhácthừahướngtừthànhphần<BODY>.Nếumuốnápdụngstyle
mặcđịnhchomithànhphầntrongtàiliệu,bạnấnđịnhstylecầnthiếttrongthànhphần
<BODY>.TácdụngđốivớitrìnhduyệtNetscape.
<HTML>
<HEAD>
<STYLETYPE=”text.javascript”>
tags.body.color=”limegreen”;
</STYLE>
</HEAD>

107<BODY>
<H2>ThisisanH2element</H2>
<BR>
<P>Thisisparagrphelement
</BODY>
</HTML>
ápdụngvớiwith:
<HTML>
<HEAD>
<STYLETYPE=”text/css”>
BODY{color=”limegreen”}
</STYLE>
</HEAD>
<BODY>
<H2>ThisisanH2element</H2>
<BR>
<P>Thisisaparagraphelement
</BODY></HTML>
Giảsửphảiấnđịnhvàithuộctínhchothànhphần,cóthểáp
dụngcúphápwith(tags.element)đểrútngắnmã:
<HTML>
<HEAD>
<STYLETYPE=”text/javascript”>
with(tags.P){
color=”hotpink”;
fontStyle=”italic”;
fontFamily=”helvetica”;
fontSize=”20pt”;
}
</STYLE>
</HEAD>
<BODY>
<P>Thisisaparagraphelement
</BODY>
</HTML>

108-Thuậtngữtrangstyle
CSSxácđịnhstyleápdụngchotranghaythànhphầntrang.
+Nguyêntắcstyle:CSSlàtậphợpnguyêntắc.Nguyêntắcxácđịnhstylecủatàiliệu.
Vídụ,tạonguyêntắcstylequyđịnhhếtthảyđềmục<H2>hiểnthịởmàuvàngxanh
(limegreen).
+Trangstylelàdanhsáchnguyêntắcstyle.NócóthểlồngtàiliệuHTML.Trong
trườnghợpđó,nómangtênlàtrangstylelồng.Hơnnữa,cóthểtạotrangstyledướidạng
tậptinngoàivàliênkếtvớitàiliệuHTML.
CóthểápdụngnguyêntắcstylechonhữngphầnđượcchọntrongtrangWeb.Vídụ,
quyđịnhđoạncụthểhiểnthịởđậmnghiêngtrêntrang.Đâygọilàkhaithácstyletrêndòng,
ápdụngstylelênnhữngthànhphầnHTMLriênglẻtrêntrangWeb.
+Nguyêntắc–Trangstylecóthểchứanhiềunguyêntắc.Phầnđầucủanguyêntắclà
bộchọn(selector).Mỗibộchọncóthuộctínhvàgiátrịdikèm.
ARuleSelector{Declarationsproperty:Value;
Property:value;…
}
Phầnnguyêntắcđặttrongcặpngoặcmóclàkhaibáo(declaration).Khaibáocóhai
phần,phầnđứngtrướcdấuhaichấmlàthuộctính(property)vàphầnđứngsaudấuhai
chấmlàgiátrị(value)củathuộctínhđó.
Cáckhaibáophâncáchnhaubằngdấuchấmphảy(;).Khôngbắtbuộcđặtdấuchấm
phảysaukhaibáocuốicùng.
H1{color:blue}
H1làbộchọn,color:bluelàkhaibáo.
Bêntrongkhaibáo:
{property:Value}
colorlàthuộctính,bluelàgiátrị.
CóthểđặtriêngtừngnguyêntắcbêntrongthẻSTYLE.
<HTML>
<HEAD>
<STYLETYPE=”text/css”>
H1{color:limegreen}
H1{font–family:Arial}
H2{color:limegreen}
H2{font–family:Arial}
</STYLE>

109</HEAD>
<H1>ThisistheH1element</H1>
<H2>ThisistheH2element</H2>
<H3>ThisistheH3elementwithitsdefaultstyleasdisplayed
inthebrowser</H3>
</HTML>
Thayvàođó,cóthểnhómcácnguyêntắc.Phâncáchtừng
khaibáobằngdấuchấmphảy.
<HTML>
<HEAD>
<STYLETYPE=”text/css”>
H1,H2{color:Limegreen;font–Family:Arial;
}
</STYLE>
</HEAD>
<H1>ThisistheH1element</H1>
<H2>ThisistheH2element</H2>
<H3>ThisistheH3elementwithitsdefaultstyleasdisplayed
inthebrowser</H3>
</HTML>
7.5Bộchọn
Cóthểđịnhnghĩabộchọn(selector)là“chuỗinhậndiệnnguyêntắctươngtácápdụng
chothànhphầnnào”:
Cóhailoạibộchọncơbản:
+Bộchọnđơngiản
*BộchọnthànhphầnHTML
*Bộchọnlớp
*BộchọnID
+Bộchọntheongữcảnh
a)Bộchọnđơngiản
Dễsửdụngnhất.Nómôtảthànhphầnbấtluậnvịtrítrongcấutrúctàiliệu.Kýhiệu
nhậndiệnđềmụcH1làmộtđiểnhìnhvềbộchọnđơngiản.
H1{color:blue}
*BộchọnthànhphầnHTML

110DùngtênthànhphầnHTML.Khácbiệtduynhấtlàbạncóthểxoácặpngoặc.Dođó
thẻ<P>trongHTMLtrởthànhP.ởvídụsau,tuyđịnhnghĩastyle,nhưngthànhphầnP
khôngcócặpngoặc.SởdĩnhưvậylàvìthànhphầnHTML<P>đượcxemlàbộchọn.
<HTML>
<HEAD>
<STYLETYPE=”text/css”>
P{font–style:italic;font–weight:bold;color:limegreen}
</STYLE>
</HEAD>
ởđâyquyđịnhnộidung<P>.Thànhphần<P>đượcxemlà
thànhphầnHTML.
<P>TheseselectorsusethenamesofHTMLelements.The
onlydifferenceisthatyouremovethebrackets.</P>
</BODY></HTML>
text/csschobiếtstyleđượcápdụnglàcss.
*BộchọnCLASS
BộnàysửdụngthuộctínhCLASScủathànhphầnHTML.Mỗithànhphầncóthuộc
CLASSđượcdùngđểgánkýhiệunhậndiện.Cóthểgántênlớpkhôngtrùnglặpchotừng
thànhphầnkhácnhau.Thayvàođó,gánkýhiệunhậndiệnlớpchonhiềuthànhphầnthuộc
lớpđơngiảnkhimuốnhiểnthịcácbiếnthể.vídụ,bạnmuốn<H2>hiểnthịởnhiềumàutuỳ
biếnkhácnhau.Trongtrườnghợpđó,ápdụngkýhiệunhậndiệnlớpcho<H2>.
BộchọnCLASSmởđầubằngdấuchấm(.),kèmtheo“tênlớp”.Tốthơnhếtlàchọn
tênlớptheomụcđíchcủachúngthayvìtênmôtảmàusắchaystyle.vídụ,bạnthíchđoạn
Ahiểnthịởinnghiêng,nhữngđoạnkhácmangstylekhác,trongtrườnghợpđóđoạnAcó
thểcókýhiệunhậndịênlớp.slant.
<STYLETYPE=”text/css”>
.water{color:blue}
.danger{color:red}
</STYLE>
<pclass=”water”>testwater
<pclass=”danger”>testdanger
<p>nostyle
Toànđoạnmã

111<HTML>
<HEAD>
<STYLETYPE=”text/javascript”>
classes.water.all.color=”blue”
classes.danger.all.color=”red”
</STYLE>
</HEAD>
<pclass=”water”>testwater
<pclass=”danger”>testdanger
<p>nostyle
<BR>
<EMclass=”danger”>italic</EM>
</BODY>
</HTML>
KhiđótheocúphápJavascript,bạnkhôngthểsửdụngdấu
gạchnốibêntrongtênlớp.ĐólàdoJavascriptđọcdấugạchnốilà
trừ(-)toántửtrongJavascript).Tênlớpkhôngthểbaogồmbấtcứ
toántửJavascriptnào.
khiđịnhnghĩalớpstyle:
+CóthểđịnhrõthànhphầnHTMLnàokhaithácstylenày.
+Dùngtừkhoáđểchophéphếtthảythànhphầnkhaithácnó.
XemđoạnmãnàytrongNetscapeNavigator:
<HTML>
<HEAD>
<STYLEtype=”text/css”>
all.hotpink{color:hotpink;}
P.BLUE{color:blue;font-weight:bold;}
H5.red1{color:red;font-weight:bold;}
</STYLE>
</HEAD>
<BODYbgcolor=”lavender”>
<PCLASS=BLUE>thisparagraphisblue.</P>
<P>ThisparagraphdoesnotusetheclassBLUE.</P>
<H5CLASS=red1>ThisisanH5elementthattriedtousethered1class</H5>
<PCLASS=hotpink>Thisparagraphishotpink.

112<H5CLASS=hotpink>ThisisanH5elementthathasbeenallowedtousehotpink
style.</H5>
</BODY>
</HTML>
Đoạnmãlàthànhphầncụthể
<HTML>
<HEAD>
<STYLEtype=”text/javascript”>
classes.HOTPINK.all.color=”hotpink”;
classes.BLUE.P.color=”blue”;
classes.BLUE.P.fontWeight=”bold”;
classes.red1.H5.color=”red”;
classes.red1.H5.fontWeight=”bold”;
<STYLE>
</HEAD>
<BODYbgcolor=lavender>
<PCLASS=BLUE>Thisparagraphisblue.</P>
<P>ThisparagraphdoesnotusetheclassBLUE.</P>
<H5CLASS=red1>ThisisanH5elementthattriedtousethered1class</H5>
<PCLASS=hotpink>Thisparagraphishotpink.
<H5CLASS=hotpink>ThisisanH5elementthathasbeenallowedtousehotpink
style.</H5>
</BODY>
</HTML>
*BộchọnID
BộchọnIDápdụngthuộctínhIDcủathànhphầnHTML.BộchọnIDápdụngstylelên
thànhphầnriênglẻtrêntrangWeb.vídụ,ápdụngstylelênđềmục<H2>thôngquabộchọn
kênhID.Điềunàykhôngcónghĩasẽápdụngcùngstyleđólênlầnxuấthiệnkháccủathành
phần<H2>trêntrangtrừphiquyđịnh.Nótươngtựnhưápdụngstyletrêndòng.BộchọnID
mởđầubằngdấu(#).KhitheocúphápJavaScript,bạnphảidùngthuộctínhids.
<HTML>
<HEAD>
<TIILE>IDselectors</TITLE>
</HEAD>
<BODY>

113<STYLEtype=”text/css”>
#control{color:red}
</STYLE>
<Pid=”control”>fireisthiscolour</H2>
<BR>
<P>Thisparagraphhasnostyleapplied
</BODY>
</HTML>
ĐoạnmãkếthợpbộchọnIDvàbộchọnlớp
<HTML>
<HEAD>
<TITLE>CombiningIDandClassSelectors</TITLE>
</HEAD>
<BODY>
<STYLEtype=”text/css”>
.forest{color:green}
.danger{color:red}
#control{color:blue}
</STYLE>
<Pclass=”forest”>Greenthings
<Pclass=”danger”>firehazards
</P>
<EMclass=”forest”>movegreenthings</EM>
<BR>
<EMclass=”danger”>movefirehazards</EM>
<UL>
<LIclass=”danger”>Thingsthatburn
<LIclass=”forest”>Thingsthatdon’tburn
</UL>
<Pid=“control”>Water</P>
</BODY>
</HTML>
b)Bộchọntheongữcảnh
Bộchọntheongữcảnhámchỉngữcảnhcủathànhphần.Thỉnhthoảng,bạncóhai
thànhphầncùnggiátrị.Thànhphầnchínhhaythànhphầnchacóthànhphầnconchứa

114trongđó.Trongtrườnghợpđó,muốnđổistylecủathànhphầncon,bạncầnbộchọntheo
ngữcảnh.
Điềunàydựatrênkháiniệmthừahưởng,thànhphầnconthừahưởngstylegáncho
thànhphầncha.
Mộtvídụđiểnhìnhlàthànhphần<BODY>.Khibạnthêmthànhphầnvào<BODY>,
mỗithànhphầnchứatrongđósẽthừahưởngstylecủa<BODY>.
<p>…<b>…</b>…</p>
plàcha,blàcon
Bâygiờlàmsaokiểmsoát?Suychocùng,cólẽbạnkhôngmuốnmọithànhphầntrên
trangWebđềumangcùngmộtstyle.Vìvậy,phảigiànhquyềnthừahưởng.Khiđó,phảithay
đổiriêngstylecủathànhphầncon.XemđoạnmãnàytrongInternetExplorer.
<HTML>
<HEAD>
<TITLE>Contextualselectors</TITLE>
</HEAD>
<STYLETYPE=”text/css”>
BODY{color:blue;
Background:lavender;
Font-family:Arial;
}
UL{color:red}
</STYLE>
BộchọnULtrongtrangstylequyđịnhphảiinđỏdanhsáchkhôngxếpthứtự,dođó
mọithànhphầnLIsẽmangmàusắcđãđịnhtrừphigiànhquyền.
<UL>
<LI>mangoes
<LI>oranges
<LI>apples
</UL>
BộchọnULtrongtrangstylequyđịnhcáckhoảnmụcdanhsáchphảilàmàuđỏ.
ChúngthừahưởngphôngchữArialtừkhaibáoBODY,màuđỏtừkhaibáoUL.Nếuđịnhhọ
phôngchữ(font-family)trongkhaibáoUL,nósẽgiànhquyềnkhaibáobộchọnBODY.
KhôngcóbộchọnOLtrongtrangstyle,vìvậydanhsáchOLthừahưởngthuộctínhtừbộ
chọnBODY.
<OL>
<LI>mangoes

115<LI>oranges
<LI>apples
</OL>
</BODY>
</HTML>
Thànhphầnkhôngcómặttrongtrangstyledướidạngbộchọnsẽthừahưởngthuộc
tínhcủathànhphầncha.ởvídụsau,thànhphầnBvàIthừahưởngthuộctínhcủabộchọn
P.
<HTML>
<HEAD>
<TITLE>Contextualselectors</TITLE>
</HEAD>
<STYLETYPE=”text/css”>
BODY{color:blue;
Background:lavender;
Font-family:Arial;
}
P{color:hotpink}
</STYLE>
<BODY>
<P>
<B>Iamhavingfun</B><BR>
<I>Thisisfuntoo</I><BR>
MuốnvôhiệuhoáthuộctínhcủabộchọnP,hãyđóngnó.
</P>
Iamhavingfun
<BR>
Thisisfuntoo
</BODY>
</HTML>
Đoạnmãdướiđâylàbộchọntheongữcảnh
<HTML>
<STYLETYPE=”text/javascript”>
with(tags.BODY){
color=”blue”;

116backgroundColor=”lavender”;
fontFamily=”Arial”;
}
tags.P.color=”hotpink”;
</STYLE>
<BODY>
<P>
<B>Iamhavingfun</B><BR>
<I>Thisisfuntoo</I><BR>
</P>
Iamhavingfun
<BR>
Thisisfuntoo
</BODY>
</HTML>
7.6Thayđổinguyêntắc
Bạnđãbiếtsửađổistylecủathànhphầnriênglẻ.Cólúcbạnmuốntiếnhànhtrênquy
môtoàncục,chotấtcảcáctrangtrongWebsite.Bạnsửađổistyleđượctrangstyleđịnh
nghĩalàstylelớphaystyletoàncục.Khilàmvậy,sửađổisẽcóảnhhưởnglanrộng.Tứclà
thayđổistylecủamọithànhphầntrêntrangthuộcstylequyđịnhstylecụthể.
vídụ,bạncóđịnhnghĩatrangstylequyđịnhstyle:
¦Styletoàncụcápdụngchomọithànhphần<H2>(xanh,họphôngchữArial,co
chuẩn).
¦Lớpstylechungwarning(đỏ,đậm,nghiêng)ápdụngchothànhphầnbấtkỳsửdụng
lớpđó.
Haivídụsauminhhoạtrangstylesheet1.cssliênkếtfirst1.htmlrồiđến1.html.
Sheet1.csscóđoạnmã
H2{color:blue;font-style:italic;}
.warning{color:red;font-weight:bold;font-style:italic;}
SaochépđoạnmãnàytrongNotepad/Frontpagevàlưunóvớitênlà“sheet1.css”.
1.html
<HTML>
<HEAD>
<TITLE>ChangingtheRules</TITLE>

117<LINKREL=stylesheetHREF=”sheet1.css”
TYPE=”text/css”>
<HEAD>
<H2>Changingtherulesisfun</H2>
<BR>
<Pclass=”warning”>Changingtherulesmaynotbesuchfun
<H2>TheH2elementagain<P>
</HTML>
2.html
<HTML>
<HEAD>
<TITLE>ChangingtheRules</TITLE>
<LINKREL=stylesheetHREF=”sheet1.css”TYPE
=”text/css”>
</HEAD>
<H2>Thisdocumentusethesheet1stylesheet</H2>
<BR>
<Pclass=”warning”>Selectingthisoptioncounddeleteall
yourfiles
<H2>TheH2elementagain<P></BODY></HTML>
7.7Chúgiảitrongtrangstyle
Chúgiảilàđặctínhđượchầuhếtngônngữhỗtrợ.Bạncũngcóthểthêmchúgiảivào
trangstylehầugiúptheodõistyleápdụngtrongsuốttrang.Chúgiảiđặttrongdấu/*,nhưng
khôngđượclồngnhau.
ĐốivớiCSS,cúpháplà:
H1{color:blue;}/*H2elementwillbeblue*/
Tags.H1.color=”blue”;/*H1elementwillbeblue
ĐốivớitrangstyleJavaScript,cúpháplà:
tags.H1.color=”blue”;//H1elementswillbeblue
nhữnglợiíchcủatrangstyle
NếumuốnkiểmsoáttốthơntrangWeb,bạnnêntiếnhànhstyle.Cóthểápdụngtrang
styleđể:
7.8Giànhquyềntrìnhduyệt
MỗitrìnhduyệthiểnthịtrangWebtheocáchriêng.Đãquarồithờinhàthiếtkếkhông
kiểmsoátcáchhiểnthịtrangtrongtrìnhduyệt.Suychocùng,bạnkhôngbiếtngườiởđầu

118kiathếgiớicókhảnăngsửdụngtrìnhduyệtnào.vớitrangstyle,bạncóthểgiànhquyềnquy
ướccủatrìnhduyệtvàtựtayấnđịnh.vídụ,quyđịnhstylehiểnthịthànhphần<H1>
<H1><FONTSIZE=3COLOR=AQUA>
<B><I>Overridingthebrowser</I></B>
</FONT></H1>
7.9Dàntrang
Trangstylechophéphiểnthịphôngchữ,thayđổimàusắc,…màkhôngảnhhưởng
đếncấutrúctrangWeb.Nghĩalàvớitưcáchnhàthiếtkế,giờđâybạncóthểtáchyêucầu
thiếtkếtrựcquanrakhỏicấutrúclogiccủatrangwebvàgiảiquyếtriêng.
Nhờnhữngsốđotươngđốitrongtrangstyle,cóthểtrìnhbàytàiliệuđẹpmắttrênbất
kỳmànhìnhnào,ởbấtkểđộphângiảinào.
-Dùnglạitrangstyle
Địnhxongthôngtinstyle,cóthểlồngtrangstyletrongtàiliệuHTML.Hoặcliênkếttất
cảtrangtrênWebsitevớitrangstyle.NhưvậybảođảmtrangWebmangvẻđồngnhấtkhi
hiểnthị.Bởivậycóthểcónềnchung,logocôngtyvàthôngtinchuẩntrongmộtstyle.Thử
hìnhdungnếucóvàitrămtrangweb,vàbạnphảiđịnhriêngstylecủatừngtrang.
-Nỗlựcmộtlần
Cóthểtạotrangstylevàliênkếtnhiềutàiliệuvớinó.Mọitàiliệusẽcócùngdiện
mạo.Nhưngquantrọnghơncảlàkhithayđổitrangstyle,tấtcảtàiliệuliênkếtvớitrang
stylesẽphảnánhthayđổiđó.
Bàithựchànhsố7:
1.TạomớimộttậptinCSStêndefault.csslưutrênthưmụcH:\tên_bạn\ThucHanhCSS.
-Địnhnghĩacácthuộctínhcơbảntrongtậptin:
a:link
{
color:#FF0000;
}
a:visited
{
color:#0000FF;
}
a:active{
color:#336699;
}
body
{
font-family:Arial,Helvetica;
background-color:#FFFFFF;
color:rgb(0,51,102);
}

119table
{
table-border-color-light:rgb(204,153,255);
table-border-color-dark:rgb(204,0,204);
}
h1,h2,h3,h4,h5,h6
{
font-family:Arial,Helvetica;
}
h1
{
color:rgb(0,51,102);
}
h2
{
color:rgb(51,0,153);
}
h3
{
color:rgb(204,0,153);
}
h4{
color:rgb(0,51,102);
}
h5
{
color:rgb(51,0,153);
}
h6
{
color:rgb(204,0,153);
}
.TieuDe
{
Color:Red;
background-color:#C0C0C0;
}
.NoiDung
{
Color:Blue;
background-color:#999966;
}
-Cácemtựkhaibáothêmmộtsốthuộctínhkhácchoriêngmình.
2.TạomớimộttrangHTMLtênSuDungCSS.htmlưutrênthưmục
D:\tên_bạn\ThucHanhCSS.
-Trongphần<Head>…</Head>củatrangHTML,thêmvàothẻsau:
<Linkhref=default.csstype=text/cssrel=stylesheet>
-Trongphần<Body>…</Body>củatrangHTML,bổsungvàomộtsốthànhphần
như:bảng,TextBox,liênkết,DropDownBox,…
-Sửdụngcácthuộctínhđãkhaibáoởtrênđểđịnhdạngchovănbảnvàcácthành
phầnthêmvào.

120
BÀI8:NHỮNGKIẾNTHỨCCƠBẢNVỀJAVASCRIPT,
VBSCRIPTVÀCÁCỨNGDỤNG
Mụctiêuthựchiện:
Họcxongbàinàyhọcviênsẽcókhảnăng:
-LậptrìnhtrêntrangWEBđểtínhtoánphụcvụmộtmụctiêucụthểbằngngônngữVB
Script.
8.1KháiniệmvềngônngữJavaScriptvàVBScript(ASP)
8.1.1GiớithiệuvềASP
ASPđượcviếttắttừ:ActiveServerPage.
MicrosoftđãpháttriểnActiveServerPage(ASP)nhưmộtkiếntrúcserver-sidedùng
đểxâydựngcácứngdụngwebđộng.VớiASP,tacóthểbiêndịchthànhclient-sideHTML,
scriptingvàActiveXcontrolsvớiserver-sidescriptingvàcáccomponentCOMhayDCOMđể
tạonộidungđộngvàcácứngdụngweb-basedphứctạp.Cácứngdụngcóthểchưamạnh
vàchưaphứctạpđểtạovàmởrộng.
ASPlàmôitrườngkịchbảntrênmáyserver(server-sidescriptingenvironment)dùng
đểtạovàchạycácứngdụngtrongtrangweb.Nhờtậpcácđốitượngcósẳn(build-inobject)
vơícáctínhnăngphongphú,khảnănghỗtrợVBScript,Javascriptcùngmộtsốthànhphần
ActiveXkháckèmtheo.
ASPcungcấpmộtcáchlàmmớiđểtạotrangWebđộng.ASPkhôngphảilàmộtkỹ
thuậtmơínhưngsửdụngdễdàngvànhanhchóng.ASPsẽthamvấntrựctiếpvàotrình
duyệt,gởidữliệuđếnWebservervàtừđâysẽđưalênmạng.
TrongkhiASPthựcthitrênmáymànóhỗtrợdùng,thìtacóthểxemASPtừbấtcứ
máynàovàvớibấtcứbrowsernào.ASPcungcấpgiaodiệnlậptrìnhnhanhvàdễdàngđể
triểnkhaicácứngdụng.
ASPchạytrênmôitrườngInternetInformationServer4.0(IIS)vàPersonalWeb
Server4.0.ASPchophéptaquảnlýviệctruyềnnốigiữatrìnhduyệtvàWebserver,vàtạo
đượchìnhthứcđộngcủatrangWebvàphảnhồilạichongườidùng.ASPcóthểchophép

121tatruycậpđếncơsởdữliệuvàquaytrởvềvớikếtquảngắnnhấttrênWebsite,cậpnhật
nộidungtrênWebsitekhithayđổi.
ASPlàmộtmôitrườngđểthựcthicáccomponentnêntùytheoyêucầumàngườisử
dụngcóthểthiếtkếracáccomponentkhácnhau,phụcvụchonhữngmụcđíchkhácnhau
vàđưacáccomponentđóvàothựcthitrênmôitrườngASP.
ĐâylàmộtlợiđiểmcủaASP,khitamuốnnângcấphaypháttriển,thayđổichương
trìnhthìchỉcầnthaythếcáccomponentmàkhôngcầnphảithayđổitoànbộchươngtrình
đó.Chínhvìvậy,ASPhơnhẳnCGIvàJSPdotínhđộclậpvàdễpháttriển,nênhệthốngsử
dụngASPlàmmôitrườngthuậnlợichothiếtkếWeb.
InternetInformationService(IIS)hỗtrợổnđịnh,giúpchonhàquảntrịmạngdễdàng
trongviệcquảntrịmạng.NgoàiracònhỗtrợchoASPthựcthinhanhhơn.
MicrosoftVisualInterdevlàmộtmôitrườngđặcbiệtđượcthiếtkếriêngchoASPdựa
vàowebsitevàcungcấpmôitrườngdùngđểthiếtkếvàkiểmtralỗi.
SựkhácbiệtgiữaASPvàcáckỹthuậtmơíkháclàASPthựcthitrênwebservertrong
khicáctranglạiđượcphátsinhtừnhữngkỹthuậtkhácđượcbiêndịchbởibrowser(hay
client).NhữnglợiđiểmmàASPdùngthíchhợphơnlàdùngCGIvàPerl.
8.1.1.1CácchứcnăngcủaASP
Đọcnhữngyêucầutừtrìnhduyệt.
Tìmtrangcầnthiếttrongserver.
ThựchiệnbấtcứnhữnggiớithiệuđãcungcấptrongASPđểcậpnhậtvàotrang
Web.
Sauđógởitrảvềchotrìnhduyệt.
Hình8.1:CácchứcnăngcủaASPClient WebServerGetspage
<html>
<%ASPcode%>
</html>
Hello<html>
<b>Hello</b>
</html>InterprestASPcode
ServerResponseHTTPResquest
Browsercreatesthewebpage

1228.1.1.2CáchoạtđộngcủaASP
ASPchưátrongcáctậptincóđuôimởrộng“*.asp”.TrongScriptcóchưácáclệnh
củacácngônngữscriptnàođókhitanhậpđuôiđịachỉcóphầnlà*.asptrênwebbrowser
thìlậptứcgởiyêucầuđếnchoASP.KhinhậnyêucầuWebserverđồngthờiwebserversẽ
tìmcáctậptintrênđịachỉcócáctậptinyêucầuwebservergởiđếntậptin.Chươngtrình
đặcbiệtnàygọilàasp.dll.Khiđócáccâulệnhyêucầusẽđượcthựchiện.
VàiứngdụngkhidùngASP:
TạonhữngnộidungcủatrangWebbằngcáchcậpnhậttậptinvănbảnhaynộidung
cơsởdữliệu.
Tạonhữngtranggiớithiệuchỉđểhiệnthị.
HiểnthịvàcậpnhậtcơsởdữliệuđượclưutrữtrongtrangWeb.
Tạonhữngtrangwebmàcóthểđượcsắpxếpthứtự.
Phảnhồitừphiángườidùngvàđưathôngtintrởvềchongườidùng.
8.1.1.3TruycậpcơsởdữliệuvớicácđốitượngActiveData
DùngADO,CSDLcóthểtruycậptừASPscriptsvàcácngônngữphổbiếnnhưVisual
BasicvàC++.ChophéphợpnhấtcácứngdụngWebCommercevớisốlượngcósẳnvà
đápứngchohệthống,vìthếviệcthayđổitrongcơsởdữliệusẽđượcphảnhồivàocác
ứngdụngtrangwebmộtcáchtứcthời.
CácvấnđềcơbảnxâydựngcácứngdụngtrênASP:
a)TậptinGlobal.asa:
TậptinGlobal.asalàtậptintùychọn,cóthểkhaibáocácscriptđápứngbiếncố,các
objecttrongứngdụnghaycácsession(cácphiênlàmviệc).Đâylàtậptinmàngườidùng
khôngcầnthựcthivẫntựđộngthựcthi,khichươngtrìnhtrênserverthựcthi.Thôngtin
chưálànhữngthôngtinđượcdùngchotoàncục.TậptinnàyđặttênlàGlobal.asavàđược
đặttrongthưmụcgốccủaứngdụng.MỗiứngdụngchỉcómộttậptinGlobal.asaduynhất:
Application,Events,SessionEvents.
NhữngscripttrongtậptinGlobal.asacóthểđượcviếtbởibấtcứngônngữnàocóthể
hổtrợchoscripts.Nếuscriptđượcviếtcùngmộtngônngữthìcóthểkếthợpchungtrong
mộtthẻtag<script>duynhất.
KhithayđổitậptinGlobal.asavàlưulạithìserverdừngviệcxửlývàyêucầuứng
dụnghiệnthờitrướckhibiêndịchlạitậptinGlobal.asa.Trongthờigiannàyservertừchối
cácyêucầukhácvàgởithôngbáo:“Yêucầukhôngthểxửlýkhiứngdụngđangkhởiđộng
lại”(“Therequestcannotprocessedwhileapplicationisbeingrestarted.”).
Saukhiyêucầu(request)đãxửlýxongthìserversẽxoábỏtấtcảcácsessionđang
thựcthi.GọibiếntươngứngSession_OnEndtươngứngmàserverxoá,tiếptheolàbiếncố
Application_OnStop.SaukhitậptinGlobal.asađượcbiêndịchlạiyêucầucủangườidùng
vàsẽkhởiđộnglạiứngdụng.

123b)CóthểdùngASPđểxemtrênNetscapehoặcInternetExplorer
ASPđượcthựcthitrênserver,cónghĩalàtacóthểdùngbấtcứtrìnhduyệtnàođể
xemkếtquả.ASPcóthểđượcxemdễdàngtrongtrìnhNetscapeNavigatorhayInternet
Explorer.Tuynhiên,tacầnchúýđếnwebserverphảicókhảnăngchạyASP.
c)ActiveWebSites
Activewebsitesvơínhiềukỹthuậtmới,chúngđượckếthợpxâydựngvơínhiềungôn
ngữvàcáckỹthuật,tacóthểdùngbấtkỳmộttrongnhữngkỹthuậtngônngữnày:
-ActiveXControls:đượctạobởicácngônngữnhưVisualC++hayVisualBasic.
-Java.
-Ngônngữkịchbản(ScriptingLanguage)như:VBScriptvà
JavaScript/JScript/ECMAScript.
-ActiveServerPagevàDynamicHTML.
8.1.1.4CácthànhphầncơbảntrongASP
a)ActiveServerObjects:
Gồmcó5đốitượng(objects)chính:
-Request.
-Response.
-Server.
-Application.
-Session.
MôhìnhđốitượngcủaASP:
Hình8.2:CácthànhphầncơbảntrongASP
-RequestđượctạotronghìnhthứcnhậptừmộttrangHTML.
-Responsedùngđểtrảlờikếtquảtừserverchobrowser.
-Serverdùngđểcungcấpnhiềuchứcnăngnhưtạomộtobjectmới.
-ApplicationvàSessiondùngđểquảnlýthôngtinvềcácứngdụngđangchạy
trongchươngtrình.CLIENTSERVER
ResponseObjectRequestObjectServerObject
Application
Object
Session
Object

124b)RequestObject:
ChophéptalấythôngtindọctheoyêucầuHTTP.Việctraođổibênngoàitừserverbị
quaytrởvềnhưmộtphầncủakếtquả(Response).Requesttậptrungnhiềuđếnphầnlưutrữ
thôngtin.
CácRequestobject:
-QueryString:lưutrữmộttậpnhữngthôngtinđểvàođịachỉcuối(URL).
-vd:<%Request.QueryString(“buyer”)%>
-Form:lưutrữmộttậptấtcảcácbiếngởiđếnHTTPrequest.
vd:<%Request.Form(“buyer”)%>
-ClientCertificate:Khiclienttạomộttậpvớimộtserveryêucầusựbảomậtcao.
-ServerVarialbles:Khiclientgởimộtyêucầuvàthôngtinđượcđưatớiserver,nó
khôngchỉgởiquamàcònthôngtinviệcaitạotrang,tênservervàcổngmàyêucầugởiđến.
vd:<%Request.ServerVariables(“HTTP_USER_AGENT”)%>
c)ResponseObject:
Cungcấpnhữngcôngcụcầnthiếtđểgởibấtcứnhữnggìcầnthiếttrởvềclient.
NhữngphươngthứccủaResponseObject:
-Write:ghibiến,chuỗi,chophéptagởithôngtintrởvềbrowser.
Vd:text“HelloWorld!”
Response.Writetext
Mymessageis<%text%>
-Clear:chophéptaxoábỏbấtcứvùngnhớbênngoàiHTML.
-End:chophépngừngviệcxửlýtậptinASPvàdữliệuđệmhiệnthờiquaytrởvề
browser.
-Flush:chophépdữliệuđệmhiệnthờiquaytrởvềbrowservàgiảiphóngbộđệm.
-Redirect:chophéptabỏquasựđiềukhiểncủatranghiệnthờinốikếtvàotrangweb
khác.
vd:<%
If(NotSession(“LoggedOn”))Then
Response.Redirect“login.asp”
EndIf%>
NhữngđặctínhcủaResponseObject:
Buffer:địnhrõtrang.
-CacheControl:xácđịnhproxyserverđượcchophépphátsinhradoASP.
-Charset:nốithêmtênkýtựvàođầucontent-type.
-ContentType:HTTPcontenttypechophầntrảlời.
-Expires:Sốlầnphátsinhgiưãlầnlưutrữvàphầnkếtthúcchomộttranglưutrữtrên
browser.
-ExpiresAbsolute:Ngàygiờđượcphátsinhtrênbrowser.

125-IsClientConnected:clientngưngviệckếtnốitừserver.
-Status:giátrịcủaHTTPstatusquaytrởvềserver.
d)ApplicationObject:
MỗiứngdụngđượctrìnhbàybởimộtApplicationobject.Đâylàđốitượngđượcchưá
cácbiếnvàcácđốitượngchophạmviứngdụngcáchdùng.
NhữngtậpcácApplicationobject:
-Content:chứatấtcảcácmẫutinthêmvàoứngdụngthôngquacáclệnhscript.
-StaticObjects:Chưátấtcảcácđốitượngthêmvàoứngdụngbằngthẻ<object>
NhữngphươngthứccủaApplicationobject:
-Lock:ngănchặncácclientkháctừviệccậpnhậtđặctínhứngdụng.
-Unlock:chophépcácclientcậpnhậtđặctínhứngdụng.
NhữngsựkiệncủaApplicationobject:
-OnStart:xảyrakhitrangwebtrongứngdụngđượcthamchiếulầnđầu.
-OnEnd:xảyrakhiứngdụngkếtthúc,khiwebserverngưnghoạtđộng
e)SessionObject:
Đượcdùngđểkiểmtratrìnhduyệtkhitrìnhduyệthướngquatrangweb.
TậpcácSessionObject:
-Content:chưátấtcảcácmẩutinthêmvàosessionthôngquacáclệnhscript.
-StaticObject:chưátấtcảcácđốitượngthêmvàosessionbằngthẻ<object>.
NhữngphươngthứccủaSessionObject:
-Abandon:Huỷmộtsessionvàgiảiphóngsessionrakhỏinguồn.
NhữngđặctínhcủaSessionObject:
-CodePage:lấyđoạnmãsẽdùngchosymbolmapping.
-LCID:lấynơiđịnhdanh.
-SessionID:quaytrởvềđịnhdanhphiênlàmviệcchongườidùng.
-Timeout:lấykhoảngthờigianchotrạngtháiphiênlàmviệcchoứngdụngtrongvài
phút.
NhữngsựkiệncủaSessionObject:
-OnStart:xảyrakhiservertạomộtsessionmới.
-OnEnd:xảyrakhimộtsessionđãgiảiphónghayhếtgiờlàmviệc.
f)ServerObject:
NhữngđặctínhcủaServerobject:
-ScriptTimeOut:khoảngthờigiandàikhiscriptchạytrướckhixảyralỗi.
NhữngphươngthứccủaServerobject:
-CreateObject:Tạomộtđốitượnghayservercomponent.
-HTMLEncode:ỨngdụngHTMLvàochuỗichỉđịnh.
-MapPath:chuyểnđườngdẫnảovàođườngdẫnvậtlý.
-URLEncode:ápdụngđịachỉURL.

1268.1.1.5QuảnlýASPvàSession
MộttrongnhữnglợiíchcủaASPlàcóphiênlàmviệc(Session)quảnlýtốt,đượcxây
dựngtrongchươngtrình.ĐốitượngSessionlàduytrìthôngtinlưutrữchonhữngphiênlàm
việccủangườidùngtrongvùngnhớtrênServer.NgườidùngđượccungcấpmộtSession
IDduynhấtmàASPsửdụngđểnốikếtcácyêucầucủangườidùngvớicácthôngtinđặc
biệtđếnSessioncủangườidùngđó.ĐiềunàychophépSessionnôíkếtcácyêucầucủa
nhữngtrangWeb.
CácthẻđịnhdạngcủaASP:
Cácđoạnmãchươngtrìnhđềuchưátrongthẻ<%và%>.Quiướcnàythườnglà
quenthuộcđốivớichúngtanếutalàmviệcvơíbấtcứloạilệnhserver-sidenàotrongHTML.
CácthẻnàythểhiệnphầnxửlýđoạnmãcủaASPthựcthivàchuyểnkếtquảtừserver.Thẻ
địnhdạngcủaASPcầndựavàomộtngônngữkịchbảnnàođóđểthểhiệnnhư:VBScript,
JavaScript...
8.1.1.6SơnétvềScriptingLanguage
Cungcấpnhiềucổngtruycậpvàochươngtrình.Việcdùngtrangweb
client-sidescriptpháttriểnđểcungcấptừtrangHTMLđộngđếntrangHTMLtĩnh.
JavaScriptlàngônngữkịchbảnđầutiên.VBScriptdoMicrosoftpháttriểnvàdựavào
ngônngữVisualBasic.ScriptingchạytrêntrìnhduyệtInternetExplorer3.0vàtrongtrình
NetscapeNavigator/Communication2.0.
InternetExplorer4.0hổtrợcảhaingônngữ:JScriptvàVBScript.
HìnhthứcngônngữkịchbảndựatrênnềntảngASP.ASPthựcthidowebserverhơn
làtrìnhduyệt.Ngônngữkịchbảncóthểđượcdùngđểtruycậpnhữngbitkhácnhauvà
nhữngmảngmàASPcungcấplàobject.
Nhậnxét:
KhônggiốngnhưCGI,ASPlàmộtngônngữlậptrìnhmáychủ,chươngtrìnhkếtnối
vớiwebserverthôngquavàibiếnmôitrườngvàthamsố.ASPtươngthíchvớiviệcnâng
cấpvớiwebservervàcảitạochươngtrình.ASPthíchhợpvớinhiềucáchthứckhácnhau,
cókhảnăngquantrọngnhấttrongviệcxửlýcácđốitượngđượcxâydựngsẵn.
CácưuđiểmcủaASPlà:
Cókhảnăngđọcđúngcáctrường(field)khicóyêucầuvàocủaHTML(Request)
Cókhảnăngxuấtracáctrường(field)Response.
NhiềukỹthuậtlưutrữtrạngtháithôngtinthôngquacácbiếnứngdụngSession.
KhảnăngtruycậpvùngtàinguyênvàcácđặcđiểmgiaotáccủaMTS(Microsoft
TransactionServer).
Truycậpvàihàmlinhtinhkháccóích.
Cókhảnănglàmrõràng,đơngiảncácHTMLvàmãScripttrongmộttậptinđơn.
8.1.2LậptrìnhvớiASP

127TrongphầnnàychúngtasẽtìmhiểuvềngônngữVBScript,cũnglàngônngữmặc
địnhtrongASPđãđượcgiớithiệuởtrên.
8.1.2.1Khaibáobiến.
-Khôngbắtbuộcnhưngnênkhaibáođểkiểmsoátvàbắtlỗi.
-Cúpháp:Dimbiến1,biến2…
-Đểkhaibáomảng:
a)Dima(10):chỉsốchạytừ0->10dođócó11phầntử.
b)Khikhaibáonênsửdụngcáctiềntố:
Boolean Bln
Byte Byt
Double Dbl
Integer Int
Long Lng
Object Obj
String Str
ADOcommandCmd
ADOconnectionCnn
8.1.2.2Khaibáohằngsố.
CONSTtênhằng=giátrị
8.1.2.3CácđốitượngxâydựngsẵntrongASP.
TrongASPcó5đốitượngphụcvụchoviệcsửdụngtoàncục.
+Request:LấythôngtintừUser
+Response:GửithôngtintừServertớiUser.
+Server:DùngđểđiềukhiểnIIS
+Session:Dùngđểlưutrữcácthôngtinnhưcáccàiđặt,thayđổichomộtphiênlàm
việchiệnthờicủaUser.
+Application:Dùngđểchiasẻcácthôngtincấpứngdụngvàđiềukhiểncácthiếtlập
chotoànbộquátrìnhchạyứngdụng
8.1.2.4CấutrúcđiềukhiểnlệnhvàHàm.
a)Cáccấutrúcđiềukhiển.
a.1)CấutrúcđiềukiệnIF..THEN..ELSE..IF
Cúpháp:
<%
If<Điềukiện1>then
<Cáccâulệnh>
Else
If<Điềukiện2>then

128<Cáccâulệnh>
Endif
Endif
%>
NgoàiracóthểsửdụngcấutrúcIF..THEN....ELSEIF...ENDIF
<%
If<Điềukiện1>then
<Cáccâulệnh1>
ElseIf<Điềukiện2>then
<Cáccâulệnh2>
Else
<Cáccâulệnh3>
Endif
%>
a.2)Cấutrúclựachọnselectcase…endselect
Cúpháp:
<%
SelectCase<tenbien>
Case<giatri1>
<Nhómlệnh1>
Case<giatri2>
<Nhómlệnh2>
Case<giatrin>
<Nhómlệnhn>
CaseElse
<Nhómlệnhn+1>
%>
Vídụ:Hiệnngàygiờtrênmáychủvàchobiếthômnaylàthứmấy?
a.3)Cấutrúclặptuầntựfor…next.
Dùngđểlặpvớisốlầnđãbiết,tuynhiêntacóthểngắtbằnglệnhEXIT
FOR.
Cúpháp:
<%
FOR<tenbien>=<giatridau>TO<Giatribien>STEP<Buocnhay>
NEXT
%>
a.4)CácCấutrúclặp.
a.4.1)DOWHILE….LOOP.

129Cúpháp:
<%
Dowhile<Dieukien>
<Cáccaulenh>
Loop
%>
a.4.2)WHILE….wend.
Cúpháp:
<%
While<Dieukien>
<Cáccaulenh>
Wend
%>
a.4.3)DO….Loopuntil
Cúpháp:
<%
DO
<Cáccaulenh>
Loopuntil<Điềukiện>
%>
b)MộtsốhàmhữudụngtrongASP.
b.1)CácHàmxửlývănbản
i.TRIM(xâuasstring):Bỏkhoảngtrắnghaiđầukítự
ii.LEFT(Xâuasstring,nasinterger):Lấybêntráixâunkítự.
iii.RIGHT(Xâuasstring,nasinterger):Lấybênphảixâunkítự.
iv.LCASE(Xâuasstring):Chuyểnxâuvềchữthường
v.UCASE(Xâuasstring):Chuyểnxâuvềchữhoa
vi.MID(xâuasstring,n1,n2):Lấyn2kítựtrongxâubắtđầutừvịtrín1.
vii.CSTR(Biến):Hàmchuyểnđổibiếnthànhkiểustring
viii.HàmJOIN/SPLIT(Xâuasstring,kítựngăncách):SẽNối/Cắtxâuhànhmột/nhiều
đoạnbằngcáchxácđịnhkítựngăncáchởtrênvàchocácđoạnđólầnlượtvàomộtmảng.
Vídu:
<%
x=”Hànội;Hảiphòng;TPHCM”
y=split(x,”;”)
Response.writey(0)
‘y(0)=”Hànội”
%>

130b.2)Cáchàmxửlýsố
i.SQR(n):Cănbậchaicủan
ii.INT(n):Lấyphầnnguyênn
iii.MOD:Phépđồngdư
iv.Toántử\:Chianguyên
v.Round(số,n):Làmtrònsốvớinchữsốthậpphân
vi.RND():Trảvềsốngẫunhiênbấtkìtrongkhoảng[0,1]
8.2ĐưacácđoạnScriptvàotrongtrangWeb
TrongASP,mặcđịnhngônngữscriptlàVbscript
NếumuốndùngJavascripttaphảichỉđịnhtagsscriptlanguagelàJavascript.
-Đốivớingônngữmặcđịnh,bạncóthểchỉdùngcặpdấu<%và%>đểchứađoạnlệnh
Script.
-VídụvềmộtđoạnlệnhVBScript:
<%If(Time>=#12:00:00AM#)then%>
GoodMorning!
<%Else%>
GoodAfternoon!
<%EndIf%>
-Hoặcbạncóthểchỉracụthểđangsửdụngngônngữnàobằngcáchsửdụngthẻ:
<Scriptlanguage=“tên_ngôn_ngữ”>
[lệnhviếtởđây]
</Script>
-ỞđâytênngônngữcóthếlàVBScripthoặcJavaScript(Jscript).
Vídụ:
<Scriptlanguage=“VBScript”>
Response.Write(“Xinchàocácbạn!”)
</Script>
8.3Thiếtlậpcácthưviệnprocedure,functioncho1ứngdụngWEB
ThủtụcvàhàmtrongASPcóthểchèntạivịtríbấtkỳcủatrangWeb,tuynhiênđốivới
mộtsốtrườnghợp,mộtsốhàmvàthủtụccóthểđượcdùngđidùnglạinhiềulầntrong
nhiềutrangwebthìviệcđịnhnghĩalạicácthủtụcvàhàmnàysẽmấtnhiềuthờigianvà
côngsức.Vìvậybạnnênxâydựngmộtthưviệnhàmvàthủtụcchoriêngmìnhđểkhicần
thìsẽdùngđến.Chẳnghạn,khibạnmuốnxâydựngmộtđềánwebcó10trang,mỗitrang
đềuphảicóthủtụcđểkiểmtramậtkhẩuđăngnhập,nhưvậybạnnênđịnhnghĩathủtục
nàytrongmộtthưviệnsẽthuậnlợirấtnhiềuchoviệcpháttriểnvàchỉnhsửa.
8.3.1Địnhnghĩathủtục
Cúpháp:
Sub<tênthủtục>

131[Nộidungthủtục]
EndSub
Vídụ:
SubHienThi(hoten)
Response.Write(hoten)
EndSub
8.3.2Địnhnghĩahàm
Cúpháp:
Funtion<tênthủtục>
[xửlý]
<kếtquảtrảvề>
EndFuntion
Vídụ:
FuntionTongDaySo(n)
Dimi,S
S=0
Fori=1ton
S=S+i
Next
TongDaySo=S
EndFuntion
8.3.3Sửdụngthưviệnhàm,thủtục
Saukhiđịnhnghĩathưviệnhàmvàthủtụccủariêngbạn(lưuýlàtậptinthưviệnphải
códạngTextcóphầnmởrộngbấtkỳ),đểsửdụngđượcthưviệnhàmvàthủtụcnày,bạn
dùngthẻ:
<!--#includefile=tên_tập_tin_thư_viện-->
đểchènthưviệntạivịtrínàotrongtrangwebmàbạnmuốn.
8.4Mộtsốbàitậpứngdụngmẫu
Vídụ1:Giảihệphươngtrìnhbậcnhất 0 B(trongđócáchệsốA,Bđượclấyngẫy
nhiên).Xuấtkếtquảratrìnhduyệt.
%@Language=VBScript%>
<HTML>
<BODY>
<%
DimA,B
Randomize

132A=Round(RND()*10)‘Tạosốnguyênngẫunhiêutrongkhoản[0,10]
B=Round(RND()*10)‘Tạosốnguyênngẫunhiêutrongkhoản[0,10]
IF(A=0)Then
IF(B=0)Then
Response.Write(“Phuongtrinhcovosonghiem!”)
ELSE
Response.Write(“Phuongtrinhvonghiem!”)
EndIF
ELSE
Response.Write(“Phuongtrinhco1nghiemla:”&B/A)
EndIF
</BODY>
</HTML>
Vídụ2:Thưviệnhàmvàthủtục
-Trướctiên,bạntạomộttậptintênlàthuvien.inccónộidungnhưsau:
SubHienThi(hoten)
Response.Write(hoten)
EndSub
FuntionTongDaySo(n)
Dimi,S
S=0
Fori=1ton
S=S+i
Next
TongDaySo=S
EndFuntion
-Bâygiờtrongtậptinthứ2tênlàungdung.asp,tađưavàodònglệnhsau:
%@Language=VBScript%>
<HTML>
<BODY>
<STRONG>DAYLATRANGWEBSUDUNGTHUVIENHAM-THUTUC
TIEN</STRONG><br>
<!--#includefile=”thuvien.inc”-->
<%
Dimten,n
ten=“NguyenVanA”

133CallHienThi(ten&“<br>”)
n=10
Response.Write(“Tổngdãysố:”&TongDaySo(n))
</BODY>
</HTML>
Bàithựchànhsố8:
TạomộtWebProject(đặttênlàDieuKhien)
1)ThêmvàoprojectmộttrangBai1.aspcómộtđoạnlệnhđểthựchiệncôngviệcgán
mộtgiátrịngẫunhiênchobiếnnguyênn.Nếunlàchẵnthìxuấtratrìnhduyệtgiátrị2*n,
nếunlẽthìxuấtran*n.
2)ThêmvàoprojecttrangBai2.aspcómộtđoạnlệnhđểthựchiệngánmộtdãysốngẫu
nhiênchomộtmảngAgồm10phầntử,sauđóxuấtgiátrịcủacácphầntửcủamảngra
trìnhduyệt.

134BÀI9:ỨNGDỤNGKỸTHUẬTLẬPTRÌNH
XÂYDỰNGTRANGWEB
Mụctiêuthựchiện:
Họcxongbàinàyhọcviênsẽcókhảnăng:
-XâydựngmộttrangWebbằngcácphốihợpđược2kỹnăng:bằngcáchsửdụngmột
phầnmềmứngdụngtạoWebvàdùngcácngônngữkịchbảntạohiệuứngchotrangWeb
đápứngyêucầuthựctế.
9.1NhắclạicáccâulệnhSQL
9.1.1CREATETABLE:tạotablemới
CREATETABLETableName(FieldName1FieldType[(nFieldWidth[,nPrecision])]
[NULL|NOTNULL][,FieldName2FieldType[(nFieldWidth[,nPrecision])][NULL|NOT
NULL]...)
TableName:chuỗikhoảng30kýtự.
FieldName1,FieldName2:têncộtkhoảng30kýtự.
FieldType:Kiểucột.
Tênkiểu(FieldType) Diễngiải
numeric sốgồmphầnnguyênvàphầnthậpphân
char kiểukýtựcóđộdàitốiđa255kýtự
datetime kiểungàygiờ
int kiểusốnguyên
real kiểusốthực
text kiểumemo,text
image kiểuhìnhảnh
float kiểufloat
NULL:Là1mụcvàokhôngcógiátrịrõràng.NULLkhôngphảilà0hoặctrống.
Vídụ:CREATETABLEVidu(
sonumeric(10,2)NULL,
chuoichar(255)NULL,
ngaydatetimeNULL,
nguyenintNULL,
thucrealNULL,
vanbantextNULL,
anhimageNULL,
sofloatfloatNULL
9.1.2SELECT:truyvấndữliệucáctable
SELECT[Alias.]Select_Item[ASColumn_Name][,[Alias.]Select_Item[AS
Column_Name]...]
FROM[DatabaseName!]Table[INNERJOINDatabaseName!]Table[ON
JoinCondition…]

135[WHEREJoinCondition[ANDJoinCondition...][AND|ORFilterCondition[AND|OR
FilterCondition...]]]
[GROUPBYGroupColumn[,GroupColumn...]]
[HAVINGFilterCondition]
[UNION[ALL]SELECTCommand]
[ORDERBYOrder_Item[ASC|DESC][,Order_Item[ASC|DESC]...]]
Thamsố:
SELECTchỉđịnhtrường,hằngvàbiểuthứcxuấthiệntrongkếtquảtruyvấn.
Alias.Bídanhtable.
Select_Itemchỉđịnh1mụcđượcbaogồmtrongkếtquảtruyvấn.Mụccóthểlà:
-TêntrườngcủatabletrongmệnhđềFROM.
-1hằngchỉđịnhcùng1giátrịchotấtcảcáchàngtrongkếtquảtruyvấn.
-1biểuthứccóthểlàhàmtựtạo.
-AVG(Select_Item),tínhtrungbìnhSelect_Item.
-COUNT(Select_Item),đếmsốlầnxuấthiện.COUNT(*)đếmsốhàngtrongkếtquảtruy
vấn.
-MIN(Select_Item),tínhgiátrịnhỏnhất.
-MAX(Select_Item),tínhgiátrịlớnnhất.
-SUM(Select_Item),tínhtổngcácsố.
ASColumn_NameChỉđịnhtiêuđềcủa1cộttrongtablekếtquảtruyvấn.
FROMLiệtkêcáctablechứadữliệucầntruyvấn.
DatabaseName!chỉđịnhtêncủaCSDLchứatable.
INNERJOINchỉđịnhkếtquảtruyvấnchỉchứacáchàngtừ1tabletrùngvới1hoặc
nhiềutrongtablekia.
ONJoinConditionchỉđịnhcácđiềukiệnkểcáctablenốilại
WHEREChỉcáchàngcóthỏamãnđiềukiệnđiliềnsauWHEREmớiđượcthựchiện
truyvấn.
BạndùngtoántửAND/ORđểkếtnốicùnglúcnhiềuđiềukiệnkhácnhau.
Cáctoántửsosánh:
Kýhiệu Tươngđương
= Bằng
== Chínhxácbằng
LIKE SQLLIKE
<>,!=,# Khôngbằng
> Lớnhơn
>= Lớnhơnhoặcbằng
< Nhỏhơn
<= Nhỏhơnhoặcbằng
GROUPBYGroupColumn[,GroupColumn...]Cácnhómhàngtrongcâutruyvấndựa
trêngiátrịtrên1hoặcnhiềucột.GroupColumndựtrênthứtựliệtkêra.

136HAVINGFilterConditionChỉđịnhđiềukiệnlọcnhómtrongkếtquảtruyvấn.
[UNION[ALL]SELECTCommand]Kếthợpkếtquảcuốicùngcủa1SELECTvới1
SELECTkhác.
ALLngănUNIONghépnối2lầncáchàngtừkếtquảUNION.
Vídụ:
SELECTcustomer.company,orders.order_id,orders.emp_id;
FROMcustomer,orders;
WHEREcustomer.cust_id=orders.cust_id;
UNION;
SELECTcustomer.company,"","";
FROMcustomer;
WHEREcustomer.cust_idNOTIN;
(SELECTorders.cust_idFROMorders)
ORDERBYOrder_ItemSắpxếpkếtquảtruyvấntheothứtựOrder_Item.
ASCsắpxếptăngdần
DESCsắpxếpgiảmdần.
9.1.3INSERT:thêmdữliệu(hàng)vàotable
INSERTINTOdbf_name[(fname1[,fname2,...])]VALUES(eExpression1[,
eExpression2,...])
dbf_name:têntablemàdữliệusẽthêmvào,lệnhnàytựthêm1hàngmớivàgángiátrị
vào.
fname1,fname2:têncáccộttrongtable
eExpression1,eExpression2:biểuthứcsaukhitínhthànhgiátrịsẽđưavàotừngcột
tươngứngđãchỉđịnh.
Vídụ:
R_Don_Vi="CtyÐB-ÐT"
R_Ho_Ten="LêThịThuHoài"
R_Username="thuhoai"
R_Password="thuhoai"
INSERTINTODHTT_Login(Don_Vi,Ho_Ten,Username,Password)VALUES
(R_Don_Vi,R_Ho_Ten,R_Username,R_Password)
9.1.4UPDATE:Gángiátrịmớicho1hoặcnhiềuhàngcủatable.
UPDATE[DatabaseName!]TableNameSETColumn_Name1=eExpression1[,
Column_Name2=eExpression2...]WHEREFilterCondition1[AND|ORFilterCondition2...]]
[DatabaseName!]TableName:tênCSDLvàTablethuộcCSDL.
SETColumn_Name1=eExpression1,...:gángiátrịeExpression1cho
Column_Name1,...
WHEREFilterCondition1[AND|ORFilterCondition2...]:chỉđịnhcáchàngthoảmãn
điềukiệnFilterCondition1và/hoặcFilterCondition2mớiđượcgángiátrịmới.
Vídụ:
UPDATEDHTT.DHTT_LoginSETUsername=R_Username_Moi,Password=

137R_Password_MoiWHEREUsername=R_Username_CuANDPassword=
R_Password_Cu
9.1.5DELETE:
DELETEFROM[DatabaseName!]TableName[WHEREFilterCondition1[AND|OR
FilterCondition2...]]
[DatabaseName!]TableName:tênCSDLvàTablethuộcCSDL.
WHEREFilterCondition1[AND|ORFilterCondition2...]:chỉđịnhcáchàngthoảmãn
điềukiệnFilterCondition1và/hoặcFilterCondition2mớibịxoá.
Vídụ:
DELETEFROMDHTT.DHTT_LoginWHEREDon_Vi=R_Don_Vi_XoaAND
Ho_Ten=R_Ho_Ten_Xoa
9.2CáclệnhliênkếtCSDL
9.2.1KếtnốicơsởdữliệuDSN(DataSourceName)quađốitượngRecordset
+Hiểnthịthôngtinratrìnhduyện
Dimrs
Setrs=Server.CreateObject(“ADODB.Recordset”)
Rs.Open“SINHVIEN”,“DSN=QLSV”
Rs.MoveFirst
DoWhileNotrs.EOF
Response.Write(rs(“HoTen”)
Response.Write(…………….)
Rs.MoveNext
Loop
Rs.Close
Setrs=Nothing
+Tìmkiếmđểcậpnhậtcácbảnghitrongcơsởdữliệu
CONSTadOpenDynamic=2
CONSTadLockPessimistic=2
Dimrs
Setrs=Server.CreateObject(“ADODB.Recordset”)
Rs.Open“SINHVIEN”,“DSN=QLTV”,adOpenDynamic,adLockPessimistic
Rs.Find<điềukiện>
IfNotrs.EOFthen
<cậpnhậtthôngtin>
Else

138<thôngbáokhôngtìmthấy>
EndIf
Rs.Close
Setrs=Nothing
9.2.2KếtnốitrựctiếpđếncơsởdữliệubằngchuỗikếtnốiquađốitượngConnection:
*VớiMicrosoftAccess:
Dimconn
Setrs=Server.CreateObject(“ADODB.Connection”)
conn.Open"Provider=Microsoft.Jet.OleDB.4.0;Datasource=c:\thuchanh\qltv.mdb;"
*VớiMicrosoftSQLServer:
Dimconn
Setrs=Server.CreateObject(“ADODB.Connection”)
conn.Open"Provider=SQLOLEDB;Datasource=servername_or_address;Initial
Catalog=database_name;UserID=username;password=password"
CáccôngviệccònlạigiốngnhưkhikếtnốiquanđốitượngDSN.
9.3Mộtsốbàitậpứngdụngmẫu
Vídụ1:MởcơsởdữliệuQuảnlýSinhviênvàbổsungvàobảngSINHVIENmộtbản
ghi,sửdụngđốitượngRecordset:
<%@Language=VBScript%>
<HTML>
<BODY>
<%
constadOpenDynamic=2
constadLockPessimistic=2
dimrs
setrs=server.CreateObject("ADODB.Recordset")
rs.Open"SINHVIEN","DSN=QLSV",adOpenDynamic,adLockPessimistic
rs.AddNew
rs("MaSV")="12"
rs("TenSV")="LeThanhThuy"
rs.Update
rs.Close

139Setrs=Nothing
%>
</BODY>
</HTML>
Vídụ2:MởcơsởdữliệuQuảnlýHọcviênvàbổsungvàobảngHOCVIENmộtbảnghi,
sửdụngđốitượngConnection:
<%@Language=VBScript%>
<HTML>
<BODY>
<%dimconn
setconn=server.createobject("adodb.connection")
conn.Open"Provider=SQLOLEDB;Datasource=localhost;Initialcatalog=QLHV;
UserID=sa;password="
dimstrSQL
strSQL="INSERTintoHOCVIEN(maHV,HotenHV,MaLop)”
strSQL=strSQL&“Values('006','NguyenVanTrinh','T01')"
conn.execute(strSQL)
response.write("Bandathemmothocvien!")
conn.close
setconn=nothing
%>
</BODY>
</HTML>
Vídụ3:HiểnthịtấtcảhọcviêncótênlàTrang.
<%@Language=VBScript%>
<HTML>
<BODY>
<%dimconn
setconn=server.createobject("adodb.connection")
conn.Open"Provider=SQLOLEDB;Datasource=localhost;Initialcatalog=QLHV;

140UserID=sa;password="
dimstrSQL
strSQL="SELECT*FROMHOCVIENWHEREHotenHVLike‘%Trang’”
Dimrs
Rs=conn.execute(strSQL)
response.write("DanhsáchhọcviêntênTrang!<br>")
Rs.MoveFirst
DoWhileNotrs.EOF
Response.Write(“Mãhọcviên:”&rs(“MaHV”)&“<br>”)
Response.Write(“HọtênHV:”&rs(“HotenHV”)&“<br>”)
Rs.MoveNext
Loop
Rs.Close
Setrs=Nothing
conn.close
setconn=nothing
%>
</BODY>
</HTML>
Bàithựchànhsố9:
1)ThiếtkếbiểumẫuchophépnhậpthôngtinthànhviênvàocơsởdữliệugồmHọvà
tên,ngàysinh,địachỉ,tênsửdụng,mậtkhẩu.
2)Thiếtkếbiểumẫuchophépnhậphọvàtênhọcviênđểtìmkiếmvàhiểnthịthôngtin
tìmthấyratrìnhduyệt.
BÀI10:LIÊNKẾTTRANGWEBĐẾNHỆCSDL

141XÂYDỰNGCÁCTRANGWEBĐỘNG
BẰNGMACROMEDIADREAMWEAVERMX2004
Mụctiêuthựchiện:
Họcxongbàinàyhọcviênsẽcókhảnăng:
-NhúngđượccácformcótrongtrangWebđếnmộthệCSDL
-ChuyểnthôngtintừgiaodiệnnhậpđếnhệCSDLđãđượcthiếtkế
ChuyểntảithôngtintừCSDLđếntrangWeb
10.1Xâydựngtrangmaster(trangchính)vàdetail(chitiết)bằngchứcnăngDetailPage
B1:Tạomớitrangvàđặttênmaster
B2:Chènmộtsốtrườngcơsởdữliệu(field)
B3:Tạoliênkếtxemtiến,lùi(RECORDSETNAVIGATIONBAR)
hình1:Tạoliênkếtxemtiến,lùi
B4:Tạotrangdetail
B5:Lấytoànbộcácdữliệuliệuxuốngvùngthiếtkế
B6:TrởlạitrangMastertạoliênkếtdetailnhưsau

142
hình2:tạoliênkếtdetailpage
hình3:detailpage
(TrongđóPassURLparameterchínhlàtrườngtrunggiangiữa2trangcóthểthayđổi
tuỳthích,chọnphươngpháptruyềndữliệuURLhoặcForm…)
B7:MởlạitrangDetailthêmphầnFilternhưsau
hình4:trangDetail

14310.2TạotrangmastervàdetailbằngchứcnăngMasterDetailPageSet
B1:Tạomới2trangđặttênlầnlượtlà:mastervàdetail
B2:TạitrangmastersửdụngchứcnăngMasterDetailPageSet.
hình6:MasterDetailPageSet
10.3Bàithựchànhcơsởdữliệu
10.3.1Tạomộtsitemới
Bước1:
-VàomenuSite\Managesite\New…\Site
hình7:AdvancedLocalInfo

144Bước2:
TạokếtnốikhôngsửdụngODBC
<%
dimcn
setcn=server.createObject("ADODB.Connection")
cn.ConnectionString="Provider=Microsoft.Jet.OLEDB.4.0;DataSource="&
Server.MapPath("Tracnghiem.mdb")
cn.open
dimrs
setrs=server.createObject("ADODB.Recordset")
‘CopyfileadovbstừD:\ProgramFiles\CommonFiles\System\adosang
D:\InetPut\wwwroot
<!--includefile="adovbs.inc"-->
rs.open"Select*FromCauHoi",cn
whilenotrs.eof
Response.writers("Question")&"<br>"
rs.MoveNext
wend
%>
10.3.2Chènthẻ<%Includevàotrang
View\Toolbars\Insert
Trênthanhinsert,chọnHTML
Kíchnútcuốicùng“Script….”
Chọn“Server–sideinclude..”
hình8:chọnServer–sideinclude
10.3.3Chènđốitượngvàtạokếtnốicơsởdữliệu
1.TạodữliệuchoMenuList
oChènList/Menu:vàoInsert->Form->List/Menu
oChọnList/Menu
oVàomenuInsert\ApplicationObjects\DynamicData\DynamicSelectlist

145
hình9:TạodữliệuchoMenuList
oNhắpchọnRecordset
hình10:DynamicList–menu-labels
oTừOptionsfromrecordset,hãychọntênRecordset1đãthiếtlậptrướcđó(lưuý
tênđốitượngRecordsetcóthểkháctùythuộcvàoviệcbạnđặttên)
oValuesvàlabels:chọntrường->OK
2.ChènTextField
o Kíchnút:BindToDynamicSource
o Chọntrườngdữliệu
hình11:DynamicData-question

146Hoặc
-Tạocáctext,list,….,kíchchọnđốitượngrồithựchiệntiếp..
-VàomenuInsert\ApplicationObjects\DynamicData\chọntrườngdữliệu
3.TạoNavigationBar
Navigationbar:làdạngliênkếtNext;Priview;Last;Firts
KíchnútInsert\ApplicationObjects\RecordsetPaging\RecordsetNavigationbar
ẤnOK.
hình12:RecordsetNavigationbar
4.TạoNavigationstatus
Làthanhtrạngtháihiểnthịbảnghihiệnthờivàtổngsốbảnghi
KíchnútInsert\ApplicationObjects\DisplayRecordCount\RecordsetNavigation
Status.
5.Tạobảnghiểnthịtoànbộdữliệucủacáctrường
Tạobảngsauđóchèntrườngvàotrongbảngdữliệu
Bảngchỉhiểnthịdữliệucủabảnghiđầutiên
Chọntab:Application\ServerBehaviors\
Kíchnút(+)chọntiếp:RepeatRegion->OK
MuốnsửađổikíchđúpvàotênđốitượngtrongtabServerBehaviorscủacửasổ
Application
hình13:reperatRegion
10.3.4Tạotrangchènmớidữliệu
TạomớimộtForm,chèncáctextbox,Submit,….
TrongcửasốApplication,chọntab:ServerBehavior,kíchnút(+)chọnlệnh:Insert
Record
Connection:chọnkếtnối
Insertintotable:chọnbảngchứatrườngcầntạomớibảnghi
Formelements:chọntextboxtrênform-columnchọntrườngcầncậpnhật->OK.

147
hình14:insertRecord
10.3.5Tạotrangchèndữliệutựđộng
VàomenuInsert\ApplicationsObjects\InsertRecord…\InsertRecordFormWizard
hình15:InsertRecordFormWizard
Connections:chọnkếtnối
Insertintotable:chọnbảngcầnchèndữliệu
Formfields:chọncáctrườngcầncậpnhật(thêm/bớtbằngcáchkíchnút+hoặc-)
10.3.6TạotrangDeletedữliệu
Tạokếtnốitớicơsởdữliệu
ChènFormvàcáctextbox,submitliênkếtdữliệutớicáctextbox
VàomenuInsert\ApplicationsObjects\DeleteRecord…

148
hình16:DeleteRecord
->Luônxoácácbảnghiđầutiên;
-SửađổitênmặcđịnhMM_recordIdthànhtêncủatextboxcầnxoá
MM_recordId=“’”+Request.Form(“ten”)+“’”
10.3.7Tạotrangđăngnhập(LogIn)
TạotrangSucvàtrangError
TạotrangLogbaogồm:mộtForm,haitextbox,mộtSubmit.
VàomemuInsert\ApplicationsObjects\UserAuthentication\LogInUser.
hính17:Tạotrangđăngnhập
10.3.8Tạotrangchỉnhsửa(cậpnhật)dữliệu
Điềukiện:CơsởdữliệukhôngcótrườngAutoNumber
Insert\ApplicationsObjects\UpdateRecord\RecordUpdateFormWizard->OK

14910.3.9Tạotrangtìmkiếmhiểnthịdữliệungaydướiformtìm
hình18:giaodiệntrangtìmkiếmhiểnthịdữliệu
TạomộttrangmớiRecordsettrongtabBindingsthiếtlậpnhưsau:
hình19:RecordsettrongtabBindings
Bổxungthêmđoạnsauvàocodecủatrangdướicùng
dimten
ifrecordset1.eofthen
ten="Khôngcó"
else
ten=recordset1("ten")
endif

150
hình20:đoạncodecầnthêm
10.3.10Tạotrangtìmkiếmsửdụngapplicationobject
Tạoform,table,textbox,button,….
Chọntab:Bindingsthiếtlậpnhưsau:
hình21:Chọntab
Kéocácfieldvàobảngđãtạo,bôiđenhàngchứafield:

151
hình22:Showifrecordsetnotempty
MụcCheckNewUserName
TạoforminsertRecordsửdụngnewusername->OK
hình23:TạoforminsertRecordsửdụngnewusername
10.3.11TạotrangMastervàtrangDetailkhikhôngcódữliệutạomớihoàntoàn(Kích
vàoliênkếttrêntrangMasterchitiếthiểnthịtạitrangDetail)
Mở2tranglưulầnlượttênMastervàDetail
TạitrangmastertạoRecordset
Kíchnút:MasterDetailpagesetđiềnnhưsau:

152hình24:MasterDetailpageset
10.3.12Tạotrangmastervàdetailkhiđãcódữliệu
Tạo2trangđặttênlầnlượtlà:mastervàdetail
Trangmasterchèndữliệuchomộtngười,dùnglệnhsau:
hình25:dùnglệnhDeralpage
hình26:gotodeailPage
Trangdetailxácđịnhthuộctínhrecordsetnhưsausaođókéocáctrườngdữliệuxuống
form.

153
hình26:địnhthuộctínhrecordsetnhưtrên
CóthểtruyềndữliệuquaphươngthứcParameterhoặcFormchỉcầnchọntươngứng
cả2bên.
10.3.13Tạokếtnốibằnglệnh
Tạoconnectionnhưbìnhthường
Copyđoạncodenhúngfilekếtnốivàosauthẻlanguage
hình27:đoạncodecầnnhúng
copyđoạncodebịbôiđenvàosauthẻhead
hình28:copyđoạncodebịbôiđenvàosauthẻhead

154đóngkếtnối
hình29:lệnhđóngkếtnối
10.3.14CHÈNFLASH
10.3.14.1TạonútFlash
Kíchnút:MediaFlash
ChọnFlashButton
hình30:insertflashbotton
10.3.14.2TạodòngtitlebằngFlash

155
hình31:insertFlashText
10.3.15TạokếtnốivớicơsởdữliệuAccess
-Kíchnút(+)chọn:OLEDBConnection
-KíchnútBuilt\chọntiếpTab:Provider
-Tìmđếndòngthứhai:‘MicrosoftJet4.0OLEDBProvider’\Next
-Kíchnút….ChọnfiledữliệuAccess
-Đánhdấuthêmvàophần:ReadWrite\OK.
-Đặttênkếtnốitrongphần:ConnectionName:\OK
Hoặcdùngchuỗikếtnối:
Provider=Microsoft.Jet.OLEDB.4.0;DataSource=D:\Inetpub\wwwroot\database\bt1.mdb;
Cáchtạohộpthôngbáokhinạptrang
ẤnF9mởtab:Inpectorchọnthẻbehaviors
Kíchdấu+chọnpopupmessage
Gõnộidung->OK
(KíchnútshowallEvents)

156
hình32:popupmessenge
10.3.16Viếtchữlênthanhtrạngthái(đáytrang)
ẤnF9chọnthẻBehaviorchọnsettextchọntiếpsettextofstatusbar
Nhậpchữ->OK

157hình33:settextofstatusbar
TạoJumpMenu
hình34:TạoJumpMenu
hình35:JumpMenu
Phầntexthiểnthịtêntrongmenu,urlđườngdẫntớitrangđượcmở(đểmặcphầntên
mặcđịnhtrongphầntextkíchnútbrowsechọnfilecầnmởphầntextsẽtựđộnghiểnthịtên)
Muốnhiểnthịnútgotheosaumenuđánhdấuvàolựachọn“Insertgobuttonaftermenu”
SauđóấnShift+F4,kíchchuộttráivàojumpmenutrongcửasổBehaviorskíchvào
dòngonchangekíchvàodấu–đểloạibỏdòngnày.Kíchnútgosẽthấythuộctínhonclick
củanútGo.
10.3.17SửdụngFreemenubluestyle1cấp(thayđổichiềurộng)

158Bước1:
Chènfreemenutừmenucommands
hình36:Chènfreemenu
Bước2:
MởcửasổcodehoặcthanhPropertiessửathuộctínhwidthcủabảngthành9%
hình37:sửathuộctínhwidthcủabảng
10.3.18Thayđổimàusắc(chữ,màunền,OnmouseOver,textOver,…)
a.Đổimàuchữchomenu
Đặtchuộtởmộttrongcácôbấtkỳ
Ctrl+F3bậtcửasổProperties
PhầnstylecủaPropertieskíchchọnManagestyle

159
hình38:chọnManagestyle
Chọntiếpcáithứ3tronghộpstylekíchnútEdit,colorđổimàuchữ
hình39:colorđổimàuchữ
CategorychọnBackgroundđổimàunền
Thunhỏkhoảngcáchtrên,dưới,trái,phảicủamenu,thayvìphảisửaởcửasổcode
hình40:category-Box

160Category:Border->Top,Bottom:solidkhoảngcáchgiữacácmenu
hình41:Category:Border->Top,Bottom
10.3.19TạohiệuứngHover
TrongcửasổManagechọncáithứ4
MụcCategorychọntiếpmục4–Box:sửađổitopvàbottom;
hình42:boxbottom
10.3.20Tạomenuthunhỏ(cDaughterMenu)
BấmvàođườngviềncủabảngCtrl+F3,phầnClasscDaughterMenu
VàoManagestyle,chọncáithứ5->Edit
MụcCategorychọnbox,sửađổiwidththành10%;
10.3.21Tựtạomenufreemenustyle
TạomớiCssStyles

161Đặttên:.Menua,chọn:Advance–lưucssvàoFolderCssriêng
hình43:Tựtạomenufreemenustyle
Thiếtlập1thuộctínhchothẻanhưhìnhtrên
Tạotiếpthẻ:.Menua:link,.Menua:visited
Thiếtlậpcáctuỳchọn
Font,đậm,màuchữ,màunền,Boxđườngbotrêndướitráiphảicủamenu
Border:Top,bottom,width=1,màuviền,…
Tạothẻ:.Menua:hover(khidichuyểnchuộtlênmenunàysẽxảyrabiếncốđổimàu
chữvàmàuviềntrêndướicủamenu)
Đổimàuchữđườngviền,màu,…
10.3.22TạoPopUpmenu
Đặtchuộttạihìnhảnh,mởbảngtagchọnBehaviors,kíchdấu+chọntiếpShowPopUp
Menu
10.3.23SửdụngCss
A:link–loạibỏđườnggạchchândướiliênkết
A:visited-loạibỏđườnggạchchânsaukhikíchvàoliênkết
A:hover–thayđổihiệuứngkhiđưachuộtlênliênkết
Img–huỷbỏviềnđốivớiliênkếtlàdạngảnh
10.3.24Đổifontchữchocombobox…
SELECT{FONT-SIZE:11px;COLOR:#000066;FONT-FAMILY:tahoma,verdana}
INPUT{FONT-SIZE:11px;COLOR:#000066;FONT-FAMILY:tahoma,verdana}
INPUT:unknown{FONT-SIZE:11px;COLOR:#000066;FONT-FAMILY:tahoma,
verdana}
TEXTAREA{FONT-SIZE:11px;COLOR:#000066;FONT-FAMILY:tahoma,verdana}
Bàithựchànhsố10:
-Tạotrangwebtheomẫusau:

162
hình44:hìnhminhhoạ
Tạomới1trangnềnthiếtlậpmàu:#E0E0E0,lềthiếtlập:0toànbộ;
hình45:AppearanceBakgroundcolor
Tạomới1bảngvớithôngsốnhưsau,sauđóchọnalignCenter
hình46:tabtablewidth
Chọncả2ôcủabảngchọnalignTop;tạomớitiếpmộtbảngnữadài184cao129ảnh

163nềnchọnlogo2ởôđầutiêncủabảng1;
Ôthứ2củabảng1tạomớibảngthứ3rộng100%gồm5hàng1cột;
Trongbảngnàytạomớitiếpbảngthứ4gồm5cộtrộng100%,lầnlượtchèn5ảnhnút
(Home,New,…vàotrong)
Hàngthứ2củabảng4thiếtlậpảnhnềnfon_top01,chiềucao37
Tạomớitiếpbảngthứ5với5cột1dònglầnlượtchènảnhchungeo1vào5ôđãtạo,áp
dụngvàstylesau(size11;padding:bottom:1,Margin:Top:1,right=10,bottom=0,left=10)-
>class;
TạotrangleftCategories
Chènbảngdài165gồm3hàng,ảnhnềncủabảnglàfont_left02
Ôđầutiêncủabảngcao26,nềnlàleft01,sửdụngcss:font11,đậm
hình47:Box
chọncsstừstylegõchữ:categories
Ôthứ2củabảnggõlệnh:
<%dowhilenotrecordset1.eof
loop%>
ápdụngcssthứ2
hình48:BoxMargin
chènảnhmũitêneo2,chèntrường(namecategories),đóngthẻcss

164CÁCTHUẬTNGỮCHUYÊNMÔN
-HTML(HyperTextMarkupLanguage):ngônngữđánhdấusiêuvănbản
-Type:kiểu
-Tag:thẻ
-Multimedia:đaphươngtiện
-Frame:khung
-Table:bảng
TÀILIỆUTHAMKHẢO
-GiáotrìnhthiếtkếWeb–KhoaCNTT–TrườngĐạihọcCầnthơ
-KỹthuậtlậptrìnhASP3.0–NhàxuấtbảnThốngkê
-Websitehttp://www.asp.net
-Websitehttp://www.vovisoft.com

WEB DEVELOPMENTLearning PHP, MySQL & JavaScript
ISBN: 978-1-491-91866-1US $49.99  CAN $52.99“Thisisagreat beginner's 
book thatintroduces 
several crucial web
developer languages. 
It'saquick-paced, easy-
to-read, information-
packed book thatwill
soon have youcreating 
dynamically driven web-
sites, including abasic 
social networking site.”
—Albert Wiersch
developer of CSE HTML Validator
Twitter: @oreillymedia
facebook.com/oreillyBuild interactive, data-driven websites with the potent combination of 
open-source technologies and web standards, even if you have only basic 
HTML knowledge. With this popular hands-on guide, you’ll tackle dynamic 
web programming with the help of today’s core technologies: PHP , MySQL, 
JavaScript, jQuery, CSS, and HTML5. 
Explore each technology separately, learn how to use them together, and 
pick up valuable web programming practices along the way. At the end of 
the book, you’ll put everything together to build a fully functional social 
networking site, using XAMPP or any development stack you choose.
 ■Learn PHP in-depth, along with the basics of object-oriented 
programming
 ■ Explore MySQL, from database structure to complex queries
 ■ Use the MySQLi Extension, PHP’s improved MySQL interface 
 ■ Create dynamic PHP web pages that tailor themselves to  
the user
 ■ Manage cookies and sessions, and maintain a high level  
of security
 ■ Master the JavaScript language—and enhance it with jQuery
 ■ Use Ajax calls for background browser/server communication 
 ■ Acquire CSS2 & CSS3 skills for professionally styling your  
web pages
 ■ Implement all of the new HTML5 features, including 
geolocation, audio, video, and the canvas
Robin Nixon , an IT journalist who has written hundreds of articles and several 
books on computing, has developed numerous websites using open source tools, 
specializing in the technologies featured in this book. Robin has worked with and 
written about computers since the early 1980s.
Robin NixonLearning
 P H P,  M y S Q L
& JavaScript
WITH JQUERY, CSS & HTML5
4th Edition
with jQuery
Learning PHP,  
MySQL & JavaScript
FOURTH EDITIONNixon

WEB DEVELOPMENTLearning PHP, MySQL & JavaScript
ISBN: 978-1-491-91866-1US $49.99  CAN $52.99“Thisisagreat beginner's 
book thatintroduces 
several crucial web
developer languages. 
It'saquick-paced, easy-
to-read, information-
packed book thatwill
soon have youcreating 
dynamically driven web-
sites, including abasic 
social networking site.”
—Albert Wiersch
developer of CSE HTML Validator
Twitter: @oreillymedia
facebook.com/oreillyBuild interactive, data-driven websites with the potent combination of 
open-source technologies and web standards, even if you have only basic 
HTML knowledge. With this popular hands-on guide, you’ll tackle dynamic 
web programming with the help of today’s core technologies: PHP , MySQL, 
JavaScript, jQuery, CSS, and HTML5. 
Explore each technology separately, learn how to use them together, and 
pick up valuable web programming practices along the way. At the end of 
the book, you’ll put everything together to build a fully functional social 
networking site, using XAMPP or any development stack you choose.
 ■Learn PHP in-depth, along with the basics of object-oriented 
programming
 ■ Explore MySQL, from database structure to complex queries
 ■ Use the MySQLi Extension, PHP’s improved MySQL interface 
 ■ Create dynamic PHP web pages that tailor themselves to  
the user
 ■ Manage cookies and sessions, and maintain a high level  
of security
 ■ Master the JavaScript language—and enhance it with jQuery
 ■ Use Ajax calls for background browser/server communication 
 ■ Acquire CSS2 & CSS3 skills for professionally styling your  
web pages
 ■ Implement all of the new HTML5 features, including 
geolocation, audio, video, and the canvas
Robin Nixon , an IT journalist who has written hundreds of articles and several 
books on computing, has developed numerous websites using open source tools, 
specializing in the technologies featured in this book. Robin has worked with and 
written about computers since the early 1980s.
Robin NixonLearning
 P H P,  M y S Q L
& JavaScript
WITH JQUERY, CSS & HTML5
4th Edition
with jQuery
Learning PHP,  
MySQL & JavaScript
FOURTH EDITIONNixon

Robin NixonLearning PHP , MySQL & JavaScript
With jQuery, CSS & HTML5FOURTH EDITION

978-1-491-91866-1
[LSI]Learning PHP , MySQL & JavaScript
With jQuery, CSS & HTML5
by Robin Nixon
Copyright © 2015 Robin Nixon. All rights reserved.
Printed in the United States of America.
Published by O’Reilly Media, Inc., 1005 Gravenstein Highway North, Sebastopol, CA 95472.
O’Reilly books may be purchased for educational, business, or sales promotional use. Online editions are
also available for most titles ( http://safaribooksonline.com ). For more information, contact our corporate/
institutional sales department: 800-998-9938 or corporate@oreilly.com .
Editor:  Andy Oram
Production Editor:  Nicole Shelby
Copyeditor:  Rachel Monaghan
Proofreader:  Sharon WilkeyIndexer:  Ellen Troutman
Interior Designer:  David Futato
Cover Designer:  Randy Comer
Illustrator:  Rebecca Demarest
December 2014:  Fourth Edition
Revision History for the Fourth Edition
2014-11-21: First Release
See http://oreilly.com/catalog/errata.csp?isbn=9781491918661  for release details.
The O’Reilly logo is a registered trademark of O’Reilly Media, Inc. Learning PHP , MySQL & JavaScript , the
cover image, and related trade dress are trademarks of O’Reilly Media, Inc.
While the publisher and the author have used good faith efforts to ensure that the information and
instructions contained in this work are accurate, the publisher and the author disclaim all responsibility
for errors or omissions, including without limitation responsibility for damages resulting from the use of
or reliance on this work. Use of the information and instructions contained in this work is at your own
risk. If any code samples or other technology this work contains or describes is subject to open source
licenses or the intellectual property rights of others, it is your responsibility to ensure that your use
thereof complies with such licenses and/or rights.

For Julie



Table of Contents
Preface. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  xxiii
1.Introduction to Dynamic Web Content. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1
HTTP and HTML: Berners-Lee’s Basics                                                                         2
The Request/Response Procedure                                                                                   2
The Benefits of PHP , MySQL, JavaScript, CSS, and HTML5                                      5
Using PHP                                                                                                                       6
Using MySQL                                                                                                                  7
Using JavaScript                                                                                                              8
Using CSS                                                                                                                        9
And Then There’s HTML5                                                                                             10
The Apache Web Server                                                                                                  11
About Open Source                                                                                                         12
Bringing It All Together                                                                                                  12
Questions                                                                                                                          14
2.Setting Up a Development Server. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  15
What Is a W AMP , MAMP , or LAMP?                                                                           16
Installing XAMPP on Windows                                                                                    16
Testing the Installation                                                                                                24
Installing XAMPP on Mac OS X                                                                                   27
Accessing the Document Root                                                                                   27
Installing a LAMP on Linux                                                                                           28
Working Remotely                                                                                                           28
Logging In                                                                                                                     28
Using FTP                                                                                                                      29
Using a Program Editor                                                                                                  30
Using an IDE                                                                                                                    31
v

Questions                                                                                                                          33
3.Introduction to PHP. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  35
Incorporating PHP Within HTML                                                                               35
This Book’s Examples                                                                                                      37
The Structure of PHP                                                                                                      38
Using Comments                                                                                                          38
Basic Syntax                                                                                                                   39
Variables                                                                                                                        40
Operators                                                                                                                       45
Variable Assignment                                                                                                    48
Multiple-Line Commands                                                                                           50
Variable Typing                                                                                                             52
Constants                                                                                                                       53
Predefined Constants                                                                                                   54
The Difference Between the echo and print Commands                                       55
Functions                                                                                                                       55
Variable Scope                                                                                                               56
Questions                                                                                                                          62
4.Expressions and Control Flow in PHP. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  63
Expressions                                                                                                                       63
TRUE or FALSE?                                                                                                          63
Literals and Variables                                                                                                   65
Operators                                                                                                                          66
Operator Precedence                                                                                                   67
Associativity                                                                                                                  69
Relational Operators                                                                                                    70
Conditionals                                                                                                                     74
The if Statement                                                                                                            75
The else Statement                                                                                                        76
The elseif Statement                                                                                                     78
The switch Statement                                                                                                   79
The ? Operator                                                                                                              82
Looping                                                                                                                             83
while Loops                                                                                                                   84
do...while Loops                                                                                                            86
for Loops                                                                                                                        86
Breaking Out of a Loop                                                                                               88
The continue Statement                                                                                               89
Implicit and Explicit Casting                                                                                          90
PHP Dynamic Linking                                                                                                    91
vi | Table of Contents

Dynamic Linking in Action                                                                                            92
Questions                                                                                                                          93
5.PHP Functions and Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  95
PHP Functions                                                                                                                 96
Defining a Function                                                                                                     98
Returning a Value                                                                                                         98
Returning an Array                                                                                                    100
Do Not Pass Arguments by Reference                                                                    100
Returning Global Variables                                                                                       102
Recap of Variable Scope                                                                                            103
Including and Requiring Files                                                                                     103
The include Statement                                                                                               104
Using include_once                                                                                                    104
Using require and require_once                                                                              105
PHP Version Compatibility                                                                                          105
PHP Objects                                                                                                                   106
Terminology                                                                                                                106
Declaring a Class                                                                                                        107
Creating an Object                                                                                                     108
Accessing Objects                                                                                                       109
Cloning Objects                                                                                                          110
Constructors                                                                                                               111
PHP 5 Destructors                                                                                                     112
Writing Methods                                                                                                        112
Static Methods in PHP 5                                                                                           113
Declaring Properties                                                                                                  114
Declaring Constants                                                                                                  115
Property and Method Scope in PHP 5                                                                    115
Static Properties and Methods                                                                                 116
Inheritance                                                                                                                  118
Questions                                                                                                                        121
6.PHP Arrays. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  123
Basic Access                                                                                                                    123
Numerically Indexed Arrays                                                                                     123
Associative Arrays                                                                                                      125
Assignment Using the array Keyword                                                                     126
The foreach...as Loop                                                                                                    127
Multidimensional Arrays                                                                                              129
Using Array Functions                                                                                                  132
is_array                                                                                                                        132
Table of Contents | vii

count                                                                                                                            132
sort                                                                                                                                133
shuffle                                                                                                                           133
explode                                                                                                                         133
extract                                                                                                                          134
compact                                                                                                                       135
reset                                                                                                                              136
end                                                                                                                                136
Questions                                                                                                                        137
7.Practical PHP. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  139
Using printf                                                                                                                     139
Precision Setting                                                                                                         140
String Padding                                                                                                            142
Using sprintf                                                                                                                143
Date and Time Functions                                                                                             143
Date Constants                                                                                                           146
Using checkdate                                                                                                          146
File Handling                                                                                                                  147
Checking Whether a File Exists                                                                               147
Creating a File                                                                                                             147
Reading from Files                                                                                                     149
Copying Files                                                                                                              150
Moving a File                                                                                                              150
Deleting a File                                                                                                             151
Updating Files                                                                                                             151
Locking Files for Multiple Accesses                                                                         152
Reading an Entire File                                                                                               154
Uploading Files                                                                                                           155
System Calls                                                                                                                    160
XHTML or HTML5?                                                                                                     162
Questions                                                                                                                        162
8.Introduction to MySQL. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  165
MySQL Basics                                                                                                                 165
Summary of Database Terms                                                                                       166
Accessing MySQL via the Command Line                                                                 166
Starting the Command-Line Interface                                                                    167
Using the Command-Line Interface                                                                        171
MySQL Commands                                                                                                   172
Data Types                                                                                                                   177
Indexes                                                                                                                            186
viii | Table of Contents

Creating an Index                                                                                                       186
Querying a MySQL Database                                                                                   192
Joining Tables Together                                                                                             202
Using Logical Operators                                                                                            204
MySQL Functions                                                                                                          204
Accessing MySQL via phpMyAdmin                                                                          205
Questions                                                                                                                        206
9.Mastering MySQL. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  209
Database Design                                                                                                             209
Primary Keys: The Keys to Relational Databases                                                  210
Normalization                                                                                                                211
First Normal Form                                                                                                     212
Second Normal Form                                                                                                214
Third Normal Form                                                                                                   217
When Not to Use Normalization                                                                             219
Relationships                                                                                                                  219
One-to-One                                                                                                                 219
One-to-Many                                                                                                              220
Many-to-Many                                                                                                            221
Databases and Anonymity                                                                                        222
Transactions                                                                                                                    223
Transaction Storage Engines                                                                                    223
Using BEGIN                                                                                                              224
Using COMMIT                                                                                                         225
Using ROLLBACK                                                                                                     225
Using EXPLAIN                                                                                                             226
Backing Up and Restoring                                                                                            227
Using mysqldump                                                                                                      227
Creating a Backup File                                                                                               229
Restoring from a Backup File                                                                                   231
Dumping Data in CSV Format                                                                                231
Planning Y our Backups                                                                                             232
Questions                                                                                                                        232
10. Accessing MySQL Using PHP. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  233
Querying a MySQL Database with PHP                                                                    233
The Process                                                                                                                 233
Creating a Login File                                                                                                  234
Connecting to a MySQL Database                                                                           235
A Practical Example                                                                                                      240
The $_POST Array                                                                                                     243
Table of Contents | ix

Deleting a Record                                                                                                       244
Displaying the Form                                                                                                  245
Querying the Database                                                                                              246
Running the Program                                                                                                247
Practical MySQL                                                                                                            248
Creating a Table                                                                                                          248
Describing a Table                                                                                                      249
Dropping a Table                                                                                                        250
Adding Data                                                                                                                250
Retrieving Data                                                                                                           251
Updating Data                                                                                                             251
Deleting Data                                                                                                              252
Using AUTO_INCREMENT                                                                                    252
Performing Additional Queries                                                                               254
Preventing Hacking Attempts                                                                                      255
Steps Y ou Can Take                                                                                                    256
Using Placeholders                                                                                                     257
Preventing HTML Injection                                                                                     259
Using mysqli Procedurally                                                                                            261
Questions                                                                                                                        263
11. Form Handling. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  265
Building Forms                                                                                                               265
Retrieving Submitted Data                                                                                           267
register_globals: An Old Solution Hangs On                                                         268
Default Values                                                                                                             269
Input Types                                                                                                                 270
Sanitizing Input                                                                                                          277
An Example Program                                                                                                    279
What’s New in HTML5?                                                                                               281
The autocomplete Attribute                                                                                      282
The autofocus Attribute                                                                                            282
The placeholder Attribute                                                                                         282
The required Attribute                                                                                              282
Override Attributes                                                                                                    283
The width and height Attributes                                                                              283
Features Awaiting Full Implementation                                                                     283
The form Attribute                                                                                                     283
The list Attribute                                                                                                        284
The min and max Attributes                                                                                    284
The step Attribute                                                                                                      284
The color Input Type                                                                                                 285
x | Table of Contents

The number and range Input Types                                                                        285
Date and Time Pickers                                                                                               285
Questions                                                                                                                        285
12. Cookies, Sessions, and Authentication. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  287
Using Cookies in PHP                                                                                                   287
Setting a Cookie                                                                                                          289
Accessing a Cookie                                                                                                     290
Destroying a Cookie                                                                                                  290
HTTP Authentication                                                                                                   290
Storing Usernames and Passwords                                                                          294
Salting                                                                                                                          294
Using Sessions                                                                                                                298
Starting a Session                                                                                                        299
Ending a Session                                                                                                         302
Setting a Time-Out                                                                                                     303
Session Security                                                                                                          303
Questions                                                                                                                        307
13. Exploring JavaScript. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  309
JavaScript and HTML Text                                                                                           310
Using Scripts Within a Document Head                                                                311
Older and Nonstandard Browsers                                                                           311
Including JavaScript Files                                                                                          312
Debugging JavaScript Errors                                                                                    313
Using Comments                                                                                                           315
Semicolons                                                                                                                      315
Variables                                                                                                                          316
String Variables                                                                                                           316
Numeric Variables                                                                                                      317
Arrays                                                                                                                           317
Operators                                                                                                                        318
Arithmetic Operators                                                                                                318
Assignment Operators                                                                                               318
Comparison Operators                                                                                              319
Logical Operators                                                                                                       319
Variable Incrementing and Decrementing                                                             320
String Concatenation                                                                                                 320
Escaping Characters                                                                                                   320
Variable Typing                                                                                                              321
Functions                                                                                                                         322
Global Variables                                                                                                             322
Table of Contents | xi

Local Variables                                                                                                               323
The Document Object Model                                                                                      324
But It’s Not That Simple                                                                                            326
Using the DOM                                                                                                          327
About document.write                                                                                                  328
Using console.log                                                                                                       328
Using alert                                                                                                                   328
Writing into Elements                                                                                               329
Using document.write                                                                                               329
Questions                                                                                                                        329
14. Expressions and Control Flow in JavaScript. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  331
Expressions                                                                                                                     331
Literals and Variables                                                                                                    332
Operators                                                                                                                        333
Operator Precedence                                                                                                 334
Associativity                                                                                                                334
Relational Operators                                                                                                  335
The with Statement                                                                                                        338
Using onerror                                                                                                                 339
Using try...catch                                                                                                              340
Conditionals                                                                                                                   341
The if Statement                                                                                                         341
The else Statement                                                                                                     341
The switch Statement                                                                                                 342
The ? Operator                                                                                                            344
Looping                                                                                                                           344
while Loops                                                                                                                 344
do...while Loops                                                                                                          345
for Loops                                                                                                                      346
Breaking Out of a Loop                                                                                             346
The continue Statement                                                                                            347
Explicit Casting                                                                                                              348
Questions                                                                                                                        348
15. JavaScript Functions, Objects, and Arrays. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  351
JavaScript Functions                                                                                                      351
Defining a Function                                                                                                   351
Returning a Value                                                                                                       353
Returning an Array                                                                                                    355
JavaScript Objects                                                                                                          356
Declaring a Class                                                                                                        356
xii | Table of Contents

Creating an Object                                                                                                     357
Accessing Objects                                                                                                       358
The prototype Keyword                                                                                            358
JavaScript Arrays                                                                                                            361
Numeric Arrays                                                                                                          361
Associative Arrays                                                                                                      362
Multidimensional Arrays                                                                                          363
Using Array Methods                                                                                                364
Questions                                                                                                                        369
16. JavaScript and PHP Validation and Error Handling. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  371
Validating User Input with JavaScript                                                                         371
The validate.html Document (Part 1)                                                                     372
The validate.html Document (Part 2)                                                                     374
Regular Expressions                                                                                                      377
Matching Through Metacharacters                                                                         378
Fuzzy Character Matching                                                                                        378
Grouping Through Parentheses                                                                               379
Character Classes                                                                                                       380
Indicating a Range                                                                                                     380
Negation                                                                                                                      380
Some More-Complicated Examples                                                                        381
Summary of Metacharacters                                                                                     383
General Modifiers                                                                                                      385
Using Regular Expressions in JavaScript                                                                386
Using Regular Expressions in PHP                                                                          386
Redisplaying a Form After PHP Validation                                                               387
Questions                                                                                                                        393
17. Using Ajax. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  395
What Is Ajax?                                                                                                                  395
Using XMLHttpRequest                                                                                               396
Y our First Ajax Program                                                                                           398
Using Get Instead of Post                                                                                          403
Sending XML Requests                                                                                             406
Using Frameworks for Ajax                                                                                      411
Questions                                                                                                                        411
18. Introduction to CSS. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  413
Importing a Style Sheet                                                                                                 414
Importing CSS from Within HTML                                                                       414
Embedded Style Settings                                                                                           415
Table of Contents | xiii

Using IDs                                                                                                                         415
Using Classes                                                                                                                  415
Using Semicolons                                                                                                           416
CSS Rules                                                                                                                        416
Multiple Assignments                                                                                                416
Using Comments                                                                                                        417
Style Types                                                                                                                      418
Default Styles                                                                                                              418
User Styles                                                                                                                   418
External Style Sheets                                                                                                  419
Internal Styles                                                                                                             419
Inline Styles                                                                                                                 420
CSS Selectors                                                                                                                  420
The Type Selector                                                                                                       420
The Descendant Selector                                                                                           420
The Child Selector                                                                                                      421
The ID Selector                                                                                                           422
The Class Selector                                                                                                      423
The Attribute Selector                                                                                               423
The Universal Selector                                                                                               424
Selecting by Group                                                                                                     425
The CSS Cascade                                                                                                            425
Style Sheet Creators                                                                                                   426
Style Sheet Methods                                                                                                   426
Style Sheet Selectors                                                                                                   426
Calculating Specificity                                                                                               427
The Difference Between Div and Span Elements                                                  429
Measurements                                                                                                                431
Fonts and Typography                                                                                                   432
font-family                                                                                                                   433
font-style                                                                                                                      433
font-size                                                                                                                       434
font-weight                                                                                                                  434
Managing Text Styles                                                                                                     435
Decoration                                                                                                                   435
Spacing                                                                                                                         435
Alignment                                                                                                                    436
Transformation                                                                                                           436
Indenting                                                                                                                     436
CSS Colors                                                                                                                      437
Short Color Strings                                                                                                    438
Gradients                                                                                                                     438
xiv | Table of Contents

Positioning Elements                                                                                                     439
Absolute Positioning                                                                                                  440
Relative Positioning                                                                                                   440
Fixed Positioning                                                                                                        440
Pseudoclasses                                                                                                                  442
Shorthand Rules                                                                                                             444
The Box Model and Layout                                                                                          445
Setting Margins                                                                                                           445
Applying Borders                                                                                                       447
Adjusting Padding                                                                                                      448
Object Contents                                                                                                          450
Questions                                                                                                                        450
19. Advanced CSS with CSS3. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  451
Attribute Selectors                                                                                                         451
Matching Parts of Strings                                                                                          452
The box-sizing Property                                                                                               453
CSS3 Backgrounds                                                                                                         453
The background-clip Property                                                                                 454
The background-origin Property                                                                             456
The background-size Property                                                                                 456
Using the auto Value                                                                                                  457
Multiple Backgrounds                                                                                                   457
CSS3 Borders                                                                                                                  459
The border-color Property                                                                                        459
The border-radius Property                                                                                      459
Box Shadows                                                                                                                   462
Element Overflow                                                                                                          463
Multicolumn Layout                                                                                                      463
Colors and Opacity                                                                                                        465
HSL Colors                                                                                                                  465
HSLA Colors                                                                                                               466
RGB Colors                                                                                                                 466
RGBA Colors                                                                                                              467
The opacity Property                                                                                                 467
Text Effects                                                                                                                      467
The text-shadow Property                                                                                        467
The text-overflow Property                                                                                      468
The word-wrap Property                                                                                          469
Web Fonts                                                                                                                       469
Google Web Fonts                                                                                                          470
Transformations                                                                                                             472
Table of Contents | xv

3D Transformations                                                                                                      473
Transitions                                                                                                                      474
Properties to Transition                                                                                            474
Transition Duration                                                                                                   475
Transition Delay                                                                                                         475
Transition Timing                                                                                                      475
Shorthand Syntax                                                                                                       476
Questions                                                                                                                        477
20. Accessing CSS from JavaScript. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  479
Revisiting the getElementById Function                                                                    479
The O function                                                                                                           479
The S Function                                                                                                           480
The C Function                                                                                                           481
Including the Functions                                                                                            482
Accessing CSS Properties from JavaScript                                                                 482
Some Common Properties                                                                                       483
Other Properties                                                                                                         484
Inline JavaScript                                                                                                             486
The this Keyword                                                                                                       486
Attaching Events to Objects in a Script                                                                   487
Attaching to Other Events                                                                                        488
Adding New Elements                                                                                                   489
Removing Elements                                                                                                   490
Alternatives to Adding and Removing Elements                                                  491
Using Interrupts                                                                                                             492
Using setTimeout                                                                                                       492
Cancelling a Time-Out                                                                                              493
Using setInterval                                                                                                         493
Using Interrupts for Animation                                                                               495
Questions                                                                                                                        497
21. Introduction to jQuery. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  499
Why jQuery?                                                                                                                   500
Including jQuery                                                                                                            500
Choosing the Right Version                                                                                      500
Downloading                                                                                                              501
Using a Content Delivery Network                                                                         502
Always Using the Latest Version                                                                              503
Customizing jQuery                                                                                                  503
jQuery Syntax                                                                                                                 503
A Simple Example                                                                                                      504
xvi | Table of Contents

Avoiding Library Conflict                                                                                         505
Selectors                                                                                                                           505
The css Method                                                                                                           506
The Element Selector                                                                                                 506
The ID Selector                                                                                                           507
The Class Selector                                                                                                      507
Combining Selectors                                                                                                  507
Handling Events                                                                                                             508
Waiting Until the Document Is Ready                                                                        509
Event Functions and Properties                                                                                   510
The blur and focus Events                                                                                         511
The this Keyword                                                                                                       512
The click and dblclick Events                                                                                   512
The keypress Event                                                                                                    513
Considerate Programming                                                                                       515
The mousemove Event                                                                                              515
Other Mouse Events                                                                                                   518
Alternative Mouse Methods                                                                                     519
The submit Event                                                                                                       520
Special Effects                                                                                                                 521
Hiding and Showing                                                                                                  522
The toggle Method                                                                                                     523
Fading In and Out                                                                                                      524
Sliding Elements Up and Down                                                                               525
Animations                                                                                                                  526
Stopping Animations                                                                                                 529
Manipulating the DOM                                                                                                530
The Difference Between The text and html Methods                                           531
The val and attr Methods                                                                                          531
Adding and Removing Elements                                                                             533
Dynamically Applying Classes                                                                                     535
Modifying Dimensions                                                                                                 535
The width and height Methods                                                                                536
The innerWidth and innerHeight Methods                                                           538
The outerWidth and OuterHeight Methods                                                          538
DOM Traversal                                                                                                               539
Parent Elements                                                                                                          539
Child Elements                                                                                                           543
Sibling Elements                                                                                                         543
Selecting the Next and Previous Elements                                                             545
Traversing jQuery Selections                                                                                    546
The is Method                                                                                                             548
Table of Contents | xvii

Using jQuery Without Selectors                                                                                  549
The $.each Method                                                                                                    550
The $.map Method                                                                                                     551
Using Ajax                                                                                                                       551
Using the Post Method                                                                                              551
Using the Get Method                                                                                               552
Plug-Ins                                                                                                                           553
The jQuery User Interface                                                                                        553
Other Plug-Ins                                                                                                            553
jQuery Mobile                                                                                                             554
Questions                                                                                                                        555
22. Introduction to HTML5. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  557
The Canvas                                                                                                                     558
Geolocation                                                                                                                     559
Audio and Video                                                                                                            561
Forms                                                                                                                               562
Local Storage                                                                                                                  563
Web Workers                                                                                                                  563
Web Applications                                                                                                           563
Microdata                                                                                                                        564
Summary                                                                                                                         564
Questions                                                                                                                        564
23. The HTML5 Canvas. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  565
Creating and Accessing a Canvas                                                                                565
The toDataURL Function                                                                                         567
Specifying an Image Type                                                                                         569
The fillRect Method                                                                                                   569
The clearRect Method                                                                                               569
The strokeRect Method                                                                                             570
Combining These Commands                                                                                 570
The createLinearGradient Method                                                                          571
The addColorStop Method in Detail                                                                       573
The createRadialGradient Method                                                                          574
Using Patterns for Fills                                                                                              576
Writing Text to the Canvas                                                                                           578
The strokeText Method                                                                                             578
The textBaseLine Property                                                                                        579
The font Property                                                                                                       579
The textAlign Property                                                                                              579
The fillText Method                                                                                                   580
xviii | Table of Contents

The measureText Method                                                                                         581
Drawing Lines                                                                                                                581
The lineWidth Property                                                                                            581
The lineCap and lineJoin Properties                                                                       581
The miterLimit Property                                                                                           584
Using Paths                                                                                                                     584
The moveTo and LineTo Methods                                                                           584
The stroke Method                                                                                                     585
The rect Method                                                                                                         585
Filling Areas                                                                                                                    586
The clip Method                                                                                                             587
The isPointInPath Method                                                                                           590
Working with Curves                                                                                                    591
The arc Method                                                                                                          591
The arcTo Method                                                                                                      594
The quadraticCurveTo Method                                                                               595
The bezierCurveTo Method                                                                                      596
Manipulating Images                                                                                                     597
The drawImage Method                                                                                            597
Resizing an Image                                                                                                      598
Selecting an Image Area                                                                                            598
Copying from a Canvas                                                                                             600
Adding Shadows                                                                                                         600
Editing at the Pixel Level                                                                                              602
The getImageData Method                                                                                       602
The data Array                                                                                                            603
The putImageData Method                                                                                      605
The createImageData Method                                                                                  605
Advanced Graphical Effects                                                                                         606
The globalCompositeOperation Property                                                              606
The globalAlpha Property                                                                                         609
Transformations                                                                                                             609
The scale Method                                                                                                       609
The save and restore Methods                                                                                  610
The rotate Method                                                                                                     611
The translate Method                                                                                                 612
The transform Method                                                                                              613
The setTransform Method                                                                                        615
Summary                                                                                                                         615
Questions                                                                                                                        616
Table of Contents | xix

24. HTML5 Audio and Video. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  617
About Codecs                                                                                                                 618
The <audio> Element                                                                                                    619
Supporting Non-HTML5 Browsers                                                                            621
The <video> Element                                                                                                    623
The Video Codecs                                                                                                      623
Supporting Older Browsers                                                                                      627
Summary                                                                                                                         629
Questions                                                                                                                        629
25. Other HTML5 Features. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  631
Geolocation and the GPS Service                                                                                631
Other Location Methods                                                                                               632
Geolocation and HTML5                                                                                             632
Local Storage                                                                                                                  636
Using Local Storage                                                                                                    637
The localStorage Object                                                                                            637
Web Workers                                                                                                                  639
Offline Web Applications                                                                                             641
Drag and Drop                                                                                                               643
Cross-Document Messaging                                                                                        645
Microdata                                                                                                                        648
Other HTML5 Tags                                                                                                       651
Summary                                                                                                                         652
Questions                                                                                                                        652
26. Bringing It All Together. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  653
Designing a Social Networking Site                                                                            653
On the Website                                                                                                               654
functions.php                                                                                                                  654
The Functions                                                                                                             654
header.php                                                                                                                       656
setup.php                                                                                                                         658
index.php                                                                                                                        660
signup.php                                                                                                                       661
Checking for Username Availability                                                                       661
Logging In                                                                                                                   662
checkuser.php                                                                                                                 665
login.php                                                                                                                         665
profile.php                                                                                                                       667
Adding the “ About Me” Text                                                                                     668
Adding a Profile Image                                                                                              668
xx | Table of Contents

Processing the Image                                                                                                 668
Displaying the Current Profile                                                                                 669
members.php                                                                                                                  672
Viewing a User’s Profile                                                                                             672
Adding and Dropping Friends                                                                                 672
Listing All Members                                                                                                  672
friends.php                                                                                                                      675
messages.php                                                                                                                  678
logout.php                                                                                                                       681
styles.css                                                                                                                          682
javascript.js                                                                                                                      685
A. Solutions to the Chapter Questions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  687
B. Online Resources. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  707
C. MySQL’s FULLTEXT Stopwords. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  711
D. MySQL Functions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  715
E. jQuery Selectors, Objects, and Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  725
Index. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  747
Table of Contents | xxi



Preface
The combination of PHP and MySQL is the most convenient approach to dynamic,
database-driven web design, holding its own in the face of challenges from integrated
frameworks—such as Ruby on Rails—that are harder to learn. Due to its open source
roots (unlike the competing Microsoft .NET Framework), it is free to implement and
is therefore an extremely popular option for web development.
Any would-be developer on a Unix/Linux or even a Windows/Apache platform will
need to master these technologies. And, combined with the partner technologies of
JavaScript, jQuery, CSS, and HTML5, you will be able to create websites of the caliber
of industry standards like Facebook, Twitter, and Gmail.
Audience
This book is for people who wish to learn how to create effective and dynamic web‐
sites. This may include webmasters or graphic designers who are already creating
static websites but wish to take their skills to the next level, as well as high school and
college students, recent graduates, and self-taught individuals.
In fact, anyone ready to learn the fundamentals behind the Web 2.0 technology
known as Ajax will obtain a thorough grounding in all of these core technologies:
PHP , MySQL, JavaScript, CSS, and HTML5, and learn the basics of the jQuery library
too.
Assumptions This Book Makes
This book assumes that you have a basic understanding of HTML and can at least put
together a simple, static website, but does not assume that you have any prior knowl‐
edge of PHP , MySQL, JavaScript, CSS, or HTML5—although if you do, your progress
through the book will be even quicker.
xxiii

Organization of This Book
The chapters in this book are written in a specific order, first introducing all of the
core technologies it covers and then walking you through their installation on a web
development server so that you will be ready to work through the examples.
In the first section, you will gain a grounding in the PHP programming language,
covering the basics of syntax, arrays, functions, and object-oriented programming.
Then, with PHP under your belt, you will move on to an introduction to the MySQL
database system, where you will learn everything from how MySQL databases are
structured to how to generate complex queries.
After that, you will learn how you can combine PHP and MySQL to start creating
your own dynamic web pages by integrating forms and other HTML features. Follow‐
ing that, you will get down to the nitty-gritty practical aspects of PHP and MySQL
development by learning a variety of useful functions and how to manage cookies
and sessions, as well as how to maintain a high level of security.
In the next few chapters, you will gain a thorough grounding in JavaScript, from sim‐
ple functions and event handling to accessing the Document Object Model and in-
browser validation and error handling, plus a comprehensive primer on using the
popular jQuery library for JavaScript.
With an understanding of all three of these core technologies, you will then learn how
to make behind-the-scenes Ajax calls and turn your websites into highly dynamic
environments.
Next, you’ll spend two chapters learning all about using CSS to style and lay out your
web pages, before moving on to the final section on the new features built into
HTML5, including geolocation, audio, video, and the canvas. After this, you’ll put
together everything you’ve learned in a complete set of programs that together consti‐
tute a fully functional social networking website.
Along the way, you’ll find plenty of advice on good programming practices and tips
that could help you find and solve hard-to-detect programming errors. There are also
plenty of links to websites containing further details on the topics covered.
Supporting Books
Once you have learned to develop using PHP , MySQL, JavaScript, CSS, and HTML5,
you will be ready to take your skills to the next level using the following O’Reilly ref‐
erence books. To learn more about any of these titles, simply enter the ISBN shown
next to it into the search box at http://oreilly.com  or at any good online book seller’s
website.
xxiv | Preface

•Dynamic HTML: The Definitive  Reference  (9780596527402) by Danny Goodman
•PHP in a Nutshell  (9780596100674) by Paul Hudson
•MySQL in a Nutshell  (9780596514334) by Russell Dyer
•JavaScript: The Definitive  Guide  (9780596805524) by David Flanagan
•CSS: The Definitive  Guide  (9780596527334) by Eric A. Myer
•HTML5: The Missing Manual  (9781449363260) by Matthew MacDonald
Conventions Used in This Book
The following typographical conventions are used in this book:
Plain text
Indicates menu titles, options, and buttons.
Italic
Indicates new terms, URLs, email addresses, filenames, file extensions, pathnames,
directories, and Unix utilities.
Constant width
Indicates command-line options, variables and other code elements, HTML tags,
macros, and the contents of files.
Constant width bold
Shows program output or highlighted sections of code that are discussed in the text.
Constant width italic
Shows text that should be replaced with user-supplied values.
This element signifies a tip, suggestion, or general note.
This element indicates a warning or caution.
Using Code Examples
This book is here to help you get your job done. In general, if example code is offered
with this book, you may use it in your programs and documentation. Y ou do not
Preface | xxv

need to contact us for permission unless you’re reproducing a significant portion of
the code. For example, writing a program that uses several chunks of code from this
book does not require permission. Selling or distributing a CD-ROM of examples
from O’Reilly books does require permission. Answering a question by citing this
book and quoting example code does not require permission. Incorporating a signifi‐
cant amount of example code from this book into your product’s documentation does
require permission. There is a companion website to this book at http://lpmj.net ,
where you can download all the examples from this book in a single zip file.
We appreciate, but do not require, attribution. An attribution usually includes the
title, author, publisher, and ISBN. For example: “ Learning PHP , MySQL & JavaScript,
4th Edition  by Robin Nixon (O’Reilly). Copyright 2015 Robin Nixon,
978-1-4919-1866-1. ”
If you feel your use of code examples falls outside fair use or the permission given
above, feel free to contact us at permissions@oreilly.com .
Safari® Books Online
Safari Books Online  is an on-demand digital library that deliv‐
ers expert content  in both book and video form from the
world’s leading authors in technology and business.
Technology professionals, software developers, web designers, and business and crea‐
tive professionals use Safari Books Online as their primary resource for research,
problem solving, learning, and certification training.
Safari Books Online offers a range of plans and pricing  for enterprise , government ,
education , and individuals.
Members have access to thousands of books, training videos, and prepublication
manuscripts in one fully searchable database from publishers like O’Reilly Media,
Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que,
Peachpit Press, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kauf‐
mann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders,
McGraw-Hill, Jones & Bartlett, Course Technology, and hundreds more . For more
information about Safari Books Online, please visit us online .
 
xxvi | Preface

How to Contact Us
Please address comments and questions concerning this book to the publisher:
O’Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopol, CA 95472
(800) 998-9938 (in the United States or Canada)
(707) 829-0515 (international or local)
(707) 829-0104 (fax)
We have a web page for this book, where we list errata, examples, and any additional
information. Y ou can access this page at http://bit.ly/lpmjch_4e .
To comment or ask technical questions about this book, send email to bookques‐
tions@oreilly.com .
For more information about our books, courses, conferences, and news, see our web‐
site at http://www.oreilly.com .
Find us on Facebook: http://facebook.com/oreilly
Follow us on Twitter: http://twitter.com/oreillymedia
Watch us on Y ouTube: http://www.youtube.com/oreillymedia
Acknowledgments
I would like to once again thank my editor, Andy Oram, and everyone who worked
so hard on this book, including Albert Wiersch for his comprehensive technical
review, Nicole Shelby for overseeing production, Rachel Monaghan for her copy edit‐
ing, Sharon Wilkey for proofreading, Robert Romano for his original illustrations,
Rebecca Demarest for her new illustrations, David Futato for interior design, Lucie
Haskins for creating the index, Karen Montgomery for the original sugar glider front
cover design, Randy Comer for the latest book cover, and everyone else too numer‐
ous to name who submitted errata and offered suggestions for this new edition.
Preface | xxvii



CHAPTER 1
Introduction to Dynamic Web Content
The World Wide Web is a constantly evolving network that has already traveled far
beyond its conception in the early 1990s, when it was created to solve a specific prob‐
lem. State-of-the-art experiments at CERN (the European Laboratory for Particle
Physics—now best known as the operator of the Large Hadron Collider) were pro‐
ducing incredible amounts of data—so much that the data was proving unwieldy to
distribute to the participating scientists who were spread out across the world.
At this time, the Internet was already in place, with several hundred thousand com‐
puters connected to it, so Tim Berners-Lee (a CERN fellow) devised a method of nav‐
igating between them using a hyperlinking framework, which came to be known as
Hypertext Transfer Protocol, or HTTP . He also created a markup language called
Hypertext Markup Language, or HTML. To bring these together, he wrote the first
web browser and web server, tools that we now take for granted.
But back then, the concept was revolutionary. The most connectivity so far experi‐
enced by at-home modem users was dialing up and connecting to a bulletin board
that was hosted by a single computer, where you could communicate and swap data
only with other users of that service. Consequently, you needed to be a member of
many bulletin board systems in order to effectively communicate electronically with
your colleagues and friends.
But Berners-Lee changed all that in one fell swoop, and by the mid-1990s, there were
three major graphical web browsers competing for the attention of 5 million users. It
soon became obvious, though, that something was missing. Y es, pages of text and
graphics with hyperlinks to take you to other pages was a brilliant concept, but the
results didn’t reflect the instantaneous potential of computers and the Internet to
meet the particular needs of each user with dynamically changing content. Using the
Web was a very dry and plain experience, even if we did now have scrolling text and
animated GIFs!
1

Shopping carts, search engines, and social networks have clearly altered how we use
the Web. In this chapter, we’ll take a brief look at the various components that make
up the Web, and the software that helps make it a rich and dynamic experience.
It is necessary to start using some acronyms more or less right
away. I have tried to clearly explain them before proceeding. But
don’t worry too much about what they stand for or what these
names mean, because the details will become clear as you read on.
HTTP and HTML: Berners-Lee’s Basics
HTTP is a communication standard governing the requests and responses that take
place between the browser running on the end user’s computer  and the web server.
The server’s job is to accept a request from the client and attempt to reply to it in a
meaningful way, usually by serving up a requested web page—that’s why the term
server  is used. The natural counterpart to a server is a client , so that term is applied
both to the web browser and the computer on which it’s running.
Between the client and the server there can be several other devices, such as routers,
proxies, gateways, and so on. They serve different roles in ensuring that the requests
and responses are correctly transferred between the client and server. Typically, they
use the Internet to send this information.
A web server can usually handle multiple simultaneous connections and—when not
communicating with a client—spends its time listening for an incoming connection.
When one arrives, the server sends back a response to confirm its receipt.
The Request/Response Procedure
At its most basic level, the request/response process consists of a web browser asking
the web server to send it a web page and the server sending back the page. The
browser then takes care of displaying the page (see Figure 1-1 ).
2 | Chapter 1: Introduction to Dynamic Web Content

Figure 1-1. The basic client/server request/response sequence
Each step in the request and response sequence is as follows:
1.Y ou enter http://server.com  into your browser’s address bar.
2.Y our browser looks up the IP address for server.com .
3.Y our browser issues a request for the home page at server.com .
4.The request crosses the Internet and arrives at the server.com  web server.
5.The web server, having received the request, looks for the web page on its disk.
6.The web page is retrieved by the server and returned to the browser.
7.Y our browser displays the web page.
For an average web page, this process takes place once for each object within the
page: a graphic, an embedded video or Flash file, and even a CSS template.
In step 2, notice that the browser looked up the IP address of server.com . Every
machine attached to the Internet has an IP address—your computer included. But we
generally access web servers by name, such as google.com . As you probably know, the
browser consults an additional Internet service called the Domain Name Service
The Request/Response Procedure | 3

(DNS) to find its associated IP address and then uses it to communicate with the
computer.
For dynamic web pages, the procedure is a little more involved, because it may bring
both PHP and MySQL into the mix (see Figure 1-2 ).
Figure 1-2. A dynamic client/server request/response sequence
1.Y ou enter http://server.com into your browser’s address bar.
2.Y our browser looks up the IP address for server.com .
3.Y our browser issues a request to that address for the web server’s home page.
4.The request crosses the Internet and arrives at the server.com  web server.
5.The web server, having received the request, fetches the home page from its hard
disk.
4 | Chapter 1: Introduction to Dynamic Web Content

6.With the home page now in memory, the web server notices that it is a file incor‐
porating PHP scripting and passes the page to the PHP interpreter.
7.The PHP interpreter executes the PHP code.
8.Some of the PHP contains MySQL statements, which the PHP interpreter now
passes to the MySQL database engine.
9.The MySQL database returns the results of the statements to the PHP interpreter.
10.The PHP interpreter returns the results of the executed PHP code, along with the
results from the MySQL database, to the web server.
11.The web server returns the page to the requesting client, which displays it.
Although it’s helpful to be aware of this process so that you know how the three ele‐
ments work together, in practice you don’t really need to concern yourself with these
details, because they all happen automatically.
HTML pages returned to the browser in each example may well  contain JavaScript,
which will be interpreted locally by the client, and which could initiate another
request—the same way embedded objects such as images would.
The Benefits  of PHP , MySQL, JavaScript, CSS, and HTML5
At the start of this chapter, I introduced the world of Web 1.0, but it wasn’t long
before the rush was on to create Web 1.1, with the development of such browser
enhancements as Java, JavaScript, JScript (Microsoft’s slight variant of JavaScript), and
ActiveX. On the server side, progress was being made on the Common Gateway
Interface (CGI) using scripting languages such as Perl (an alternative to the PHP lan‐
guage) and server-side scripting —inserting  the contents of one file (or the output of a
system call) into another one dynamically.
Once the dust had settled, three main technologies stood heads and shoulders above
the others. Although Perl was still a popular scripting language with a strong follow‐
ing, PHP’s simplicity and built-in links to the MySQL database program had earned it
more than double the number of users. And JavaScript, which  had become an essen‐
tial part of the equation for dynamically manipulating Cascading Style Sheets (CSS)
and HTML, now took on the even more muscular task of handling the client side of
the Ajax process. Under Ajax, web pages perform data handling and send requests to
web servers in the background—without the web user being aware that this is going
on.
No doubt the symbiotic nature of PHP and MySQL helped propel  them both for‐
ward, but what attracted developers to them in the first place? The simple answer has
to be the ease with which you can use them to quickly create dynamic elements on
websites. MySQL is a fast and powerful, yet easy-to-use, database system that offers
The Benefits  of PHP , MySQL, JavaScript, CSS, and HTML5 | 5

just about anything a website would need in order to find and serve up data to brows‐
ers. When PHP allies with MySQL to store and retrieve this data, you have the funda‐
mental parts required for the development of social networking sites and the
beginnings of Web 2.0.
And when you bring JavaScript and CSS into the mix too, you have a recipe for build‐
ing highly dynamic and interactive websites.
Using PHP
With PHP , it’s a simple matter to embed dynamic activity in web pages. When you
give pages the .php extension, they have instant access to the scripting language. From
a developer’s point of view, all you have to do is write code such as the following:
<?php
  echo " Today is " . date("l") . ". ";
?>
Here's the latest news.
The opening <?php  tells the web server to allow the PHP program to interpret all the
following code up to the ?> tag. Outside of this construct, everything is sent to the
client as direct HTML. So the text Here's the latest news.  is simply output to the
browser; within the PHP tags, the built-in date  function displays the current day of
the week according to the server’s system time.
The final output of the two parts looks like this:
Today is Wednesday. Here's the latest news.
PHP is a flexible language, and some people prefer to place the PHP construct
directly next to PHP code, like this:
Today is <?php echo date("l"); ?>. Here's the latest news.
There are also other ways of formatting and outputting information, which I’ll
explain in the chapters on PHP . The point is that with PHP , web developers have a
scripting language that, although not as fast as compiling your code in C or a similar
language, is incredibly speedy and also integrates seamlessly with HTML markup.
If you intend to enter the PHP examples in this book to work along
with me, you must remember to add <?php  in front and ?> after
them to ensure that the PHP interpreter processes them. To facili‐
tate this, you may wish to prepare a file called example.php  with
those tags in place.
Using PHP , you have unlimited control over your web server. Whether you need to
modify HTML on the fly, process a credit card, add user details to a database, or fetch
6 | Chapter 1: Introduction to Dynamic Web Content

information from a third-party website, you can do it all from within the same PHP
files in which the HTML itself resides.
Using MySQL
Of course, there’s not a lot of point to being able to change HTML output dynami‐
cally unless you also have a means to track the changes that users make as they use
your website. In the early days of the Web, many sites used “flat” text files to store
data such as usernames and passwords. But this approach could cause problems if the
file wasn’t correctly locked against corruption from multiple simultaneous accesses.
Also, a flat file can get only so big before it becomes unwieldy to manage—not to
mention the difficulty of trying to merge files and perform complex searches in any
kind of reasonable time.
That’s where relational databases with structured querying become essential. And
MySQL, being free to use and installed on vast numbers of Internet web servers, rises
superbly to the occasion. It is a robust and exceptionally fast database management
system that uses English-like commands.
The highest level of MySQL structure is a database, within  which you can have one
or more tables that contain your data. For example, let’s suppose you are working on
a table called users , within which you have created columns for surname , firstname ,
and email , and you now wish to add another user. One command that you might use
to do this is as follows:
INSERT INTO users VALUES('Smith', 'John', 'jsmith@mysite.com');
Of course, as mentioned earlier, you will have issued other commands to create the
database and table and to set up all the correct fields, but the INSERT  command here
shows how simple it can be to add new data to a database. INSERT  is an example of
Structured Query Language (SQL), a language designed in the early 1970s and remi‐
niscent of one of the oldest programming languages, COBOL. It is well suited, how‐
ever, to database queries, which is why it is still in use after all this time.
It’s equally easy to look up data. Let’s assume that you have an email address for a user
and need to look up that person’s name. To do this, you could issue a MySQL query
such as the following:
SELECT surname,firstname FROM users WHERE email='jsmith@mysite.com';
MySQL will then return Smith, John  and any other pairs of names that may be asso‐
ciated with that email address in the database.
As you’ d expect, there’s quite a bit more that you can do with MySQL than just simple
INSERT  and SELECT  commands. For example, you can join multiple tables according
to various criteria, ask for results in a variety of orders, make partial matches when
The Benefits  of PHP , MySQL, JavaScript, CSS, and HTML5 | 7

you know only part of the string that you are searching for, return only the nth result,
and a lot more.
Using PHP , you can make all these calls directly  to MySQL without having to run the
MySQL program yourself or use its command-line interface. This means you can save
the results in arrays for processing and perform multiple lookups, each dependent on
the results returned from earlier ones, to drill down to the item of data you need.
For even more power, as you’ll see later, there are additional functions built right into
MySQL that you can call up for common operations and extra speed.
Using JavaScript
The oldest of the three core technologies in this book, JavaScript,  was created to
enable scripting access to all the elements of an HTML document. In other words, it
provides a means for dynamic user interaction such as checking email address valid‐
ity in input forms, and displaying prompts such as “Did you really mean that?”
(although it cannot be relied upon for security, which should always be performed on
the web server).
Combined with CSS (see the following section), JavaScript is the power behind
dynamic web pages that change in front of your eyes rather than when a new page is
returned by the server.
However, JavaScript can also be tricky to use, due to some major differences in the
ways different browser designers have chosen to implement it. This mainly came
about when some manufacturers tried to put additional functionality into their
browsers at the expense of compatibility with their rivals.
Thankfully, the developers have mostly now come to their senses and have realized
the need for full compatibility with one another, so they don’t have to write multi-
exception code. But there remain millions of legacy browsers that will be in use for a
good many years to come. Luckily, there are solutions for the incompatibility prob‐
lems, and later in this book we’ll look at libraries and techniques that enable you to
safely ignore these differences.
For now, let’s take a look at how to use basic JavaScript, accepted by all browsers:
<script type="text/javascript">
  document.write("Today is " + Date() );
</script>
This code snippet tells the web browser to interpret everything within  the script  tags
as JavaScript, which the browser then does by writing the text Today is  to the current
document, along with the date, by using the JavaScript function Date . The result will
look something like this:
Today is Sun Jan 01 2017 01:23:45
8 | Chapter 1: Introduction to Dynamic Web Content

Unless you need to specify an exact version of JavaScript, you can
normally omit the type="text/javascript"  and just use <script>
to start the interpretation of the JavaScript.
As previously mentioned, JavaScript was originally developed to offer dynamic con‐
trol over the various elements within an HTML document, and that is still its main
use. But more and more, JavaScript is being used for Ajax.  This is a term for the pro‐
cess of accessing the web server in the background. (It originally meant Asynchronous
JavaScript and XML , but that phrase is already a bit outdated.)
Ajax is the main process behind what is now known as Web 2.0 (a term popularized
by Tim O’Reilly, the founder and CEO of this book’s publishing company), in which
web pages have started to resemble standalone programs, because they don’t have to
be reloaded in their entirety. Instead, a quick Ajax call can pull in and update a single
element on a web page, such as changing your photograph on a social networking site
or replacing a button that you click with the answer to a question. This subject is fully
covered in Chapter 17 .
Then, in Chapter 21 , we take a good look at the jQuery framework, which you can
use to save reinventing the wheel when you need fast, cross-browser code to manipu‐
late your web pages. Of course, there are other frameworks available too, but jQuery
is by far the most popular and, due to continuous maintenance, is extremely reliable,
and a major tool in the utility kit of many seasoned web developers.
Using CSS
With the emergence of the CSS3 standard in recent  years, CSS now offers a level of
dynamic interactivity previously supported only by JavaScript. For example, not only
can you style any HTML element to change its dimensions, colors, borders, spacing,
and so on, but now you can also add animated transitions and transformations to
your web pages, using only a few lines of CSS.
Using CSS can be as simple as inserting a few rules between <style>  and </style>
tags in the head of a web page, like this:
<style>
  p {
    text-align:justify;
    font-family:Helvetica;
  }
</style>
These rules will change the default text alignment of the <p> tag so that paragraphs
contained in it will be fully justified and will use the Helvetica font.
The Benefits  of PHP , MySQL, JavaScript, CSS, and HTML5 | 9

As you’ll learn in Chapter 18 , there are many different ways you can lay out CSS rules,
and you can also include them directly within tags or save a set of rules to an external
file to be loaded in separately. This flexibility not only lets you style your HTML pre‐
cisely, but it can also (for example) provide built-in hover functionality to animate
objects as the mouse passes over them. Y ou will also learn how to access all of an ele‐
ment’s CSS properties from JavaScript as well as HTML.
And Then There’s HTML5
As useful as all these additions to the web standards became, they were not enough
for ever more ambitious developers. For example, there was still no simple way to
manipulate graphics in a web browser without resorting to plug-ins such as Flash.
And the same went for inserting audio and video into web pages. Plus, several annoy‐
ing inconsistencies had crept into HTML during its evolution.
So, to clear all this up and take the Internet beyond Web 2.0 and into its next itera‐
tion, a new standard for HTML was created to address all these shortcomings. It was
called HTML5  and it began development as long ago as 2004, when the first draft was
drawn up by the Mozilla Foundation and Opera Software (developers of two popular
web browsers). But it wasn’t until the start of 2013 that the final draft was submitted
to the World Wide Web Consortium (W3C), the international governing body for
web standards. 
With nine years for it to develop, you might think that would be the end of the speci‐
fication, but that’s not how things work on the Internet. Although websites come and
go at great speed, the underlying software is developed slowly and carefully, and so
the stable recommendation for HTML5 is expected only after this edition of the book
has been published—in late 2014. And then guess what? Work will move on to ver‐
sions 5.1 and higher, beginning in 2015. It’s a never-ending cycle of development.
However, while HTML5.1 is planned to bring some handy improvements (mainly to
the canvas), basic HTML5 is the new standard web developers now need to work to,
and it will remain in place for many years to come. So learning everything you can
about it now will stand you in very good stead.
There’s actually a great deal of new stuff in HTML (and quite a few things that have
been changed or removed), but in summary, here’s what you get:
Markup
Including new elements such as <nav>  and <footer> , and deprecated elements like
<font>  and <center> .
New APIs
Such as the <canvas>  element for writing and drawing on a graphics canvas, <audio>
and <video>  elements, offline web applications, microdata, and local storage.
10 | Chapter 1: Introduction to Dynamic Web Content

Applications
Including two new rendering technologies: MathML (Math Markup Language) for
displaying mathematical formulae and SVG (Scalable Vector Graphics) for creating
graphical elements outside of the new <canvas>  element. However, MathML and
SVG are somewhat specialist, and are so feature-packed they would need a book of
their own, so I don’t cover them here.
All these things (and more) are covered in detail starting in Chapter 22 .
One of the little things I like about the HTML5 specification is that
XHTML syntax is no longer required for self-closing elements. In
the past, you could display a line break using the <br>  element.
Then, to ensure future compatibility with XHTML (the planned
replacement for HTML that never happened), this was changed to
<br /> , in which a closing / character was added (since all ele‐
ments were expected to include a closing tag featuring this charac‐
ter). But now things have gone full circle, and you can use either
version of these types of element. So, for the sake of brevity and
fewer keystrokes, in this book I have reverted to the former style of
<br> , <hr> , and so on.
The Apache Web Server
In addition to PHP , MySQL, JavaScript, CSS, and HTML5, there’s a sixth hero in the
dynamic Web: the web server. In the case of this book, that means the Apache web
server.  We’ve discussed a little of what a web server does during the HTTP server/
client exchange, but it does much more behind the scenes.
For example, Apache doesn’t serve up just HTML files—it handles a wide range of
files from images and Flash files to MP3 audio files, RSS (Really Simple Syndication)
feeds, and so on. To do this, each element a web client encounters in an HTML page
is also requested from the server, which then serves it up.
But these objects don’t have to be static files such as GIF images. They can all be gen‐
erated by programs such as PHP scripts. That’s right: PHP can even create images and
other files for you, either on the fly or in advance to serve up later.
To do this, you normally have modules either precompiled into Apache or PHP or
called up at runtime. One such module is the GD (Graphics Draw) library, which
PHP uses to create and handle graphics.
Apache also supports a huge range of modules of its own. In addition to the PHP
module, the most important for your purposes as a web programmer are the modules
that handle security. Other examples are the Rewrite module, which enables the web
server to handle a varying range of URL types and rewrite them to its own internal
The Apache Web Server | 11

requirements, and the Proxy module, which you can use to serve up often-requested
pages from a cache to ease the load on the server.
Later in the book, you’ll see how to use some of these modules to enhance the fea‐
tures provided by the three core technologies.
About Open Source
Whether or not being open source  is the reason these technologies are so popular has
often been debated, but PHP , MySQL, and Apache are the three most commonly used
tools in their categories. What can be said definitively, though, is that their being
open source means that they have been developed in the community by teams of pro‐
grammers writing the features they themselves want and need, with the original code
available for all to see and change. Bugs can be found and security breaches can be
prevented before they happen.
There’s another benefit: all these programs are free to use. There’s no worrying about
having to purchase additional licenses if you have to scale up your website and add
more servers. And you don’t need to check the budget before deciding whether to
upgrade to the latest versions of these products.
Bringing It All Together
The real beauty of PHP , MySQL, JavaScript (sometimes aided by jQuery or other
frameworks), CSS, and HTML5  is the  wonderful way in which they all work together
to produce dynamic web content: PHP handles all the main work on the web server,
MySQL manages all the data, and the combination of CSS and JavaScript looks after
web page presentation. JavaScript can also talk with your PHP code on the web server
whenever it needs to update something (either on the server or on the web page).
And with the powerful new features in HTML5, such as the canvas, audio and video,
and geolocation, you can make your web pages highly dynamic, interactive, and
multimedia-packed.
Without using program code, let’s summarize the contents of this chapter by looking
at the process of combining some of these technologies into an everyday Ajax feature
that many websites use: checking whether a desired username already exists on the
site when a user is signing up for a new account. A good example of this can be seen
with Gmail (see Figure 1-3 ).
12 | Chapter 1: Introduction to Dynamic Web Content

Figure 1-3. Gmail uses Ajax to check the availability of usernames
The steps involved in this Ajax process would be similar to the following:
1.The server outputs the HTML to create the web form, which asks for the neces‐
sary details, such as username, first name, last name, and email address.
2.At the same time, the server attaches some JavaScript to the HTML to monitor
the username input box and check for two things: (a) whether some text has been
typed into it, and (b) whether the input has been deselected because the user has
clicked on another input box.
3.Once the text has been entered and the field deselected, in the background the
JavaScript code passes the username that was entered back to a PHP script on the
web server and awaits a response.
4.The web server looks up the username and replies back to the JavaScript regard‐
ing whether that name has already been taken.
5.The JavaScript then places an indication next to the username input box to show
whether the name is one available to the user—perhaps a green checkmark or a
red cross graphic, along with some text.
6.If the username is not available and the user still submits the form, the JavaScript
interrupts the submission and reemphasizes (perhaps with a larger graphic
and/or an alert box) that the user needs to choose another username.
7.Optionally, an improved version of this process could even look at the username
requested by the user and suggest an alternative that is currently available.
Bringing It All Together | 13

All of this takes place quietly in the background and makes for a comfortable and
seamless user experience. Without Ajax, the entire form would have to be submitted
to the server, which would then send back HTML, highlighting any mistakes. It
would be a workable solution, but nowhere near as tidy or pleasurable as on-the-fly
form-field processing.
Ajax can be used for a lot more than simple input verification and processing,
though; we’ll explore many additional things that you can do with it in the Ajax chap‐
ters later in this book.
In this chapter, you have read a good introduction to the core technologies of PHP ,
MySQL, JavaScript, CSS, and HTML5 (as well as Apache), and have learned how they
work together. In Chapter 2 , we’ll look at how you can install your own web develop‐
ment server on which to practice everything that you will be learning.
Questions
1.What four components (at the minimum) are needed to create a fully dynamic
web page?
2.What does HTML  stand for?
3.Why does the name MySQL  contain the letters SQL?
4.PHP and JavaScript are both programming languages that generate dynamic
results for web pages. What is their main difference, and why would you use both
of them?
5.What does CSS stand for?
6.List three major new elements introduced in HTML5.
7.If you encounter a bug (which is rare) in one of the open source tools, how do
you think you could get it fixed?
See Chapter 1 Answers  in Appendix A  for the answers to these questions.
14 | Chapter 1: Introduction to Dynamic Web Content

CHAPTER 2
Setting Up a Development Server
If you wish to develop Internet applications but don’t have your own development
server, you will have to upload every modification you make to a server somewhere
else on the Web before you can test it.
Even on a fast broadband connection, this can still represent a significant slowdown
in development time. On a local computer, however, testing can be as easy as saving
an update (usually just a matter of clicking once on an icon) and then hitting the
Refresh button in your browser.
Another advantage of a development server is that you don’t have to worry about
embarrassing errors or security problems while you’re writing and testing, whereas
you need to be aware of what people may see or do with your application when it’s on
a public website. It’s best to iron everything out while you’re still on a home or small
office system, presumably protected by firewalls and other safeguards.
Once you have your own development server, you’ll wonder how you ever managed
without one, and it’s easy to set one up. Just follow the steps in the following sections,
using the appropriate instructions for a PC, a Mac, or a Linux system.
In this chapter, we cover just the server side of the web experience, as described in
Chapter 1 . But to test the results of your work—particularly when we start using Java‐
Script, CSS, and HTML5 later in this book—you should also have an instance of
every major web browser running on some system convenient to you.  Whenever pos‐
sible, the list of browsers should include at least Internet Explorer, Mozilla Firefox, 
Opera, Safari, and Google Chrome. If you plan to ensure that your sites look good on
mobile devices too, you should try to arrange access to a wide range of Apple iOS and
Google Android phones and tablets.
15

What Is a WAMP , MAMP , or LAMP?
W AMP , MAMP ,  and LAMP  are abbreviations for “Windows, Apache, MySQL, and
PHP , ” “Mac, Apache, MySQL, and PHP , ” and “Linux, Apache, MySQL, and PHP . ”  
These abbreviations describe a fully functioning setup used for developing dynamic
Internet web pages.
W AMPs, MAMPs, and LAMPs come in the form of a package that binds the bundled
programs together so that you don’t have to install and set them up separately. This
means you can simply download and install a single program, and follow a few easy
prompts, to get your web development server up and running in the quickest time
with a minimum hassle.
During installation, several default settings are created for you. The security configu‐
rations of such an installation will not be as tight as on a production web server,
because it is optimized for local use. For these reasons, you should never install such a
setup as a production server.
But for developing and testing websites and applications, one of these installations
should be entirely sufficient.
If you choose not to go the W AMP/MAMP/LAMP route for build‐
ing your own development system, you should know that down‐
loading and integrating the various parts yourself can be very time-
consuming and may require a lot of research in order to configure
everything fully. But if you already have all the components
installed and integrated with one another, they should work with
the examples in this book.
Installing XAMPP on Windows
There are several available W AMP servers, each offering slightly different configura‐
tions,  but out of the various open source and free options, the best is probably
XAMPP . Y ou can download it at http://apachefriends.org , as shown in Figure 2-1 .
16 | Chapter 2: Setting Up a Development Server

Figure 2-1. The XAMPP website
I recommend that you always download the latest stable release (in this instance, it’s
1.8.3), and there is a direct download link for Windows, OS X, and Linux on the main
page.
During the lifetime of this edition, some of the screens and options
shown in the following walk-through may change. If so, just use
your common sense to proceed in as similar a manner as possible
to the sequence of actions described.
Once you’ve downloaded the installer, run it to bring up the window shown in
Figure 2-2 . Before arriving at that window, though, if you use an anti-virus program
or have User Account Control activated on Windows, you may first be shown one or
more advisory notices, and will have to click Y es and/or OK to continue installation.
Installing XAMPP on Windows | 17

Figure 2-2. The initial installation window of the installer
Click Next and then uncheck any of the components shown in Figure 2-3  that you
don’t need. For example, at the minimum for this book you will want to keep Apache,
MySQL, PHP , and PHPMyAdmin checked. The other features are not covered in this
book, but you can get more details on all of these, plus the core XAMPP technologies,
at http://apachefriends.org/faq_windows.html .
Clicking Next brings up the screen in Figure 2-4 , in which you should choose a folder
for the installation. Y ou are recommended to accept the default provided unless you
have a good reason to choose a different one. In this book, the default location is
assumed. If the folder you choose exists and is not empty, you will be unable to use it.
18 | Chapter 2: Setting Up a Development Server

Figure 2-3. Select the components to install
Figure 2-4. Choose a folder for the installation
Clicking Next brings up the screen in Figure 2-5  with a checkbox already checked
(which you can uncheck) for supplying information on adding free installers for
related products in a new web browser window or tab. After you choose whether or
not to receive this information, click the Next button.
Installing XAMPP on Windows | 19

Figure 2-5. Information on related free products is available
Having supplied the basic information required by the installer, you will arrive at the
screen in Figure 2-6 . Setup is ready to start, so click the Next button.
Figure 2-6. Accept the default values offered  for the ports
20 | Chapter 2: Setting Up a Development Server

When you click the Next button, installation will begin, and you will see the screen in
Figure 2-7  while it progresses. During installation, you can click any of the icons to
open up a web browser window displaying information on the product shown. The
whole process should take only a few minutes on most computers.
Figure 2-7. Installation is in progress
Once installation is complete, the screen in Figure 2-8  will be displayed with a check‐
box already checked for starting the XAMPP control panel. I recommend you leave
this checked and then click Finish.
Now you are ready to start using XAMPP by configuring it from the control panel, as
shown in Figure 2-9 . The panel is automatically displayed if you kept the checkbox
checked on completing installation. Or you can call it up from the Start menu or or
start screen.
Installing XAMPP on Windows | 21

Figure 2-8. Click Finish to complete installation
Figure 2-9. The control panel
The first thing I recommend you do is click the Config button at the top-right corner
to call up the window shown in Figure 2-10 . In particular, if they are not already
22 | Chapter 2: Setting Up a Development Server

checked, I recommend you check the Apache and MySQL boxes to ensure they autos‐
tart. Or, you can simply click the Start buttons for Apache and MySQL to have them
run for this session only.
Figure 2-10. Choose your editor, autostart components and more
While on that screen, you may find that you also wish to alter the port settings used
by clicking Service and Port Settings to call up the window in Figure 2-11 .
Figure 2-11. Click Save to complete setup
The default ports assigned will normally be port 80 for the Apache web server, 443 for
SSL, and 3306 for MySQL. If you change these values, make sure you insert these
changed values in place of any defaults used later in this book.
Installing XAMPP on Windows | 23

The control panel is where you can conduct most of the actions required for manag‐
ing XAMPP , including editing and viewing the various configuration files, and look‐
ing at access, error, and other log files, all with a simple interface. For example, in
Figure 2-12 , the Apache Log button has been clicked, and the folder of log files
opened.
Figure 2-12. Opening the Apache log file folder
Testing the Installation
The first thing to do at this point is verify that everything is working correctly. To do
this, you are going to try to display the default web page, which will have been saved
in the server’s document root folder (see Figure 2-13 ). Enter either of the following
two URLs into the address bar of your browser:
localhost
127.0.0.1
24 | Chapter 2: Setting Up a Development Server

Figure 2-13. How the XAMPP home page should look by default
The word localhost  is used in URLs to specify the local computer, which will also
respond to the  IP address of 127.0.0.1, so you can use either method of calling up the
document root of your web server.
If you chose a server port other than 80 using the control panel (for
example 8080), then you must place a colon followed by that value
after either of the preceding URLs—like this: localhost:8080 . Y ou
will have to do the same for all example files in this book. So,
instead of entering the URL localhost/example.php  into the address
bar, you should enter localhost:8080/example.php  (or whatever
value you chose).
Accessing the document root
The document root  is the directory that contains the main web documents for a
domain. This is the one that is entered when a basic URL without a path is typed into
a browser, such as http://yahoo.com  or, for your local server, http://localhost.
By default, XAMP uses the following location for this directory:
C:/xampp/htdocs
To ensure that you have everything correctly configured, you should now create the
obligatory “Hello World” file. So create a small HTML file along the following lines
using Windows Notepad or any other program or text editor, but not a rich word
processor such as Microsoft Word (unless you save as plain text):
Installing XAMPP on Windows | 25

<html>
  <head>
    <title>A quick test</title>
  </head>
  <body>
    Hello World!
  </body>
</html>
Once you have typed this, save the file into the document root directory previously
discussed, using the filename test.htm . If you are using Notepad, make sure that the
“Save as type” box is changed from “Text Documents (*.txt)” to “ All Files (*.*)” . Or, if
you prefer, you can save the file using the .html  file extension; either is acceptable.
Y ou can now call this page up in your browser by entering one of the following URLs
(according to the extension you used) in its address bar (see Figure 2-14 ):
http://localhost/test.htm
http://localhost/test.html
Figure 2-14. Your first web page
Alternative WAMPs
When software  is updated, it sometimes  works differently than you’ d expected, and
bugs can even be introduced. So if you encounter difficulties that you cannot resolve,
you may prefer to choose one of the other solutions available on the Web instead.
Y ou will still be able to make use of all the examples in this book, but you’ll have to
follow the instructions supplied with each W AMP , which may not be as easy to follow
as the preceding guide.
Here’s a selection of some of the best, in my opinion:
•EasyPHP: easyphp.org
•W AMPServer: wampserver.com/en
•Glossword W AMP: glossword.biz/glosswordwamp
26 | Chapter 2: Setting Up a Development Server

Installing XAMPP on Mac OS X
XAMPP is also available on OS X, and you can download it from http://apache
friends.org , as shown previously in Figure 2-1 .
Double-click the .dmg  file once downloaded, and then double-click the installer and
follow the same sequence of instructions as for Windows (although you may also be
given checkbox options to choose whether to load the core files, developer files, or
both).
The installation process is similar to Windows, but with XAMPP being installed in
the following location: /Applications/XAMPP
Upon successful installation, the XAMPP Manager window will open. To ensure
XAMP can take proper control of web serving on your Mac, first you may need to
turn off any Apache web server your Mac is already running, by entering the follow‐
ing in a Terminal window:
sudo apachectl stop
Now you can click the middle tab (entitled Manage Servers) at the top of the window,
and then click Start All to get the XAMPP servers running. After this, click the Wel‐
come tab to return to the main Manager screen, and then click the Go to Application
button, which will call up the web page shown in Figure 2-13 . Y ou are now all set to
use the software suite.
For more information on installing and using Mac XAMPP , please refer to apache
friends.org/faq_osx.html
In the future, to call up the Manager, open your Applications  folder
and then locate the XAMPP  folder, and run manager-osx .
Accessing the Document Root
On Macs, the XAMPP document root (in which web documents are stored and
served from) can be found at
/Applications/XAMPP/htdocs
To test your new installation, type some HTML such as the following into TextEdit
(or any editor that can save as plain text) and then save it in the document root as
test.html . If you then type localhost/test.html  into the address bar of your browser, the
result should be the same as shown previously in Figure 2-14 :
<html>
  <head>
Installing XAMPP on Mac OS X | 27

<title>A quick test</title>
  </head>
  <body>
    Hello World!
  </body>
</html>
Installing a LAMP on Linux
This book is aimed mostly at PC and Mac users, but its contents will work equally
well on a Linux computer. However, there are dozens of popular flavors of Linux, and
each of them may require installing a LAMP in a slightly different way, so I can’t
cover them all in this book.
However, many Linux versions come preinstalled with a web server and MySQL, and
the chances are that you may already be all set to go. To find out, try entering the
following into a browser and see whether you get a default document root web page:
http://localhost
If this works, you probably have the Apache server installed and may well have
MySQL up and running too; check with your system administrator to be sure.
If you don’t yet have a web server installed, however, there’s a  version of XAMPP
available that you can download at apachefriends.org .
Installation is similar to the sequence shown in the Windows section, and if you need
further assistance on using the suite, please refer to apachefriends.org/faq_linux.html
Working Remotely
If you have access to a web server already configured with PHP and MySQL, you can
always use that for your web development.  But unless you have a high-speed connec‐
tion, it is not always your best option. Developing locally allows you to test modifica‐
tions with little or no upload delay.
Accessing MySQL remotely may not be easy either. Y ou may have to Telnet or SSH
into your server to manually create databases and set permissions from the command
line. Y our web-hosting company will advise you on how best to do this and provide
you with any password it has set for your MySQL access (as well as, of course, for
getting into the server in the first place).
Logging In
I recommend that, at minimum, Windows  users should  install a program such as
PuTTY , available at http://putty.org , for Telnet and  SSH access (remember that SSH is
much more secure than Telnet).  
28 | Chapter 2: Setting Up a Development Server

On a Mac, you already have SSH available.  Just select the Applications  folder, followed
by Utilities , and then launch Terminal. In the terminal window, log in to a server
using SSH as follows:
ssh mylogin@server.com
where server.com  is the name of the server you wish to log into and mylogin  is the
username you will log in under. Y ou will then be prompted for the correct password
for that username and, if you enter it correctly, you will be logged in.
Using FTP
To transfer files to and from your web server, you will need an FTP program. If you
go searching the Web for a good one, you’ll find so many that it could take you quite
a while to come across one with all the right features for you.
Nowadays I always recommend FireFTP , because of these advantages:
•It is an add-on for the Firefox web browser, and will therefore work on any plat‐
form on which Firefox runs.
•Calling it up can be as simple as selecting a bookmark.
•It is one of the fastest and easiest-to-use FTP programs that I have encountered.
Y ou may say, “But I use only Microsoft Internet Explorer, and
FireFTP is not available for it, ” but I would counter that if you are
going to develop web pages, you need a copy of each of the main
browsers installed on your PC anyway, as suggested at the start of
this chapter.
To install FireFTP , visit http://fireftp.mozdev.org  using Firefox and click the Down‐
load FireFTP link. It’s about half a megabyte in size and installs very quickly. Once it’s
installed, restart Firefox; you can then access FireFTP from the Tools menu (see
Figure 2-15 ).
Another excellent FTP program is the open source FileZilla, available from http://
filezilla-project.org , for Windows, Linux, and Mac OS X 10.5 or newer.
Of course, if you already have an FTP program, all the better—stick with what you
know.
Working Remotely | 29

Figure 2-15. FireFTP offers  full FTP access from within Firefox
Using a Program Editor
Although a plain-text editor works for editing HTML, PHP , and JavaScript, there
have been some tremendous improvements in dedicated  program editors, which now
incorporate very handy features such as colored syntax highlighting. Today’s program
editors are smart and can show you where you have syntax errors before you even
run a program. Once you’ve used a modern editor, you’ll wonder how you ever man‐
aged without one.
There are a number of good programs available, but I have settled on Editra, because
it’s free and available on Mac, Windows, and Linux/Unix. Y ou can download a copy
by visiting http://editra.org  and selecting the Download link toward the top left of the
page, where you can also find the documentation for it.
As you can see from Figure 2-16 , Editra highlights the syntax appropriately, using
colors to help clarify what’s going on. What’s more, you can place the cursor next to
brackets or braces, and Editra will highlight the matching pair so that you can check
whether you have too many or too few. In fact, Editra does a lot more in addition,
which you will discover and enjoy as you use it.
30 | Chapter 2: Setting Up a Development Server

Figure 2-16. Program editors are superior to plain-text editors
Again, if you have a different preferred program editor, use that; it’s always a good
idea to use programs you’re already familiar with.
Using an IDE
As good as dedicated program editors can be for your programming productivity,
their utility pales into insignificance when compared to integrated development envi‐
ronments  (IDEs), which offer many additional features such as in-editor debugging
and program testing, as well as function descriptions and much more.
Figure 2-17  shows the popular phpDesigner IDE with a PHP program loaded into the
main frame, and the righthand Code Explorer listing the various classes, functions,
and variables that it uses.
Using an IDE | 31

Figure 2-17. When you’re using an IDE such as phpDesigner, PHP development becomes
much quicker and easier
When developing with an IDE, you can set breakpoints and then run all (or portions)
of your code, which will then stop at the breakpoints and provide you with informa‐
tion about the program’s current state.
As an aid to learning programming, the examples in this book can be entered into an
IDE and run there and then, without the need to call up your web browser. There are
several IDEs available for different platforms, most of which are commercial, but
there are some free ones too. Table 2-1  lists some of the most popular PHP IDEs,
along with their download URLs.
Choosing an IDE can be a very personal thing, so if you intend to use one, I advise
you to download a couple or more to try them out first; they all either have trial ver‐
sions or are free to use, so it won’t cost you anything.
32 | Chapter 2: Setting Up a Development Server

Table 2-1. A selection of PHP IDEs
IDE Download URL Cost Win Mac Lin
Eclipse PDT http://eclipse.org/pdt/downloads/ Free✓✓✓
Komodo IDE http://activestate.com/Products/komodo_ide $245✓✓✓
NetBeans http://www.netbeans.org Free✓✓✓
phpDesigner http://mpsoftware.dk $39✓   
PHPEclipse http://phpeclipse.de Free✓✓✓
PhpED http://nusphere.com $119✓  ✓
PHPEdit http://www.phpedit.com $119✓   
Y ou should take the time to install a program editor or IDE you are comfortable with
and you’ll then be ready to try out the examples in the coming chapters.
Armed with these tools, you are now ready to move on to Chapter 3 , where we’ll start
exploring PHP in further depth and find out how to get HTML and PHP to work
together, as well as how the PHP language itself is structured. But before moving on, I
suggest you test your new knowledge with the following questions.
Questions
1.What is the difference between a W AMP , a MAMP , and a LAMP?
2.What do the IP address 127.0.0.1 and the URL http://localhost  have in common?
3.What is the purpose of an FTP program?
4.Name the main disadvantage of working on a remote web server.
5.Why is it better to use a program editor instead of a plain-text editor?
See Chapter 2 Answers  in Appendix A  for the answers to these questions.
Questions | 33



CHAPTER 3
Introduction to PHP
In Chapter 1 , I explained that PHP is the language that you use to make the server
generate dynamic output—output that is potentially different each time a browser
requests a page. In this chapter, you’ll start learning this simple but powerful lan‐
guage; it will be the topic of the following chapters up through Chapter 7 .
I encourage you to develop your PHP code in one of the IDEs listed in Chapter 2 . It
will help you catch typos and speed up learning tremendously in comparison to less
feature-rich editors.
Many of these development environments let you run the PHP code and see the out‐
put discussed in this chapter. I’ll also show you how to embed the PHP in an HTML
file so that you can see what the output looks like in a web page (the way your users
will ultimately see it). But that step, as thrilling as it may be at first, isn’t really impor‐
tant at this stage.
In production, your web pages will be a combination of PHP , HTML, and JavaScript,
and some MySQL statements laid out using CSS, and possibly utilizing various
HTML5 elements. Furthermore, each page can lead to other pages to provide users
with ways to click through links and fill out forms. We can avoid all that complexity
while learning each language, though. Focus for now on just writing PHP code and
making sure that you get the output you expect—or at least that you understand the
output you actually get!
Incorporating PHP Within HTML
By default, PHP documents end with the extension .php. When a web server encoun‐
ters this extension in a requested file, it automatically passes it to the PHP processor.
Of course, web servers are highly configurable, and some web developers choose to
35

force files ending with .htm  or .html  to also get parsed by the PHP processor, usually
because they want to hide the fact that they are using PHP .
Y our PHP program is responsible for passing back a clean file suitable for display in a
web browser. At its very simplest, a PHP document will output only HTML. To prove
this, you can take any normal HTML document such as an index.html  file and save it
as index.php , and it will display identically to the original.
To trigger the PHP commands, you need to learn a new tag. Here is the first part:
<?php
The first thing you may notice is that the tag has not been closed. This is because
entire sections of PHP can be placed inside this tag, and they finish only when the
closing part is encountered, which looks like this:
?>
A small PHP “Hello World” program might look like Example 3-1 .
Example 3-1. Invoking PHP
<?php
  echo "Hello world";
?>
The way you use this tag is quite flexible. Some programmers open the tag at the start
of a document and close it right at the end, outputting any HTML directly from PHP
commands. Others, however, choose to insert only the smallest possible fragments of
PHP within these tags wherever dynamic scripting is required, leaving the rest of the
document in standard HTML.
The latter type of programmer generally argues that their style of coding results in
faster code, while the former say that the speed increase is so minimal that it doesn’t
justify the additional complexity of dropping in and out of PHP many times in a sin‐
gle document.
As you learn more, you will surely discover your preferred style of PHP development,
but for the sake of making the examples in this book easier to follow, I have adopted
the approach of keeping the number of transfers between PHP and HTML to a mini‐
mum—generally only once or twice in a document.
By the way, there is a slight variation to the PHP syntax. If you browse the Internet for
PHP examples, you may also encounter code where the opening and closing syntax
looks like this:
<?
  echo "Hello world";
?>
36 | Chapter 3: Introduction to PHP

Although it’s not as obvious that the PHP parser is being called, this is a valid, alter‐
native syntax that also usually works, but should be discouraged, as it is incompatible
with XML and its use is now deprecated (meaning that it is no longer recommended
and could be removed in future versions).
If you have only PHP code in a file, you may omit the closing ?>.
This can be a good practice, as it will ensure that you have no
excess whitespace leaking from your PHP files (especially impor‐
tant when you’re writing object-oriented code).
This Book’s Examples
To save you the time  it would take to type them all in, all the examples  from this book
have been archived onto the website at http://lpmj.net , which you can download to
your computer by clicking the Download Examples link in the heading section (see
Figure 3-1 ).
Figure 3-1. Viewing examples from this book at http://lpmj.net
This Book’s Examples | 37

As well as having all the examples saved by chapter and example number (such as
example3-1.php ), the provided archive also contains an additional directory called
named_examples , in which you’ll find all the examples I suggest you save using a spe‐
cific filename (such as the upcoming Example 3-4 , which should be saved as
test1.php ).
The Structure of PHP
We’re going to cover quite a lot of ground in this section. It’s not too difficult, but I
recommend that you work your way through it carefully, as it sets the foundation for
everything else in this book. As always, there are some useful questions at the end of
the chapter that you can use to test how much you’ve learned.
Using Comments
There are two ways in which you can add comments to your PHP code.  The first
turns a single line into a comment by preceding it with a pair of forward slashes:
// This is a comment
This version of the comment feature is a great way to temporarily remove a line of
code from a program that is giving you errors. For example, you could use such a
comment to hide a debugging line of code until you need it, like this:
// echo "X equals $x";
Y ou can also use this type of comment directly after a line of code to describe its
action, like this:
$x += 10; // Increment $x by 10
When you need multiple-line comments, there’s a second type of comment, which
looks like Example 3-2 .
Example 3-2. A multiline comment
<?php
/* This is a section
   of multiline comments
   which will not be
   interpreted */
?>
Y ou can use the /* and */ pairs of characters to open and close comments almost
anywhere you like inside your code. Most, if not all, programmers use this construct
to temporarily comment out entire sections of code that do not work or that, for one
reason or another, they do not wish to be interpreted.
38 | Chapter 3: Introduction to PHP

A common error is to use /* and */ to comment out a large section
of code that already contains a commented-out section that uses
those characters. Y ou can’t nest comments this way; the PHP inter‐
preter won’t know where a comment ends and will display an error
message. However, if you use a program editor or IDE with syntax
highlighting, this type of error is easier to spot.
Basic Syntax
PHP is quite a simple language  with roots in C and Perl, yet it looks more like Java. It
is also very flexible, but there are a few rules that you need to learn about its syntax
and structure.
Semicolons
Y ou may have noticed in the previous examples that the PHP commands ended with
a semicolon, like this:
$x += 10;
Probably the most common cause of errors you will encounter with PHP is forgetting
this semicolon. This causes PHP to treat multiple statements like one statement,
which it is unable to understand, prompting it to produce a Parse error  message.
The $ symbol
The $ symbol has come to be used in many different ways by different programming
languages. For example, if you have ever written in the BASIC language, you will have
used the $ to terminate variable names to denote them as strings.
In PHP , however, you must place a $ in front of all variables. This is required to make
the PHP parser faster, as it instantly knows whenever it comes across a variable.
Whether your variables are numbers, strings, or arrays, they should all look some‐
thing like those in Example 3-3 .
Example 3-3. Three  different  types of variable assignment
<?php
  $mycounter = 1;
  $mystring  = "Hello";
  $myarray   = array("One", "Two", "Three");
?>
And really that’s pretty much all the syntax that you have to remember. Unlike lan‐
guages such as Python, which are very strict about how you indent and lay out our
code, PHP leaves you completely free to use (or not use) all the indenting and spacing
you like. In fact, sensible use of whitespace  is generally encouraged (along with com‐
The Structure of PHP | 39

prehensive commenting) to help you understand your code when you come back to
it. It also helps other programmers when they have to maintain your code.
Variables
There’s a simple metaphor that will help you understand what PHP variables are all
about. Just think of them as little (or big) matchboxes! That’s right—matchboxes that
you’ve painted over and written names on.
String variables
Imagine you have a matchbox on which you have written the word username . Y ou
then write Fred Smith  on a piece of paper and place it into the box (see Figure 3-2 ).
Well, that’s the same process as assigning a string value to a variable, like this:
$username = "Fred Smith";
Figure 3-2. You can think of variables as matchboxes containing items
The quotation marks indicate that “Fred Smith” is a string  of characters. Y ou must
enclose each string in either quotation marks or apostrophes (single quotes),
although there is a subtle difference between the two types of quote, which is
explained later. When you want to see what’s in the box, you open it, take the piece of
paper out, and read it. In PHP , doing so looks like this:
echo $username;
Or you can assign it to another variable (photocopy the paper and place the copy in
another matchbox), like this:
$current_user = $username;
40 | Chapter 3: Introduction to PHP

If you are keen to start trying out PHP for yourself, you could enter the examples in
this chapter into an IDE (as recommended at the end of Chapter 2 ) to see instant
results, or you could enter the code in Example 3-4  into a program editor and save it
to your server’s document root directory (also discussed in Chapter 2 ) as test1.php .
Example 3-4. Your first PHP program
<?php // test1.php
  $username = "Fred Smith";
  echo $username;
  echo "<br>";
  $current_user = $username;
  echo $current_user;
?>
Now you can call it up by entering the following into your browser’s address bar:
http://localhost/test1.php
If during installation of your web server (as detailed in Chapter 2 )
you changed the port assigned to the server to anything other than
80, then you must place that port number within the URL in this
and all other examples in this book. So, for example, if you changed
the port to 8080, the preceding URL becomes this:
http://localhost:8080/test1.php
I won’t mention this again, so just remember to use the port num‐
ber if required when trying examples or writing your own code.
The result of running this code should be two occurrences of the name Fred Smith ,
the first of which is the result of the echo $username  command, and the second of
the echo $current_user  command.
Numeric variables
Variables don’t contain just strings—they can contain numbers too. If we return to
the matchbox analogy, to store the number 17 in the variable $count , the equivalent
would be placing, say, 17 beads in a matchbox on which you have written the word
count :
$count = 17;
Y ou could also use a floating-point number (containing a decimal point); the syntax is
the same:
$count = 17.5;
The Structure of PHP | 41

To read the contents of the matchbox, you would simply open it and count the beads.
In PHP , you would assign the value of $count  to another variable or perhaps just echo
it to the web browser.
Arrays
So what are arrays? Well, you can  think of them as several matchboxes glued together.
For example, let’s say we want to store the player names for a five-person soccer team
in an array called $team . To do this, we could glue five matchboxes side by side and
write down the names of all the players on separate pieces of paper, placing one in
each matchbox.
Across the whole top of the matchbox assembly we would write the word team  (see
Figure 3-3 ). The equivalent of this in PHP would be the following:
$team = array('Bill', 'Mary', 'Mike', 'Chris', 'Anne');
This syntax is more complicated than the ones I’ve explained so far. The array-
building code consists of the following construct:
array();
with five strings inside. Each string is enclosed in apostrophes.
If we then wanted to know who player 4 is, we could use this command:
echo $team[3]; // Displays the name Chris
Figure 3-3. An array is like several matchboxes glued together
42 | Chapter 3: Introduction to PHP

The reason the previous statement has the number 3, not 4, is because the first ele‐
ment of a PHP array is actually the zeroth element, so the player numbers will there‐
fore be 0 through 4.
Two-dimensional arrays
There’s a lot more you can do  with arrays. For example, instead of being single-
dimensional lines of matchboxes, they can be two-dimensional matrixes or can even
have three or more dimensions.
As an example of a two-dimensional array, let’s say we want to keep track of a game of
tic-tac-toe, which requires a data structure of nine cells arranged in a 3×3 square. To
represent this with matchboxes, imagine nine of them glued to each other in a matrix
of three rows by three columns (see Figure 3-4 ).
Figure 3-4. A multidimensional array simulated with matchboxes
Y ou can now place a piece of paper with either an x or an o in the correct matchbox
for each move played. To do this in PHP code, you have to set up an array containing
three more arrays, as in Example 3-5 , in which the array is set up with a game already
in progress.
Example 3-5. Defining  a two-dimensional array
<?php
  $oxo = array(array('x', ' ', 'o'),
               array('o', 'o', 'x'),
               array('x', 'o', ' '));
?>
The Structure of PHP | 43

Once again, we’ve moved up a step in complexity, but it’s easy to understand if you
grasp the basic array syntax. There are three array()  constructs nested inside the
outer array()  construct.
To then return the third element in the second row of this array, you would use the
following PHP command, which will display an x:
echo $oxo[1][2];
Remember that array indexes (pointers at elements within an
array) start from zero, not one, so the [1] in the previous com‐
mand refers to the second of the three arrays, and the [2] refer‐
ences the third position within that array. It will return the contents
of the matchbox three along and two down.
As mentioned, we can support arrays with even more dimensions by simply creating
more arrays within arrays. However, we will not be covering arrays of more than two
dimensions in this book.
And don’t worry if you’re still having difficulty coming to grips with using arrays, as
the subject is explained in detail in Chapter 6 .
Variable-naming rules
When creating PHP variables, you must follow these four rules:
•Variable names must start with a letter of the alphabet or the _ (underscore)
character.
•Variable names can contain only the characters a-z, A-Z, 0-9, and _ (underscore).
•Variable names may not contain spaces. If a variable must comprise more than
one word, it should be separated with the _ (underscore ) character (e.g.,
$user_name ).
•Variable names are case-sensitive. The variable $High_Score  is not the same as
the variable $high_score .
To allow extended ASCII characters that include accents, PHP also
supports the bytes from 127 through 255 in variable names. But
unless your code will be maintained only by programmers who are
used to those characters, it’s probably best to avoid them, because
programmers using English keyboards will have difficulty access‐
ing them.
44 | Chapter 3: Introduction to PHP

Operators
Operators  are the mathematical, string, comparison, and logical commands such as
plus, minus, multiply, and divide. PHP looks a lot like plain arithmetic; for instance,
the following statement outputs 8:
echo 6 + 2;
Before moving on to learn what PHP can do for you, take a moment to learn about
the various operators it provides.
Arithmetic operators
Arithmetic operators do what you would expect.  They are used to perform mathe‐
matics. Y ou can use them for the main four operations (plus, minus, times, and 
divide) as well as to find a modulus (the remainder after a division) and  to increment
or  decrement a value (see Table 3-1 ).
Table 3-1. Arithmetic operators
Operator Description Example
+ Addition $j + 1
- Subtraction $j - 6
* Multiplication $j * 11
/ Division $j / 4
% Modulus (division remainder) $j % 9
++ Increment ++$j
-- Decrement --$j
Assignment operators
These operators are used to assign values to variables. They start with the very simple
= and move on to +=, -=, and so on (see Table 3-2 ). The operator += adds the value on
the right side to the variable on the left, instead of totally replacing the value on the
left. Thus, if $count  starts with the value 5, the statement
$count += 1;
sets $count  to 6, just like the more familiar assignment statement:
$count = $count + 1;
Strings have their own operator, the period ( .), detailed in the section “String concat‐
enation” on page 49 .
The Structure of PHP | 45

Table 3-2. Assignment operators
Operator Example Equivalent to
= $j = 15$j = 15
+= $j += 5$j = $j + 5
-= $j -= 3$j = $j - 3
*= $j *= 8$j = $j * 8
/= $j /= 16$j = $j / 16
.= $j .= $k$j = $j . $k
%= $j %= 4$j = $j % 4
Comparison operators
Comparison operators are generally  used inside a construct such as an if statement
in which you need to compare two items. For example, you may wish to know
whether a variable you have been incrementing has reached a specific value, or
whether another variable is less than a set value, and so on (see Table 3-3 ).
Note the difference between = and ==. The first is an assignment operator, and the
second is a  comparison operator. Even more-advanced programmers can sometimes  
transpose the two when coding hurriedly, so be careful.
Table 3-3. Comparison operators
Operator Description Example
== Is equal  to $j == 4
!= Is not equal  to $j != 21
> Is greater than $j > 3
< Is less than $j < 100
>= Is greater than or equal  to$j >= 15
<= Is less than or equal  to$j <= 8
Logical operators
If you haven’t used them before, logical operators may at first seem a little daunting.
But just think of them the way you would use logic in English. For example, you
might say to yourself, “If the time is later than 12 p.m. and earlier than 2 p.m., then
have lunch. ” In PHP , the code for this might look something like the following (using
military timing):
if ($hour > 12 && $hour < 14) dolunch();
46 | Chapter 3: Introduction to PHP

Here we have moved the set of instructions for actually going to lunch into a function
that we will have to create later called dolunch . The then  of the statement is left out,
because it is implied and therefore unnecessary.
As the previous example shows, you generally use a logical operator to combine the
results of two of the comparison operators shown in the previous section. A logical
operator can also be input to another logical operator: “If the time is later than 12
p.m. and earlier than 2 p.m., or if the smell of a roast is permeating the hallway and
there are plates on the table. ” As a rule, if something has a TRUE  or FALSE  value, it can
be input  to a logical  operator. A logical operator takes two true-or-false inputs and
produces a true-or-false result.
Table 3-4  shows the logical operators.
Table 3-4. Logical operators
Operator Description Example
&& And $j == 3 && $k == 2
and Low-precedence and$j == 3 and $k == 2
|| Or $j < 5 || $j > 10
or Low-precedence or$j < 5 or $j > 10
! Not ! ($j == $k)
xor Exclusive or $j xor $k
Note that && is usually interchangeable with and; the same is true for || and or. But
and and or have a lower precedence, so in some cases, you may need extra parenthe‐
ses to force the required precedence. On the other hand, there are times when only
and or or are acceptable, as in the following statement, which uses an or operator:
$html = file_get_contents($site) or die("Cannot download from $site");
The most unusual of these operators is xor, which stands for exclusive or  and returns
a TRUE  value if either value is TRUE , but a FALSE  value if both inputs are TRUE  or both
inputs are FALSE . To understand this, imagine that you want to concoct your own
cleaner for household items. Ammonia makes a good cleaner, and so does bleach, so
you want your cleaner to have one of these. But the cleaner must not have both,
because the combination is hazardous. In PHP , you could represent this as follows:
$ingredient = $ammonia xor $bleach;
In the example, if either $ammonia  or $bleach  is TRUE , $ingredient  will also be set to
TRUE . But if both are TRUE  or both are FALSE , $ingredient  will be set to FALSE .
The Structure of PHP | 47

Variable Assignment
The syntax to assign a value to a variable is always variable = value . Or, to reassign the
value to another variable, it is other variable = variable .
There are also a couple of other assignment operators that you will find useful. For
example, we’ve already seen
$x += 10;
which tells the PHP parser to add the value on the right (in this instance, the value
10) to the variable $x. Likewise, we could subtract as follows:
$y -= 10;
Variable incrementing and decrementing
Adding or subtracting 1 is such a common operation that PHP provides special oper‐
ators for it. Y ou can use one of the following in place of the += and -= operators:
++$x;
--$y;
In conjunction with a test (an if statement), you could use the following code:
if (++$x == 10) echo $x;
This tells PHP to first increment the value of $x and then test whether it has the value
10; if it does, output its value. But you can also require PHP to increment (or, in the
following example, decrement) a variable after  it has tested the value, like this:
if ($y-- == 0) echo $y;
which gives a subtly different result. Suppose $y starts out as 0 before the statement is
executed. The comparison will return a TRUE  result, but $y will be set to –1 after the
comparison is made. So what will the echo  statement display: 0 or –1? Try to guess,
and then try out the statement in a PHP processor to confirm. Because this combina‐
tion of statements is confusing, it should be taken as just an educational example and
not as a guide to good programming style.
In short, whether a variable is incremented or decremented before or after testing
depends on whether the increment or decrement operator is placed before or after
the variable.
By the way, the correct answer to the previous question is that the echo  statement will
display the result –1, because $y was decremented right after it was accessed in the if
statement, and before the echo  statement.
48 | Chapter 3: Introduction to PHP

String concatenation
String  concatenation uses the period ( .) to append one string of characters to
another. The simplest way to do this is as follows:
echo "You have " . $msgs . " messages.";
Assuming that the variable $msgs  is set to the value 5, the output from this line of
code will be the following:
You have 5 messages.
Just as you can add a value to a numeric variable with the += operator, you can
append one string to another using .=, like this:
$bulletin .= $newsflash;
In this case, if $bulletin  contains a news bulletin and $newsflash  has a news flash,
the command appends the news flash to the news bulletin so that $bulletin  now
comprises both strings of text.
String types
PHP supports two types of strings that are denoted by the type of quotation mark
that you use. If you wish to assign a literal string, preserving the exact contents, you
should use the single quotation mark (apostrophe), like this:
$info = 'Preface variables with a $ like this: $variable';
In this case, every character within the single-quoted string is assigned to $info . If
you had used double quotes, PHP would have attempted to evaluate $variable  as a
variable.
On the other hand, when you want to include the value of a variable inside a string,
you do so by using double-quoted strings:
echo "This week $count people have viewed your profile";
As you will realize, this syntax also offers a simpler form of concatenation in which
you don’t need to use a period, or close and reopen quotes, to append one string to
another. This is called variable substitution , and you will notice some applications
using it extensively and others not using it at all.
Escaping characters
Sometimes a string needs to contain characters with special meanings that might be
interpreted incorrectly. For example, the following line of code will not work, because
the second quotation mark encountered in the word spelling’s  will tell the PHP parser
that the string end has been reached. Consequently, the rest of the line will be rejected
as an error:
The Structure of PHP | 49

$text = 'My spelling's atroshus'; // Erroneous syntax
To correct this, you can add a backslash directly before the offending quotation mark
to tell PHP to treat the character literally and not to interpret it:
$text = 'My spelling\'s still atroshus';
And you can perform this trick in almost all situations in which PHP would other‐
wise return an error by trying to interpret a character. For example, the following
double-quoted string will be correctly assigned:
$text = "She wrote upon it, \"Return to sender\".";
Additionally, you can use escape characters to insert various special characters into
strings such as tabs, newlines, and carriage returns.  These are represented, as you
might  guess,  by \t, \n, and \r. Here is an example using tabs to lay out a heading; it
is included here merely to illustrate escapes, because in web pages there are always
better ways to do layout:
$heading = "Date\tName\tPayment";
These special backslash-preceded characters work only in double-quoted strings. In
single-quoted strings, the preceding string would be displayed with the ugly \t
sequences instead of tabs. Within single-quoted strings, only the escaped apostrophe
(\') and escaped backslash itself ( \\) are recognized as escaped characters.
Multiple-Line Commands
There are times when you need to output quite a lot of text from PHP , and using sev‐
eral echo  (or print ) statements would be time-consuming and messy. To overcome
this, PHP offers two conveniences. The first is just to put multiple lines between
quotes, as in Example 3-6 . Variables can also be assigned, as in Example 3-7 .
Example 3-6. A multiline string echo statement
<?php
  $author = "Steve Ballmer";
  echo "Developers, Developers, developers, developers, developers,
  developers, developers, developers, developers!
  - $author.";
?>
Example 3-7. A multiline string assignment
<?php
  $author = "Bill Gates";
  $text = "Measuring programming progress by lines of code is like
50 | Chapter 3: Introduction to PHP

Measuring aircraft building progress by weight.
  - $author.";
?>
PHP also offers a multiline sequence using the <<< operator—commonly referred to
as a here-document  or heredoc —as  a way of specifying a string literal, preserving the
line breaks and other whitespace (including indentation) in the text. Its use can be
seen in Example 3-8 .
Example 3-8. Alternative multiline echo statement
<?php
  $author = "Brian W. Kernighan";
  echo <<<_END
  Debugging is twice as hard as writing the code in the first place.
  Therefore, if you write the code as cleverly as possible, you are,
  by definition, not smart enough to debug it.
  - $author.
_END;
?>
This code tells PHP to  output everything between the two _END  tags as if it were a
double-quoted string (except that quotes in a heredoc do not need to be escaped).
This means it’s possible, for example, for a developer to write entire sections of
HTML directly into PHP code and then just replace specific dynamic parts with PHP
variables.
It is important to remember that the closing _END;  tag must  appear right at the start
of a new line and it must be the only thing on that line—not even a comment is
allowed to be added after it (nor even a single space). Once you have closed a multi‐
line block, you are free to use the same tag name again.
Remember: using the <<<_END..._END;  heredoc construct, you
don’t have to add \n linefeed characters to send a linefeed—just
press Return and start a new line. Also, unlike either a double-
quote- or single-quote-delimited string, you are free to use all the 
single and double quotes you like within a heredoc, without escap‐
ing them by preceding them with a slash ( \).
Example 3-9  shows how to use the same syntax to assign multiples lines to a variable.
The Structure of PHP | 51

Example 3-9. A multiline string variable assignment
<?php
  $author = "Scott Adams";
  $out = <<<_END
  Normal people believe that if it ain't broke, don't fix it.
  Engineers believe that if it ain't broke, it doesn't have enough
  features yet.
  - $author.
_END;
?>
The variable $out  will then be populated with the contents between the two tags. If
you were appending, rather than assigning, you could also have used .= in place of =
to append the string to $out .
Be careful not to place a semicolon directly after the first occurrence of _END , as that
would terminate the multiline block before it had even started and cause a Parse
error  message. The only place for the semicolon is after the terminating _END  tag,
although it is safe to use semicolons within the block as normal text characters.
By the way, the _END  tag is simply one I  chose for these examples because it is unlikely
to be used anywhere else in PHP code and is therefore unique. But you can use any
tag you like, such as _SECTION1  or _OUTPUT  and so on. Also, to help differentiate tags
such as this from variables or functions, the general practice is to preface them with
an underscore, but you don’t have to use one if you choose not to.
Laying out text over multiple lines is usually just a convenience to
make your PHP code easier to read, because once it is displayed in
a web page, HTML formatting rules take over and whitespace is
suppressed (but $author  is still replaced with the variable’s value).
So, for example, if you load these multiline output examples into a
browser, they will not display over several lines, because all brows‐
ers treat newlines just like spaces. However, if you use the browser’s
View Source feature, you will find that the newlines are correctly
placed, and the output does appear over several lines.
Variable Typing
PHP is a very loosely typed language.  This means  that variables do not have to be
declared before they are used, and that PHP always converts variables to the type
required by their context when they are accessed.
For example, you can  create a multiple-digit number and extract the nth digit from it
simply by assuming it to be a string. In the following snippet of code, the numbers
52 | Chapter 3: Introduction to PHP

12345 and 67890 are multiplied together, returning a result of 838102050, which is
then placed in the variable $number , as shown in Example 3-10 .
Example 3-10. Automatic conversion from a number to a string
<?php
  $number = 12345 * 67890;
  echo substr($number, 3, 1);
?>
At the point of the assignment, $number  is a numeric variable. But on the second line,
a call is placed to the PHP function substr , which asks for one character to be
returned from $number , starting at the fourth position (remembering that PHP offsets
start from zero). To do this, PHP turns $number  into a nine-character string, so that
substr  can access it and return the character, which in this case is 1.
The same goes for turning a string into a number, and so on. In Example 3-11 , the
variable $pi is set to a string value, which is then automatically turned into a floating-
point number in the third line by the equation for calculating a circle’s area, which
outputs the value 78.5398175.
Example 3-11. Automatically converting a string to a number
<?php
  $pi     = "3.1415927";
  $radius = 5;
  echo $pi * ($radius * $radius);
?>
In practice, what this all means is that you don’t have to worry too much about your
variable types. Just assign them values that make sense to you, and PHP will convert
them if necessary. Then, when you want to retrieve values, just ask for them—for
example, with an echo  statement.
Constants
Constants  are similar to variables, holding information to be accessed later, except
that they are what they sound like—constant. In other words, once you have defined
one, its value is set for the remainder of the program and cannot be altered.
One example of a use for a constant is to hold the location of your server root (the
folder with the main files of your website). Y ou would define such a constant like this:
define("ROOT_LOCATION", "/usr/local/www/");
Then, to read the contents of the variable, you just refer to it like a regular variable
(but it isn’t preceded by a dollar sign):
The Structure of PHP | 53

$directory = ROOT_LOCATION;
Now, whenever you need to run your PHP code on a different server with a different
folder configuration, you have only a single line of code to change.
The main two things you have to remember about constants are
that they must not be prefaced with a $ (as with regular variables),
and that you can define them only using the define  function.
It is generally considered a good practice to use only uppercase for constant variable
names, especially if other people will also read your code.
Predefined  Constants
PHP comes ready-made with dozens of predefined constants that you generally will
be unlikely to use as a beginner to PHP . However, there are a few—known as the
magic constants —that  you will find useful. The names of the magic constants always
have two underscores at the beginning and two at the end, so that you won’t acciden‐
tally try to name one of your own constants with a name that is already taken. They
are detailed in Table 3-5 . The concepts referred to in the table will be introduced in
future chapters.
Table 3-5. PHP’s magic constants
Magic constant Description
__LINE__ The current line number of the file.
__FILE__ The full path and filename  of the file.  If used inside an include , the name of the included file is
returned. In PHP 4.0.2, __FILE__  always contains an absolute path with symbolic links resolved,
whereas in older versions it might contain a relative path under some circumstances.
__DIR__ The directory of the file.  If used inside an include , the directory of the included file is returned. This
is equivalent to dirname(__FILE__) . This directory name does not have a trailing slash unless it is
the root directory. (Added in PHP 5.3.0.)
__FUNCTION__ The function name. (Added in PHP 4.3.0.) As of PHP 5, returns the function name as it was declared
(case-sensitive). In PHP 4, its value is always lowercase.
__CLASS__ The class name. (Added in PHP 4.3.0.) As of PHP 5, returns the class name as it was declared (case-
sensitive). In PHP 4, its value is always lowercased.
__METHOD__ The class method name. (Added in PHP 5.0.0.) The method name is returned as it was declared (case-
sensitive).
__NAMESPACE__ The name of the current namespace (case-sensitive). This constant is defined  at compile time. (Added in
PHP 5.3.0.)
One handy use of these variables is for debugging purposes, when you need to insert
a line of code to see whether the program flow reaches it:
54 | Chapter 3: Introduction to PHP

echo "This is line " . __LINE__ . " of file " . __FILE__;
This causes the current program line in the current file (including the path) being
executed to be output to the web browser.
The Difference  Between the echo and print Commands
So far, you have seen the echo  command used in a number of different ways to output
text from the server to your browser. In some cases, a string literal has been output.
In others, strings have first been concatenated or variables have been evaluated. I’ve
also shown output spread over multiple lines.
But there is also an alternative to echo  that you can use: print . The two commands
are quite similar, but print  is a function-like construct that takes a single parameter
and has a return value (which is always 1), whereas echo  is purely a PHP language
construct. Since both commands are constructs, neither requires parentheses.
By and large, the echo  command will be a tad faster than print  in general text out‐
put, because it doesn’t set a return value. On the other hand, because it isn’t imple‐
mented like a function, echo  cannot be used as part of a more complex expression,
whereas print  can. Here’s an example to output whether the value of a variable is
TRUE  or FALSE  using print , something you could not perform in the same manner
with echo , because it would display a Parse error  message:
$b ? print "TRUE" : print "FALSE";
The question mark is simply a way of interrogating whether variable $b is TRUE  or
FALSE . Whichever command is on the left of the following colon is executed if $b is
TRUE , whereas the command to the right is executed if $b is FALSE .
Generally, though, the examples in this book use echo , and I recommend that you do
so as well until you reach such a point in your PHP development that you discover
the need for using print .
Functions
Functions  are used to separate  out sections of code that perform a particular task. For
example, maybe you often need to look up a date and return it in a certain format.
That would be a good example to turn into a function. The code doing it might be
only three lines long, but if you have to paste it into your program a dozen times,
you’re making your program unnecessarily large and complex, unless you use a func‐
tion. And if you decide to change the data format later, putting it in a function means
having to change it in only one place.
Placing it into a function not only shortens your source code and makes it more read‐
able, but also adds extra functionality (pun intended), because functions can be
The Structure of PHP | 55

passed parameters to make them perform differently. They can also return values to
the calling code.
To create a function, declare it in the manner shown in Example 3-12 .
Example 3-12. A simple function declaration
<?php
  function longdate($timestamp)
  {
    return date("l F jS Y", $timestamp);
  }
?>
This function takes a Unix timestamp (an integer number representing a date and
time based on the number of seconds since 00:00 a.m. on January 1, 1970) as its input
and then calls the PHP date  function  with the correct format string to return a date
in the format Tuesday May 2nd 2017 . Any number of parameters can be passed
between the initial parentheses; we have chosen to accept just one. The curly braces
enclose all the code that is executed when you later call the function.
To output today’s date using this function, place the following call in your code:
echo longdate(time());
This call uses the built-in PHP time  function  to fetch the current  Unix timestamp
and passes it to the new longdate  function, which then returns the appropriate string
to the echo  command for display. If you need to print out the date 17 days ago, you
now just have to issue the following call:
echo longdate(time() - 17 * 24 * 60 * 60);
which passes to longdate  the current Unix timestamp less the number of seconds
since 17 days ago (17 days × 24 hours × 60 minutes × 60 seconds).
Functions can also accept multiple parameters and return multiple results, using
techniques that I’ll develop over the following chapters.
Variable Scope
If you have a very long program, it’s quite  possible that you could start to run out of
good variable names, but with PHP you can decide the  scope  of a variable. In other
words, you can, for example, tell it that you want the variable $temp  to be used only
inside a particular function and to forget it was ever used when the function returns.
In fact, this is the default scope for PHP variables.
Alternatively, you could inform PHP that a variable is global in scope and thus can be
accessed by every other part of your program.
56 | Chapter 3: Introduction to PHP

Local variables
Local variables  are variables that are created within, and can be accessed only by, a
function. They are generally temporary variables that are used to store partially pro‐
cessed results prior to the function’s return.
One set of local variables is the list of arguments to a function. In the previous sec‐
tion, we defined a function that accepted a parameter named $timestamp . This is
meaningful only in the body of the function; you can’t get or set its value outside the
function.
For another example of a local variable, take another look at the longdate  function,
which is modified slightly in Example 3-13 .
Example 3-13. An expanded version of the longdate function
<?php
  function longdate($timestamp)
  {
    $temp = date("l F jS Y", $timestamp);
    return "The date is $temp";
  }
?>
Here we have assigned the value returned by the date  function to the temporary vari‐
able $temp , which is then inserted into the string returned by the function. As soon as
the function returns, the value of $temp  is cleared, as if it had never been used at all.
Now, to see the effects of variable scope, let’s look at some similar code in
Example 3-14 . Here $temp  has been created before  we call the longdate  function.
Example 3-14. This attempt to access $temp in function longdate will fail
<?php
  $temp = "The date is ";
  echo longdate(time());
  function longdate($timestamp)
  {
    return $temp . date("l F jS Y", $timestamp);
  }
?>
However, because $temp  was neither created within the longdate  function nor passed
to it as a parameter, longdate  cannot access it. Therefore, this code snippet outputs
only the date, not the preceding text. In fact, it will first display the error message
Notice: Undefined variable: temp .
The Structure of PHP | 57

The reason for this is that, by default, variables created within a function are local to
that function, and variables created outside of any functions can be accessed only by
nonfunction code.
Some ways to repair Example 3-14  appear in Example 3-15  and Example 3-16 .
Example 3-15. Rewriting to refer to $temp within its local scope fixes  the problem
<?php
  $temp = "The date is ";
  echo $temp . longdate(time());
  function longdate($timestamp)
  {
    return date("l F jS Y", $timestamp);
  }
?>
Example 3-15  moves the reference to $temp  out of the function. The reference
appears in the same scope where the variable was defined.
Example 3-16. An alternative solution: passing $temp as an argument
<?php
  $temp = "The date is ";
  echo longdate($temp, time());
  function longdate($text, $timestamp)
  {
    return $text . date("l F jS Y", $timestamp);
  }
?>
The solution in Example 3-16  passes $temp  to the longdate  function as an extra argu‐
ment. longdate  reads it into a temporary variable that it creates called $text  and out‐
puts the desired result.
Forgetting the scope of a variable is a common programming error,
so remembering how variable scope works will help you debug
some quite obscure problems. Suffice it to say that unless you have
declared a variable otherwise, its scope is limited to being local:
either to the current function, or to the code outside of any func‐
tions, depending on whether it was first created or accessed inside
or outside a function.
58 | Chapter 3: Introduction to PHP

Global variables
There are cases when you need a variable to have global  scope, because you want all
your code to be able to access it. Also, some data may be large and complex, and you
don’t want to keep passing it as arguments to functions.
To declare a variable as having global scope, use the keyword global . Let’s assume
that you have a way of logging your users into your website and want all your code to
know whether it is interacting with a logged-in user or a guest. One way to do this is
to create a global variable such as $is_logged_in :
global $is_logged_in;
Now your login function simply has to set that variable to 1 upon a successful login
attempt, or 0 upon its failure. Because the scope of the variable is global, every line of
code in your program can access it.
Y ou should use global variables with caution, though. I recommend that you create
them only when you absolutely cannot find another way of achieving the result you
desire. In general, programs that are broken into small parts and segregated data are
less buggy and easier to maintain. If you have a thousand-line program (and some
day you will) in which you discover that a global variable has the wrong value at some
point, how long will it take you to find the code that set it incorrectly?
Also, if you have too many global variables, you run the risk of using one of those
names again locally, or at least thinking you have used it locally, when in fact it has
already been declared as global. All manner of strange bugs can arise from such situa‐
tions.
Sometimes I adopt the convention of making all global variable
names uppercase (just as it’s recommended that constants should
be uppercase) so that I can see at a glance the scope of a variable.
Static variables
In the section “Local variables” on page 57, I mentioned  that the value of the variable
is wiped out when the function ends. If a function runs many times, it starts with a
fresh copy of the variable and the previous setting has no effect.
Here’s an interesting case. What if you have a local variable inside a function that you
don’t want any other parts of your code to have access to, but you would also like to
keep its value for the next time the function is called? Why? Perhaps because you
want a counter to track how many times a function is called. The solution is to
declare a static  variable, as shown in Example 3-17 .
The Structure of PHP | 59

Example 3-17. A function using a static variable
<?php
  function test()
  {
    static $count = 0;
    echo $count;
    $count++;
  }
?>
Here the very first line of function test  creates a static variable called $count  and ini‐
tializes it to a value of 0. The next line outputs the variable’s value; the final one incre‐
ments it.
The next time the function is called, because $count  has already been declared, the
first line of the function is skipped. Then the previously incremented value of $count
is displayed before the variable is again incremented.
If you plan to use static variables, you should note that you cannot assign the result of
an expression in their definitions. They can be initialized only with predetermined
values (see Example 3-18 ).
Example 3-18. Allowed and disallowed static variable declarations
<?php
  static $int = 0;         // Allowed
  static $int = 1+2;       // Disallowed (will produce a Parse error)
  static $int = sqrt(144); // Disallowed
?>
Superglobal variables
Starting with PHP 4.1.0, several predefined variables are available. These are known
as superglobal variables , which means that they are provided by the PHP environment
but are global within the program, accessible absolutely everywhere.
These superglobals contain lots of useful information about the currently running
program and its environment (see Table 3-6 ). They are structured as associative
arrays, a topic discussed in Chapter 6 .
Table 3-6. PHP’s superglobal variables
Superglobal name Contents
$GLOBALS All variables that are currently defined  in the global scope of the script. The variable names are the keys
of the array.
$_SERVER Information such as headers, paths, and script locations. The entries in this array are created by the web
server, and there is no guarantee that every web server will provide any or all of these.
60 | Chapter 3: Introduction to PHP

Superglobal name Contents
$_GET Variables passed to the current script via the HTTP Get method.
$_POST Variables passed to the current script via the HTTP Post method.
$_FILES Items uploaded to the current script via the HTTP Post method.
$_COOKIE Variables passed to the current script via HTTP cookies.
$_SESSION Session variables available to the current script.
$_REQUEST Contents of information passed from the browser; by default, $_GET , $_POST , and $_COOKIE .
$_ENV Variables passed to the current script via the environment method.
All of the superglobals (except for $GLOBALS ) are named with a single initial under‐
score and only capital letters; therefore, you should avoid naming your own variables
in this manner to avoid potential confusion.
To illustrate how you use them, let’s look at a bit of information that many sites
employ. Among the many nuggets of information supplied by superglobal variables is
the URL of the page that referred the user to the current web page. This referring
page information can be accessed like this:
$came_from = $_SERVER['HTTP_REFERER'];
It’s that simple. Oh, and if the user came straight to your web page, such as by typing
its URL directly into a browser, $came_from  will be set to an empty string.
Superglobals and security
A word of caution is in order before you start using superglobal variables, because
they are often used by hackers trying to find exploits to break into your website.
What they do is load up $_POST , $_GET , or other superglobals with malicious code,
such as Unix or MySQL commands that can damage or display sensitive data if you
naïvely access them.
Therefore, you should always sanitize superglobals before using them. One way to do
this is via the PHP htmlentities  function. It converts all characters into HTML enti‐
ties. For example, less-than and greater-than characters ( < and >) are transformed
into the strings &lt;  and &gt;  so that they are rendered harmless, as are all quotes
and backslashes, and so on.
Therefore, here is a much better way to access $_SERVER  (and other superglobals) is:
$came_from = htmlentities($_SERVER['HTTP_REFERER']);
Using the htmlentities  function  for sanitization is an important
practice in any circumstance where user or other third-party data is
being processed for output, not just with superglobals.
The Structure of PHP | 61

This chapter has provided you with a solid background in using PHP . In Chapter 4 ,
we’ll start using what you’ve learned to build expressions and control program flow—
in other words, do some actual programming.
But before moving on, I recommend that you test yourself with some (if not all) of
the following questions to ensure that you have fully digested the  contents of this
chapter.
Questions
1.What tag is used to cause PHP to start interpreting program code? And what is
the short form of the tag?
2.What are the two types of comment tags?
3.Which character must be placed at the end of every PHP statement?
4.Which symbol is used to preface all PHP variables?
5.What can a variable store?
6.What is the difference between $variable = 1  and $variable == 1 ?
7.Why do you suppose that an underscore is allowed in variable names
($current_user ), whereas hyphens are not ( $current-user )?
8.Are variable names case-sensitive?
9.Can you use spaces in variable names?
10.How do you convert one variable type to another (say, a string to a number)?
11.What is the difference between ++$j  and $j++ ?
12.Are the operators && and and interchangeable?
13.How can you create a multiline echo  or assignment?
14.Can you redefine a constant?
15.How do you escape a quotation mark?
16.What is the difference between the echo  and print  commands?
17.What is the purpose of functions?
18.How can you make a variable accessible to all parts of a PHP program?
19.If you generate data within a function, what are a couple of ways to convey the
data to the rest of the program?
20.What is the result of combining a string with a number?
See Chapter 3 Answers  in Appendix A  for the answers to these questions.
62 | Chapter 3: Introduction to PHP

CHAPTER 4
Expressions and Control Flow in PHP
The previous chapter  introduced several topics in passing that this chapter covers
more fully, such as making choices (branching) and creating complex expressions. In
the previous chapter, I wanted to focus on the most basic syntax and operations in
PHP , but I couldn’t avoid touching on more-advanced topics. Now I can fill in the
background that you need to use these powerful PHP features properly.
In this chapter, you will get a thorough grounding in how PHP programming works
in practice and in how to control the flow of the program.
Expressions
Let’s start with the most fundamental part of any programming language: expressions .
An expression is a combination of values, variables, operators, and functions that
results in a value. It’s familiar to anyone who has taken high-school algebra:
y = 3(abs(2 x) + 4)
which in PHP would be
$y = 3 * (abs(2 * $x) + 4);
The value returned ( y, or $y in this case) can be a number, a string, or a Boolean value
(named after George Boole, a 19th-century English mathematician and philosopher).
By now, you should be familiar with the first two value types, but I’ll explain the
third.
TRUE or FALSE?
A basic Boolean value  can be either TRUE  or FALSE . For example, the expression 20 >
9 (20 is greater than 9) is TRUE , and the expression 5 == 6  (5 is equal to 6) is FALSE .
63

(Y ou can combine Boolean operations using operators such as AND, OR, and XOR,
which are covered later in this chapter.)
Note that I am using uppercase letters for the names TRUE  and
FALSE . This is because they are predefined constants in PHP . Y ou
can also use the lowercase versions, if you prefer, as they are also
predefined. In fact, the lowercase versions are more stable, because
PHP does not allow you to redefine them; the uppercase ones may
be redefined—something you should bear in mind if you import
third-party code.
Example 4-1  shows some simple expressions: the two I just mentioned, plus a couple
more. For each line, it prints out a letter between a and d, followed by a colon and the
result of the expressions. The <br>  tag is there to create a line break and thus separate
the output into four lines in HTML.
Now that we are fully into the age of HTML5, and XHTML is no
longer being planned to supersede HTML, you do not need to use
the self-closing <br />  form of the <br>  tag, or any void elements
(ones without closing tags), because the / is now optional. There‐
fore, I have chosen to use the simpler style in this book. If you ever
made HTML nonvoid tags self-closing (such as <div /> ), they will
not work in HTML5 because the / will be ignored, and you will
need to replace them with (for example) <div> ...</div> . However,
you must still use the <br />  form of HTML syntax when using
XHTML.
Example 4-1. Four simple Boolean expressions
<?php
  echo "a: [" . (20 > 9) . "]<br>";
  echo "b: [" . (5 == 6) . "]<br>";
  echo "c: [" . (1 == 0) . "]<br>";
  echo "d: [" . (1 == 1) . "]<br>";
?>
The output from this code is as follows:
a: [1]
b: []
c: []
d: [1]
Notice that both expressions a: and d: evaluate to TRUE , which has a value of 1. But
b: and c:, which evaluate to FALSE , do not show any value, because in PHP the
64 | Chapter 4: Expressions and Control Flow in PHP

constant  FALSE  is defined as NULL , or nothing. To verify this for yourself, you could
enter the code in Example 4-2 .
Example 4-2. Outputting the values of TRUE and FALSE
<?php // test2.php
  echo "a: [" . TRUE  . "]<br>";
  echo "b: [" . FALSE . "]<br>";
?>
that outputs the following:
a: [1]
b: []
By the way, in some languages FALSE  may be defined as 0 or even –1, so it’s worth
checking on its definition in each language.
Literals and Variables
The simplest form of an expression is a literal , which simply  means something that
evaluates to itself, such as the number 73 or the string "Hello" . An expression could
also simply be a variable, which evaluates to the value that has been assigned to it.
They are both types of expressions, because they return a value.
Example 4-3  shows three literals and two variables, all of which return values, albeit
of different types.
Example 4-3. Literals and variables
<?php
  $myname = "Brian";
  $myage  = 37;
  echo "a: " . 73      . "<br>"; // Numeric literal
  echo "b: " . "Hello" . "<br>"; // String literal
  echo "c: " . FALSE   . "<br>"; // Constant literal
  echo "d: " . $myname . "<br>"; // String variable
  echo "e: " . $myage  . "<br>"; // Numeric variable
?>
And, as you’ d expect, you see a return value from all of these with the exception of c:,
which evaluates to FALSE , returning nothing in the following output:
a: 73
b: Hello
c:
d: Brian
e: 37
Expressions | 65

In conjunction with operators, it’s possible to create more-complex expressions that
evaluate to useful results.
When you combine assignment or control-flow constructs with expressions, the
result is a statement . Example 4-4  shows one of each. The first assigns the result of the
expression 366 - $day_number  to the variable $days_to_new_year , and the second
outputs a friendly message only if the expression $days_to_new_year < 30  evaluates
to TRUE .
Example 4-4. An expression and a statement
<?php
  $days_to_new_year = 366 - $day_number; // Expression
  if ($days_to_new_year < 30)
  {
     echo "Not long now till new year";  // Statement
  }
?>
Operators
PHP offers a lot of powerful operators that range from arithmetic, string, and logical
operators to assignment, comparison, and more (see Table 4-1 ).
Table 4-1. PHP operator types
Operator Description Example
Arithmetic Basic mathematics $a + $b
Array Array union $a + $b
Assignment Assign values $a = $b + 23
Bitwise Manipulate bits within bytes 12 ^ 9
Comparison Compare two values $a < $b
Execution Execute contents of back ticks `ls -al`
Increment/decrement Add or subtract 1 $a++
Logical Boolean $a and $b
String Concatenation $a . $b
Each operator takes a different number of operands:
•Unary  operators, such as incrementing ( $a++ ) or negation ( -$a), which take a
single operand.
66 | Chapter 4: Expressions and Control Flow in PHP

•Binary  operators, which represent the bulk of PHP operators, including addition,
subtraction, multiplication, and division.
•One ternary  operator, which takes the form ? x : y . It’s a terse, single-line if
statement that chooses between two expressions, depending on the result of a
third one.
Operator Precedence
If all operators had the same precedence, they would be processed in the order in
which they are encountered.  In fact, many  operators do have the same precedence, so
let’s look at a few in Example 4-5 .
Example 4-5. Three  equivalent expressions
1 + 2 + 3 - 4 + 5
2 - 4 + 5 + 3 + 1
5 + 2 - 4 + 1 + 3
Here you will see that although the numbers (and their preceding operators) have
been moved, the result of each expression is the value 7, because the plus and minus
operators have the same precedence. We can try the same thing with multiplication 
and division (see Example 4-6 ).
Example 4-6. Three  expressions that are also equivalent
1 * 2 * 3 / 4 * 5
2 / 4 * 5 * 3 * 1
5 * 2 / 4 * 1 * 3
Here the resulting value is always 7.5. But things change when we mix operators with
different  precedencies in an expression, as in Example 4-7 .
Example 4-7. Three  expressions using operators of mixed precedence
1 + 2 * 3 - 4 * 5
2 - 4 * 5 * 3 + 1
5 + 2 - 4 + 1 * 3
If there were no operator precedence, these three expressions would evaluate to 25, –
29, and 12, respectively. But because multiplication and division take precedence over
addition and subtraction, there are implied parentheses around these parts of the
expressions, which would look like Example 4-8  if they were visible.
Operators | 67

Example 4-8. Three  expressions showing implied parentheses
1 + (2 * 3) - (4 * 5)
2 - (4 * 5 * 3) + 1
5 + 2 - 4 + (1 * 3)
Clearly, PHP must evaluate the subexpressions within parentheses first to derive the
semi-completed expressions in Example 4-9 .
Example 4-9. After  evaluating the subexpressions in parentheses
1 + (6) - (20)
2 - (60) + 1
5 + 2 - 4 + (3)
The final results of these expressions are –13, –57, and 6, respectively (quite different
from the results of 25, –29, and 12 that we would have seen had there been no opera‐
tor precedence).
Of course, you can override the default operator precedence by inserting your own
parentheses and forcing the original results that we would have seen had there been
no operator precedence (see Example 4-10 ).
Example 4-10. Forcing left-to-right  evaluation
((1 + 2) * 3 - 4) * 5
(2 - 4) * 5 * 3 + 1
(5 + 2 - 4 + 1) * 3
With parentheses correctly inserted, we now see the values 25, –29, and 12, respec‐
tively.
Table 4-2  lists PHP’s operators in order of prece dence from high to low.
Table 4-2. The precedence of PHP operators (high to low)
Operator(s) Type
() Parentheses
++ -- Increment/decrement
! Logical
* / % Arithmetic
+ - . Arithmetic and string
<< >> Bitwise
< <= > >= <> Comparison
== != === !== Comparison
68 | Chapter 4: Expressions and Control Flow in PHP

Operator(s) Type
& Bitwise (and references)
^ Bitwise
| Bitwise
&& Logical
|| Logical
? : Ternary
= += -= *= /= .= %= &= != ^= <<= >>= Assignment
and Logical
xor Logical
or Logical
Associativity
We’ve been looking at processing expressions from left to right, except where opera‐
tor precedence is in effect. But some operators require processing from right to left,
and this direction of processing is called the operator’s associativity . For some opera‐
tors, there is no associativity.
Associativity becomes important in cases in which you do not explicitly force prece‐
dence, so you need to be aware of the default actions of operators, as detailed in
Table 4-3 , which lists operators and their associativity.
Table 4-3. Operator associativity
Operator Description Associativity
CLONE NEW Create a new object None
< <= >= == != === !== <> Comparison None
! Logical NOT Right
~ Bitwise NOT Right
++ -- Increment and decrement Right
(int) Cast to an integer Right
(double) (float) (real) Cast to a floating-point  number Right
(string) Cast to a string Right
(array) Cast to an array Right
(object) Cast to an object Right
@ Inhibit error reporting Right
= += -= *= /= Assignment Right
.= %= &= |= ^= <<= >>= Assignment Right
+ Addition and unary plus Left
Operators | 69

Operator Description Associativity
- Subtraction and negation Left
* Multiplication Left
/ Division Left
% Modulus Left
. String concatenation Left
<< >> & ^ | Bitwise Left
?: Ternary Left
|| && and or xor Logical Left
, Separator Left
For example, let’s take a look at the assignment operator in Example 4-11 , where three
variables are all set to the value 0.
Example 4-11. A multiple-assignment statement
<?php
  $level = $score = $time = 0;
?>
This multiple assignment is possible only if the rightmost part of the expression is
evaluated first, and then processing continues in a right-to-left direction.
As a beginner to PHP , you should avoid the potential pitfalls of
operator associativity by always nesting your subexpressions within
parentheses to force the order of evaluation. This will also help
other programmers who may have to maintain your code to under‐
stand what is happening.
Relational Operators
Relational operators test two operands and return a Boolean result of either TRUE  or
FALSE . There are three types of relational operators: equality , comparison , and logical .
Equality
As we’ve already encountered a few times in this chapter, the equality operator is ==
(two equals signs). It is important not to confuse it with the = (single equals sign)
assignment operator. In Example 4-12 , the first statement assigns a value and the sec‐
ond tests it for equality.
70 | Chapter 4: Expressions and Control Flow in PHP

Example 4-12. Assigning a value and testing for equality
<?php
  $month = "March";
  if ($month == "March") echo "It's springtime";
?>
As you see, by returning either TRUE  or FALSE , the equality operator enables you to
test for conditions using, for example, an if statement. But that’s not the whole story,
because PHP is a loosely typed language. If the two operands of an equality expres‐
sion are of different types, PHP will convert them to whatever type makes the best
sense to it.
For example, any strings composed entirely of numbers will be converted to numbers
whenever compared with a number.  In Example 4-13 , $a and $b are two different
strings, and we would therefore expect neither of the if statements to output a result.
Example 4-13. The equality and identity operators
<?php
  $a = "1000";
  $b = "+1000";
  if ($a == $b)  echo "1";
  if ($a === $b) echo "2";
?>
However, if you run the example, you will see that it outputs the number 1, which
means that the first if statement evaluated to TRUE . This is because both strings were
first converted to numbers, and 1000  is the same numerical value as +1000 .
In contrast, the second if statement uses the identity  operator—three equals signs in
a row—which prevents PHP from automatically converting types. $a and $b are
therefore compared as strings and are found to be different, so nothing is output.
As with forcing operator precedence, whenever you have any doubt about how PHP
will convert operand types, you can use the identity operator to turn this behavior off.
In the same way that you can use the equality operator to test for operands being
equal, you can test for them not being equal using !=, the inequality operator. Take a
look  at Example 4-14 , which is a rewrite of Example 4-13 , in which the equality and
identity operators have been replaced with their inverses.
Operators | 71

Example 4-14. The inequality and not-identical operators
<?php
  $a = "1000";
  $b = "+1000";
  if ($a != $b)  echo "1";
  if ($a !== $b) echo "2";
?>
And, as you might expect, the first if statement does not output the number 1,
because the code is asking whether $a and $b are not equal to each other numerically.
Instead, it outputs the number 2, because the second if statement is asking whether
$a and $b are not identical to each other in their present operand types, and the
answer is TRUE ; they are not the same.
Comparison operators
Using comparison operators, you can test for more than just equality and inequality.
PHP also gives you > (is greater than), < (is less than), >= (is greater than or equal to),
and <= (is less than or equal to) to play with. Example 4-15  shows these in use.
Example 4-15. The four comparison operators
<?php
  $a = 2; $b = 3;
  if ($a > $b)  echo "$a is greater than $b<br>";
  if ($a < $b)  echo "$a is less than $b<br>";
  if ($a >= $b) echo "$a is greater than or equal to $b<br>";
  if ($a <= $b) echo "$a is less than or equal to $b<br>";
?>
In this example, where $a is 2 and $b is 3, the following is output:
2 is less than 3
2 is less than or equal to 3
Try this example yourself, altering the values of $a and $b, to see the results. Try set‐
ting them to the same value and see what happens.
Logical operators
Logical operators produce true-or-false results, and therefore are also known as
Boolean operators . There are four of them (see Table 4-4 ).
72 | Chapter 4: Expressions and Control Flow in PHP

Table 4-4. The logical operators
Logical operator Description
AND TRUE  if both operands are TRUE
OR TRUE  if either operand is TRUE
XOR TRUE  if one of the two operands is TRUE
NOT TRUE  if the operand is FALSE , or FALSE  if the operand is TRUE
Y ou can see these operators used in Example 4-16 . Note that the ! symbol is required
by PHP in place of NOT. Furthermore, the operators can be lower- or uppercase.
Example 4-16. The logical operators in use
<?php
  $a = 1; $b = 0;
  echo ($a AND $b) . "<br>";
  echo ($a or $b)  . "<br>";
  echo ($a XOR $b) . "<br>";
  echo !$a         . "<br>";
?>
This example outputs NULL , 1, 1, NULL , meaning that only the second and third echo
statements evaluate as TRUE . (Remember that NULL —or nothing—represents a value
of FALSE .) This is because the AND statement requires both operands to be TRUE  if it is
going to return a value of TRUE , while the fourth statement performs a NOT on the
value of $a, turning it from TRUE  (a value of 1) to FALSE . If you wish to experiment
with this, try out the code, giving $a and $b varying values of 1 and 0.
When coding, remember that AND and OR have lower precedence 
than the other  versions of the operators, && and ||. In complex
expressions, it may be safer to use && and || for this reason.
The OR operator can cause unintentional problems in if statements, because the sec‐
ond operand will not be evaluated if the first is evaluated as TRUE . In Example 4-17 ,
the function getnext  will never be called if $finished  has a value of 1.
Example 4-17. A statement using the OR operator
<?php
  if ($finished == 1 OR getnext() == 1) exit;
?>
Operators | 73

If you need getnext  to be called at each if statement, you could rewrite the code as
has been done in Example 4-18 .
Example 4-18. The “if...OR” statement modified  to ensure calling of getnext
<?php
  $gn = getnext();
  if ($finished == 1 OR $gn == 1) exit;
?>
In this case, the code in function getnext  will be executed and the value returned
stored in $gn before the if statement.
Another solution is to switch the two clauses to make sure that get
next  is executed, as it will then appear first in the expression.
Table 4-5  shows all the possible variations of using the logical operators. Y ou should
also note that !TRUE  equals FALSE , and !FALSE  equals TRUE .
Table 4-5. All possible PHP logical expressions
Inputs Operators and results    
a b AND OR XOR
TRUETRUE TRUETRUEFALSE
TRUEFALSE FALSETRUETRUE
FALSETRUE FALSETRUETRUE
FALSEFALSE FALSEFALSEFALSE
Conditionals
Conditionals  alter  program flow. They enable you to ask questions about certain
things and respond to the answers you get in different ways. Conditionals are central
to dynamic web pages—the goal of using PHP in the first place—because they make
it easy to create different output each time a page is viewed.
There are three types of nonlooping conditionals: the if statement, the switch  state‐
ment, and the ? operator. By nonlooping , I mean that the actions initiated by the state‐
ment take place and program flow then moves on, whereas looping conditionals
(which we’ll get to shortly) execute code over and over until a condition is met.
74 | Chapter 4: Expressions and Control Flow in PHP

The if Statement
One way of thinking about program flow is to imagine it as a single-lane highway that
you are driving along. It’s pretty much a straight line, but now and then you
encounter various signs telling you where to go.
In the case of an if statement, you could imagine coming across a detour sign that
you have to follow if a certain condition is TRUE . If so, you drive off and follow the
detour until you return to where it started and then continue on your way in your
original direction. Or, if the condition isn’t TRUE , you ignore the detour and carry on
driving (see Figure 4-1 ).
Figure 4-1. Program flow is like a single-lane highway
The contents of the if condition can be any valid PHP expression, including equality,
comparison, tests for 0 and NULL , and even the values returned by functions (either
built-in functions or ones that you write).
The actions to take when an if condition is TRUE  are generally placed inside curly
braces, { }. However, you can ignore the braces if you have only a single statement to
execute. But if you always use curly braces, you’ll avoid having to hunt down difficult-
to-trace bugs, such as when you add an extra line to a condition and it doesn’t get
evaluated due to lack of braces. (Note that for space and clarity, many of the examples
in this book ignore this suggestion and omit the braces for single statements.)
In Example 4-19 , imagine that it is the end of the month and all your bills have been
paid, so you are performing some bank account maintenance.
Conditionals | 75

Example 4-19. An if statement with curly braces
<?php
  if ($bank_balance < 100)
  {
    $money         = 1000;
    $bank_balance += $money;
  }
?>
In this example, you are checking your balance to see whether it is less than 100 dol‐
lars (or whatever your currency is). If so, you pay yourself 1,000 dollars and then add
it to the balance. (If only making money were that simple!)
If the bank balance is 100 dollars or greater, the conditional statements are ignored
and program flow skips to the next line (not shown).
In this book, opening curly braces generally start on a new line. Some people like to
place the first curly brace to the right of the conditional expression; others start a new
line with it. Either of these is fine, because PHP allows you to set out your whitespace
characters (spaces, newlines, and tabs) any way you choose. However, you will find
your code easier to read and debug if you indent each level of conditionals with a tab.
The else Statement
Sometimes when a conditional is not TRUE , you may not want to continue on to the
main program code immediately but might wish to do something else instead. This is
where the else  statement comes in. With it, you can set up a second detour on your
highway, as in Figure 4-2 .
With an if...else  statement, the first conditional statement is executed if the condi‐
tion is TRUE . But if it’s FALSE , the second one is executed. One of the two choices must
be executed. Under no circumstance can both (or neither) be executed. Example 4-20
shows the use of the if...else  structure.
76 | Chapter 4: Expressions and Control Flow in PHP

Figure 4-2. The highway now has an if detour and an else detour
Example 4-20. An if...else statement with curly braces
<?php
  if ($bank_balance < 100)
  {
    $money         = 1000;
    $bank_balance += $money;
  }
  else
  {
    $savings      += 50;
    $bank_balance -= 50;
  }
?>
In this example, now that you’ve ascertained that you have $100 or more in the bank,
the else  statement is executed, by which you place some of this money into your sav‐
ings account.
Conditionals | 77

As with if statements, if your else  has only one conditional statement, you can opt
to leave out the curly braces. (Curly braces are always recommended, though. First,
they make the code easier to understand. Second, they let you easily add more state‐
ments to the branch later.)
The elseif Statement
There are also times when you want a number of different possibilities to occur, based
upon a sequence of conditions. Y ou can achieve this using the elseif  statement. As
you might imagine, it is like an else  statement, except that you place a further condi‐
tional expression prior to the conditional code. In Example 4-21 , you can see a com‐
plete if...elseif...else  construct.
Example 4-21. An if...elseif...else statement with curly braces
<?php
  if ($bank_balance < 100)
  {
    $money         = 1000;
    $bank_balance += $money;
  }
  elseif ($bank_balance > 200)
  {
    $savings      += 100;
    $bank_balance -= 100;
  }
  else
  {
    $savings      += 50;
    $bank_balance -= 50;
  }
?>
In the example, an elseif  statement has been inserted between the if and else  state‐
ments. It checks whether your bank balance exceeds $200 and, if so, decides that you
can afford to save $100 of it this month.
Although I’m starting to stretch the metaphor a bit too far, you can imagine this as a
multiway set of detours (see Figure 4-3 ).
78 | Chapter 4: Expressions and Control Flow in PHP

Figure 4-3. The highway with if, elseif, and else detours
An else  statement closes either an if...else  or an
if...elseif...else  statement. Y ou can leave out a final else  if it
is not required, but you cannot have one before an elseif ; neither
can you have an elseif  before an if statement.
Y ou may have as many elseif  statements as you like. But as the number of elseif
statements increases, you would probably be better advised to consider a switch
statement if it fits your needs. We’ll look at that next.
The switch Statement
The switch  statement is useful in cases in which one variable or the result of an
expression can have multiple values, which should each trigger a different function.
For example, consider a PHP-driven menu system that passes a single string to the
main menu code according to what the user requests. Let’s say the options are Home,
Conditionals | 79

About, News, Login, and Links, and we set the variable $page  to one of these, accord‐
ing to the user’s input.
If we write the code for this using if...elseif...else , it might look like
Example 4-22 .
Example 4-22. A multiple-line if...elseif...statement
<?php
  if     ($page == "Home")  echo "You selected Home";
  elseif ($page == "About") echo "You selected About";
  elseif ($page == "News")  echo "You selected News";
  elseif ($page == "Login") echo "You selected Login";
  elseif ($page == "Links") echo "You selected Links";
?>
If we use a switch  statement, the code might look like Example 4-23 .
Example 4-23. A switch statement
<?php
  switch ($page)
  {
    case "Home":
        echo "You selected Home";
        break;
    case "About":
        echo "You selected About";
        break;
    case "News":
        echo "You selected News";
        break;
    case "Login":
        echo "You selected Login";
        break;
    case "Links":
        echo "You selected Links";
        break;
  }
?>
As you can see, $page  is mentioned only once at the start of the switch  statement.
Thereafter, the case  command  checks for matches. When one occurs, the matching
conditional statement is executed. Of course, in a real program you would have code
here to display or jump to a page, rather than simply telling the user what was
selected.
80 | Chapter 4: Expressions and Control Flow in PHP

With switch  statements, you do not use curly braces inside case
commands.  Instead, they commence with a colon and end with
the break  statement. The entire list of cases in the switch  state‐
ment is enclosed in a set of curly braces, though.
Breaking out
If you wish to break out of the switch  statement  because a condition has been fulfil‐
led, use the break  command.  This command tells PHP to break out of the switch
and jump to the following statement.
If you were to leave out the break  commands in Example 4-23  and the case  of Home
evaluated to be TRUE , all five cases would then be executed. Or if $page  had the value
News , all the case  commands from then on would execute. This is deliberate and
allows for some advanced programming, but generally you should always remember
to issue a break  command every time a set of case  conditionals has finished execut‐
ing. In fact, leaving out the break  statement is a common error.
Default action
A typical requirement in switch  statements is to fall back on a default action if none
of the case  conditions  are met. For example, in the case of the menu code in
Example 4-23 , you could add the code in Example 4-24  immediately before the final
curly brace.
Example 4-24. A default statement to add to Example 4-23
default:
    echo "Unrecognized selection";
    break;
Although a break  command is not required here because the default is the final sub-
statement, and program flow will automatically continue to the closing curly brace,
should you decide to place the default  statement higher up, it would definitely need
a break  command to prevent program flow from dropping into the following state‐
ments. Generally, the safest practice is to always include the break  command.
Alternative syntax
If you prefer, you may  replace the first curly brace in a switch  statement with a single
colon, and the final curly brace with an endswitch  command, as in Example 4-25 .
However, this approach is not commonly used and is mentioned here only in case
you encounter it in third-party code.
Conditionals | 81

Example 4-25. Alternate switch statement syntax
<?php
  switch ($page):
    case "Home":
        echo "You selected Home";
        break;
    // etc...
    case "Links":
        echo "You selected Links";
        break;
  endswitch;
?>
The ? Operator
One way of  avoiding the verbosity of if and else  statements is to use the more com‐
pact ternary operator, ?, which is unusual in that it takes three operands rather than
the typical two.
We briefly came across this in Chapter 3  in the discussion about the difference
between the print  and echo  statements as an example of an operator type that works
well with print  but not echo .
The ? operator is passed an expression that it must evaluate, along with two state‐
ments to execute: one for when the expression evaluates to TRUE , the other for when it
is FALSE . Example 4-26  shows code we might use for writing a warning about the fuel
level of a car to its digital dashboard.
Example 4-26. Using the ? operator
<?php
  echo $fuel <= 1 ? "Fill tank now" : "There's enough fuel";
?>
In this statement, if there is one gallon or less of fuel (in other words, $fuel  is set to 1
or less), the string Fill tank now  is returned to the preceding echo  statement.
Otherwise, the string There's enough fuel  is returned. Y ou can also assign the value
returned in a ? statement to a variable (see Example 4-27 ).
Example 4-27. Assigning a ? conditional result to a variable
<?php
  $enough = $fuel <= 1 ? FALSE : TRUE;
?>
82 | Chapter 4: Expressions and Control Flow in PHP

Here $enough  will be assigned the value TRUE  only when there is more than a gallon
of fuel; otherwise, it is assigned the value FALSE .
If you find the ? operator confusing, you are free to stick to if statements, but you
should be familiar with it, because you’ll see it in other people’s code. It can be hard to
read, because it often mixes multiple occurrences of the same variable. For instance,
code such as the following is quite popular:
$saved = $saved >= $new ? $saved : $new;
If you take it apart carefully, you can figure out what this code does:
$saved =                // Set the value of $saved to...
        $saved >= $new  // Check $saved against $new
    ?                   // Yes, comparison is true ...
        $saved          // ... so assign the current value of $saved
    :                   // No, comparison is false ...
        $new;           // ... so assign the value of $new
It’s a concise way to keep track of the largest value that you’ve seen as a program pro‐
gresses. Y ou save the largest value in $saved  and compare it to $new  each time you get
a new value. Programmers familiar with the ? operator find it more convenient than
if statements for such short comparisons. When not used for writing compact code,
it is typically used to make some decision inline, such as when you are testing
whether a variable is set before passing it to a function.
Looping
One of the great things about computers is that they can repeat calculating tasks
quickly and tirelessly. Often you may want a program to repeat the same sequence of
code again and again until something happens, such as a user inputting a value or
reaching a natural end. PHP’s loop structures provide the perfect way to do this.
To picture how this works, look at Figure 4-4 . It is much the same as the highway
metaphor used to illustrate if statements, except the detour also has a loop section
that—once a vehicle has entered—can be exited only under the right program
conditions.
Looping | 83

Figure 4-4. Imagining a loop as part of a program highway layout
while Loops
Let’s turn the digital car dashboard in Example 4-26  into a loop that continuously
checks the fuel level as you drive, using a while  loop ( Example 4-28 ).
Example 4-28. A while loop
<?php
  $fuel = 10;
  while ($fuel > 1)
  {
    // Keep driving ...
    echo "There's enough fuel";
  }
?>
Actually, you might prefer to keep a green light lit rather than output text, but the
point is that whatever positive indication you wish to make about the level of fuel is
placed inside the while  loop. By the way, if you try this example for yourself, note
that it will keep printing the string until you click the Stop button in your browser.
As with if statements, you will notice that curly braces are
required to hold the statements inside the while  statements, unless
there’s only one.
For another example of a while  loop that displays the 12 times table, see
Example 4-29 .
84 | Chapter 4: Expressions and Control Flow in PHP

Example 4-29. A while loop to print the 12 times table
<?php
  $count = 1;
  while ($count <= 12)
  {
    echo "$count times 12 is " . $count * 12 . "<br>";
    ++$count;
  }
?>
Here the variable $count  is initialized to a value of 1, and then a while  loop is started
with the comparative expression $count <= 12 . This loop will continue executing
until the variable is greater than 12. The output from this code is as follows:
1 times 12 is 12
2 times 12 is 24
3 times 12 is 36
and so on...
Inside the loop, a string is printed along with the value of $count  multiplied by 12.
For neatness, this is followed with a <br>  tag to force a new line. Then $count  is
incremented, ready for the final curly brace that tells PHP to return to the start of the
loop.
At this point, $count  is again tested to see whether it is greater than 12. It isn’t, but it
now has the value 2, and after another 11 times around the loop, it will have the value
13. When that happens, the code within the while  loop is skipped and execution
passes to the code following the loop, which, in this case, is the end of the program.
If the ++$count  statement (which could equally have been $count++ ) had not been
there, this loop would be like the first one in this section. It would never end, and
only the result of 1 * 12  would be printed over and over.
But there is a much neater way this loop can be written, which I think you will like.
Take a look at Example 4-30 .
Example 4-30. A shortened version of Example 4-29
<?php
  $count = 0;
  while (++$count <= 12)
    echo "$count times 12 is " . $count * 12 . "<br>";
?>
In this example, it was possible to remove the ++$count  statement from inside the
while  loop and place it directly into the conditional expression of the loop. What
Looping | 85

now happens is that PHP encounters the variable $count  at the start of each iteration
of the loop and, noticing that it is prefaced with the increment operator, first incre‐
ments the variable and only then compares it to the value 12. Y ou can therefore see
that $count  now has to be initialized to 0, not 1, because it is incremented as soon as
the loop is entered. If you keep the initialization at 1, only results between 2 and 12
will be output.
do...while Loops
A slight variation to the while  loop is the do...while  loop, used when you want a
block of code to be executed at least once and made conditional only after that.
Example 4-31  shows a modified version of the code for the 12 times table that uses
such a loop.
Example 4-31. A do...while loop for printing the times table for 12
<?php
  $count = 1;
  do
    echo "$count times 12 is " . $count * 12 . "<br>";
  while (++$count <= 12);
?>
Notice how we are back to initializing $count  to 1 (rather than 0) because the code is
being executed immediately, without an opportunity to increment the variable. Other
than that, though, the code looks pretty similar.
Of course, if you have more than a single statement inside a do...while  loop,
remember to use curly braces, as in Example 4-32 .
Example 4-32. Expanding Example 4-31  to use curly braces
<?php
  $count = 1;
  do {
    echo "$count times 12 is " . $count * 12;
    echo "<br>";
  } while (++$count <= 12);
?>
for Loops
The final kind of loop statement, the for loop, is also the most powerful, as it com‐
bines the abilities to set up variables as you enter the loop, test for conditions while
iterating loops, and modify variables after each iteration.
86 | Chapter 4: Expressions and Control Flow in PHP

Example 4-33  shows how to write the multiplication table program with a for loop.
Example 4-33. Outputting the times table for 12 from a for loop
<?php
  for ($count = 1 ; $count <= 12 ; ++$count)
    echo "$count times 12 is " . $count * 12 . "<br>";
?>
See how the code has been reduced to a single for statement containing a single con‐
ditional statement? Here’s what is going on. Each for statement takes three parame‐
ters:
•An initialization expression
•A condition expression
•A modification expression
These are separated by semicolons like this: for (expr1  ; expr2  ; expr3). At the
start of the first iteration of the loop, the initialization expression is executed. In the
case of the times table code, $count  is initialized to the value 1. Then, each time
around the loop, the condition expression (in this case, $count <= 12 ) is tested, and
the loop is entered only if the condition is TRUE . Finally, at the end of each iteration,
the modification expression is executed. In the case of the times table code, the vari‐
able $count  is incremented.
All this structure neatly removes any requirement to place the controls for a loop
within its body, freeing it up just for the statements you want the loop to perform.
Remember to use curly braces with a for loop if it will contain more than one state‐
ment, as in Example 4-34 .
Example 4-34. The for loop from Example 4-33  with added curly braces
<?php
  for ($count = 1 ; $count <= 12 ; ++$count)
  {
    echo "$count times 12 is " . $count * 12;
    echo "<br>";
  }
?>
Let’s compare when to use for and while  loops. The for loop is explicitly designed
around a single value that changes on a regular basis. Usually you have a value that
increments, as when you are passed a list of user choices and want to process each
choice in turn. But you can transform the variable any way you like. A more complex
Looping | 87

form of the for statement even lets you perform multiple operations in each of the
three parameters:
for ($i = 1, $j = 1 ; $i + $j < 10 ; $i++ , $j++)
{
  // ...
}
That’s complicated and not recommended for first-time users. The key is to distin‐
guish commas from semicolons. The three parameters must be separated by semico‐
lons. Within each parameter, multiple statements can be separated by commas. Thus,
in the previous example, the first and third parameters each contain two statements:
$i = 1, $j = 1  // Initialize $i and $j
$i + $j < 10    // Terminating condition
$i++ , $j++     // Modify $i and $j at the end of each iteration
The main thing to take from this example is that you must separate the three parame‐
ter sections with semicolons, not commas (which should be used only to separate
statements within a parameter section).
So, when is a while  statement more appropriate than a for statement? When your
condition doesn’t depend on a simple, regular change to a variable. For instance, if
you want to check for some special input or error and end the loop when it occurs,
use a while  statement.
Breaking Out of a Loop
Just as you saw how to break out of a switch  statement, you can also break out of a
for loop using the same break  command.  This step can be necessary when, for
example, one of your statements returns an error and the loop cannot continue exe‐
cuting safely.
One case in which this might occur is when writing a file returns an error, possibly
because the disk is full (see Example 4-35 ).
Example 4-35. Writing a file using a for loop with error trapping
<?php
  $fp = fopen("text.txt", 'wb');
  for ($j = 0 ; $j < 100 ; ++$j)
  {
    $written = fwrite($fp, "data");
    if ($written == FALSE) break;
  }
88 | Chapter 4: Expressions and Control Flow in PHP

fclose($fp);
?>
This is the most complicated piece of code that you have seen so far, but you’re ready
for it. We’ll look into the file-handling commands in a later chapter, but for now all
you need to know is that the first line opens the file text.txt  for writing in binary
mode, and then returns a pointer to the file in the variable $fp, which is used later to
refer to the open file.
The loop then iterates 100 times (from 0 to 99), writing the string data  to the file.
After each write, the variable $written  is assigned a value by the fwrite  function
representing the number of characters correctly written. But if there is an error, the
fwrite  function assigns the value FALSE .
The behavior of fwrite  makes it easy for the code to check the variable $written  to
see whether it is set to FALSE  and, if so, to break out of the loop to the following state‐
ment closing the file.
If you are looking to improve the code, the line
if ($written == FALSE) break;
can be simplified using the NOT operator, like this:
if (!$written) break;
In fact, the pair of inner loop statements can be shortened to a single statement:
if (!fwrite($fp, "data")) break;
The break  command is even more powerful than you might think, because if you
have code nested more than one layer deep that you need to break out of, you can
follow the break  command with a number to indicate how many levels to break out
of:
break 2;
The continue Statement
The continue  statement is a little like a break  statement, except that it instructs PHP
to stop processing the current loop and to move right to its next iteration. So, instead
of breaking out of the whole loop, PHP exits only the current iteration.
This approach can be useful in cases where you know there is no point continuing
execution within the current loop and you want to save processor cycles or prevent
an error from occurring by moving right along to the next iteration of the loop. In
Example 4-36 , a continue  statement is used to prevent a division-by-zero error from
being issued when the variable $j has a value of 0.
Looping | 89

Example 4-36. Trapping division-by-zero errors using continue
<?php
  $j = 10;
  while ($j > -10)
  {
    $j--;
    if ($j == 0) continue;
    echo (10 / $j) . "<br>";
  }
?>
For all values of $j between 10 and –10, with the exception of 0, the result of calculat‐
ing 10 divided by $j is displayed. But for the case of $j being 0, the statement con
tinue  is issued and execution skips immediately to the next iteration of the loop.
Implicit and Explicit Casting
PHP is a loosely typed language that allows you to  declare a variable and its type sim‐
ply by using it. It also automatically converts values from one type to another when‐
ever required. This is called implicit casting .
However, at times PHP’s implicit casting may not be what you want. In Example 4-37 ,
note that the inputs to the division are integers. By default, PHP converts the output
to floating point so it can give the most precise value—4.66 recurring.
Example 4-37. This expression returns a floating-point  number
<?php
  $a = 56;
  $b = 12;
  $c = $a / $b;
  echo $c;
?>
But what if we had wanted $c to be an integer instead? There are various ways in
which we could achieve this, one of which is to force the result of $a/$b to be cast to
an integer value using the integer cast type (int) , like this:
$c = (int) ($a / $b);
This is called explicit  casting.  Note that in order to ensure that the value of the entire
expression is cast to an integer, we place the expression within parentheses.
90 | Chapter 4: Expressions and Control Flow in PHP

Otherwise,  only the variable $a would have been cast to an integer—a pointless exer‐
cise, as the division by $b would still have returned a floating-point number.
Y ou can explicitly cast to the types shown in Table 4-6 , but you can
usually avoid having to use a cast by calling one of PHP’s built-in
functions. For example, to obtain an integer value, you could use
the intval  function. As with some other sections in this book, this
one is mainly here to help you understand third-party code that
you may encounter.
Table 4-6. PHP’s cast types
Cast type Description
(int) (integer) Cast to an integer by dropping the decimal portion
(bool) (boolean) Cast to a Boolean
(float) (double) (real) Cast to a floating-point  number
(string) Cast to a string
(array) Cast to an array
(object) Cast to an object
PHP Dynamic Linking
Because PHP is a programming language, and the output from it can be completely
different for each user, it’s possible for an entire website to run from a single PHP web
page. Each time the user clicks on something, the details can be sent back to the same
web page, which decides what to do next according to the various cookies and/or
other session details it may have stored.
But although it is possible to build an entire website this way, it’s not recommended,
because your source code will grow and grow and start to become unwieldy, as it has
to account for every possible action a user could take.
Instead, it’s much more sensible to split your website development into different
parts. For example, one distinct process is signing up for a website, along with all the
checking this entails to validate an email address, determine whether a username is
already taken, and so on.
A second module might well be one for logging users in before handing them off to
the main part of your website. Then you might have a messaging module with the
facility for users to leave comments, a module containing links and useful informa‐
tion, another to allow uploading of images, and more.
As long as you have created a way to track your user through your website by means
of cookies or session variables (both of which we’ll look at more closely in later
PHP Dynamic Linking | 91

chapters ), you can split up your website into sensible sections of PHP code, each one
self-contained, and therefore treat yourself to a much easier future, developing each
new feature and maintaining old ones.
Dynamic Linking in Action
One of the more popular PHP-driven applications on the Web today is the blogging
platform WordPress (see Figure 4-5 ). As a blogger or a blog reader, you might not
realize it, but every major section has been given its own main PHP file, and a whole
raft of generic, shared functions have been placed in separate files that are included
by the main PHP pages as necessary.
Figure 4-5. The WordPress blogging platform is written in PHP
The whole platform is held together with behind-the-scenes session tracking, so that
you hardly know when you are transitioning from one subsection to another. So, as a
web developer, if you want to tweak WordPress, it’s easy to find the particular file you
need, modify it, and test and debug it without messing around with unconnected
parts of the program. Next time you use WordPress, keep an eye on your browser’s
address bar, particularly if you are managing a blog, and you’ll notice some of the dif‐
ferent PHP files that it uses.
92 | Chapter 4: Expressions and Control Flow in PHP

This chapter has covered quite a lot of ground, and by now you should be able to put
together your own small PHP programs. But before you do, and before proceeding
with the following chapter on functions and objects, you may wish to test your new
knowledge on the following questions. 
Questions
1.What actual underlying values are represented by TRUE  and FALSE ?
2.What are the simplest two forms of expressions?
3.What is the difference between unary, binary, and ternary operators?
4.What is the best way to force your own operator precedence?
5.What is meant by operator associativity ?
6.When would you use the === (identity) operator?
7.Name the three conditional statement types.
8.What command can you use to skip the current iteration of a loop and move on
to the next one?
9.Why is a for loop more powerful than a while  loop?
10.How do if and while  statements interpret conditional expressions of different
data types?
See Chapter 4 Answers  in Appendix A  for the answers to these questions.
Questions | 93



CHAPTER 5
PHP Functions and Objects
The basic requirements of any programming language include somewhere to store
data, a means of directing program flow, and a few bits and pieces such as expression
evaluation, file management, and text output. PHP has all these, plus tools like else
and elseif  to make life easier. But even with all these in our toolkit, programming
can be clumsy and tedious, especially if you have to rewrite portions of very similar
code each time you need them.
That’s where functions and objects come in. As you might guess, a function  is a set of
statements that performs a particular function and—optionally—returns a value. Y ou
can pull out a section of code that you have used more than once, place it into a func‐
tion, and call the function by name when you want the code.
Functions have many advantages over contiguous, inline code. For example, they:
•Involve less typing
•Reduce syntax and other programming errors
•Decrease the loading time of program files
•Decrease execution time, because each function is compiled only once, no matter
how often you call it
•Accept arguments and can therefore be used for general as well as specific cases
Objects take this concept a step further. An object  incorporates one or more func‐
tions, and the data they use, into a single structure called a class .
In this chapter, you’ll learn all about using functions, from defining and calling them
to passing arguments back and forth. With that knowledge under your belt, you’ll
start creating functions and using them in your own objects (where they will be
referred to as methods ).
95

PHP Functions
PHP comes with hundreds of ready-made, built-in functions, making it a very rich
language. To use a function, call it by name. For example, you can see the print  func‐
tion in action here:
print("print is a pseudo-function");
The parentheses tell PHP that you’re referring to a function.  Otherwise, it thinks
you’re referring to a constant. Y ou may see a warning such as this:
Notice: Use of undefined constant fname - assumed 'fname'
followed by the text string fname , under the assumption that you must have wanted to
put a literal string in your code. (Things are even more confusing if there is actually a
constant named fname , in which case PHP uses its value.)
Strictly speaking, print  is a pseudofunction, commonly called a
construct . The difference is that you can omit the parentheses:
print "print doesn't require parentheses";
Y ou do have to put parentheses after any other functions you call,
even if they’re empty (that is, if you’re not passing any argument to
the function).
Functions can take any number of arguments, including zero. For example, phpinfo ,
as shown next, displays lots of information about the current installation of PHP and
requires no argument. The result of calling this function can be seen in Figure 5-1 .
phpinfo();
The phpinfo  function is extremely useful for obtaining informa‐
tion about your current PHP installation, but that information
could also be very useful to potential hackers. Therefore, never
leave a call to this function in any web-ready code.
96 | Chapter 5: PHP Functions and Objects

Figure 5-1. The output of PHP’s built-in phpinfo function
Some of the built-in functions that use one or more arguments appear in
Example 5-1 .
Example 5-1. Three  string functions
<?php
  echo strrev(" .dlrow olleH"); // Reverse string
  echo str_repeat("Hip ", 2);   // Repeat string
  echo strtoupper("hooray!");   // String to uppercase
?>
This example uses three string functions to output the following text:
Hello world. Hip Hip HOORAY!
As you can see, the strrev  function reversed the order of characters in the string,
str_repeat  repeated the string "Hip "  twice (as required by a second argument),  and
strtoupper  converted "hooray!"  to uppercase.
PHP Functions | 97

Defining  a Function
The general syntax for a function is as follows:
function function_name ([parameter  [, ...]])
{
  // Statements
}
I’ll explain all the square brackets, in case you find them confusing. The first line of
the syntax indicates the following:
•A definition starts with the word function .
•A name follows, which must start with a letter or underscore, followed by any
number of letters, numbers, or underscores.
•The parentheses are required.
•One or more parameters, separated by commas, are optional.
Function names are case-insensitive, so all of the following  strings can refer to the
print  function: PRINT , Print , and PrInT .
The opening curly brace starts the statements that will execute when you call the
function; a matching curly brace must close it. These statements may include one or
more return  statements,  which force the function to cease execution and return to
the calling code. If a value is attached to the return  statement, the calling code can
retrieve it, as we’ll see next.
Returning a Value
Let’s take a look at a simple function to convert a person’s full name to lowercase and
then capitalize the first letter of each name.
We’ve already seen an example of PHP’s built-in strtoupper  function in
Example 5-1 . For our current function, we’ll use its counterpart, strtolower :
$lowered = strtolower("aNY # of Letters and Punctuation you WANT");
echo $lowered;
The output of this experiment is as follows:
any # of letters and punctuation you want
We don’t want names all lowercase, though; we want the first letter of each name cap‐
italized. (We’re not going to deal with subtle cases such as Mary-Ann or Jo-En-Lai for
this example.) Luckily, PHP also provides a ucfirst  function that sets the first char‐
acter of a string to uppercase:
$ucfixed = ucfirst("any # of letters and punctuation you want");
98 | Chapter 5: PHP Functions and Objects

echo $ucfixed;
The output is as follows:
Any # of letters and punctuation you want
Now we can do our first bit of program design: to get a word with its initial letter
capitalized, we call strtolower  on a string first, and then ucfirst . The way to do this
is to nest a call to strtolower  within ucfirst . Let’s see why, because it’s important to
understand the order in which code is evaluated.
Say you make a simple call to the print  function:
print(5-8);
The expression 5-8 is evaluated first, and the output is –3. (As you saw in the previ‐
ous chapter, PHP converts the result to a string in order to display it.) If the expres‐
sion contains a function, that function is evaluated first as well:
print(abs(5-8));
PHP is doing several things in executing that short statement:
1.Evaluate 5-8 to produce –3.
2.Use the abs function to turn –3 into 3.
3.Convert the result to a string and output it using the print  function.
It all works, because PHP evaluates each element from the inside out. The same pro‐
cedure is in operation when we call the following:
ucfirst(strtolower("aNY # of Letters and Punctuation you WANT"))
PHP passes our string to strtolower  and then to ucfirst , producing (as we’ve
already seen when we played with the functions separately):
Any # of letters and punctuation you want
Now let’s define a function (shown in Example 5-2 ) that takes three names and makes
each one lowercased with an initial capital letter.
Example 5-2. Cleaning up a full name
<?php
  echo fix_names("WILLIAM", "henry", "gatES");
  function fix_names($n1, $n2, $n3)
  {
    $n1 = ucfirst(strtolower($n1));
    $n2 = ucfirst(strtolower($n2));
    $n3 = ucfirst(strtolower($n3));
PHP Functions | 99

return $n1 . " " . $n2 . " " . $n3;
  }
?>
Y ou may well find yourself writing this type of code, because users often leave their
Caps Lock key on, accidentally insert capital letters in the wrong places, and even for‐
get capitals altogether. The output from this example is shown here:
William Henry Gates
Returning an Array
We just saw a function returning a single value. There are also ways of getting multi‐
ple values from a function.
The first method is to return them  within an array. As you saw in Chapter 3 , an array
is like a bunch of variables stuck together in a row. Example 5-3  shows how you can
use an array to return function values.
Example 5-3. Returning multiple values in an array
<?php
  $names = fix_names("WILLIAM", "henry", "gatES");
  echo $names[0] . " " . $names[1] . " " . $names[2];
  function fix_names($n1, $n2, $n3)
  {
    $n1 = ucfirst(strtolower($n1));
    $n2 = ucfirst(strtolower($n2));
    $n3 = ucfirst(strtolower($n3));
    return array($n1, $n2, $n3);
  }
?>
This method has the benefit of keeping all three names separate, rather than concate‐
nating them into a single string, so you can refer to any user simply by first or last
name, without having to extract either name from the returned string.
Do Not Pass Arguments by Reference
In PHP versions prior to 5.3.0, you used to be able to preface a variable  with the &
symbol to tell the parser to pass a reference to the variable, not the variable’s value. 
This  granted a function access to the variable (allowing different values to be written
back to it) and could be a security risk, and also a cause of tricky-to-track bugs. It is
also the antithesis of object oriented programming (OOP).
100 | Chapter 5: PHP Functions and Objects

Passing by reference was deprecated in PHP 5.3.0 and was removed
in PHP 5.4.0. Y ou should therefore not use this feature other than
on legacy websites, and even there you are recommended to
rewrite code that passes by reference, because it will halt with a
fatal error on newer versions of PHP .
In case you are called upon to maintain legacy code you need to know how this used
to work so that you can build replacement routines where necessary. This concept
can be hard to get your head around, though, so let’s go back to the matchbox meta‐
phor from Chapter 3 .
Imagine that, instead of taking a piece of paper out of a matchbox, reading it, copying
it to another piece of paper, putting the original back, and passing the copy to a func‐
tion (phew!), you simply attach a piece of thread to the original piece of paper and
pass one end of it to the function (see Figure 5-2 ).
Figure 5-2. Imagining a reference as a thread attached to a variable
Now the function can follow the thread to find the data to be accessed. This avoids all
the overhead of creating a copy of the variable just for the function’s use. What’s
more, the function can now modify the variable’s value.
This means you can rewrite Example 5-3  to pass references to all the parameters, and
then the function can modify these directly (see Example 5-4 ).
Example 5-4. Returning values from a function by reference
<?php
  $a1 = "WILLIAM";
  $a2 = "henry";
  $a3 = "gatES";
  echo $a1 . " " . $a2 . " " . $a3 . "<br>";
PHP Functions | 101

fix_names($a1, $a2, $a3);
  echo $a1 . " " . $a2 . " " . $a3;
  function fix_names(&$n1, &$n2, &$n3)
  {
    $n1 = ucfirst(strtolower($n1));
    $n2 = ucfirst(strtolower($n2));
    $n3 = ucfirst(strtolower($n3));
  }
?>
Rather than passing strings directly to the function, you first assign them to variables
and print them out to see their “before” values. Then you call the function as before,
but put a & symbol in front of each parameter, which tells PHP to pass the variables’
references only.
Now the variables $n1, $n2, and $n3 are attached to “threads” that lead to the values of
$a1, $a2, and $a3. In other words, there is one group of values, but two sets of vari‐
able names are allowed to access them.
Therefore, the function fix_names  only has to assign new values to $n1, $n2, and $n3
to update the values of $a1, $a2, and $a3. The output from this code is:
WILLIAM henry gatES
William Henry Gates
As you see, both of the echo  statements use only the values of $a1, $a2, and $a3.
I must reemphasize that this is no longer supported programming practice in PHP ,
and you should therefore convert any code that relies on passing by reference. Some‐
times it’s as simple as removing the & symbols, because often they were not required
in the first place. Or, as in the following example, you can use global variables instead.
Returning Global Variables
The better way to give a function access to an externally created variable, is by declar‐
ing it a global variable from within the function. The global keyword followed by the
variable name gives every part of your code full access to it (see Example 5-5 ).
Example 5-5. Returning values in global variables
<?php
  $a1 = "WILLIAM";
  $a2 = "henry";
  $a3 = "gatES";
  echo $a1 . " " . $a2 . " " . $a3 . "<br>";
  fix_names();
  echo $a1 . " " . $a2 . " " . $a3;
102 | Chapter 5: PHP Functions and Objects

function fix_names()
  {
    global $a1; $a1 = ucfirst(strtolower($a1));
    global $a2; $a2 = ucfirst(strtolower($a2));
    global $a3; $a3 = ucfirst(strtolower($a3));
  }
?>
Now you don’t have to pass parameters to the function, and it doesn’t have to accept
them. Once declared, these variables remain global and available to the rest of your
program, including its functions.
In order to retain as much local scope as possible, you should try
returning arrays or using variables by association. Otherwise, you
will begin to lose some of the benefits of functions.
Recap of Variable Scope
A quick reminder of what you know from Chapter 3 :
•Local variables  are accessible just from the part of code where you define them. If
they’re outside of a function, they can be accessed by all code outside of func‐
tions, classes, and so on. If a variable is inside a function, only that function can
access the variable, and its value is lost when the function returns.
•Global variables  are accessible from all parts of your code.
•Static variables  are accessible only within the function that declared them but
retain their value over multiple calls.
Including and Requiring Files
As you progress in your use of PHP programming, you are likely to start building a
library of functions that you think you will need again. Y ou’ll also probably start
using libraries created by other programmers.
There’s no need to copy and paste these functions into your code. Y ou can save them
in separate files and use commands to pull them in. There are two types of command
to perform this action: include  and require .
Including and Requiring Files | 103

The include Statement
Using include , you can tell PHP to fetch  a particular file and load all its contents.  It’s
as if you pasted the included file into the current file at the insertion point.
Example 5-6  shows how you would include a file called library.php .
Example 5-6. Including a PHP file
<?php
  include "library.php";
  // Your code goes here
?>
Using include_once
Each time you issue the include  directive, it includes the requested file again, even if
you’ve already inserted it. For instance, suppose that library.php  contains a lot of use‐
ful functions, so you include it in your file, but also include another library that
includes library.php . Through nesting, you’ve inadvertently included library.php
twice. This will produce error messages, because you’re trying to define the same con‐
stant or function multiple times. So you should use include_once  instead (see
Example 5-7 ).
Example 5-7. Including a PHP file only once
<?php
  include_once "library.php";
  // Your code goes here
?>
Then, whenever another include  or include_once  is encountered, if it has already
been executed, it will be completely ignored. To determine whether the file has
already been executed, the absolute file path is matched after all relative paths are
resolved and the file is found in your include  path.
In general, it’s probably best to stick with include_once  and ignore
the basic include  statement. That way, you will never have the
problem of files being included multiple times.
104 | Chapter 5: PHP Functions and Objects

Using require and require_once
A potential problem with include  and include_once  is that PHP will only attempt  to
include the requested file. Program execution continues even if the file is not found.
When it is absolutely essential to include a file, require  it. For the same reasons I
gave for using include_once , I recommend that you generally stick with
require_once  whenever you need to require  a file (see Example 5-8 ).
Example 5-8. Requiring a PHP file only once
<?php
  require_once "library.php";
  // Your code goes here
?>
PHP Version Compatibility
PHP is in an ongoing process of development, and  there are multiple versions.  If you
need to check whether a particular function is available to your code, you can use the
function_exists  function, which checks all predefined and user-created functions.
Example 5-9  checks for array_combine , a function specific to PHP version 5.
Example 5-9. Checking for a function’s existence
<?php
  if (function_exists("array_combine"))
  {
    echo "Function exists";
  }
  else
  {
    echo "Function does not exist - better write our own";
  }
?>
Using code such as this, you can take advantage of features in newer versions of PHP
and yet still have your code run on earlier versions, as long as you replicate any fea‐
tures that are missing. Y our functions may be slower than the built-in ones, but at
least your code will be much more portable.
Y ou can also use the phpversion  function  to determine which version of PHP your
code is running on. The returned result will be similar to the following, depending on
the version:
5.5.11
PHP Version Compatibility | 105

PHP Objects
In much the same way that functions represent a huge increase in programming
power over the early days of computing, where sometimes the best program naviga‐
tion available was a very basic GOTO  or GOSUB  statement, object-oriented programming
(OOP) takes the use of functions to a whole new level.
Once you get the hang of condensing reusable bits of code into functions, it’s not that
great a leap to consider bundling the functions and their data into objects.
Let’s take a social networking site that has many parts. One handles all user functions;
that is, code to enable new users to sign up and existing users to modify their details.
In standard PHP , you might create a few functions to handle this and embed some
calls to the MySQL database to keep track of all the users.
Imagine how much easier it would be to create an object to represent the current user.
To do this, you could create a class, perhaps called User , that would contain all the
code required for handling users and all the variables needed for manipulating the
data within the class. Then, whenever you need to manipulate a user’s data, you could
simply create a new object with the User  class.
Y ou could treat this new object as if it were the actual user. For example, you could
pass the object a name, password, and email address; ask it whether such a user
already exists; and, if not, have it create a new user with those attributes. Y ou could
even have an instant messaging object, or one for managing whether two users are
friends.
Terminology
When creating a program to use objects, you need to design a composite of data and
code called a class . Each new object based on this class is called an instance  (or occur‐
rence ) of that class.
The data associated with an object is called its properties ; the functions it uses are
called methods . In defining a class, you supply the names of its properties and the
code for its methods. See Figure 5-3  for a jukebox metaphor for an object. Think of
the CDs that it holds in the carousel as its properties; the method of playing them is
to press buttons on the front panel. There is also the slot for inserting coins (the
method used to activate the object), and the laser disc reader (the method used to
retrieve the music, or properties, from the CDs).
When you’re creating objects, it is best to use encapsulation , or writing a class in such
a way that only its methods can be used to manipulate its properties. In other words,
you deny outside code direct access to its data. The methods you supply are known as
the object’s interface .
106 | Chapter 5: PHP Functions and Objects

This approach makes debugging easy: you have to fix faulty code only within a class.
Additionally, when you want to upgrade a program, if you have used proper encapsu‐
lation and maintained the same interface, you can simply develop new replacement
classes, debug them fully, and then swap them in for the old ones. If they don’t work,
you can swap the old ones back in to immediately fix the problem before further
debugging the new classes.
Once you have created a class, you may find that you need another class that is simi‐
lar to it but not quite the same. The quick and easy thing to do is to define a new class
using inheritance . When you do this, your new class has all the properties of the one
it has inherited from. The original class is now called the superclass , and  the new one
is the subclass  (or derived  class).
Figure 5-3. A jukebox: a great example of a self-contained object
In our jukebox example, if you invent a new jukebox that can play a video along with
the music, you can inherit all the properties and methods from the original jukebox
superclass and add some new properties (videos) and new methods (a movie player).
An excellent benefit of this system is that if you improve the speed or any other aspect
of the superclass, its subclasses will receive the same benefit.
Declaring a Class
Before you can use an object, you must define a class with the class  keyword. Class
definitions contain the class name (which is case-sensitive), its properties, and its
methods. Example 5-10  defines the class User  with two properties, which are: $name
and $password  (indicated by the public  keyword—see “Property and Method Scope
in PHP 5” on page 115 ). It also creates a new instance (called $object ) of this class.
PHP Objects | 107

Example 5-10. Declaring a class and examining an object
<?php
  $object = new User;
  print_r($object);
  class User
  {
    public $name, $password;
    function save_user()
    {
      echo "Save User code goes here";
    }
  }
?>
Here I have also used an invaluable function called print_r . It asks PHP to display
information about a variable in human-readable form. The _r stands for in human-
readable format . In the case of the new object $object , it prints the following:
User Object
(
  [name]     =>
  [password] =>
)
However, a browser compresses all the whitespace, so the output in a browser is
slightly harder to read:
User Object ( [name] => [password] => )
In any case, the output says that $object  is a user-defined object that has the proper‐
ties name  and password .
Creating an Object
To create an object with a specified class, use the new keyword,  like this: object =
new Class . Here are a couple of ways in which we could do this:
$object = new User;
$temp   = new User('name', 'password');
On the first line, we simply assign an object to the User  class. In the second, we pass
parameters to the call.
A class may require or prohibit arguments; it may also allow arguments but not
require them.
108 | Chapter 5: PHP Functions and Objects

Accessing Objects
Let’s add a few lines to Example 5-10  and check the results. Example 5-11  extends the
previous code by setting object properties and calling a method.
Example 5-11. Creating and interacting with an object
<?php
  $object = new User;
  print_r($object); echo "<br>";
  $object->name     = "Joe";
  $object->password = "mypass";
  print_r($object); echo "<br>";
  $object->save_user();
  class User
  {
    public $name, $password;
    function save_user()
    {
      echo "Save User code goes here";
    }
  }
?>
As you can see, the syntax for accessing an object’s property is $object->property .
Likewise, you call a method like this: $object->method() .
Y ou should note that the example property  and method  do not have $ signs in front
of them. If you were to preface them with $ signs, the code would not work, as it
would try to reference the value inside a variable. For example, the expression
$object->$property  would attempt to look up the value assigned to a variable
named $property  (let’s say that value is the string brown ) and then attempt to refer‐
ence the property $object->brown . If $property  is undefined, an attempt to refer‐
ence $object->NULL  would occur and cause an error.
When looked at using a browser’s View Source facility, the output from Example 5-11
is as follows:
User Object
(
  [name]     =>
  [password] =>
)
User Object
(
  [name]     => Joe
PHP Objects | 109

[password] => mypass
)
Save User code goes here
Again, print_r  shows its utility by providing the contents of $object  before and
after property assignment. From now on, I’ll omit print_r  statements, but if you are
working along with this book on your development server, you can put some in to see
exactly what is happening.
Y ou can also see that the code in the method save_user  was executed via the call to
that method. It printed the string reminding us to create some code.
Y ou can place functions and class definitions anywhere in your
code, before or after statements that use them. Generally, though, it
is considered good practice to place them toward the end of a file.
Cloning Objects
Once you have created an object, it is passed by reference when you pass it as a
parameter. In the matchbox metaphor, this is like keeping several threads attached to
an object stored in a matchbox, so that you can follow any attached thread to access
it.
In other words, making object assignments does not copy objects in their entirety.
Y ou’ll see how this works in Example 5-12 , where we define a very simple User  class
with no methods and only the property name .
Example 5-12. Copying an object?
<?php
  $object1       = new User();
  $object1->name = "Alice";
  $object2       = $object1;
  $object2->name = "Amy";
  echo "object1 name = " . $object1->name . "<br>";
  echo "object2 name = " . $object2->name;
  class User
  {
    public $name;
  }
?>
We’ve created the object $object1  and assigned the value Alice  to the name  property.
Then we create $object2 , assigning it the value of $object1 , and assign the value Amy
110 | Chapter 5: PHP Functions and Objects

just to the name  property of $object2 —or so we might think. But this code outputs
the following:
object1 name = Amy
object2 name = Amy
What has happened? Both $object1  and $object2  refer to the same  object, so chang‐
ing the name property of $object2  to Amy also sets that property for $object1 .
To avoid this confusion, you can use the clone  operator, which creates a new instance
of the class and copies the property values from the original instance to the new
instance. Example 5-13  illustrates this usage.
Example 5-13. Cloning an object
<?php
  $object1       = new User();
  $object1->name = "Alice";
  $object2       = clone $object1;
  $object2->name = "Amy";
  echo "object1 name = " . $object1->name . "<br>";
  echo "object2 name = " . $object2->name;
  class User
  {
    public $name;
  }
?>
Voilà! The output from this code is what we initially wanted:
object1 name = Alice
object2 name = Amy
Constructors
When creating a new object, you can  pass a list of arguments to the class being called.
These are passed to a special method within the class, called the constructor , which
initializes various properties.
In the past, you would normally give this method the same name as the class, as in
Example 5-14 .
Example 5-14. Creating a constructor method
<?php
  class User
  {
    function User($param1, $param2)
PHP Objects | 111

{
      // Constructor statements go here
      public $username = "Guest";
    }
  }
?>
However, PHP 5 provides a more logical approach to naming the constructor, which
is to use the function name __construct  (that is, construct  preceded by two under‐
score characters), as in Example 5-15 .
Example 5-15. Creating a constructor method in PHP 5
<?php
  class User
  {
    function __construct($param1, $param2)
    {
      // Constructor statements go here
      public $username = "Guest";
    }
  }
?>
PHP 5 Destructors
Also new in PHP 5 is the ability to create destructor  methods.  This ability is useful
when code has made the last reference to an object or when a script reaches the end.
Example 5-16  shows how to create a destructor method.
Example 5-16. Creating a destructor method in PHP 5
<?php
  class User
  {
    function __destruct()
    {
      // Destructor code goes here
    }
  }
?>
Writing Methods
As you have seen, declaring a method is similar to declaring  a function, but there are
a few differences. For example, method names beginning with a double underscore
(__) are reserved, and you should not create any of this form.
112 | Chapter 5: PHP Functions and Objects

Y ou also have access to a special variable called $this , which can be used to access the
current object’s properties. To see how it works, take a look at Example 5-17 , which
contains a different method from the User  class definition called get_password .
Example 5-17. Using the variable $this in a method
<?php
  class User
  {
    public $name, $password;
    function get_password()
    {
      return $this->password;
    }
  }
?>
get_password  uses the $this  variable to access the current object and then return the
value of that object’s password  property. Note how the preceding $ of the property
$password  is omitted  when we use the -> operator. Leaving the $ in place is a typical
error you may run into, particularly when you first use this feature.
Here’s how you would use the class defined in Example 5-17 :
$object           = new User;
$object->password = "secret";
echo $object->get_password();
This code prints the password secret .
Static Methods in PHP 5
If you are using PHP 5, you can also define a method as static , which  means that it is
called on a class, not on an object. A static method has no access to any object prop‐
erties and is created and accessed as in Example 5-18 .
Example 5-18. Creating and accessing a static method
<?php
  User::pwd_string();
  class User
  {
    static function pwd_string()
    {
      echo "Please enter your password";
    }
PHP Objects | 113

}
?>
Note how we call the class itself, along with the static method, using a double colon
(also known as the scope resolution  operator), not ->. Static functions are useful for
performing actions relating to the class itself, but not to specific instances of the class.
Y ou can see another example of a static method in Example 5-21 .
If you try to access $this->property , or other object properties
from within a static function, you will receive an error message.
Declaring Properties
It is not necessary to explicitly declare  properties within classes, as they can be
implicitly defined when first used. To illustrate this, in Example 5-19  the class User
has no properties and no methods but is legal code.
Example 5-19. Defining  a property implicitly
<?php
  $object1       = new User();
  $object1->name = "Alice";
  echo $object1->name;
  class User {}
?>
This code correctly outputs the string Alice  without a problem, because PHP implic‐
itly declares the variable $object1->name  for you. But this kind of programming can
lead to bugs that are infuriatingly difficult to discover, because name  was declared
from outside the class.
To help yourself and anyone else who will maintain your code, I advise that you get
into the habit of always declaring your properties explicitly within classes. Y ou’ll be
glad you did.
Also, when you declare a property within a class, you may assign a default value to it.
The value you use must be a constant and not the result of a function or expression.
Example 5-20  shows a few valid and invalid assignments.
114 | Chapter 5: PHP Functions and Objects

Example 5-20. Valid and invalid property declarations
<?php
  class Test
  {
    public $name  = "Paul Smith"; // Valid
    public $age   = 42;           // Valid
    public $time  = time();       // Invalid - calls a function
    public $score = $level * 2;   // Invalid - uses an expression
  }
?>
Declaring Constants
In the same way that you can create a global constant with the define  function, you
can define constants inside classes. The generally accepted practice is to use upper‐
case letters to make them stand out, as in Example 5-21 .
Example 5-21. Defining  constants within a class
<?php
  Translate::lookup();
  class Translate
  {
    const ENGLISH = 0;
    const SPANISH = 1;
    const FRENCH  = 2;
    const GERMAN  = 3;
    // ...
    static function lookup()
    {
      echo self::SPANISH;
    }
  }
?>
Y ou can reference constants directly,  using the self  keyword and double colon oper‐
ator. Note that this code calls the class directly, using the double colon operator at line
1, without creating an instance of it first. As you would expect, the value printed
when you run this code is 1.
Remember that once you define a constant, you can’t change it.
Property and Method Scope in PHP 5
PHP 5 provides three keywords for controlling the scope of properties and methods:
PHP Objects | 115

public
These properties are the default when you are declaring a variable using the var or
public  keywords, or when a variable is implicitly declared the first time it is used.
The keywords var and public  are interchangeable because, although deprecated, var
is retained for compatibility with previous versions of PHP . Methods are assumed to
be public  by default.
protected
These properties and methods ( members ) can be referenced only by the object’s class
methods and those of any subclasses.
private
These members can be referenced only by methods within the same class—not by
subclasses.
Here’s how to decide which you need to use:
•Use public  when outside code should  access this member and extending classes
should  also inherit it.
•Use protected  when outside code should not  access this member but extending
classes should  inherit it.
•Use private  when outside code should not  access this member and extending
classes also should not  inherit it.
Example 5-22  illustrates the use of these keywords.
Example 5-22. Changing property and method scope
<?php
  class Example
  {
    var $name   = "Michael"; // Same as public but deprecated
    public $age = 23;        // Public property
    protected $usercount;    // Protected property
    private function admin() // Private method
    {
      // Admin code goes here
    }
  }
?>
Static Properties and Methods
Most data and methods apply to instances of a class.  For example, in a User  class, you
want to do such things as set a particular user’s password or check when the user has
116 | Chapter 5: PHP Functions and Objects

been registered. These facts and operations apply separately to each user and there‐
fore use instance-specific properties and methods.
But occasionally you’ll want to maintain data about a whole class. For instance, to
report how many users are registered, you will store a variable that applies to the
whole User  class. PHP provides static properties and methods for such data.
As shown briefly in Example 5-18 , declaring members of a class static  makes them
accessible without an instantiation of the class. A property declared static  cannot be
directly accessed within an instance of a class, but a static method can.
Example 5-23  defines a class called Test  with a static property and a public method.
Example 5-23. Defining  a class with a static property
<?php
  $temp = new Test();
  echo "Test A: " . Test::$static_property . "<br>";
  echo "Test B: " . $temp->get_sp()        . "<br>";
  echo "Test C: " . $temp->static_property . "<br>";
  class Test
  {
    static $static_property = "I'm static";
    function get_sp()
    {
       return self::$static_property;
    }
  }
?>
When you run this code, it returns the following output:
Test A: I'm static
Test B: I'm static
Notice: Undefined property: Test::$static_property
Test C:
This example shows that the property $static_property  could be directly referenced
from the class itself via the double colon operator in Test A. Also, Test B could obtain
its value by calling the get_sp  method of the object $temp , created from class Test .
But Test C failed, because the static property $static_property  was not accessible to
the object $temp .
Note how the method get_sp  accesses $static_property  using the keyword self .
This is how a static property or constant can be directly accessed within a class.
PHP Objects | 117

Inheritance
Once you have written a class, you can  derive subclasses from it. This can save lots of
painstaking code rewriting: you can take a class similar to the one you need to write,
extend it to a subclass, and just modify the parts that are different. Y ou achieve this
using the extends  operator.
In Example 5-24 , the class Subscriber  is declared a subclass of User  by means of the
extends  operator.
Example 5-24. Inheriting and extending a class
<?php
  $object           = new Subscriber;
  $object->name     = "Fred";
  $object->password = "pword";
  $object->phone    = "012 345 6789";
  $object->email    = "fred@bloggs.com";
  $object->display();
  class User
  {
    public $name, $password;
    function save_user()
    {
      echo "Save User code goes here";
    }
  }
  class Subscriber extends User
  {
    public $phone, $email;
    function display()
    {
      echo "Name:  " . $this->name     . "<br>";
      echo "Pass:  " . $this->password . "<br>";
      echo "Phone: " . $this->phone    . "<br>";
      echo "Email: " . $this->email;
    }
  }
?>
The original User  class has two properties, $name  and $password , and a method to
save the current user to the database. Subscriber  extends this class by adding an
additional two properties, $phone  and $email , and includes a method of displaying
the properties of the current object using the variable $this , which refers to the cur‐
rent values of the object being accessed. The output from this code is as follows:
118 | Chapter 5: PHP Functions and Objects

Name:  Fred
Pass:  pword
Phone: 012 345 6789
Email: fred@bloggs.com
The parent operator
If you write a method in a subclass with the same name as one in its parent class, its
statements will override those of the parent class. Sometimes this is not the behavior
you want, and you need to access the parent’s method. To do this, you can use the
parent  operator, as in Example 5-25 .
Example 5-25. Overriding a method and using the parent operator
<?php
  $object = new Son;
  $object->test();
  $object->test2();
  class Dad
  {
    function test()
    {
      echo "[Class Dad] I am your Father<br>";
    }
  }
  class Son extends Dad
  {
    function test()
    {
      echo "[Class Son] I am Luke<br>";
    }
    function test2()
    {
      parent::test();
    }
  }
?>
This code creates a class called Dad and then a subclass called Son that inherits its
properties and methods, and then overrides the method test . Therefore, when line 2
calls the method test , the new method is executed. The only way to execute the over‐
ridden test  method in the Dad class is to use the parent  operator, as shown in func‐
tion test2  of class Son. The code outputs the following:
[Class Son] I am Luke
[Class Dad] I am your Father
PHP Objects | 119

If you wish to ensure that your code calls a method from the current class, you can
use the self  keyword, like this:
self::method();
Subclass constructors
When you extend a class and declare  your own constructor, you should be aware that
PHP will not automatically call the constructor method of the parent class. If you
want to be certain that all initialization code is executed, subclasses should always call
the parent constructors, as in Example 5-26 .
Example 5-26. Calling the parent class constructor
<?php
  $object = new Tiger();
  echo "Tigers have...<br>";
  echo "Fur: " . $object->fur . "<br>";
  echo "Stripes: " . $object->stripes;
  class Wildcat
  {
    public $fur; // Wildcats have fur
    function __construct()
    {
      $this->fur = "TRUE";
    }
  }
  class Tiger extends Wildcat
  {
    public $stripes; // Tigers have stripes
    function __construct()
    {
      parent::__construct(); // Call parent constructor first
      $this->stripes = "TRUE";
    }
  }
?>
This example takes advantage of inheritance in the typical manner. The Wildcat  class
has created the property $fur , which we’ d like to reuse, so we create the Tiger  class to
inherit $fur  and additionally create another property, $stripes . To verify that both
constructors have been called, the program outputs the following:
120 | Chapter 5: PHP Functions and Objects

Tigers have...
Fur: TRUE
Stripes: TRUE
Final methods
When you wish to prevent a subclass from overriding a superclass method, you can
use the final  keyword. Example 5-27  shows how.
Example 5-27. Creating a final  method
<?php
  class User
  {
    final function copyright()
    {
      echo "This class was written by Joe Smith";
    }
  }
?>
Once you have digested the contents of this chapter, you should have a strong feel for
what PHP can do for you. Y ou should be able to use functions with ease and, if you
wish, write object-oriented code. In Chapter 6 , we’ll finish off our initial exploration
of PHP by looking at the workings of PHP arrays.
Questions
1.What is the main benefit of using a function? This is a second sentence in the list.
2.How many values can a function return?
3.What is the difference between accessing a variable by name and by reference?
This is a second sentence in the list.
4.What is the meaning of scope  in PHP?
5.How can you incorporate one PHP file within another? This is a second sentence
in the list.
6.How is an object different from a function?
7.How do you create a new object in PHP?
8.What syntax would you use to create a subclass from an existing one?
9.How can you call an initializing piece of code when an object is created?
10.Why is it a good idea to explicitly declare properties within a class? This is a sec‐
ond sentence in the list.
See Chapter 5 Answers  in Appendix A  for the answers to these questions.
Questions | 121



CHAPTER 6
PHP Arrays
In Chapter 3 , I gave  a very brief introduction to PHP’s arrays—just enough for a little
taste of their power. In this chapter, I’ll show you many more things that you can do
with arrays, some of which—if you have ever used a strongly typed language such as
C—may surprise you with their elegance and simplicity.
Arrays are an example of what has made PHP so popular. Not only do they remove
the tedium of writing code to deal with complicated data structures, but they also
provide numerous ways to access data while remaining amazingly fast.
Basic Access
We’ve already looked at arrays as if they were clusters of matchboxes glued together.
Another way to think of an array is like a string of beads, with the beads representing
variables that can be numeric, strings, or even other arrays. They are like bead strings,
because each element has its own location and (with the exception of the first and last
ones) each has other elements on either side.
Some arrays are referenced by numeric indices; others allow alphanumeric identifiers.
Built-in functions let you sort them, add or remove sections, and walk through them
to handle each item through a special kind of loop. And by placing one or more
arrays inside another, you can create arrays of two, three, or any number of dimen‐
sions.
Numerically Indexed Arrays
Let’s assume that you’ve been tasked with creating a simple website for a local office-
supply company and you’re currently working on the section devoted to paper. One
way to manage the various items of stock in this category would be to place them in a
numeric array. Y ou can see the simplest way of doing so in Example 6-1 .
123

Example 6-1. Adding items to an array
<?php
  $paper[] = "Copier";
  $paper[] = "Inkjet";
  $paper[] = "Laser";
  $paper[] = "Photo";
  print_r($paper);
?>
In this example, each time you assign a value to the array $paper , the first empty
location within that array is used to store the value, and a pointer internal to PHP is
incremented to point to the next free location, ready for future insertions. The famil‐
iar print_r  function (which prints out the contents of a variable, array, or object) is
used to verify that the array has been correctly populated. It prints out the following:
Array
(
  [0] => Copier
  [1] => Inkjet
  [2] => Laser
  [3] => Photo
)
The previous code could also have been written as shown in Example 6-2 , where the
exact location of each item within the array is specified. But, as you can see, that
approach requires extra typing and makes your code harder to maintain if you want
to insert or remove supplies from the array. So unless you wish to specify a different
order, it’s usually better to simply let PHP handle the actual location numbers.
Example 6-2. Adding items to an array using explicit locations
<?php
  $paper[0] = "Copier";
  $paper[1] = "Inkjet";
  $paper[2] = "Laser";
  $paper[3] = "Photo";
  print_r($paper);
?>
The output from these examples is identical, but you are not likely to use print_r  in a
developed website, so Example 6-3  shows how you might print out the various types
of paper the website offers using a for loop.
124 | Chapter 6: PHP Arrays

Example 6-3. Adding items to an array and retrieving them
<?php
  $paper[] = "Copier";
  $paper[] = "Inkjet";
  $paper[] = "Laser";
  $paper[] = "Photo";
  for ($j = 0 ; $j < 4 ; ++$j)
    echo "$j: $paper[$j]<br>";
?>
This example prints out the following:
0: Copier
1: Inkjet
2: Laser
3: Photo
So far, you’ve seen a couple of ways in which you can add items to an array and one
way of referencing them, but PHP offers many more—which I’ll get to shortly. But
first, we’ll look at another type of array.
Associative Arrays
Keeping track of array elements  by index works just fine, but can require extra work
in terms of remembering which number refers to which product. It can also make
code hard for other programmers to follow.
This is where associative arrays come into their own. Using them, you can reference
the items in an array by name rather than by number. Example 6-4  expands on the
previous code by giving each element in the array an identifying name and a longer,
more explanatory string value.
Example 6-4. Adding items to an associative array and retrieving them
<?php
  $paper['copier'] = "Copier & Multipurpose";
  $paper['inkjet'] = "Inkjet Printer";
  $paper['laser']  = "Laser Printer";
  $paper['photo']  = "Photographic Paper";
  echo $paper['laser'];
?>
In place of a number (which doesn’t convey any useful information, aside from the
position of the item in the array), each item now has a unique name that you can use
to reference it elsewhere, as with the echo  statement—which simply prints out Laser
Basic Access | 125

Printer . The names ( copier , inkjet , and so on) are called indexes  or keys, and  the
items assigned to them (such as Laser Printer ) are called values .
This very powerful feature of PHP is often used when you are extracting information
from XML and HTML. For example, an HTML parser such as those used by a search
engine could place all the elements of a web page into an associative array whose
names reflect the page’s structure:
$html['title'] = "My web page";
$html['body']  = "... body of web page ...";
The program would also probably break down all the links found within a page into
another array, and all the headings and subheadings into another. When you use
associative rather than numeric arrays, the code to refer to all of these items is easy to
write and debug.
Assignment Using the array Keyword
So far, you’ve seen how to assign values to arrays by just adding new items one at a
time. Whether you specify keys, specify numeric identifiers, or let PHP assign
numeric identifiers implicitly, this is a long-winded approach. A more compact and
faster assignment method uses the array  keyword. Example 6-5  shows both a
numeric and an associative array assigned using this method.
Example 6-5. Adding items to an array using the array keyword
<?php
  $p1 = array("Copier", "Inkjet", "Laser", "Photo");
  echo "p1 element: " . $p1[2] . "<br>";
  $p2 = array('copier' => "Copier & Multipurpose",
              'inkjet' => "Inkjet Printer",
              'laser'  => "Laser Printer",
              'photo'  => "Photographic Paper");
  echo "p2 element: " . $p2['inkjet'] . "<br>";
?>
The first half of this snippet assigns the old, shortened product descriptions to the
array $p1. There are four items, so they will occupy slots 0 through 3. Therefore, the
echo  statement prints out the following:
p1 element: Laser
The second half assigns associative identifiers and accompanying longer product
descriptions to the array $p2 using the format index  => value . The use of => is similar
to the regular = assignment operator, except that you are assigning a value to an index
126 | Chapter 6: PHP Arrays

and not to a variable . The index is then inextricably linked with that value, unless it is
assigned a new value. The echo  command therefore prints out this:
p2 element: Inkjet Printer
Y ou can verify that $p1 and $p2 are different types of array, because both of the fol‐
lowing commands, when appended to the code, will cause an Undefined index  or
Undefined offset  error, as the array identifier for each is incorrect:
echo $p1['inkjet']; // Undefined index
echo $p2[3];        // Undefined offset
The foreach...as Loop
The creators of PHP have gone to great lengths to make the language easy to use. So,
not content with the loop structures already provided, they added another one espe‐
cially for arrays: the foreach...as  loop. Using it, you can step through all the items
in an array, one at a time, and do something with them.
The process starts with the first item and ends with the last one, so you don’t even
have to know how many items there are in an array. Example 6-6  shows how fore
ach...as  can be used to rewrite Example 6-3 .
Example 6-6. Walking through a numeric array using foreach...as
<?php
  $paper = array("Copier", "Inkjet", "Laser", "Photo");
  $j = 0;
  foreach($paper as $item)
  {
    echo "$j: $item<br>";
    ++$j;
  }
?>
When PHP encounters a foreach  statement, it takes the first item of the array and
places it in the variable following the as keyword; and each time control flow returns
to the foreach , the next array element is placed in the as keyword. In this case, the
variable $item  is set to each of the four values in turn in the array $paper . Once all
values have been used, execution of the loop ends. The output from this code is
exactly the same as Example 6-3 .
Now let’s see how foreach  works with an associative array by taking a look at
Example 6-7 , which is a rewrite of the second half of Example 6-5 .
The foreach...as Loop | 127

Example 6-7. Walking through an associative array using foreach...as
<?php
  $paper = array('copier' => "Copier & Multipurpose",
                 'inkjet' => "Inkjet Printer",
                 'laser'  => "Laser Printer",
                 'photo'  => "Photographic Paper");
  foreach($paper as $item => $description)
    echo "$item: $description<br>";
?>
Remember that associative arrays do not require numeric indexes, so the variable $j
is not used in this example. Instead, each item of the array $paper  is fed into the key/
value pair of variables $item  and $description , from which they are printed out.
The displayed result of this code is as follows:
copier: Copier & Multipurpose
inkjet: Inkjet Printer
laser: Laser Printer
photo: Photographic Paper
As an alternative syntax to foreach...as , you can use the list  function in conjunc‐
tion with the each  function, as in Example 6-8 .
Example 6-8. Walking through an associative array using each and list
<?php
  $paper = array('copier' => "Copier & Multipurpose",
                 'inkjet' => "Inkjet Printer",
                 'laser'  => "Laser Printer",
                 'photo'  => "Photographic Paper");
  while (list($item, $description) = each($paper))
    echo "$item: $description<br>";
?>
In this example, a while  loop is set up and will continue looping until each  returns a
value of FALSE . The each  function acts like foreach : it returns an array containing a
key/value pair from the array $paper  and then moves its built-in pointer to the next
pair in that array. When there are no more pairs to return, each  returns FALSE .
The list  function takes an array as its argument (in this case, the key/value pair
returned by the function each ) and then assigns the values of the array to the vari‐
ables listed within parentheses.
Y ou can see how list  works a little more clearly in Example 6-9 , where an array is
created out of the two strings Alice  and Bob and then passed to the list  function,
which assigns those strings as values to the variables $a and $b.
128 | Chapter 6: PHP Arrays

Example 6-9. Using the list function
<?php
  list($a, $b) = array('Alice', 'Bob');
  echo "a=$a b=$b";
?>
The output from this code is as follows:
a=Alice b=Bob
So you can take your pick when walking through arrays. Use foreach...as  to create
a loop that extracts values to the variable following the as, or use the each  function
and create your own looping system.
Multidimensional Arrays
A simple design feature in PHP’s array syntax  makes it possible to create arrays of
more than one dimension. In fact, they can be as many dimensions as you like
(although it’s a rare application that goes further than three).
That feature is the ability to include an entire array as a part of another one, and to be
able to keep doing so, just like the old rhyme: “Big fleas have little fleas upon their
backs to bite ’ em. Little fleas have lesser fleas, add flea, ad infinitum. ”
Let’s look at how this works by taking the associative array in the previous example
and extending it; see Example 6-10 .
Example 6-10. Creating a multidimensional associative array
<?php
  $products = array(
    'paper' => array(
      'copier' => "Copier & Multipurpose",
      'inkjet' => "Inkjet Printer",
      'laser'  => "Laser Printer",
      'photo'  => "Photographic Paper"),
    'pens' => array(
      'ball'   => "Ball Point",
      'hilite' => "Highlighters",
      'marker' => "Markers"),
    'misc' => array(
      'tape'   => "Sticky Tape",
      'glue'   => "Adhesives",
Multidimensional Arrays | 129

'clips'  => "Paperclips"
    )
  );
  echo "<pre>";
  foreach($products as $section => $items)
    foreach($items as $key => $value)
      echo "$section:\t$key\t($value)<br>";
  echo "</pre>";
?>
To make things clearer now that the code is starting to grow, I’ve renamed some of
the elements. For example, because the previous array $paper  is now just a subsection
of a larger array, the main array is now called $products . Within this array, there are
three items— paper , pens , and misc —each of which contains another array with key/
value pairs.
If necessary, these subarrays could have contained even further arrays. For example,
under ball  there might be many different types and colors of ballpoint pens available
in the online store. But for now, I’ve restricted the code to a depth of just two.
Once the array data has been assigned, I use a pair of nested foreach...as  loops to
print out the various values. The outer loop extracts the main sections from the top
level of the array, and the inner loop extracts the key/value pairs for the categories
within each section.
As long as you remember that each level of the array works the same way (it’s a key/
value pair), you can easily write code to access any element at any level.
The echo  statement makes use of the PHP escape character \t, which outputs a tab. 
Although tabs are not normally significant to the web browser, I let them be used for
layout by  using the <pre>...</pre>  tags, which tell the web browser to format the
text as preformatted and monospaced, and not to ignore whitespace characters such
as tabs and line feeds. The output from this code looks like the following:
paper:  copier  (Copier & Multipurpose)
paper:  inkjet  (Inkjet Printer)
paper:  laser   (Laser Printer)
paper:  photo   (Photographic Paper)
pens:   ball    (Ball Point)
pens:   hilite  (Highlighters)
pens:   marker  (Markers)
misc:   tape    (Sticky Tape)
misc:   glue    (Adhesives)
misc:   clips   (Paperclips)
Y ou can directly access a particular element of the array by using square brackets:
130 | Chapter 6: PHP Arrays

echo $products['misc']['glue'];
This outputs the value Adhesives .
Y ou can also create numeric multidimensional arrays that are accessed directly by
indexes rather than by alphanumeric identifiers. Example 6-11  creates the board for a
chess game with the pieces in their starting positions.
Example 6-11. Creating a multidimensional numeric array
<?php
  $chessboard = array(
    array('r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'),
    array('p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'),
    array(' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
    array(' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
    array(' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
    array(' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
    array('P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'),
    array('R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R')
  );
  echo "<pre>";
  foreach($chessboard as $row)
  {
    foreach ($row as $piece)
      echo "$piece ";
    echo "<br>";
  }
  echo "</pre>";
?>
In this example, the lowercase letters represent black pieces, and the uppercase white.
The key is r = rook, n = knight, b = bishop, k = king, q = queen, and p = pawn. Again,
a pair of nested foreach...as  loops walks through the array and displays its con‐
tents. The outer loop processes each row into the variable $row , which itself is an
array, because the $chessboard  array uses a subarray for each row. This loop has two
statements within it, so curly braces enclose them.
The inner loop then processes each square in a row, outputting the character
($piece ) stored in it, followed by a space (to square up the printout). This loop has a
single statement, so curly braces are not required to enclose it. The <pre>  and </pre>
tags ensure that the output displays correctly, like this:
r n b q k b n r
p p p p p p p p
Multidimensional Arrays | 131

P P P P P P P P
R N B Q K B N R
Y ou can also directly access any element within this array by using square brackets:
echo $chessboard[7][3];
This statement outputs the uppercase letter Q, the eighth element down and the
fourth along (remembering that array indexes start at 0, not 1).
Using Array Functions
Y ou’ve already seen the list  and each  functions, but PHP comes with numerous
other functions for handling arrays. The full list is at http://tinyurl.com/arraysinphp .
However, some of these functions are so fundamental that it’s worth taking the time
to look at them here.
is_array
Arrays and variables share the same namespace.  This means that you cannot have a
string variable called $fred  and an array also called $fred . If you’re in doubt and
your code needs to check whether a variable is an array, you can use the is_array
function, like this:
echo (is_array($fred)) ? "Is an array" : "Is not an array";
Note that if $fred  has not yet been assigned a value, an Undefined variable  message
will be generated.
count
Although the each  function and foreach...as  loop  structure are excellent ways to
walk through an array’s contents, sometimes you need to know exactly how many ele‐
ments there are in your array, particularly if you will be referencing them directly. To
count all the elements in the top level of an array, use a command such as this:
echo count($fred);
Should you wish to know how many elements there are altogether in a multidimen‐
sional array, you can use a statement such as the following:
echo count($fred, 1);
The second parameter is optional and sets the mode to use. It should be either a 0 to
limit counting to only the top level, or 1 to force recursive counting of all subarray
elements too.
132 | Chapter 6: PHP Arrays

sort
Sorting is so common that PHP provides a built-in function.  In its simplest form, you
would use it like this:
sort($fred);
Unlike some other functions, sort  will act directly on the supplied array rather than
returning a new array of sorted elements. Instead, it returns TRUE  on success and
FALSE  on error and also supports a few flags, but the main two that you might wish to
use force sorting to be made either numerically or as strings, like this:
sort($fred, SORT_NUMERIC);
sort($fred, SORT_STRING);
Y ou can also sort an array in reverse order using the rsort  function, like this:
rsort($fred, SORT_NUMERIC);
rsort($fred, SORT_STRING);
shuffle
There may be times when you need the elements of an array to be put in random
order, such as when you’re creating a game of playing cards:
shuffle($cards);
Like sort , shuffle  acts directly on the supplied array and returns TRUE  on success or
FALSE  on error.
explode
This is a very useful function with which you can take a string containing several
items separated by a single character (or string of characters) and then place each of
these items into an array. One handy example is to split up a sentence into an array
containing all its words, as in Example 6-12 .
Example 6-12. Exploding a string into an array using spaces
<?php
  $temp = explode(' ', "This is a sentence with seven words");
  print_r($temp);
?>
This example prints out the following (on a single line when viewed in a browser):
Array
(
  [0] => This
  [1] => is
  [2] => a
Using Array Functions | 133

[3] => sentence
  [4] => with
  [5] => seven
  [6] => words
)
The first parameter, the delimiter, need not be a space or even a single character.
Example 6-13  shows a slight variation.
Example 6-13. Exploding a string delimited with *** into an array
<?php
  $temp = explode('***', "A***sentence***with***asterisks");
  print_r($temp);
?>
The code in Example 6-13  prints out the following:
Array
(
  [0] => A
  [1] => sentence
  [2] => with
  [3] => asterisks
)
extract
Sometimes it can be convenient to turn the key/value pairs from an array into PHP
variables. One such time might be when you are processing the $_GET  or $_POST  vari‐
ables as sent to a PHP script by a form.
When a form is submitted over the Web, the web server unpacks the variables into a
global array for the PHP script. If the variables were sent using the Get method, they
will be placed in an associative array called $_GET ; if they were sent using Post, they
will be placed in an associative array called $_POST .
Y ou could, of course, walk through such associative arrays in the manner shown in
the examples so far. However, sometimes you just want to store the values sent into
variables for later use. In this case, you can have PHP do the job automatically:
extract($_GET);
So, if the query string parameter q is sent to a PHP script along with the associated
value Hi there , a new variable called $q will be created and assigned that value.
Be careful with this approach, though, because if any extracted variables conflict with
ones that you have already defined, your existing values will be overwritten. To avoid
this possibility, you can use one of the many additional parameters available to this
function, like this:
134 | Chapter 6: PHP Arrays

extract($_GET, EXTR_PREFIX_ALL, 'fromget');
In this case, all the new variables will begin with the given prefix string followed by an
underscore, so $q will become $fromget_q . I strongly recommend that you use this
version of the function when handling the $_GET  and $_POST  arrays, or any other
array whose keys could be controlled by the user, because malicious users could sub‐
mit keys chosen deliberately to overwrite commonly used variable names and com‐
promise your website.
compact
At times you may want to use compact , the inverse of extract , to create an array
from variables and their values. Example 6-14  shows how you might use this func‐
tion.
Example 6-14. Using the compact function
<?php
  $fname         = "Doctor";
  $sname         = "Who";
  $planet        = "Gallifrey";
  $system        = "Gridlock";
  $constellation = "Kasterborous";
  $contact = compact('fname', 'sname', 'planet', 'system', 'constellation');
  print_r($contact);
?>
The result of running Example 6-14  is as follows:
Array
(
  [fname] => Doctor
  [sname] => Who
  [planet] => Gallifrey
  [system] => Gridlock
  [constellation] => Kasterborous
)
Note how compact  requires the variable names to be supplied in quotes, not preceded
by a $ symbol. This is because compact  is looking for a list of variable names.
Another use of this function is for debugging, when you wish to quickly view several
variables and their values, as in Example 6-15 .
Using Array Functions | 135

Example 6-15. Using compact to help with debugging
<?php
  $j       = 23;
  $temp    = "Hello";
  $address = "1 Old Street";
  $age     = 61;
  print_r(compact(explode(' ', 'j temp address age')));
?>
This works by using the explode  function to extract all the words from the string into
an array, which is then passed to the compact  function, which in turn returns an array
to print_r , which finally shows its contents.
If you copy and paste the print_r  line of code, you only need to alter the variables
named there for a quick printout of a group of variables’ values. In this example, the
output is shown here:
Array
(
  [j] => 23
  [temp] => Hello
  [address] => 1 Old Street
  [age] => 61
)
reset
When the foreach...as  construct  or the each  function  walks through an array, it
keeps an internal PHP pointer that makes a note of which element of the array it
should return next. If your code ever needs to return to the start of an array, you can
issue reset , which also returns the value of that element. Examples of how to use this
function are as follows:
reset($fred);         // Throw away return value
$item = reset($fred); // Keep first element of the array in $item
end
As with reset , you can move PHP’s internal array pointer to the final element in an
array using the end function, which also returns the value of the element, and can be
used as in these examples:
end($fred);
$item = end($fred);
This chapter concludes your basic introduction to PHP , and you should now be able
to write quite complex programs using the skills you have learned. In the next chap‐
ter, we’ll look at using PHP for common, practical tasks.
136 | Chapter 6: PHP Arrays

Questions
1.What is the difference between a numeric and an associative array?
2.What is the main benefit of the array  keyword?
3.What is the difference between foreach  and each ?
4.How can you create a multidimensional array?
5.How can you determine the number of elements in an array?
6.What is the purpose of the explode  function?
7.How can you set PHP’s internal pointer into an array back to the first element of
the array?
See Chapter 6 Answers  in Appendix A  for the answers to these questions.
Questions | 137



CHAPTER 7
Practical PHP
Previous chapters went over the elements of the PHP language. This chapter builds
on your new programming skills to teach you some common but important practical
tasks. Y ou will learn the best ways to manage string handling to achieve clear and
concise code that displays in web browsers exactly how you want it to, including
advanced date and time management. Y ou’ll also find out how to create and other‐
wise modify files, including those uploaded by users.
Using printf
Y ou’ve already seen the print  and echo  functions, which simply output text to the
browser. But a much more powerful function, printf , controls the format of the out‐
put by letting you put special formatting characters in a string. For each formatting
character, printf  expects you to pass an argument that it will display using that for‐
mat. For instance, the following example uses the %d conversion specifier to display
the value 3 in decimal:
printf("There are %d items in your basket", 3);
If you replace the %d with %b, the value 3 would be displayed in binary ( 11). Table 7-1
shows the conversion specifiers supported.
Table 7-1. The printf conversion specifiers
Specifier Conversion action on argument arg Example (for an arg of 123)
% Display a % character (no arg  required) %
b Display arg  as a binary integer 1111011
c Display ASCII character for the arg {
d Display arg  as a signed decimal integer 123
139

Specifier Conversion action on argument arg Example (for an arg of 123)
e Display arg  using scientific  notation 1.23000e+2
f Display arg  as floating  point 123.000000
o Display arg  as an octal integer 173
s Display arg  as a string 123
u Display arg  as an unsigned decimal 123
x Display arg  in lowercase hexadecimal 7b
X Display arg  in uppercase hexadecimal 7B
Y ou can have as many specifiers as you like in a printf  function, as long as you pass a
matching number of arguments, and as long as each specifier is prefaced by a % sym‐
bol. Therefore, the following code is valid, and will output "My name is Simon. I'm
33 years old, which is 21 in hexadecimal" :
printf("My name is %s. I'm %d years old, which is %X in hexadecimal",
  'Simon', 33, 33);
If you leave out any arguments, you will receive a parse error informing you that a
right bracket, ), was unexpectedly encountered.
A more practical example of printf  sets colors in HTML using decimal. For example,
suppose you know you want a color that has a triplet value of 65 red, 127 green, and
245 blue, but don’t want to convert this to hexadecimal yourself. Here’s an easy solu‐
tion is:
printf("<span style='color:#%X%X%X'>Hello</span>", 65, 127, 245);
Check the format of the color specification between the apostrophes ( '') carefully.
First comes the pound, or hash, sign ( #) expected by the color specification. Then
come three %X format specifiers, one for each of your numbers. The resulting output
from this command is as follows:
<span style='color:#417FF5'>Hello</span>
Usually, you’ll find it convenient to use variables or expressions as arguments to
printf . For instance, if you stored values for your colors in the three variables $r, $g,
and $b, you could create a darker color with this:
printf("<span style='color:#%X%X%X'>Hello</span>", $r-20, $g-20, $b-20);
Precision Setting
Not only can you specify a conversion type, but you can also set the precision of the
displayed result. For example, amounts of currency are usually displayed with only
two digits of precision. However, after a calculation, a value may have a greater preci‐
sion than this, such as 123.42 / 12, which results in 10.285. To ensure that such values
140 | Chapter 7: Practical PHP

are correctly stored internally, but displayed with only two digits of precision, you can
insert the string ".2"  between the % symbol and the conversion specifier:
printf("The result is: $%.2f", 123.42 / 12);
The output from this command is as follows:
The result is $10.29
But you actually have even more control than that, because you can also specify
whether to pad output with either zeros or spaces by prefacing the specifier with cer‐
tain values. Example 7-1  shows four possible combinations.
Example 7-1. Precision setting
<?php
  echo "<pre>"; // Enables viewing of the spaces
  // Pad to 15 spaces
  printf("The result is $%15f\n", 123.42 / 12);
  // Pad to 15 spaces, fill with zeros
  printf("The result is $%015f\n", 123.42 / 12);
  // Pad to 15 spaces, 2 decimal places precision
  printf("The result is $%15.2f\n", 123.42 / 12);
  // Pad to 15 spaces, 2 decimal places precision, fill with zeros
  printf("The result is $%015.2f\n", 123.42 / 12);
  // Pad to 15 spaces, 2 decimal places precision, fill with # symbol
  printf("The result is $%'#15.2f\n", 123.42 / 12);
?>
The output from this example looks like this:
The result is $      10.285000
The result is $00000010.285000
The result is $          10.29
The result is $000000000010.29
The result is $##########10.29
The way it works is simple if you go from right to left (see Table 7-2 ). Notice that:
•The rightmost character is the conversion specifier: in this case, f for floating
point.
•Just before the conversion specifier, if there is a period and a number together,
then the precision of the output is specified as the value of the number.
•Regardless of whether there’s a precision specifier, if there is a number, then that
represents the number of characters to which the output should be padded. In
Using printf | 141

the previous example, this is 15 characters. If the output is already equal to or
greater than the padding length, then this argument is ignored.
•The leftmost parameter allowed after the % symbol is a 0, which is ignored unless
a padding value has been set, in which case the output is padded with zeros
instead of spaces. If a pad character other than zero or a space is required, you
can use any one of your choices as long as you preface it with a single quotation
mark, like this: '#.
•On the left is the % symbol, which starts the conversion.
Table 7-2. Conversion specifier  components
Start conversion Pad character Number of pad
charactersDisplay precision Conversion
specifierExamples
%  15  f 10.285000
% 0 15 .2 f 000000000010.29
% '# 15 .4 f ########10.2850
String Padding
Y ou can also pad strings to required lengths (as you can with numbers), select differ‐
ent padding characters, and even choose between left and right justification.
Example 7-2  shows various examples.
Example 7-2. String padding
<?php
  echo "<pre>"; // Enables viewing of the spaces
  $h = 'Rasmus';
  printf("[%s]\n",         $h); // Standard string output
  printf("[%12s]\n",       $h); // Right justify with spaces to width 12
  printf("[%-12s]\n",      $h); // Left justify with spaces
  printf("[%012s]\n",      $h); // Zero padding
  printf("[%'#12s]\n\n",   $h); // Use the custom padding character '#'
  $d = 'Rasmus Lerdorf';        // The original creator of PHP
  printf("[%12.8s]\n",     $d); // Right justify, cutoff of 8 characters
  printf("[%-12.12s]\n",   $d); // Left justify, cutoff of 12 characters
  printf("[%-'@12.10s]\n", $d); // Left justify, pad '@', cutoff 10 chars
?>
142 | Chapter 7: Practical PHP

Note how for purposes of layout in a web page, I’ve  used the <pre>  HTML tag to pre‐
serve all the spaces and the \n newline character after each of the lines to be dis‐
played. The output from this example is as follows:
[Rasmus]
[      Rasmus]
[Rasmus      ]
[000000Rasmus]
[######Rasmus]
[    Rasmus L]
[Rasmus Lerdo]
[Rasmus Ler@@]
When you are specifying a padding value, if a string is already of equal or greater
length than that value, it will be ignored, unless  a cutoff value is given that shortens
the string back to less than the padding value.
Table 7-3  shows the components available to string conversion specifiers.
Table 7-3. String conversion specifier  components
Start conversion Left/right
justifyPadding
characterNumber of pad
charactersCutoff Conversion
specifierExamples
(using “Rasmus”)
%     s [Rasmus]
% -  10  s [Rasmus    ]
%  '# 8 .4s [####Rasm]
Using sprintf
Often, you don’t want to output the result of a conversion but need it to use elsewhere
in your code. This is where the sprintf  function comes in.  With it, you can send the
output to another variable rather than to the browser.
Y ou might use it to make a conversion, as in the following example, which returns the
hexadecimal string value for the RGB color group 65, 127, 245 in $hexstring :
$hexstring = sprintf("%X%X%X", 65, 127, 245);
Or you may wish to store output ready to display later on:
$out = sprintf("The result is: $%.2f", 123.42 / 12);
echo $out;
Date and Time Functions
To keep track of the date and time, PHP uses standard Unix timestamps, which are
simply the number of seconds since the start of January 1, 1970. To determine the
current timestamp, you can use the time  function:
Date and Time Functions | 143

echo time();
Because the value is stored as seconds, to obtain the timestamp for this  time next
week, you would use the following, which adds 7 days times 24 hours times 60
minutes times 60 seconds to the returned value:
echo time() + 7 * 24 * 60 * 60;
If you wish to create a timestamp for a given date, you can use the mktime  function.
Its output is the timestamp 946684800  for the first second of the first minute of the
first hour of the first day of the year 2000:
echo mktime(0, 0, 0, 1, 1, 2000);
The parameters to pass are, in order from left to right:
•The number of the hour (0–23)
•The number of the minute (0–59)
•The number of seconds (0–59)
•The number of the month (1–12)
•The number of the day (1–31)
•The year (1970–2038, or 1901–2038 with PHP 5.1.0+ on 32-bit signed systems)
Y ou may ask why you are limited to the years 1970 through 2038.
Well, it’s because the original developers of Unix chose the start of
the year 1970 as the base date that no programmer should need to
go before!
Luckily, because (as of version 5.1.0) PHP supports systems using a
signed 32-bit integer for the timestamp, dates from 1901 to 2038
are allowed on them. However, that introduces a problem even
worse than the original because the Unix designers also decided
that nobody would be using Unix after about 70 years or so, and
therefore believed they could get away with storing the timestamp
as a 32-bit value—which will run out on January 19, 2038!
This will create what has come to be known as the Y2K38 bug
(much like the millennium bug, which was caused by storing years
as two-digit values, and which also had to be fixed). PHP intro‐
duced  the DateTime  class in version 5.2 to overcome this issue, but
it will work only on 64-bit architecture.
To display the date, use the date  function, which supports a plethora of formatting
options, enabling you to display the date any way you wish. The format is as follows:
date($format, $timestamp);
144 | Chapter 7: Practical PHP

The parameter $format  should be a string containing formatting specifiers as detailed
in Table 7-4 , and $timestamp  should be a Unix timestamp.  For the complete list of
specifiers, please see http://php.net/manual/en/function.date.php . The following com‐
mand will output the current date and time in the format "Thursday July 6th,
2017 - 1:38pm" :
echo date("l F jS, Y - g:ia", time());
Table 7-4. The major date function format specifiers
Format Description Returned value
Day specifiers
d Day of month, two digits, with leading zeros 01 to 31
D Day of the week, three letters Mon  to Sun
j Day of the month, no leading zeros 1 to 31
l Day of week, full names Sunday  to Saturday
N Day of week, numeric, Monday to Sunday 1 to 7
S Suffix  for day of month (useful with specifier  j)st, nd, rd, or th
w Day of week, numeric, Sunday to Saturday 0 to 6
z Day of year 0 to 365
Week specifier
W Week number of year 01 to 52
Month specifiers
F Month name January  to December
m Month number with leading zeros 01 to 12
M Month name, three letters Jan  to Dec
n Month number, no leading zeros 1 to 12
t Number of days in given month 28 to 31
Year specifiers
L Leap year 1 = Yes, 0 = No
y Year, 2 digits 00 to 99
Y Year, 4 digits 0000  to 9999
Time specifiers
a Before or after midday, lowercase am or pm
A Before or after midday, uppercase AM or PM
g Hour of day, 12-hour format, no leading zeros 1 to 12
G Hour of day, 24-hour format, no leading zeros 00 to 23
h Hour of day, 12-hour format, with leading zeros 01 to 12
H Hour of day, 24-hour format, with leading zeros 00 to 23
Date and Time Functions | 145

Format Description Returned value
i Minutes, with leading zeros 00 to 59
s Seconds, with leading zeros 00 to 59
Date Constants
There are a number of useful constants that you can use with the date  command to
return the date in specific formats.  For example, date(DATE_RSS)  returns the current
date and time in the valid format for an RSS feed. Some of the more commonly used
constants are as follows:
DATE_ATOM
This is the format for Atom feeds. The PHP format is "Y-m-d\TH:i:sP"  and example
output is "2018-08-16T12:00:00+00:00" .
DATE_COOKIE
This is the format for cookies set from a web server or JavaScript. The PHP format is
"l, d-M-y H:i:s T"  and example output is "Thursday, 16-Aug-18 12:00:00
UTC" .
DATE_RSS
This is the format for RSS feeds. The PHP format is "D, d M Y H:i:s O"  and exam‐
ple output is "Thu, 16 Aug 2018 12:00:00 UTC" .
DATE_W3C
This is the format for the World Wide Web Consortium. The PHP format is "Y-m-d
\TH:i:sP"  and example output is "2018-08-16T12:00:00+00:00" .
The complete list can be found at http://php.net/manual/en/class.datetime.php .
Using checkdate
Y ou’ve seen how to display a valid date in a variety of formats. But how can you check
whether a user has submitted a valid date to your program? The answer is to pass the
month, day, and year to the checkdate  function, which returns a value of TRUE  if the
date is valid, or FALSE  if it is not.
For example, if February 30 of any year is input, it will always be an invalid date.
Example 7-3  shows code that you could use for this. As it stands, it will find the given
date invalid.
Example 7-3. Checking for the validity of a date
<?php
  $month = 9;    // September (only has 30 days)
  $day   = 31;   // 31st
146 | Chapter 7: Practical PHP

$year  = 2018; // 2018
  if (checkdate($month, $day, $year)) echo "Date is valid";
  else echo "Date is invalid";
?>
File Handling
Powerful as it is, MySQL is not the only (or necessarily the best) way to store all data
on a web server. Sometimes it can be quicker and more convenient to directly access
files on the hard disk. Cases in which you might need to do this are modifying images
such as uploaded user avatars, or log files that you wish to process.
First, though, a note about file naming: if you are writing code that may be used on
various PHP installations, there is no way of knowing whether these systems are case-
sensitive.  For example, Windows and Mac OS X filenames are not case-sensitive, but
Linux and Unix ones are. Therefore, you should always assume that the system is
case-sensitive and stick to a convention such as all lowercase filenames.
Checking Whether a File Exists
To determine whether a file already exists, you can use the file_exists  function,
which returns either TRUE  or FALSE , and is used like this:
if (file_exists("testfile.txt")) echo "File exists";
Creating a File
At this point, testfile.txt  doesn’t exist, so let’s create it and write a few lines to it. Type
Example 7-4  and save it as testfile.php .
Example 7-4. Creating a simple text file
<?php // testfile.php
  $fh = fopen("testfile.txt", 'w') or die("Failed to create file");
  $text = <<<_END
Line 1
Line 2
Line 3
_END;
  fwrite($fh, $text) or die("Could not write to file");
  fclose($fh);
  echo "File 'testfile.txt' written successfully";
?>
File Handling | 147

When you run this in a browser, all being well, you will receive the message File
'testfile.txt' written successfully . If you receive an error message, your hard
disk may be full or, more likely, you may not have permission to create or write to the
file, in which case you should modify the attributes of the destination folder accord‐
ing to your operating system. Otherwise, the file testfile.txt  should now be residing in
the same folder in which you saved the testfile.php  program. Try opening the file in a
text or program editor—the contents will look like this:
Line 1
Line 2
Line 3
This simple example shows the sequence that all file handling takes:
1.Always start by opening the file. Y ou do this through a call to fopen .
2.Then you can call other functions; here we write  to the file ( fwrite ), but you can
also read from an existing file ( fread  or fgets ) and do other things.
3.Finish by closing the file ( fclose ). Although the program does this for you when
it ends, you should clean up by closing the file when you’re finished.
Every open file requires a file resource so that PHP can access and manage it. The
preceding example sets the variable $fh (which I chose to stand for file handle ) to the
value returned by the fopen  function. Thereafter, each file-handling function that
accesses the opened file, such as fwrite  or fclose , must be passed $fh as a parameter
to identify the file being accessed. Don’t worry about the content of the $fh variable;
it’s a number PHP uses to refer to internal information about the file—you just pass
the variable to other functions.
Upon failure, FALSE  will be returned by fopen . The previous example shows a simple
way to capture and respond to the failure: it calls the die function to end the program
and give the user an error message. A web application would never abort in this crude
way (you would create a web page with an error message instead), but this is fine for
our testing purposes.
Notice the second parameter to the fopen  call. It is simply the character w, which tells
the function to open the file for writing. The function creates the file if it doesn’t
already exist. Be careful when playing around with these functions: if the file already
exists, the w mode parameter causes the fopen  call to delete the old contents (even if
you don’t write anything new!).
There are several different mode parameters that can be used here, as detailed in
Table 7-5 .
148 | Chapter 7: Practical PHP

Table 7-5. The supported fopen modes
Mode Action Description
'r' Read from file start Open for reading only; place the file pointer at the beginning of the file.  Return FALSE
if the file doesn’t already exist.
'r+' Read from file start and
allow writingOpen for reading and writing; place the file pointer at the beginning of the file.  Return
FALSE  if the file doesn’t already exist.
'w' Write from file start and
truncate fileOpen for writing only; place the file pointer at the beginning of the file and truncate the
file to zero length. If the file doesn’t exist, attempt to create it.
'w+' Write from file start,
truncate file,  and allow
readingOpen for reading and writing; place the file pointer at the beginning of the file and
truncate the file to zero length. If the file doesn’t exist, attempt to create it.
'a' Append to file end Open for writing only; place the file pointer at the end of the file.  If the file doesn’t exist,
attempt to create it.
'a+' Append to file end and
allow readingOpen for reading and writing; place the file pointer at the end of the file.  If the file
doesn’t exist, attempt to create it.
Reading from Files
The easiest way to read from a text file is to grab a whole line through fgets  (think of
the final s as standing for string ), as in Example 7-5 .
Example 7-5. Reading a file with fgets
<?php
  $fh = fopen("testfile.txt", 'r') or
    die("File does not exist or you lack permission to open it");
  $line = fgets($fh);
  fclose($fh);
  echo $line;
?>
If you created the file as shown in Example 7-4 , you’ll get the first line:
Line 1
Or you can retrieve multiple lines or portions of lines through the fread  function, as
in Example 7-6 .
Example 7-6. Reading a file with fread
<?php
  $fh = fopen("testfile.txt", 'r') or
    die("File does not exist or you lack permission to open it");
  $text = fread($fh, 3);
  fclose($fh);
File Handling | 149

echo $text;
?>
I’ve requested three characters in the fread  call, so the program displays this:
Lin
The fread  function is commonly used with binary data. But if you use it on text data
that spans more than one line, remember to count newline characters.
Copying Files
Let’s try out the PHP copy  function to create a clone of testfile.txt . Type Example 7-7
and save it as copyfile.php , and then call up the program in your browser.
Example 7-7. Copying a file
<?php // copyfile.php
  copy('testfile.txt', 'testfile2.txt') or die("Could not copy file");
  echo "File successfully copied to 'testfile2.txt'";
?>
If you check your folder again, you’ll see that you now have the new file testfile2.txt  in
it. By the way, if you don’t want your programs to exit on a failed copy attempt, you
could try the alternate syntax in Example 7-8 .
Example 7-8. Alternate syntax for copying a file
<?php // copyfile2.php
  if (!copy('testfile.txt', 'testfile2.txt')) echo "Could not copy file";
  else echo "File successfully copied to 'testfile2.txt'";
?>
Moving a File
To move a file, rename it with the rename  function, as in Example 7-9 .
Example 7-9. Moving a file
<?php // movefile.php
  if (!rename('testfile2.txt', 'testfile2.new'))
    echo "Could not rename file";
  else echo "File successfully renamed to 'testfile2.new'";
?>
Y ou can use the rename  function on directories, too. To avoid any warning messages,
if the original file doesn’t exist, you can call the file_exists  function first to check.
150 | Chapter 7: Practical PHP

Deleting a File
Deleting a file is just a matter of using the unlink  function to  remove it from the file
system, as in Example 7-10 .
Example 7-10. Deleting a file
<?php // deletefile.php
  if (!unlink('testfile2.new')) echo "Could not delete file";
  else echo "File 'testfile2.new' successfully deleted";
?>
Whenever you access files on your hard disk directly, you must also
always ensure that it is impossible for your file system to be com‐
promised. For example, if you are deleting a file based on user
input, you must make absolutely certain it is a file that can be safely
deleted and that the user is allowed to delete it.
As with moving a file, a warning message will be displayed if the file doesn’t exist,
which you can avoid by using file_exists  to first check for its existence before call‐
ing unlink .
Updating Files
Often, you will want to add more data to a saved file, which you can do in many ways.
Y ou can use one of the append write modes (see Table 7-5 ), or you can simply open a
file for reading and writing with one of the other modes that supports writing, and
move the file pointer to the correct place within the file that you wish to write to or
read from.
The file pointer  is the position within a file at which the next file access will take place,
whether it’s a read or a write. It is not the same as the file handle  (as stored in the
variable $fh in Example 7-4 ), which contains details about the file being accessed.
Y ou can see this in action by typing Example 7-11  and saving it as update.php . Then
call it up in your browser.
Example 7-11. Updating a file
<?php // update.php
  $fh   = fopen("testfile.txt", 'r+') or die("Failed to open file");
  $text = fgets($fh);
  fseek($fh, 0, SEEK_END);
  fwrite($fh, "$text") or die("Could not write to file");
  fclose($fh);
File Handling | 151

echo "File 'testfile.txt' successfully updated";
?>
This program opens testfile.txt  for both reading and writing by setting the mode with
'r+' , which puts the file pointer right at the start. It then uses the fgets  function  to
read in a single line from the file (up to the first line feed). After that, the fseek  func‐
tion is called to move the file pointer right to the file end, at which point the line of
text that was extracted from the start of the file (stored in $text ) is then appended to
file’s end and the file is closed. The resulting file now looks like this:
Line 1
Line 2
Line 3
Line 1
The first line has successfully been copied and then appended to the file’s end.
As used here, in addition to the $fh file handle, the fseek  function was passed two
other  parameters, 0 and SEEK_END . SEEK_END  tells the function to move the file
pointer to the end of the file, and 0 tells it how many positions it should then be
moved backward from that point. In the case of Example 7-11 , a value of 0 is used,
because the pointer is required to remain at the file’s end.
There are two other seek options available to the fseek  function: SEEK_SET  and
SEEK_CUR . The SEEK_SET  option tells the function to set the file pointer to the exact
position given by the preceding parameter. Thus, the following example moves the
file pointer to position 18:
fseek($fh, 18, SEEK_SET);
SEEK_CUR  sets the file pointer to the current position plus the value of the given offset.
Therefore, if the file pointer is currently at position 18, the following call will move it
to position 23:
fseek($fh, 5, SEEK_CUR);
Although this is not recommended unless you have very specific reasons for it, it is
even possible to use text files such as this (but with fixed line lengths) as simple flat
file databases. Y our program can then use fseek  to move back and forth within such
a file to retrieve, update, and add new records. Y ou can also delete records by over‐
writing them with zero characters, and so on.
Locking Files for Multiple Accesses
Web programs are often called by many users at the same time.  If more than one per‐
son tries to write to a file simultaneously, it can become corrupted. And if one person
writes to it while another is reading from it, the file is all right, but the person reading
it can get odd results. To handle simultaneous users, you must use the file-locking
152 | Chapter 7: Practical PHP

flock  function. This function queues up all other requests to access a file until your
program releases the lock. So, whenever your programs use write access on files that
may be accessed concurrently by multiple users, you should also add file locking to
them, as in Example 7-12 , which is an updated version of Example 7-11 .
Example 7-12. Updating a file with file locking
<?php
  $fh   = fopen("testfile.txt", 'r+') or die("Failed to open file");
  $text = fgets($fh);
  if (flock($fh, LOCK_EX))
  {
    fseek($fh, 0, SEEK_END);
    fwrite($fh, "$text") or die("Could not write to file");
    flock($fh, LOCK_UN);
  }
  fclose($fh);
  echo "File 'testfile.txt' successfully updated";
?>
There is a trick to file locking to preserve the best possible response time for your
website visitors: perform it directly before a change you make to a file, and then
unlock it immediately afterward. Having a file locked for any longer than this will
slow down your application unnecessarily. This is why the calls to flock  in
Example 7-12  are directly before and after the fwrite  call.
The first call to flock  sets an exclusive file lock on the file referred to by $fh using the
LOCK_EX  parameter:
flock($fh, LOCK_EX);
From this point onward, no other processes can write to (or even read from) the file
until you release the lock by using the LOCK_UN  parameter, like this:
flock($fh, LOCK_UN);
As soon as the lock is released, other processes are again allowed access to the file.
This is one reason why you should re-seek to the point you wish to access in a file
each time you need to read or write data, because another process could have
changed the file since the last access.
However, did you notice that the call to request an exclusive lock is nested as part of
an if statement? This is because flock  is not supported on all systems; thus, it is wise
to check whether you successfully secured a lock, just in case one could not be
obtained.
File Handling | 153

Something else you must consider is that flock  is what is known as an advisory  lock.
This means that it locks out only other processes that call the function. If you have
any code that goes right in and modifies files without implementing flock  file lock‐
ing, it will always override the locking and could wreak havoc on your files.
By the way, implementing file locking and then accidentally leaving it out in one sec‐
tion of code can lead to an extremely hard-to-locate bug.
flock  will not work on NFS and many other networked file sys‐
tems. Also, when using a multithreaded server like ISAPI, you may
not be able to rely on flock  to protect files against other PHP
scripts running in parallel threads of the same server instance.
Additionally, flock  is not supported on any system using the old
FAT file system, such as older versions of Windows.
Reading an Entire File
A handy function for reading in an entire file without having to use file handles is
file_get_contents . It’s very easy to use, as you can see in Example 7-13 .
Example 7-13. Using file_get_contents
<?php
  echo "<pre>";  // Enables display of line feeds
  echo file_get_contents("testfile.txt");
  echo "</pre>"; // Terminates pre tag
?>
But the function is actually a lot more useful than that, because you can also use it to
fetch a file from a server across the Internet, as in Example 7-14 , which requests the
HTML from the O’Reilly home page, and then displays it as if the user had surfed to
the page itself. The result will be similar to Figure 7-1 .
Example 7-14. Grabbing the O’Reilly home page
<?php
  echo file_get_contents("http://oreilly.com");
?>
154 | Chapter 7: Practical PHP

Figure 7-1. The O’Reilly home page grabbed with file_get_contents
Uploading Files
Uploading files to a web server is a subject  that seems daunting to many people, but it
actually couldn’t be much easier. All you need to do to upload a file from a form is
choose a special type of encoding called multipart/form-data , and your browser will
handle the rest. To see how this works, type the program in Example 7-15  and save it
as upload.php . When you run it, you’ll see a form in your browser that lets you upload
a file of your choice.
Example 7-15. Image uploader upload.php
<?php // upload.php
  echo <<<_END
    <html><head><title>PHP Form Upload</title></head><body>
    <form method='post' action='upload.php' enctype='multipart/form-data'>
    Select File: <input type='file' name='filename' size='10'>
    <input type='submit' value='Upload'>
    </form>
_END;
  if ($_FILES)
  {
    $name = $_FILES['filename']['name'];
    move_uploaded_file($_FILES['filename']['tmp_name'], $name);
    echo "Uploaded image '$name'<br><img src='$name'>";
  }
File Handling | 155

echo "</body></html>";
?>
Let’s examine this program a section at a time. The first line of the multiline echo
statement starts an HTML document, displays the title, and then starts the docu‐
ment’s body.
Next we come to the form that selects the Post method of form submission, sets the
target for posted data to the program upload.php  (the program itself), and tells the
web browser that the data posted should be encoded via the content MIME type of
multipart/form-data .
With the form set up, the next lines display the prompt Select File: and then request
two inputs. The first request is for a file; it uses an input type of file , a name of
filename , and an input field with a width of 10 characters. The second requested
input is just a Submit button that is given the label Upload (which replaces the default
button text of Submit Query). And then the form is closed.
This short program shows a common technique in web programming in which a sin‐
gle program is called twice: once when the user first visits a page, and again when the
user presses the Submit button.
The PHP code to receive the uploaded data is fairly simple, because all uploaded files
are placed into the associative system  array $_FILES . Therefore, a quick check to see
whether $_FILES  contains anything is sufficient to determine whether the user has
uploaded a file. This is done with the statement if ($_FILES) .
The first time the user visits the page, before uploading a file, $_FILES  is empty, so the
program skips this block of code. When the user uploads a file, the program runs
again and discovers an element in the $_FILES  array.
Once the program realizes that a file was uploaded, the actual name, as read from the
uploading computer, is retrieved and placed into the variable $name . Now all that’s
necessary is to move the file from the temporary location in which PHP stored the
uploaded file to a more permanent one. We do this using the move_uploaded_file
function,  passing it the original name of the file, with which it is saved to the current
directory.
Finally, the uploaded image is displayed within an IMG tag, and the result should look
like Figure 7-2 .
If you run this program and receive warning messages such as Per
mission denied  for the move_uploaded_file  function call, then
you may not have the correct permissions set for the folder in
which the program is running.
156 | Chapter 7: Practical PHP

Figure 7-2. Uploading an image as form data
Using $_FILES
Five things are stored in the $_FILES  array  when a file is uploaded, as shown in
Table 7-6  (where file  is the file upload field name supplied by the submitting form).
Table 7-6. The contents of the $_FILES array
Array element Contents
$_FILES[' file']['name'] The name of the uploaded file (e.g., smiley.jpg )
$_FILES[' file']['type'] The content type of the file (e.g., image/jpeg )
$_FILES[' file']['size'] The file’s  size in bytes
$_FILES[' file']['tmp_name '] The name of the temporary file stored on the server
$_FILES[' file']['error'] The error code resulting from the file upload
Content types used to be known as MIME (Multipurpose Internet Mail Extension)
types, but because their use later expanded to the whole Internet, now they are often
called Internet media types . Table 7-7  shows some of the more frequently used types
that turn up in $_FILES[' file']['type'].
Table 7-7. Some common Internet media content types
application/pdf image/gif multipart/form-data text/xml
application/zip image/jpeg text/css video/mpeg
audio/mpeg image/png text/html video/mp4
audio/x-wav image/tiff text/plain video/quicktime
File Handling | 157

Validation
I hope it now goes without saying (although I’ll do so anyway) that form data valida‐
tion is of the utmost importance, due to the possibility of users attempting to hack
into your server.
In addition to maliciously formed input data, some of the things you also have to
check are whether a file was actually received and, if so, whether the right type of data
was sent.
Taking all these things into account, Example 7-16 , upload2.php , is a more secure
rewrite of upload.php .
Example 7-16. A more secure version of upload.php
<?php // upload2.php
  echo <<<_END
    <html><head><title>PHP Form Upload</title></head><body>
    <form method='post' action='upload2.php' enctype='multipart/form-data'>
    Select a JPG, GIF, PNG or TIF File:
    <input type='file' name='filename' size='10'>
    <input type='submit' value='Upload'></form>
_END;
  if ($_FILES)
  {
    $name = $_FILES['filename']['name'];
    switch($_FILES['filename']['type'])
    {
      case 'image/jpeg': $ext = 'jpg'; break;
      case 'image/gif':  $ext = 'gif'; break;
      case 'image/png':  $ext = 'png'; break;
      case 'image/tiff': $ext = 'tif'; break;
      default:           $ext = '';    break;
    }
    if ($ext)
    {
      $n = "image.$ext";
      move_uploaded_file($_FILES['filename']['tmp_name'], $n);
      echo "Uploaded image '$name' as '$n':<br>";
      echo "<img src='$n'>";
    }
    else echo "'$name' is not an accepted image file";
  }
  else echo "No image has been uploaded";
  echo "</body></html>";
?>
158 | Chapter 7: Practical PHP

The non-HTML section of code has been expanded from the half-dozen lines of
Example 7-15  to more than 20 lines, starting at if ($_FILES) .
As with the previous version, this if line checks whether any data was actually pos‐
ted, but there is now a matching else  near the bottom of the program that echoes a
message to screen when nothing has been uploaded.
Within the if statement, the variable $name  is assigned the value of the filename as
retrieved from the uploading computer (just as before), but this time we won’t rely on
the user having sent us valid data. Instead a switch  statement is used to check the
uploaded content type against the four types of image this program supports. If a
match is made, the variable $ext  is set to the three-letter file extension for that type.
Should no match be found, the file uploaded was not of an accepted type and the
variable $ext  is set to the empty string "".
The next section of code then checks the variable $ext  to see whether it contains a
string and, if so, creates a new filename called $n with the base name image  and the
extension stored in $ext . This means that the program is in full control over the
name of the file to be created, as it can be only one of image.jpg , image.gif , image.png ,
or image.tif .
Safe in the knowledge that the program has not been compromised, the rest of the
PHP code is much the same as in the previous version. It moves the uploaded tempo‐
rary image to its new location and then displays it, while also displaying the old and
new image names.
Don’t worry about having to delete the temporary file that PHP
creates during the upload process, because if the file has not been
moved or renamed, it will be automatically removed when the pro‐
gram exits.
After the if statement, there is a matching else , which is executed only if an unsup‐
ported image type was uploaded, in which case it displays an appropriate error mes‐
sage.
When you write your own file-uploading routines, I strongly advise you to use a sim‐
ilar approach and have pre-chosen names and locations for uploaded files. That way,
no attempts to add pathnames and other malicious data to the variables you use can
get through. If this means that more than one user could end up having a file uploa‐
ded with the same name, you could prefix such files with their user’s name, or save
them to individually created folders for each user.
File Handling | 159

But if you must use a supplied filename, you should sanitize it by allowing only
alphanumeric characters and the period, which you can do with the following com‐
mand, using a regular expression (see Chapter 17 ) to perform a search and replace on
$name :
$name = preg_replace("/[^A-Za-z0-9.]/", "", $name);
This leaves only the characters A–Z, a–z, 0–9, and periods in the string $name , and
strips out everything else.
Even better, to ensure that your program will work on all systems, regardless of
whether they are case-sensitive or case-insensitive, you should probably use the fol‐
lowing command instead, which changes all uppercase characters to lowercase at the
same time:
$name = strtolower(ereg_replace("[^A-Za-z0-9.]", "", $name));
Sometimes you may encounter the media type of image/pjpeg ,
which indicates a progressive JPEG, but you can safely add this to
your code as an alias of image/jpeg , like this:
case 'image/pjpeg':
case 'image/jpeg': $ext = 'jpg'; break;
System Calls
Sometimes PHP will not have  the function you need to perform a certain action, but
the operating system it is running on may. In such cases, you can use the exec  system
call to do the job.
For example, to quickly view the contents of the current directory, you can use a pro‐
gram such as Example 7-17 . If you are on a Windows system, it will run as is using
the Windows dir command. On Linux, Unix, or Mac OS X, comment out or remove
the first line and uncomment the second to use the ls system command. Y ou may
wish to type this program, save it as exec.php , and call it up in your browser.
Example 7-17. Executing a system command
<?php // exec.php
  $cmd = "dir";   // Windows
  // $cmd = "ls"; // Linux, Unix & Mac
  exec(escapeshellcmd($cmd), $output, $status);
  if ($status) echo "Exec command failed";
  else
  {
    echo "<pre>";
160 | Chapter 7: Practical PHP

foreach($output as $line) echo htmlspecialchars("$line\n");
    echo "</pre>";
?>
The htmlspecialchars  function  is called to turn any special characters returned by
the system into ones that HTML can understand and properly display, neatening the
output. Depending on the system you are using, the result of running this program
will look something like this (from a Windows dir command):
Volume in drive C is Hard Disk
 Volume Serial Number is DC63-0E29
 Directory of C:\xampp\htdocs
09/07/2014  10:06    <DIR>          .
09/07/2014  10:06    <DIR>          ..
08/07/2014  09:16    <DIR>          forbidden
08/07/2014  09:16    <DIR>          img
30/03/2013  12:28               202 index.html
30/03/2013  12:28               267 index.php
08/07/2014  09:16    <DIR>          restricted
08/07/2014  09:56               110 test.html
09/07/2014  08:46    <DIR>          xampp
              3 File(s)             579 bytes
               6 Dir(s)  1,793,430,867,968 bytes free
exec  takes three arguments:
•The command itself (in the previous case, $cmd )
•An array in which the system will put the output from the command (in the pre‐
vious case, $output )
•A variable to contain the returned status of the call (which, in the previous case,
is $status )
If you wish, you can omit the $output  and $status  parameters, but you will not
know the output created by the call or even whether it completed successfully.
Y ou should also note the use of the escapeshellcmd  function. It is a good habit to
always use this when issuing an exec  call, because it sanitizes the command string,
preventing the execution of arbitrary commands, should you supply user input to the
call.
System Calls | 161

The system calling functions are typically disabled on shared web
hosts, as they pose a security risk. Y ou should always try to solve
your problems within PHP if you can, and go to the system directly
only if it is really necessary. Also, going to the system is relatively
slow, and you need to code two implementations if your applica‐
tion is expected to run on both Windows and Linux/Unix systems.
XHTML or HTML5?
Because XHTML documents need to be well formed, you can parse them using stan‐
dard XML parsers—unlike HTML, which requires a lenient HTML-specific parser.
For this reason, XHTML never really caught on, and when the time came to devise a
new standard, the World Wide Web Consortium chose to support HTML5 rather
than the newer XHTML2 standard.
HTML5 has some of the features of both HTML4 and XHTML, but is much simpler
to use and less strict to validate and, happily, there is now just a single document type
you need to place at the head of an HTML5 document (instead of the variety of strict,
transitional, and frameset types previously required), namely:
<!DOCTYPE html>
Just the simple word html  is sufficient to tell the browser that your web page is
designed for HTML5 and, because all the latest versions of the most popular browsers
have been supporting most of the HTML5 specification since 2011 or so, this docu‐
ment type is generally the only one you need, unless you choose to cater to older
browsers.
For all intents and purposes, when writing HTML documents, web developers can
safely ignore the old XHTML document types and syntax (such as using <br />
instead of the simpler <br>  tag). But if you find yourself having to cater to a very old
browser or an unusual application that relies on XHTML, then you can get more
information on how to do that at http://xhtml.com .
Questions
1.Which printf  conversion specifier would you use to display a floating-point
number?
2.What printf  statement could be used to take the input string "Happy Birthday"
and output the string "**Happy" ?
3.To send the output from printf  to a variable instead of to a browser, what alter‐
native function would you use?
4.How would you create a Unix timestamp for 7:11 a.m. on May 2, 2016?
162 | Chapter 7: Practical PHP

5.Which file access mode would you use with fopen  to open a file in write and read
mode, with the file truncated and the file pointer at the start?
6.What is the PHP command for deleting the file file.txt ?
7.Which PHP function is used to read in an entire file in one go, even from across
the Web?
8.Which PHP superglobal variable holds the details on uploaded files?
9.Which PHP function enables the running of system commands?
10.Which of the following tag styles is preferred in HTML5: <hr>  or <hr /> ?
See Chapter 7 Answers  in Appendix A  for the answers to these questions.
Questions | 163



CHAPTER 8
Introduction to MySQL
With well over 10 million installations, MySQL is probably the most popular database
management system for web servers. Developed in the mid-1990s, it’s now a mature
technology that powers many of today’s most-visited Internet destinations.
One reason for its success must be the fact that, like PHP , it’s free to use. But it’s also
extremely powerful and exceptionally fast—it can run on even the most basic of
hardware, and it hardly puts a dent in system resources.
MySQL is also highly scalable, which means that it can grow with your website (for
the latest benchmarks, see http://mysql.com/why-mysql/benchmarks ).
MySQL Basics
A database  is a structured collection of records or data stored in a computer system
and organized in such a way that it can be quickly searched and information can be
rapidly retrieved.
The SQL in MySQL stands for Structured Query Language . This  language is loosely
based on English and also used in other databases such as Oracle and Microsoft SQL
Server. It is designed to allow simple requests from a database via commands such as
SELECT title FROM publications WHERE author = 'Charles Dickens';
A MySQL database contains one or more tables , each  of which contains records  or
rows . Within these rows are various columns  or fields  that contain the data itself.
Table 8-1  shows the contents of an example database of five publications detailing the
author, title, type, and year of publication.
165

Table 8-1. Example of a simple database
Author Title Type Year
Mark Twain The Adventures of Tom Sawyer Fiction 1876
Jane Austen Pride and Prejudice Fiction 1811
Charles Darwin The Origin of Species Nonfiction 1856
Charles Dickens The Old Curiosity Shop Fiction 1841
William Shakespeare Romeo and Juliet Play 1594
Each row in the table is the same as a row in a MySQL table, and each element within
a row is the same as a MySQL field.
To uniquely identify this database, I’ll refer to it as the publications  database in the
examples that follow. And, as you will have observed, all these publications are con‐
sidered to be classics of literature, so I’ll call the table within the database that holds
the details classics .
Summary of Database Terms
The main terms you need to acquaint yourself with for now are as follows:
Database
The overall container for a collection of MySQL data
Table
A subcontainer within a database that stores the actual data
Row
A single record within a table, which may contain several fields
Column
The name of a field within a row
I should note that I’m not trying to reproduce the precise terminology used in aca‐
demic literature about relational databases, but just to provide simple, everyday terms
to help you quickly grasp basic concepts and get started with a database.
Accessing MySQL via the Command Line
There are three main  ways in which you can interact with MySQL: using a command
line, via a web interface such as phpMyAdmin, and through a programming language
like PHP . We’ll start doing the third of these in Chapter 10 , but for now, let’s look at
the first two.
166 | Chapter 8: Introduction to MySQL

Starting the Command-Line Interface
The following sections describe relevant instructions for Windows, OS X, and Linux.
Windows users
If you installed XAMPP (as explained in Chapter 2 ), you will be able to access the
MySQL executable from the following directory:
C:\xampp\mysql\bin
If you installed XAMPP in a place other than \xampp , you will
need to use that directory instead.
By default, the initial MySQL user will be root and will not have had a password set.
Seeing as this is a development server that only you should be able to access, we won’t
worry about creating one yet.
So, to enter MySQL ’s command-line interface, select Start→Run, enter CMD into the
Run box, and press Return. This will call up a Windows command prompt. From
there, enter one the following (making any appropriate changes as just discussed):
C:\xampp\mysql\bin\mysql -u root
This command tells MySQL to log you in as user root, without a password. Y ou will
now be logged into MySQL and can start entering commands. So, to be sure every‐
thing is working as it should be, enter the following; the results should be similar to
Figure 8-1 :
SHOW databases;
Accessing MySQL via the Command Line | 167

Figure 8-1. Accessing MySQL from a Windows command prompt
Y ou are now ready to move on to the next section, “Using the Command-Line Inter‐
face” on page 171 .
OS X users
To proceed with this chapter, you should have installed XAMPP as detailed in Chap‐
ter 2 . Y ou should also have the web server running and the MySQL server started.
To enter the MySQL command-line interface, start the Terminal program (which
should be available in Finder→Utilities). Then call up the MySQL program, which
will have been installed in the directory /Applications/xampp/bin .
By default, the initial MySQL user is root, and it will have a password of root too. So,
to start the program, type the following:
/Applications/xampp/bin/mysql -u root
This command tells MySQL to log you in as user root and not to request your pass‐
word. To verify that all is well, type the following; Figure 8-2  should be the result:
SHOW databases;
168 | Chapter 8: Introduction to MySQL

Figure 8-2. Accessing MySQL from the OS X Terminal program
If you receive an error such as “Can’t connect to local MySQL server through socket, ”
you will need to first start the MySQL server as described in Chapter 2 .
Y ou should now be ready to move on to the next section, “Using the Command-Line
Interface” on page 171 .
Linux users
On a system running a Unix-like operating system such as Linux, you will almost cer‐
tainly already have PHP and MySQL installed and running, and you will be able to
enter the examples in the next section (if not, you can follow the procedure outlined
in Chapter 2  to install XAMPP). First you should type the following to log into your
MySQL system:
mysql -u root -p
This tells MySQL to log you in as the user root and to request your password. If you
have a password, enter it; otherwise, just press Return.
Once you are logged in, type the following to test the program; you should see some‐
thing like Figure 8-3  in response:
SHOW databases;
Accessing MySQL via the Command Line | 169

Figure 8-3. Accessing MySQL using Linux
If this procedure fails at any point, please refer to Chapter 2  to ensure that you have
MySQL properly installed. Otherwise, you should now be ready to move on to the
next section, “Using the Command-Line Interface” on page 171 .
MySQL on a remote server
If you are accessing MySQL on a remote server, you should Telnet (or preferably, for
security, use SSH) into the remote machine, which will probably be a Linux/FreeBSD/
Unix type of box. Once in there, you might find that things are a little different,
depending on how the system administrator has set the server up, especially if it’s a
shared hosting server. Therefore, you need to ensure that you have been given access
to MySQL and that you have your username and password. Armed with these, you
can then type the following, where username  is the name supplied:
mysql -u username  -p
Enter your password when prompted. Y ou can then try the following command,
which should result in something like Figure 8-3 :
SHOW databases;
There may be other databases already created, and the test database may not be there.
Bear in mind also that system administrators have ultimate control over everything
and that you can encounter some unexpected setups. For example, you may find that
you are required to preface all database names that you create with a unique identify‐
ing string to ensure that you do not conflict with databases created by other users.
Therefore, if you have any problems, talk with your system administrator, who will
get you sorted out. Just let the sysadmin know that you need a username and
170 | Chapter 8: Introduction to MySQL

password.  Y ou should also ask for the ability to create new databases or, at a mini‐
mum, to have at least one database created for you ready to use. Y ou can then create
all the tables you require within that  database.
Using the Command-Line Interface
From here on out, it makes no difference whether you are using Windows, Mac OS
X, or Linux to access MySQL directly, as all the commands used (and errors you may
receive) are identical.
The semicolon
Let’s start with the basics. Did you notice the semicolon ( ;) at the end of the SHOW
databases;  command that you typed? The semicolon is used by MySQL to separate
or end commands. If you forget to enter it, MySQL will issue a prompt and wait for
you to do so. The required semicolon was made part of the syntax to let you enter
multiple-line commands, which can be convenient because some commands get quite
long. It also allows you to issue more than one command at a time by placing a semi‐
colon after each one. The interpreter gets them all in a batch when you press the
Enter (or Return) key and executes them in order.
It’s very common to receive a MySQL prompt instead of the results
of your command; it means that you forgot the final semicolon.
Just enter the semicolon and press the Enter key, and you’ll get
what you want.
There are six different prompts that MySQL may present you with (see Table 8-2 ), so
you will always know where you are during a multiline input.
Table 8-2. MySQL ’s six command prompts
MySQL prompt Meaning
mysql> Ready and waiting for a command
    -> Waiting for the next line of a command
    '> Waiting for the next line of a string started with a single quote
    "> Waiting for the next line of a string started with a double quote
    `> Waiting for the next line of a string started with a back tick
   /*> Waiting for the next line of a comment started with /*
Accessing MySQL via the Command Line | 171

Canceling a command
If you are partway through entering a  command and decide you don’t wish to execute
it after all, whatever you do, don’t press Control-C ! That will close the program.
Instead, you can enter \c and press Return. Example 8-1  shows how to use it.
Example 8-1. Canceling a line of input
meaningless gibberish to mysql \c
When you type that line, MySQL will ignore everything you typed and issue a new
prompt. Without the \c, it would have displayed an error message. Be careful,
though: if you have opened a string or comment, close it first before using the \c or
MySQL will think the \c is just part of the string. Example 8-2  shows the right way to
do this.
Example 8-2. Canceling input from inside a string
this is "meaningless gibberish to mysql" \c
Also note that using \c after a semicolon will not work, as it is then a new statement.
MySQL Commands
Y ou’ve already seen the SHOW  command, which lists tables, databases, and many other
items. The commands you’ll use most often are listed in Table 8-3 .
Table 8-3. Common MySQL commands
Command Action
ALTER Alter a database or table
BACKUP Back up a table
\c Cancel input
CREATE Create a database
DELETE Delete a row from a table
DESCRIBE Describe a table’s columns
DROP Delete a database or table
EXIT (CTRL-C) Exit
GRANT Change user privileges
HELP (\h, \?) Display help
INSERT Insert data
LOCK Lock table(s)
QUIT (\q) Same as EXIT
172 | Chapter 8: Introduction to MySQL

Command Action
RENAME Rename a table
SHOW List details about an object
SOURCE Execute a file
STATUS (\s) Display the current status
TRUNCATE Empty a table
UNLOCK Unlock table(s)
UPDATE Update an existing record
USE Use a database
I’ll cover most of these as we proceed, but first, you need to remember a couple of
points about MySQL commands:
•SQL commands and keywords are case-insensitive. CREATE , create , and CrEaTe
all mean the same thing. However, for the sake of clarity, the recommended style
is to use uppercase.
•Table names are case-sensitive on Linux and OS X, but case-insensitive on Win‐
dows. So for portability purposes, you should always choose a case and stick to it.
The recommended style is to use lowercase for tables.
Creating a database
If you are  working on a remote server  and have only a single user account and access
to a single database that was created for you, move on to the section “Creating a table”
on page 175. Otherwise, get the ball rolling by issuing the following command to cre‐
ate a new database called publications :
CREATE DATABASE publications;
A successful command will return a message that doesn’t mean much yet— Query OK,
1 row affected (0.00 sec) —but will make sense soon. Now that you’ve created
the database, you want to work with it, so issue the following:
USE publications;
Y ou should now see the message Database changed  and will then be set to proceed
with the following examples.
Creating users
Now that you’ve seen how easy it is to  use MySQL, and created your first database, it’s
time to look at how you create users, as you probably won’t want to grant your PHP
scripts root access to MySQL; it could cause a real headache should you get hacked.
Accessing MySQL via the Command Line | 173

To create a user, issue the GRANT  command, which takes the following form (don’t
type this in; it’s not an actual working command):
GRANT PRIVILEGES ON database.object TO 'username'@'hostname'
  IDENTIFIED BY 'password';
This should be pretty straightforward, with the possible exception of the data
base.object  part, which refers to the database itself and the objects it contains, such
as tables (see Table 8-4 ).
Table 8-4. Example parameters for the GRANT command
Arguments Meaning
*.* All databases and all their objects
database .* Only the database called database  and all its objects
database .object Only the database called database  and its object called object
So let’s create a user who can access just the new publications  database and all its
objects, by entering the following (replacing the username jim and also the password
mypasswd  with ones of your choosing):
GRANT ALL ON publications.* TO 'jim'@'localhost'
  IDENTIFIED BY 'mypasswd';
What this does is allow the user jim@localhost  full access to the publications  database
using the password mypasswd . Y ou can test whether this step has worked by entering
quit  to exit and then rerunning MySQL the way you did before, but instead of enter‐
ing -u root -p , type -u jim -p , or whatever username you created. See Table 8-5  for
the correct command for your operating system. Modify it as necessary if the mysql
client program is installed in a different directory on your system.
Table 8-5. Starting MySQL and logging in as jim@localhost
OS Example command
Windows C:\xampp\mysql\bin\mysql -u jim -p
Mac OS X /Applications/xampp/bin/mysql -u jim -p
Linux mysql -u jim –p
All you have to do now is enter your password when prompted and you will be log‐
ged in. If you prefer, you can place your password immediately following the -p
(without any spaces) to avoid having to enter it when prompted. But this is consid‐
ered a poor practice, because if other people are logged into your system, there may
be ways for them to look at the command you entered and find out your password.
174 | Chapter 8: Introduction to MySQL

Y ou can grant only privileges that you already have, and you must
also have the privilege to issue GRANT  commands. There are a whole
range of privileges you can choose to grant if you are not granting
all privileges. For further details, please visit the following site,
which also covers the REVOKE  command,  which can remove privi‐
leges once granted: http://tinyurl.com/mysqlgrant . Also be aware
that if you create a new user but do not specify an IDENTIFIED BY
clause, the user will have no password, a situation that is very inse‐
cure and should be avoided.
Creating a table
At this point, you should now be logged into MySQL with ALL privileges granted for
the database publications  (or a database that was created for you), so you’re ready to
create your first table. Make sure the correct database is in use by typing the following
(replacing publications  with the name of your database if it is different):
USE publications;
Now enter the commands in Example 8-3  one line at a time.
Example 8-3. Creating a table called classics
CREATE TABLE classics (
 author VARCHAR(128),
 title VARCHAR(128),
 type VARCHAR(16),
 year CHAR(4)) ENGINE MyISAM;
Y ou could also issue this command on a single line, like this:
CREATE TABLE classics (author VARCHAR(128), title
VARCHAR(128), type VARCHAR(16), year CHAR(4)) ENGINE
MyISAM;
but MySQL commands can be long and complicated, so I recom‐
mend a single line at a time until you are comfortable with longer
ones.
MySQL should then issue the response Query OK, 0 rows affected , along with how
long it took to execute the command. If you see an error message instead, check your
syntax carefully. Every parenthesis and comma counts, and typing errors are easy to
make. In case you are wondering, the ENGINE MyISAM  tells MySQL the type of data‐
base engine to use for this table.
To check whether your new table has been created, type the following:
DESCRIBE classics;
Accessing MySQL via the Command Line | 175

All being well, you will see the sequence of commands and responses shown in
Example 8-4 , where you should particularly note the table format displayed.
Example 8-4. A MySQL session: creating and checking a new table
mysql> USE publications;
Database changed
mysql> CREATE TABLE classics (
    ->  author VARCHAR(128),
    ->  title VARCHAR(128),
    ->  type VARCHAR(16),
    ->  year CHAR(4)) ENGINE MyISAM;
Query OK, 0 rows affected (0.03 sec)
mysql> DESCRIBE classics;
+--------+--------------+------+-----+---------+-------+
| Field  | Type         | Null | Key | Default | Extra |
+--------+--------------+------+-----+---------+-------+
| author | varchar(128) | YES  |     | NULL    |       |
| title  | varchar(128) | YES  |     | NULL    |       |
| type   | varchar(16)  | YES  |     | NULL    |       |
| year   | char(4)      | YES  |     | NULL    |       |
+--------+--------------+------+-----+---------+-------+
4 rows in set (0.00 sec)
The DESCRIBE  command is an invaluable debugging aid when you need to ensure that
you have correctly created a MySQL table. Y ou can also use it to remind yourself
about a table’s field or column names and the types of data in each one. Let’s look at
each of the headings in detail:
Field
The name of each field or column within a table.
Type
The type of data being stored in the field.
Null
Whether a field is allowed to contain a value of NULL .
Key
MySQL supports keys or indexes , which are quick ways to look up and search for
data. The Key heading shows what type of key (if any) has been applied.
Default
The default value that will be assigned to the field if no value is specified when a new
row is created.
Extra
Additional information, such as whether a field is set to auto-increment.
176 | Chapter 8: Introduction to MySQL

Data Types
In Example 8-3 , you may have noticed  that three of the table’s fields were given the
data type of VARCHAR , and one was given the type CHAR . The term VARCHAR  stands for
VARiable length  CHARacter string , and the command takes a numeric value that tells
MySQL the maximum length allowed for a string stored in this field.
This data type is very useful, as MySQL can then plan the size of databases and per‐
form lookups and searches more easily. The downside is that if you ever attempt to
assign a string value longer than the length allowed, it will be truncated to the maxi‐
mum length declared in the table definition.
The year  field, however, has more-predictable values, so instead of VARCHAR  we use
the more efficient CHAR(4)  data type. The parameter of 4 allows for 4 bytes of data,
supporting all years from –999 to 9999; a byte comprises 8 bits and can have the val‐
ues 00000000 through 11111111, which are 0 to 255 in decimal.
Y ou could, of course, just store two-digit values for the year, but if your data is going
to still be needed in the following century, or may otherwise wrap around, it will have
to be sanitized first—much like the “millennium bug” that would have caused dates
beginning on January 1, 2000, to be treated as 1900 on many of the world’s biggest
computer installations.
I didn’t use the YEAR  data type in the classics  table because it sup‐
ports only the year 0000, and years 1901 through 2155. This is
because MySQL stores the year in a single byte for reasons of effi‐
ciency, but it also means that only 256 years are available, and the
publication years of the titles in the classics  table are well before
this.
Both CHAR  and VARCHAR  accept text strings and impose a limit on the size of the field.
The difference is that every string in a CHAR  field has the specified size. If you put in a
smaller string, it is padded with spaces. A VARCHAR  field does not pad the text; it lets
the size of the field vary to fit the text that is inserted. But VARCHAR  requires a small
amount of overhead to keep track of the size of each value. So CHAR  is slightly more
efficient if the sizes are similar in all records, whereas VARCHAR  is more efficient if
sizes can vary a lot and get large. In addition, the overhead causes access to VARCHAR
data to be slightly slower than to CHAR  data.
The CHAR data type
Table 8-6  lists the CHAR  data types. All these types offer a parameter that sets the maxi‐
mum (or exact) length of the string allowed in the field. As the table shows, each type
has a built-in maximum number of bytes it can occupy.
Accessing MySQL via the Command Line | 177

Table 8-6. MySQL ’s CHAR data types
Data type Bytes used Examples
CHAR(n) Exactly n (<= 255) CHAR(5)  “Hello” uses 5 bytes
CHAR(57)  “Goodbye” uses 57 bytes
VARCHAR( n) Up to n (<= 65535) VARCHAR(7)  “Morning” uses 7 bytes
VARCHAR(100)  “Night” uses 5 bytes
The BINARY data type
The BINARY  data type is  used for storing strings of full bytes that do not have an asso‐
ciated character set. For example, you might use the BINARY  data type to store a GIF
image (see Table 8-7 ).
Table 8-7. MySQL ’s BINARY data types
Data type Bytes used Examples
BINARY(n) or BYTE(n) Exactly n (<= 255) As CHAR  but contains binary data
VARBINARY( n) Up to n (<= 65535) As VARCHAR  but contains binary data
The TEXT and VARCHAR data types
The differences between TEXT  and VARCHAR  are small:
•Prior to version 5.0.3, MySQL would remove leading and trailing spaces from
VARCHAR  fields.
•TEXT  fields cannot have default values.
•MySQL indexes only the first n characters of a TEXT  column (you specify n when
you create the index).
What this means is that VARCHAR  is the better and faster data type to use if you need to
search the entire contents of a field. If you will never search more than a certain num‐
ber of leading characters in a field, you should probably use a TEXT  data type (see
Table 8-8 ).
Table 8-8. MySQL ’s TEXT data types
Data type Bytes used Attributes
TINYTEXT( n) Up to n (<= 255) Treated as a string with a character set
TEXT(n) Up to n (<= 65535) Treated as a string with a character set
MEDIUMTEXT( n) Up to n (<= 1.67e+7) Treated as a string with a character set
LONGTEXT( n) Up to n (<= 4.29e+9) Treated as a string with a character set
178 | Chapter 8: Introduction to MySQL

The BLOB data type
The term BLOB  stands for Binary  Large  OBject  and, therefore, as you would think, the
BLOB  data type is most useful for binary data in excess of 65,536 bytes in size. The
main other difference between the BLOB  and BINARY  data types is that BLOB s cannot
have default values (see Table 8-9 ).
Table 8-9. MySQL ’s BLOB data types
Data type Bytes used Attributes
TINYBLOB( n) Up to n (<= 255) Treated as binary data—no character set
BLOB(n) Up to n (<= 65535) Treated as binary data—no character set
MEDIUMBLOB( n) Up to n (<= 1.67e+7) Treated as binary data—no character set
LONGBLOB( n) Up to n (<= 4.29e+9) Treated as binary data—no character set
Numeric data types
MySQL supports various numeric data types from a single byte up to double-
precision floating-point numbers. Although the most memory that a numeric field
can use up is 8 bytes, you are well advised to choose the smallest data type that will
adequately handle the largest value you expect. Y our databases will be small and
quickly accessible.
Table 8-10  lists the numeric data types supported by MySQL and the ranges of values
they can contain. In case you are not acquainted with the terms, a signed number  is
one with a possible range from a minus value, through 0, to a positive one; and an
unsigned  one has a value ranging from 0 to a positive one. They can both hold the
same number of values; just picture a signed number as being shifted halfway to the
left so that half its values are negative and half are positive. Note that floating-point
values (of any precision) may only be signed.
Table 8-10. MySQL ’s numeric data types
Data type Bytes
usedMinimum value Maximum value
Signed Unsigned Signed Unsigned
TINYINT 1–128 0 127 255
SMALLINT 2–32768 0 32767 65535
MEDIUMINT 3–8.38e+6 0 8.38e+6 1.67e+7
INT  / INTEGER 4–2.15e+9 0 2.15e+9 4.29e+9
BIGINT 8–9.22e+18 0 9.22e+18 1.84e+19
FLOAT 4–3.40e+38 n/a 3.4e+38 n/a
DOUBLE  / REAL8–1.80e+308 n/a 1.80e+308 n/a
Accessing MySQL via the Command Line | 179

To specify whether a data type is signed or unsigned, use the UNSIGNED  qualifier.  The
following example creates a table called tablename  with a field in it called fieldname  of
the data type UNSIGNED INTEGER :
CREATE TABLE tablename (fieldname INT UNSIGNED);
When creating a numeric field, you can also pass an optional number as a parameter,
like this:
CREATE TABLE tablename (fieldname INT(4));
But you must remember that, unlike BINARY  and CHAR  data types, this parameter does
not indicate the number of bytes of storage to use. It may seem counterintuitive, but
what the number actually represents is the display width of the data in the field when
it is retrieved. It is commonly used with the ZEROFILL  qualifier, like this:
CREATE TABLE tablename (fieldname INT(4) ZEROFILL);
What this does is cause any numbers with a width of less than four characters to be
padded with one or more zeros, sufficient to make the display width of the field four
characters long. When a field is already of the specified width or greater, no padding
takes place.
DATE and TIME
The main remaining data types supported by MySQL relate to the date and time and
can be seen in Table 8-11 .
Table 8-11. MySQL ’s DATE and TIME data types
Data type Time/date format
DATETIME '0000-00-00 00:00:00'
DATE '0000-00-00'
TIMESTAMP '0000-00-00 00:00:00'
TIME '00:00:00'
YEAR 0000  (Only years 0000 and 1901–2155)
The DATETIME  and TIMESTAMP  data types display the same way. The main difference  is
that TIMESTAMP  has a very narrow range (from the years 1970 through 2037), whereas
DATETIME  will hold just about any date you’re likely to specify, unless you’re interested
in ancient history or science fiction.
TIMESTAMP  is useful, however, because you can let MySQL set the value for you. If you
don’t specify the value when adding a row, the current time is automatically inserted.
Y ou can also have MySQL update a TIMESTAMP  column each time you change a row.
180 | Chapter 8: Introduction to MySQL

The AUTO_INCREMENT data type
Sometimes you need to ensure that every row in your database is guaranteed to be
unique. Y ou could do this in your program by carefully checking the data you enter
and making sure that there is at least one value that differs in any two rows, but this
approach is error-prone and works only in certain circumstances. In the classics  table,
for instance, an author may appear multiple times. Likewise, the year of publication
will also be frequently duplicated, and so on. It would be hard to guarantee that you
have no duplicate rows.
The general solution is to use an extra column just for this purpose. In a while, we’ll
look at using a publication’s ISBN (International Standard Book Number), but first I’ d
like to introduce the AUTO_INCREMENT  data type.
As its name implies, a column given this data type will set the value of its contents to
that of the column entry in the previously inserted row, plus 1. Example 8-5  shows
how to add a new column called id to the table classics  with auto-incrementing.
Example 8-5. Adding the auto-incrementing column id
ALTER TABLE classics ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT KEY;
This is your introduction to the ALTER  command, which  is very similar to CREATE .
ALTER  operates on an existing table, and can add, change, or delete columns. Our
example adds a column named id with the following characteristics:
INT UNSIGNED
Makes the column take an integer large enough for you to store more than 4 billion
records in the table.
NOT NULL
Ensures that every column has a value. Many programmers use NULL  in a field to
indicate that it doesn’t have any value. But that would allow duplicates, which would
violate the whole reason for this column’s existence. So we disallow NULL  values.
AUTO_INCREMENT
Causes MySQL to set a unique value for this column in every row, as described ear‐
lier. We don’t really have control over the value that this column will take in each row,
but we don’t care: all we care about is that we are guaranteed a unique value.
KEY
An auto-increment column is useful as a key, because you will tend to search for rows
based on this column. This will be explained in the section “Indexes” on page 186 .
Each entry in the column id will now have a unique number, with the first starting at
1 and the others counting upward from there. And whenever a new row is inserted,
its id column will automatically be given the next number in sequence.
Accessing MySQL via the Command Line | 181

Rather than applying the column retroactively, you could have included it by issuing
the CREATE  command  in a slightly different format. In that case, the command in
Example 8-3  would be replaced with Example 8-6 . Check the final line in particular.
Example 8-6. Adding the auto-incrementing id column at table creation
CREATE TABLE classics (
 author VARCHAR(128),
 title VARCHAR(128),
 type VARCHAR(16),
 year CHAR(4),
 id INT UNSIGNED NOT NULL AUTO_INCREMENT KEY) ENGINE MyISAM;
If you wish to check whether the column has been added, use the following com‐
mand to view the table’s columns and data types:
DESCRIBE classics;
Now that we’ve finished with it, the id column is no longer needed, so if you created it
using Example 8-5 , you should now remove the column using the command in
Example 8-7 .
Example 8-7. Removing the id column
ALTER TABLE classics DROP id;
Adding data to a table
To add data to a table, use the INSERT  command. Let’s see this in action by populating
the table classics  with the data from Table 8-1 , using one form of the INSERT  com‐
mand repeatedly ( Example 8-8 ).
Example 8-8. Populating the classics table
INSERT INTO classics(author, title, type, year)
 VALUES('Mark Twain','The Adventures of Tom Sawyer','Fiction','1876');
INSERT INTO classics(author, title, type, year)
 VALUES('Jane Austen','Pride and Prejudice','Fiction','1811');
INSERT INTO classics(author, title, type, year)
 VALUES('Charles Darwin','The Origin of Species','Non-Fiction','1856');
INSERT INTO classics(author, title, type, year)
 VALUES('Charles Dickens','The Old Curiosity Shop','Fiction','1841');
INSERT INTO classics(author, title, type, year)
 VALUES('William Shakespeare','Romeo and Juliet','Play','1594');
After every second line, you should see a Query OK  message. Once all lines have been
entered, type the following command, which will display the table’s contents. The
result should look like Figure 8-4 :
182 | Chapter 8: Introduction to MySQL

SELECT * FROM classics;
Figure 8-4. Populating the classics table and viewing its contents
Don’t worry about the SELECT  command for now—we’ll come to it in the section
“Querying a MySQL Database”  on page 192. Suffice it to say that, as typed, it will dis‐
play all the data you just entered.
Let’s go back and look at how we used the INSERT  command. The first part, INSERT
INTO classics , tells MySQL where to insert the following data. Then, within paren‐
theses, the four column names are listed— author , title, type, and year—all separated
by commas. This tells MySQL that these are the fields into which the data is to be
inserted.
The second line of each INSERT  command  contains the keyword VALUES  followed by
four strings within parentheses, and separated by commas. This supplies MySQL with
the four values to be inserted into the four columns previously specified. (As always,
my choice of where to break the lines was arbitrary.)
Each item of data will be inserted into the corresponding column, in a one-to-one
correspondence. If you accidentally listed the columns in a different order from the
data, the data would go into the wrong columns. And the number of columns must
match the number of data items.
Renaming a table
Renaming a table, like  any other change to the structure or meta information about a
table, is achieved via the ALTER  command.  So, for example, to change the name of
table classics  to pre1900 , use the following command:
ALTER TABLE classics RENAME pre1900;
Accessing MySQL via the Command Line | 183

If you tried that command, you should revert the table name by entering the follow‐
ing, so that later examples in this chapter will work as printed:
ALTER TABLE pre1900 RENAME classics;
Changing the data type of a column
Changing a column’s data type also makes use of the ALTER  command, this time in
conjunction with the MODIFY  keyword.  So to change the data type of column year
from CHAR(4)  to SMALLINT  (which requires only 2 bytes of storage and so will save
disk space), enter the following:
ALTER TABLE classics MODIFY year SMALLINT;
When you do this, if the conversion of data type makes sense to MySQL, it will auto‐
matically change the data while keeping the meaning. In this case, it will change each
string to a comparable integer, and so on, as the string is recognizable as referring to
an integer.
Adding a new column
Let’s suppose that you have created a table and populated it with plenty of data, only
to discover you need an additional column. Not to worry. Here’s how to add the new
column pages , which will be used to store the number of pages in a publication:
ALTER TABLE classics ADD pages SMALLINT UNSIGNED;
This adds the new column with the name pages  using the UNSIGNED SMALLINT  data
type, sufficient to hold a value of up to 65,535—hopefully that’s more than enough for
any book ever published!
And, if you ask MySQL to describe the updated table by using the DESCRIBE  com‐
mand, as follows, you will see the change has been made (see Figure 8-5 ):
DESCRIBE classics;
184 | Chapter 8: Introduction to MySQL

Figure 8-5. Adding the new pages column and viewing the table
Renaming a column
Looking again at Figure 8-5 , you may decide that having a column named type can be
confusing, because that is the name used by MySQL to identify data types. Again, no
problem—let’s change its name to category , like this:
ALTER TABLE classics CHANGE type category VARCHAR(16);
Note the addition of VARCHAR(16)  on the end of this command. That’s because the
CHANGE  keyword requires the data type to be specified, even if you don’t intend to
change it, and VARCHAR(16)  was the data type specified when that column was ini‐
tially created as type.
Removing a column
Actually, upon reflection, you might decide that the page count column pages  isn’t
actually all that useful for this particular database, so here’s how to remove that col‐
umn by using the DROP  keyword:
ALTER TABLE classics DROP pages;
Remember that DROP  is irreversible and you should always use it
with caution, because you could inadvertently delete entire tables
(and even databases) with it if you are not careful!
Deleting a table
Deleting a table is very easy indeed. But, because I don’t want you to have to reenter
all the data for the classics  table, let’s quickly create a new table, verify its existence,
Accessing MySQL via the Command Line | 185

and then delete it by typing the commands in Example 8-9 . The result of these four
commands should look like Figure 8-6 .
Example 8-9. Creating, viewing, and deleting a table
CREATE TABLE disposable(trash INT);
DESCRIBE disposable;
DROP TABLE disposable;
SHOW tables;
Figure 8-6. Creating, viewing, and deleting a table
Indexes
As things stand, the table classics  works  and can be searched  without  problem by
MySQL—until it grows to more than a couple of hundred rows, that is. At that point,
database accesses will get slower and slower with every new row added, because
MySQL has to search through every row whenever a query is issued. This is like
searching through every book in a library whenever you need to look something up.
Of course, you don’t have to search libraries that way, because they have either a card
index system or, most likely, a database of their own. And the same goes for MySQL,
because at the expense of a slight overhead in memory and disk space, you can create
a “card index” for a table that MySQL will use to conduct lightning-fast searches.
Creating an Index
The way to achieve fast searches is to add an index , either when creating a table or at
any time afterward. But the decision is not so simple. For example, there are different
index types such as a  regular INDEX , PRIMARY KEY , and FULLTEXT . Also, you must
186 | Chapter 8: Introduction to MySQL

decide which columns require an index, a judgment that requires you to predict
whether you will be searching any of the data in that column. Indexes can also get
complicated, because you can combine multiple columns in one index. And even
when you’ve decided that, you still have the option of reducing index size by limiting
the amount of each column to be indexed.
If we imagine the searches that may be made on the classics  table, it becomes apparent
that all of the columns may need to be searched. However, if the pages  column created
in the section “ Adding a new column” on page 184 had not been deleted, it would
probably not have needed an index, as most people would be unlikely to search for
books by the number of pages they have. Anyway, go ahead and add an index to each 
of the columns, using the commands in Example 8-10 .
Example 8-10. Adding indexes to the classics table
ALTER TABLE classics ADD INDEX(author(20));
ALTER TABLE classics ADD INDEX(title(20));
ALTER TABLE classics ADD INDEX(category(4));
ALTER TABLE classics ADD INDEX(year);
DESCRIBE classics;
The first two commands create indexes on both the author  and title columns, limiting
each index to only the first 20 characters. For instance, when MySQL indexes the fol‐
lowing title:
The Adventures of Tom Sawyer
It will actually store in the index only the first 20 characters:
The Adventures of To
This is done to minimize the size of the index, and to optimize database access speed.
I chose 20 because it’s likely to be sufficient to ensure uniqueness for most strings in
these columns. If MySQL finds two indexes with the same contents, it will have to
waste time going to the table itself and checking the column that was indexed to find
out which rows really matched.
With the category  column, currently only the first character is required to identify a
string as unique (F for Fiction, N for Nonfiction, and P for Play), but I chose an index
of four characters to allow for future category types that may be unique only after
four characters. Y ou can also re-index this column later, when you have a more com‐
plete set of categories. And finally, I set no limit to the year column’s index, because
it’s an integer, not a string.
The results of issuing these commands (and a DESCRIBE  command to confirm that
they worked) can be seen in Figure 8-7 , which shows the key MUL for each column.
This key means that multiple occurrences of a value may occur within that column,
Indexes | 187

which is exactly what we want, as authors may appear many times, the same book
title could be used by multiple authors, and so on.
Figure 8-7. Adding indexes to the classics table
Using CREATE INDEX
An alternative to using ALTER TABLE  to add an index is to use the CREATE INDEX  com‐
mand. They are equivalent, except that CREATE INDEX  cannot be used for creating a
PRIMARY KEY  (see the section “Primary keys” on page 189). The format of this com‐
mand is shown in the second line of Example 8-11 .
Example 8-11. These  two commands are equivalent
ALTER TABLE classics ADD INDEX(author(20));
CREATE INDEX author ON classics (author(20));
Adding indexes when creating tables
Y ou don’t have to wait until after creating a table to add indexes. In fact, doing so can
be time-consuming, as adding an index to a large table can take a very long time.
Therefore, let’s look at a command that creates the table classics  with indexes already
in place.
Example 8-12  is a reworking of Example 8-3  in which the indexes are created at the
same time as the table. Note that to incorporate the modifications made in this chap‐
ter, this version uses the new column name category  instead of type and sets the data
type of year to SMALLINT  instead of CHAR(4) . If you want to try it out without first
deleting your current classics  table, change the word classics  in line 1 to something
else like classics1 , and then drop classics1  after you have finished with it.
188 | Chapter 8: Introduction to MySQL

Example 8-12. Creating the table classics with indexes
CREATE TABLE classics (
 author VARCHAR(128),
 title VARCHAR(128),
 category VARCHAR(16),
 year SMALLINT,
 INDEX(author(20)),
 INDEX(title(20)),
 INDEX(category(4)),
 INDEX(year)) ENGINE MyISAM;
Primary keys
So far, you’ve created the table classics  and ensured that MySQL can search it quickly
by adding indexes, but there’s still something missing. All the publications in the table
can be searched, but there is no single unique key for each publication to enable
instant accessing of a row. The importance of having a key with a unique value for
each row will come up when we start to combine data from different tables.
The section “The AUTO_INCREMENT data type” on page 181  briefly introduced the
idea of a primary key when creating the auto-incrementing column id, which could
have been used as a primary key for this table. However, I wanted to reserve that task
for a more appropriate column: the internationally recognized ISBN.
So let’s go ahead and create a new column for this key. Now, bearing in mind that
ISBNs are 13 characters long, you might think that the following command would do
the job:
ALTER TABLE classics ADD isbn CHAR(13) PRIMARY KEY;
But it doesn’t. If you try it, you’ll get the error Duplicate entry  for key 1. The reason
is that the table is already populated with some data and this command is trying to
add a column with the value NULL  to each row, which is not allowed, as all values
must be unique in any column having a primary key index. However, if there were no
data already in the table, this command would work just fine, as would adding the
primary key index upon table creation.
In our current situation, we have to be a bit sneaky and create the new column
without an index, populate it with data, and then add the index retrospectively using
the commands in Example 8-13 . Luckily, each of the years is unique in the current set
of data, so we can use the year column to identify each row for updating. Note that
this example uses the UPDATE  and WHERE  keywords, which are explained in more detail
in the section “Querying a MySQL Database” on page 192 .
Indexes | 189

Example 8-13. Populating the isbn column with data and using a primary key
ALTER TABLE classics ADD isbn CHAR(13);
UPDATE classics SET isbn='9781598184891' WHERE year='1876';
UPDATE classics SET isbn='9780582506206' WHERE year='1811';
UPDATE classics SET isbn='9780517123201' WHERE year='1856';
UPDATE classics SET isbn='9780099533474' WHERE year='1841';
UPDATE classics SET isbn='9780192814968' WHERE year='1594';
ALTER TABLE classics ADD PRIMARY KEY(isbn);
DESCRIBE classics;
Once you have typed these commands, the results should look like Figure 8-8 . Note
that the keywords PRIMARY KEY  replace the keyword INDEX  in the ALTER TABLE  syntax
(compare Example 8-10  and Example 8-13 ).
Figure 8-8. Retrospectively adding a primary key to the classics table
To have created a primary key when the table classics  was created, you could have
used the commands in Example 8-14 . Again, rename classics  in line 1 to something
else if you wish to try this example, and then delete the test table afterward.
Example 8-14. Creating the table classics with a primary key
CREATE TABLE classics (
 author VARCHAR(128),
 title VARCHAR(128),
 category VARCHAR(16),
 year SMALLINT,
 isbn CHAR(13),
 INDEX(author(20)),
 INDEX(title(20)),
 INDEX(category(4)),
190 | Chapter 8: Introduction to MySQL

INDEX(year),
 PRIMARY KEY (isbn)) ENGINE MyISAM;
Creating a FULLTEXT index
Unlike a regular index, MySQL ’s FULLTEXT  allows super-fast searches of entire col‐
umns of text. It stores every word in every data string in a special index that you can
search using “natural language, ” in a similar manner to using a search engine.
It’s not strictly true that MySQL stores all the words in a FULLTEXT
index, because it has a built-in list of more than 500 words that it
chooses to ignore because they are so common that they aren’t very
helpful for searching anyway. This list, called stopwords , includes
the, as, is, of, and so on. The list helps MySQL run much more
quickly when performing a FULLTEXT  search and keeps database
sizes down. Appendix C  contains the full list of stopwords.
Here are some things that you should know about FULLTEXT  indexes:
•FULLTEXT  indexes can be used only with MyISAM tables, the type used by
MySQL ’s default storage engine (MySQL supports at least 10 different storage
engines). If you need to convert a table to MyISAM, you can usually use the
MySQL command ALTER TABLE tablename ENGINE = MyISAM; .
•FULLTEXT  indexes can be created for CHAR , VARCHAR , and TEXT  columns only.
•A FULLTEXT  index definition can be given in the CREATE TABLE  statement when a
table is created, or added later using ALTER TABLE  (or CREATE INDEX ).
•For large data sets, it is much  faster to load your data into a table that has no
FULLTEXT  index and then create the index than to load data into a table that has
an existing FULLTEXT  index.
To create a FULLTEXT  index, apply it to one or more records as in Example 8-15 ,
which adds a FULLTEXT  index to the pair of columns author  and title in the classics
table (this index is in addition to the ones already created and does not affect them).
Example 8-15. Adding a FULLTEXT index to the table classics
ALTER TABLE classics ADD FULLTEXT(author,title);
Y ou can now perform FULLTEXT  searches across this pair of columns. This feature
could really come into its own if you could now add the entire text of these publica‐
tions to the database (particularly as they’re out of copyright protection) and they
would be fully searchable. See the section “MATCH...AGAINST”  on page 197 for a
description of searches using FULLTEXT .
Indexes | 191

If you find that MySQL is running slower than you think it should
be when accessing your database, the problem is usually related to
your indexes. Either you don’t have an index where you need one,
or the indexes are not optimally designed. Tweaking a table’s
indexes will often solve such a problem. Performance is beyond the
scope of this book, but in Chapter 9  I’ll give you a few tips so you
know what to look for.
Querying a MySQL Database
So far, we’ve created a MySQL database and tables, populated them with data, and
added indexes to make them fast to search. Now it’s time to look at how these
searches are performed, and the various commands and qualifiers available.
SELECT
As you saw in Figure 8-4 , the SELECT  command is used to extract data from a table. In
that section, I used its simplest form to select all data and display it—something you
will never want to do on anything but the smallest tables, because all the data will
scroll by at an unreadable pace. Let’s now examine SELECT  in more detail.
The basic syntax is as follows:
SELECT something  FROM tablename ;
The something  can be an * (asterisk) as you saw before, which means every column ,
or you can choose to select only certain columns. For instance, Example 8-16  shows
how to select just the author  and title and just the title and isbn. The result of typing
these commands can be seen in Figure 8-9 .
Example 8-16. Two different  SELECT statements
SELECT author,title FROM classics;
SELECT title,isbn FROM classics;
192 | Chapter 8: Introduction to MySQL

Figure 8-9. The output from two different  SELECT statements
SELECT COUNT
Another replacement for the something  parameter is COUNT , which can be used in
many ways. In Example 8-17 , it displays the number of rows in the table by passing *
as a parameter, which means all rows . As you’ d expect, the result returned is 5, as
there are five publications in the table.
Example 8-17. Counting rows
SELECT COUNT(*) FROM classics;
SELECT DISTINCT
This qualifier (and its synonym DISTINCTROW ) allows you to weed out multiple entries
when they contain the same data. For instance, suppose that you want a list of all
authors in the table. If you select just the author  column from a table containing mul‐
tiple books by the same author, you’ll normally see a long list with the same author
names over and over. But by adding the DISTINCT  keyword, you can show each
author just once. So let’s test that out by adding another row that repeats one of our
existing authors ( Example 8-18 ).
Example 8-18. Duplicating data
INSERT INTO classics(author, title, category, year, isbn)
 VALUES('Charles Dickens','Little Dorrit','Fiction','1857', '9780141439969');
Now that Charles Dickens appears twice in the table, we can compare the results of
using SELECT  with and without the DISTINCT  qualifier. Example 8-19  and Figure 8-10
Indexes | 193

show that the simple SELECT  lists Dickens twice, and the command with the DISTINCT
qualifier shows him only once.
Example 8-19. With and without the DISTINCT qualifier
SELECT author FROM classics;
SELECT DISTINCT author FROM classics;
Figure 8-10. Selecting data with and without DISTINCT
DELETE
When you need to remove  a row from a table, use the DELETE  command. Its syntax is
similar to the SELECT  command and allows you to narrow down the exact row or
rows to delete using qualifiers such as WHERE  and LIMIT .
Now that you’ve seen the effects of the DISTINCT  qualifier, if you typed Example 8-18 ,
you should remove Little Dorrit  by entering the commands in Example 8-20 .
Example 8-20. Removing the new entry
DELETE FROM classics WHERE title='Little Dorrit';
This example issues a DELETE  command for all rows whose title column contains the
string Little Dorrit .
The WHERE  keyword is very powerful, and important to enter correctly; an error could
lead a command to the wrong rows (or have no effect in cases where nothing matches
the WHERE  clause). So now we’ll spend some time on that clause, which is the heart
and soul of SQL.
194 | Chapter 8: Introduction to MySQL

WHERE
The WHERE  keyword enables you to narrow down queries by returning only those
where  a certain expression is true. Example 8-20  returns only the rows where the col‐
umn exactly matches the string Little Dorrit , using the equality operator =.
Example 8-21  shows a couple more examples of using WHERE  with =.
Example 8-21. Using the WHERE keyword
SELECT author,title FROM classics WHERE author="Mark Twain";
SELECT author,title FROM classics WHERE isbn="9781598184891 ";
Given our current table, the two commands in Example 8-21  display the same results.
But we could easily add more books by Mark Twain, in which case the first line would
display all titles he wrote and the second line would continue (because we know the
ISBN is unique) to display The Adventures of Tom Sawyer . In other words, searches
using a unique key are more predictable, and you’ll see further evidence later of the
value of unique and primary keys.
Y ou can also do pattern matching for your searches using the LIKE  qualifier, which
allows searches on parts of strings. This qualifier should be used with a % character
before or after some text. When placed before a keyword, % means anything before .
After a keyword, it means anything after . Example 8-22  performs three different quer‐
ies, one for the start of a string, one for the end, and one for anywhere in a string. Y ou
can see the results of these commands in Figure 8-11 .
Example 8-22. Using the LIKE qualifier
SELECT author,title FROM classics WHERE author LIKE "Charles%";
SELECT author,title FROM classics WHERE title LIKE "%Species";
SELECT author,title FROM classics WHERE title LIKE "%and%";
The first command outputs the publications by both Charles Darwin and Charles
Dickens because the LIKE  qualifier was set to return anything matching the string
Charles  followed by any other text. Then just The Origin of Species  is returned,
because it’s the only row whose column ends with the string Species . Last, both
Pride and Prejudice  and Romeo and Juliet  are returned, because they both
matched the string and anywhere in the column.
The % will also match if there is nothing in the position it occupies; in other words, it
can match an empty string.
Indexes | 195

Figure 8-11. Using WHERE with the LIKE qualifier
LIMIT
The LIMIT  qualifier enables you to choose how many rows to return in a query, and
where in the table to start returning them. When passed a single parameter, it tells
MySQL to start at the beginning of the results and just return the number of rows
given in that parameter. If you pass it two parameters, the first indicates the offset
from the start of the results where MySQL should start the display, and the second
indicates how many to return. Y ou can think of the first parameter as saying, “Skip
this number of results at the start. ”
Example 8-23  includes three commands. The first returns the first three rows from
the table. The second returns two rows starting at position 1 (skipping the first row).
The last command returns a single row starting at position 3 (skipping the first three
rows). Figure 8-12  shows the results of issuing these three commands.
Example 8-23. Limiting the number of results returned
SELECT author,title FROM classics LIMIT 3;
SELECT author,title FROM classics LIMIT 1,2;
SELECT author,title FROM classics LIMIT 3,1;
Be careful with the LIMIT  keyword, because offsets start at 0, but
the number of rows to return starts at 1. So LIMIT 1,3  means
return three  rows starting from the second  row.
196 | Chapter 8: Introduction to MySQL

Figure 8-12. Restricting the rows returned with LIMIT
MATCH...AGAINST
The MATCH...AGAINST  construct can be used on columns that have been given  a FULL
TEXT  index (see the section “Creating a FULLTEXT index”  on page 191). With it, you
can make natural-language searches as you would in an Internet search engine.
Unlike the use of WHERE...=  or WHERE...LIKE , MATCH...AGAINST  lets you enter multi‐
ple words in a search query and checks them against all words in the FULLTEXT  col‐
umns. FULLTEXT  indexes are case-insensitive, so it makes no difference what case is
used in your queries.
Assuming that you have added a FULLTEXT  index to the author  and title columns,
enter the three queries shown in Example 8-24 . The first asks for any of these col‐
umns that contain the word and to be returned. Because and is a stopword, MySQL
will ignore it and the query will always produce an empty set—no matter what is
stored in the columns. The second query asks for any rows that contain both of the
words curiosity  and shop  anywhere in them, in any order, to be returned. And the last
query applies the same kind of search for the words tom and sawyer . Figure 8-13
shows the results of these queries.
Example 8-24. Using MATCH...AGAINST on FULLTEXT indexes
SELECT author,title FROM classics
 WHERE MATCH(author,title) AGAINST('and');
SELECT author,title FROM classics
 WHERE MATCH(author,title) AGAINST('curiosity shop');
SELECT author,title FROM classics
 WHERE MATCH(author,title) AGAINST('tom sawyer');
Indexes | 197

Figure 8-13. Using MATCH...AGAINST on a FULLTEXT index
MATCH...AGAINST...in Boolean Mode
If you wish to give your MATCH...AGAINST  queries  even more power, use Boolean
mode. This changes the effect of the standard FULLTEXT  query so that it searches for
any combination of search words, instead of requiring all search words to be in the
text. The presence of a single word in a column causes the search to return the row.
Boolean mode also allows you to preface search words with a + or - sign to indicate
whether they must be included or excluded. If normal Boolean mode says, “ Any of
these words will do, ” a plus sign means, “This word must be present; otherwise, don’t
return the row. ” A minus sign means, “This word must not be present; its presence
disqualifies the row from being returned. ”
Example 8-25  illustrates Boolean mode through two queries. The first asks for all
rows containing the word charles  and not the word species  to be returned. The second
uses double quotes to request that all rows containing the exact phrase origin of  be
returned. Figure 8-14  shows the results of these queries.
Example 8-25. Using MATCH...AGAINST...in Boolean Mode
SELECT author,title FROM classics
 WHERE MATCH(author,title)
 AGAINST('+charles -species' IN BOOLEAN MODE);
SELECT author,title FROM classics
 WHERE MATCH(author,title)
 AGAINST('"origin of"' IN BOOLEAN MODE);
198 | Chapter 8: Introduction to MySQL

Figure 8-14. Using MATCH...AGAINST...in Boolean Mode
As you would expect, the first request returns only The Old Curiosity Shop  by
Charles Dickens, because any rows containing the word species  have been excluded,
so Charles Darwin’s publication is ignored.
There is something of interest to note in the second query: the
stopword of is part of the search string, but is still used by the
search because the double quotation marks override stopwords.
UPDATE...SET
This construct allows you to update the contents of a field. If you wish to change the
contents of one or more fields, you need to first narrow in on just the field or fields to
be changed, in much the same way you use the SELECT  command. Example 8-26
shows the use of UPDATE...SET  in two different ways. Y ou can see the results in
Figure 8-15 .
Example 8-26. Using UPDATE...SET
UPDATE classics SET author='Mark Twain (Samuel Langhorne Clemens)'
 WHERE author='Mark Twain';
UPDATE classics SET category='Classic Fiction'
 WHERE category='Fiction';
Indexes | 199

Figure 8-15. Updating columns in the classics table
In the first query, Mark Twain’s real name of Samuel Langhorne Clemens was
appended to his pen name in brackets, which affected only one row. The second
query, however, affected three rows, because it changed all occurrences of the word
Fiction  in the category  column to the term Classic Fiction .
When performing an update, you can also make use of the qualifiers you have already
seen, such as LIMIT , and the following ORDER BY  and GROUP BY  keywords.
ORDER BY
ORDER BY  sorts returned results by one or more columns in ascending or descending
order. Example 8-27  shows two such queries, the results of which can be seen in
Figure 8-16 .
Example 8-27. Using ORDER BY
SELECT author,title FROM classics ORDER BY author;
SELECT author,title FROM classics ORDER BY title DESC;
As you can see, the first query returns the publications by author  in ascending alpha‐
betical order (the default), and the second returns them by title in descending order.
200 | Chapter 8: Introduction to MySQL

Figure 8-16. Sorting the results of requests
If you wanted to sort all the rows by author  and then by descending year of publica‐
tion (to view the most recent first), you would issue the following query:
SELECT author,title,year FROM classics ORDER BY author,year DESC;
This shows that each ascending and descending qualifier applies to a single column.
The DESC  keyword applies only to the preceding column, year. Because you allow
author  to use the default sort order, it is sorted in ascending order. Y ou could also
have explicitly specified ascending order for that column, with the same results:
SELECT author,title,year FROM classics ORDER BY author ASC,year DESC;
GROUP BY
In a similar fashion to ORDER BY , you can group results returned from queries using
GROUP BY , which is good for retrieving information about a group of data. For exam‐
ple, if you want to know how many publications there are of each category in the
classics  table, you can issue the following query:
SELECT category,COUNT(author) FROM classics GROUP BY category;
which returns the following output:
+-----------------+---------------+
| category        | COUNT(author) |
+-----------------+---------------+
| Classic Fiction |             3 |
| Non-Fiction     |             1 |
| Play            |             1 |
+-----------------+---------------+
3 rows in set (0.00 sec)
Indexes | 201

Joining Tables Together
It is quite normal to maintain multiple tables  within a database, each holding a differ‐
ent type of information. For example, consider the case of a customers  table that needs
to be able to be cross-referenced with publications purchased from the classics  table.
Enter the commands in Example 8-28  to create this new table and populate it with
three customers and their purchases. Figure 8-17  shows the result.
Example 8-28. Creating and populating the customers table
CREATE TABLE customers (
 name VARCHAR(128),
 isbn VARCHAR(13),
 PRIMARY KEY (isbn)) ENGINE MyISAM;
INSERT INTO customers(name,isbn)
 VALUES('Joe Bloggs','9780099533474');
INSERT INTO customers(name,isbn)
 VALUES('Mary Smith','9780582506206');
INSERT INTO customers(name,isbn)
 VALUES('Jack Wilson','9780517123201');
SELECT * FROM customers;
Figure 8-17. Creating the customers table
There’s also a shortcut for inserting multiple rows of data, as in
Example 8-28 , in which you can replace the three separate INSERT
INTO  queries with a single one listing the data to be inserted, sepa‐
rated by commas, like this:
INSERT INTO customers(name,isbn) VALUES
('Joe Bloggs','9780099533474'),
('Mary Smith','9780582506206'),
('Jack Wilson','9780517123201');
202 | Chapter 8: Introduction to MySQL

Of course, in a proper table containing customers’ details there would also be
addresses, phone numbers, email addresses, and so on, but they aren’t necessary for
this explanation. While creating the new table, you should have noticed that it has
something in common with the classics  table: a column called isbn. Because it has the
same meaning in both tables (an ISBN refers to a book, and always the same book),
we can use this column to tie the two tables together into a single query, as in
Example 8-29 .
Example 8-29. Joining two tables into a single SELECT
SELECT name,author,title from customers,classics
 WHERE customers.isbn=classics.isbn;
The result of this operation is the following:
+-------------+-----------------+------------------------+
| name        | author          | title                  |
+-------------+-----------------+------------------------+
| Joe Bloggs  | Charles Dickens | The Old Curiosity Shop |
| Mary Smith  | Jane Austen     | Pride and Prejudice    |
| Jack Wilson | Charles Darwin  | The Origin of Species  |
+-------------+-----------------+------------------------+
3 rows in set (0.00 sec)
See how this query has neatly tied both tables together to show the publications pur‐
chased from the classics  table by the people in the customers  table?
NATURAL JOIN
Using NATURAL JOIN , you can save yourself some typing and make queries a little
clearer. This kind of join takes two tables and automatically joins columns that have
the same name. So, to achieve the same results as from Example 8-29 , you would
enter the following:
SELECT name,author,title FROM customers NATURAL JOIN classics;
JOIN...ON
If you wish to specify the column on which to join two tables, use the JOIN...ON
construct, as follows, to achieve results identical to those of Example 8-29 :
SELECT name,author,title FROM customers
 JOIN classics ON customers.isbn=classics.isbn;
Using AS
Y ou can also save yourself some typing and improve query readability by creating
aliases using the AS keyword.  Follow a table name with AS and the alias to use. The
following code, therefore, is also identical in action to Example 8-29 . Aliases  can be
Indexes | 203

particularly useful when you have long queries that reference the same table names
many times.
SELECT name,author,title from
 customers AS cust, classics AS class WHERE cust.isbn=class.isbn;
The result of this operation is the following:
+-------------+-----------------+------------------------+
| name        | author          | title                  |
+-------------+-----------------+------------------------+
| Joe Bloggs  | Charles Dickens | The Old Curiosity Shop |
| Mary Smith  | Jane Austen     | Pride and Prejudice    |
| Jack Wilson | Charles Darwin  | The Origin of Species  |
+-------------+-----------------+------------------------+
3 rows in set (0.00 sec)
Using Logical Operators
Y ou can also use the logical operators AND, OR, and NOT in your MySQL WHERE  queries
to further narrow  down your selections. Example 8-30  shows one instance of each,
but you can mix and match them in any way you need.
Example 8-30. Using logical operators
SELECT author,title FROM classics WHERE
 author LIKE "Charles%" AND author LIKE "%Darwin";
SELECT author,title FROM classics WHERE
 author LIKE "%Mark Twain%" OR author LIKE "%Samuel Langhorne Clemens%";
SELECT author,title FROM classics WHERE
 author LIKE "Charles%" AND author NOT LIKE "%Darwin";
I’ve chosen the first query, because Charles Darwin might be listed in some rows by
his full name, Charles Robert Darwin. Thus, the query returns publications as long as
the author  column starts with Charles  and ends with Darwin . The second query
searches for publications written using either Mark Twain’s pen name or his real
name, Samuel Langhorne Clemens. The third query returns publications written by
authors with the first name Charles but not the surname Darwin.
MySQL Functions
Y ou might wonder why anyone would want to use MySQL functions when PHP
comes with a whole bunch of powerful functions of its own. The answer is very sim‐
ple: the MySQL functions work on the data right there in the database. If you were to
use PHP , you would first have to extract raw data from MySQL, manipulate it, and
then perform the database query you first wanted.
204 | Chapter 8: Introduction to MySQL

Having functions built into MySQL substantially reduces the time needed for per‐
forming complex queries, as well as their complexity. If you wish to learn more about
the available string and date/time functions, you can visit the following URLs:
http://tinyurl.com/mysqlstrings
http://tinyurl.com/mysqldates
However, to get you started, Appendix D  describes a subset containing the most use‐
ful of these functions.
Accessing MySQL via phpMyAdmin
Although to use MySQL you have to learn these main commands and how they work,
once you understand them, it can be much quicker and simpler to use a program
such as phpMyAdmin  to manage your databases and tables.
To do this, type the following to call up the XAMPP main page shown in Figure 8-18 :
http://localhost/xampp
Figure 8-18. The XAMPP Dashboard
Accessing MySQL via phpMyAdmin | 205

Now click the phpMyAdmin link toward the bottom of the lefthand menu to open up
the program (see Figure 8-19 ).
Figure 8-19. The phpMyAdmin main screen
In the lefthand pane of the main phpMyAdmin screen, you can click to select any
database you wish to work with. This will open the database and display its tables.
Y ou can also click New to create a new database.
From here you can perform all the main operations, such as creating new databases,
adding tables, creating indexes, and much more. To read the supporting documenta‐
tion for phpMyAdmin, visit https://docs.phpmyadmin.net .
If you worked with me through the examples in this chapter, congratulations—it’s
been quite a long journey. Y ou’ve come all the way from learning how to create a
MySQL database through issuing complex queries that combine multiple tables, to
using Boolean operators and leveraging MySQL ’s various qualifiers.
In the next chapter, we’ll start looking at how to approach efficient database design,
advanced SQL techniques, and MySQL functions and transactions.
Questions
1.What is the purpose of the semicolon in MySQL queries?
2.Which command would you use to view the available databases or tables?
206 | Chapter 8: Introduction to MySQL

3.How would you create a new MySQL user on the local host called newuser  with a
password of newpass  and with access to everything in the database newdatabase ?
4.How can you view the structure of a table?
5.What is the purpose of a MySQL index?
6.What benefit does a FULLTEXT  index provide?
7.What is a stopword?
8.Both SELECT DISTINCT  and GROUP BY  cause the display to show only one output
row for each value in a column, even if multiple rows contain that value. What
are the main differences between SELECT DISTINCT  and GROUP BY ?
9.Using the SELECT...WHERE  construct, how would you return only rows contain‐
ing the word Langhorne  somewhere in the author  column of the classics  table
used in this chapter?
10.What needs to be defined in two tables to make it possible for you to join them
together?
See Chapter 8 Answers  in Appendix A  for the answers to these questions.
Questions | 207



CHAPTER 9
Mastering MySQL
Chapter 8  provided you with a good grounding in the practice of using relational
databases with Structured Query Language. Y ou’ve learned about creating databases
and the tables they comprise, as well as inserting, looking up, changing, and deleting
data.
With that knowledge under your belt, we now need to look at how to design databa‐
ses for maximum speed and efficiency. For example, how do you decide what data to
place in which table? Well, over the years, a number of guidelines have been devel‐
oped that—if you follow them—ensure that your databases will be efficient and capa‐
ble of growing as you feed them more and more data.
Database Design
It’s very important that you design a database correctly before you  start to create it;
otherwise, you are almost certainly going to have to go back and change it by splitting
up some tables, merging others, and moving various columns about in order to ach‐
ieve sensible relationships that MySQL can easily use.
Sitting down with a sheet of paper and a pencil and writing down a selection of the
queries that you think you and your users are likely to ask is an excellent starting
point. In the case of an online bookstore’s database, some of your questions could be:
•How many authors, books, and customers are in the database?
•Which author wrote a certain book?
•Which books were written by a certain author?
•What is the most expensive book?
•What is the best-selling book?
209

•Which books have not sold this year?
•Which books did a certain customer buy?
•Which books have been purchased along with the same other books?
Of course, there are many more queries that you could make on such a database, but
even this small sample will begin to give you insights into how to lay out your tables.
For example, books and ISBNs can probably be combined into one table, because
they are closely linked (we’ll examine some of the subtleties later). In contrast, books
and customers should be in separate tables, because their connection is very loose. A
customer can buy any book, and even multiple copies of a book, yet a book can be
bought by many customers and be ignored by still more potential customers.
When you plan to do a lot of searches on something, it can often benefit by having its
own table. And when couplings between things are loose, it’s best to put them in sep‐
arate tables.
Taking into account those simple rules of thumb, we can guess we’ll need at least
three tables to accommodate all these queries:
Authors
There will be lots of searches for authors, many of whom have collaborated on titles,
and many of whom will be featured in collections. Listing all the information about
each author together, linked to that author, will produce optimal results for searches
—hence an Authors  table.
Books
Many books appear in different editions. Sometimes they change publisher and
sometimes they have the same titles as other, unrelated books. So the links between
books and authors are complicated enough to call for a separate table.
Customers
It’s even more clear why customers should get their own table, as they are free to pur‐
chase any book by any author.
Primary Keys: The Keys to Relational Databases
Using the power of relational databases, we can define information for each author,
book, and customer in just one place. Obviously, what interests us is the links
between them—such as who wrote each book and who purchased it—but we can
store that information just by making links between the three tables. I’ll show you the
basic principles, and then it just takes practice for it to feel natural.
The magic involves giving every author a unique identifier. Do the same for every
book and for every customer. We saw the means of doing that in the previous chap‐
ter: the primary key . For a book, it makes sense to use the ISBN, although you then
have to deal with multiple editions that have different ISBNs. For authors and cus‐
210 | Chapter 9: Mastering MySQL

tomers, you can just assign arbitrary keys, which the AUTO_INCREMENT  feature that
you saw in the last chapter makes easy.
In short, every table will be designed around some object that you’re likely to search
for a lot—an author, book, or customer, in this case—and that object will have a pri‐
mary key. Don’t choose a key that could possibly have the same value for different
objects. The ISBN is a rare case for which an industry has provided a primary key
that you can rely on to be unique for each product. Most of the time, you’ll create an
arbitrary key for this purpose, using AUTO_INCREMENT .
Normalization
The process of separating your data into tables and creating  primary keys is called
normalization . Its main goal is to make sure each piece of information appears in the
database only once. Duplicating data is inefficient, because it makes databases larger
than they need to be and therefore slows access. But, more important, the presence of
duplicates creates a strong risk that you’ll update only one row of duplicated data,
creating inconsistencies in a database and potentially causing serious errors.
Thus, if you list the titles of books in the Authors  table as well as the Books  table, and
you have to correct a typographic error in a title, you’ll have to search through both
tables and make sure you make the same change every place the title is listed. It’s bet‐
ter to keep the title in one place and use the ISBN in other places.
But in the process of splitting a database into multiple tables, it’s important not to go
too far and create more tables than is necessary, which would also lead to inefficient
design and slower access.
Luckily, E. F. Codd, the  inventor of the relational model, analyzed the concept of nor‐
malization and split it into three separate schemas called First , Second , and Third  Nor‐
mal Form . If you modify a database to satisfy each of these forms in order, you will
ensure that your database is optimally balanced for fast access, and minimum mem‐
ory and disk space usage.
To see how the normalization process works, let’s start with the rather monstrous
database in Table 9-1 , which shows a single table containing all of the author names,
book titles, and (fictional) customer details. Y ou could consider it a first attempt at a
table intended to keep track of which customers have ordered books. Obviously, this
is inefficient design, because data is duplicated all over the place (duplications are
highlighted), but it represents a starting point.
Normalization | 211

Table 9-1. A highly inefficient  design for a database table
Author 1 Author 2 Title ISBN Price
$USCustomer
NameCustomer Address Purchase
Date
David Sklar Adam
TrachtenbergPHP Cookbook 0596101015 44.99 Emma
Brown1565 Rainbow
Road, Los Angeles,
CA 90014Mar 03 2009
Danny
Goodman Dynamic HTML 0596527403 59.99 Darren
Ryder4758 Emily Drive,
Richmond, VA
23219Dec 19
2008
Hugh E
WilliamsDavid Lane PHP And
MySQL0596005436 44.95 Earl B.
Thurston862 Gregory Lane,
Frankfort, KY 40601Jun 22 2009
David Sklar Adam
TrachtenbergPHP Cookbook 0596101015 44.99 Darren
Ryder4758 Emily Drive,
Richmond, VA
23219Dec 19
2008
Rasmus
LerdorfKevin Tatroe &
Peter
MacIntyreProgramming
PHP0596006815 39.99 David Miller 3647 Cedar Lane,
Waltham, MA
02154Jan 16 2009
In the following three sections, we will examine this database design, and you’ll see
how we can improve it by removing the various duplicate entries and splitting the
single table into multiple tables, each containing one type of data.
First Normal Form
For a database to satisfy the First Normal Form , it must fulfill three requirements:
•There should be no repeating columns containing the same kind of data.
•All columns should contain a single value.
•There should be a primary key to uniquely identify each row.
Looking at these requirements in order, you should notice straightaway that both the
Author 1  and Author 2  columns constitute repeating data types. So we already have a
target column for pulling into a separate table, as the repeated Author  columns violate
Rule 1.
Second, there are three authors listed for the final book, Programming PHP . I’ve han‐
dled that by making Kevin Tatroe and Peter MacIntyre share the Author 2  column,
which violates Rule 2—yet another reason to transfer the Author  details to a separate
table.
However, Rule 3 is satisfied, because the primary key of ISBN has already been cre‐
ated.
212 | Chapter 9: Mastering MySQL

Table 9-2  shows the result of removing the Authors  columns from Table 9-1 . Already
it looks a lot less cluttered, although there remain duplications that are highlighted.
Table 9-2. The result of stripping the Authors columns from Table 9-1
Title ISBN Price
$USCustomer Name Customer Address Purchase Date
PHP Cookbook 0596101015 44.99 Emma Brown 1565 Rainbow Road, Los Angeles, CA
90014Mar 03 2009
Dynamic HTML 0596527403 59.99 Darren Ryder 4758 Emily Drive, Richmond, VA
23219Dec 19 2008
PHP and MySQL 0596005436 44.95 Earl B. Thurston 862 Gregory Lane, Frankfort, KY 40601 Jun 22 2009
PHP Cookbook 0596101015 44.99 Darren Ryder 4758 Emily Drive, Richmond, VA
23219Dec 19 2008
Programming PHP 0596006815 39.99 David Miller 3647 Cedar Lane, Waltham, MA 02154 Jan 16 2009
The new Authors  table shown in Table 9-3  is small and simple. It just lists the ISBN of
a title along with an author. If a title has more than one author, additional authors get
their own rows. At first, you may feel ill at ease with this table, because you can’t tell
which author wrote which book. But don’t worry: MySQL can quickly tell you. All
you have to do is tell it which book you want information for, and MySQL will use its
ISBN to search the Authors  table in a matter of milliseconds.
Table 9-3. The new Authors table
ISBN Author
0596101015 David Sklar
0596101015 Adam Trachtenberg
0596527403 Danny Goodman
0596005436 Hugh E Williams
0596005436 David Lane
0596006815 Rasmus Lerdorf
0596006815 Kevin Tatroe
0596006815 Peter MacIntyre
As I mentioned earlier, the ISBN will be the primary key for the Books  table, when we
get around to creating that table. I mention that here in order to emphasize that the
ISBN is not, however, the primary key for the Authors  table. In the real world, the
Authors  table would deserve a primary key, too, so that each author would have a key
to uniquely identify him or her.
So, in the Authors  table, the ISBN is just a column for which—for the purposes of
speeding up searches—we’ll probably make a key, but not the primary key. In fact, it
Normalization | 213

cannot  be the primary key in this table, because it’s not unique: the same ISBN
appears multiple times whenever two or more authors have collaborated on a book.
Because we’ll use it to link authors to books in another table, this column is called a
foreign  key.
Keys (also called indexes ) have several  purposes in MySQL. The
fundamental reason for defining a key is to make searches faster.
Y ou’ve seen examples in Chapter 8  in which keys are used in WHERE
clauses for searching. But a key can also be useful to uniquely iden‐
tify an item. Thus, a unique key is often used as a primary key in
one table, and as a foreign key to link rows in that table to rows in
another table.
Second Normal Form
The First Normal Form deals with duplicate data (or redundancy) across multiple
columns.  The Second Normal Form  is all about redundancy across multiple rows. To
achieve Second Normal Form, your tables must already be in First Normal Form.
Once this has been done, we achieve Second Normal Form by identifying columns
whose data repeats in different places and then removing them to their own tables.
So let’s look again at Table 9-2 . Notice how Darren Ryder bought two books and
therefore his details are duplicated. This tells us that the Customer  columns need to
be pulled into their own tables. Table 9-4  shows the result of removing the Customer
columns from Table 9-2 .
Table 9-4. The new Titles table
ISBN Title Price
0596101015 PHP Cookbook 44.99
0596527403 Dynamic HTML 59.99
0596005436 PHP and MySQL 44.95
0596006815 Programming PHP 39.99
As you can see, all that’s left in Table 9-4  are the ISBN , Title , and Price  columns for
four unique books, so this now constitutes an efficient and self-contained table that
satisfies the requirements of both the First and Second Normal Forms. Along the way,
we’ve managed to reduce the information to data closely related to book titles. This
table could also include years of publication, page counts, numbers of reprints, and so
on, as these details are also closely related. The only rule is that we can’t put in any
column that could have multiple values for a single book, because then we’ d have to
list the same book in multiple rows and would thus violate Second Normal Form.
Restoring an Author  column, for instance, would violate this normalization.
214 | Chapter 9: Mastering MySQL

However, looking at the extracted Customer  columns, now in Table 9-5 , we can see
that there’s still more normalization work to do, because Darren Ryder’s details are
still duplicated. And it could also be argued that First Normal Form Rule 2 (all col‐
umns should contain a single value) has not been properly complied with, because
the addresses really need to be broken into separate columns for Address , City, State ,
and Zip code .
Table 9-5. The Customer details from Table 9-2
ISBN Customer Name Customer Address Purchase Date
0596101015 Emma Brown 1565 Rainbow Road, Los Angeles, CA 90014 Mar 03 2009
0596527403 Darren Ryder 4758 Emily Drive, Richmond, VA 23219 Dec 19 2008
0596005436 Earl B. Thurston 862 Gregory Lane, Frankfort, KY 40601 Jun 22 2009
0596101015 Darren Ryder 4758 Emily Drive, Richmond, VA 23219 Dec 19 2008
0596006815 David Miller 3647 Cedar Lane, Waltham, MA 02154 Jan 16 2009
What we have to do is split this table further to ensure that each customer’s details are
entered only once. Because the ISBN is not and cannot be used as a primary key to
identify customers (or authors), a new key must be created.
Table 9-6  is the result of normalizing the Customers  table into both First and Second
Normal Forms. Each customer now has a unique customer number called CustNo
that is the table’s primary key, and that will most likely have been created via
AUTO_INCREMENT . All the parts of customer addresses have also been separated into
distinct columns to make them easily searchable and updateable.
Table 9-6. The new Customers table
CustNo Name Address City State Zip
1 Emma Brown 1565 Rainbow Road Los Angeles CA 90014
2 Darren Ryder 4758 Emily Drive Richmond VA 23219
3 Earl B. Thurston 862 Gregory Lane Frankfort KY 40601
4 David Miller 3647 Cedar Lane Waltham MA 02154
At the same time, in order to normalize Table 9-6 , we had to remove the information
on customer purchases, because otherwise, there would be multiple instances of cus‐
tomer details for each book purchased. Instead, the purchase data is now placed in a
new table called Purchases  (see Table 9-7 ).
Normalization | 215

Table 9-7. The new Purchases table
CustNo ISBN Date
1 0596101015 Mar 03 2009
2 0596527403 Dec 19 2008
2 0596101015 Dec 19 2008
3 0596005436 Jun 22 2009
4 0596006815 Jan 16 2009
Here the CustNo  column from Table 9-6  is reused as a key to tie both the Customers
and the Purchases  tables together. Because the ISBN column is also repeated here, this
table can be linked with either of the Authors  or the Titles  tables, too.
The CustNo  column can be a useful key in the Purchases  table, but it’s not a primary
key. A single customer can buy multiple books (and even multiple copies of one
book), so the CustNo  column is not a primary key. In fact, the Purchases  table has no
primary key. That’s all right, because we don’t expect to need to keep track of unique
purchases. If one customer buys two copies of the same book on the same day, we’ll
just allow two rows with the same information. For easy searching, we can define
both CustNo  and ISBN  as keys—just not as primary keys.
There are now four tables, one more than the three we had initially
assumed would be needed. We arrived at this decision through the
normalization processes, by methodically following the First and
Second Normal Form rules, which made it plain that a fourth table
called Purchases  would also be required.
The tables we now have are Authors  (Table 9-3 ), Titles  (Table 9-4 ), Customers
(Table 9-6 ), and Purchases  (Table 9-7 ), and we can link each table to any other using
either the CustNo  or the ISBN  keys.
For example, to see which books Darren Ryder has purchased, you can look him up
in Table 9-6 , the Customers  table, where you will see his CustNo  is 2. Armed with this
number, you can now go to Table 9-7 , the Purchases  table; looking at the ISBN col‐
umn here, you will see that he purchased titles 0596527403 and 0596101015 on
December 19, 2008. This looks like a lot of trouble for a human, but it’s not so hard
for MySQL.
To determine what these titles were, you can then refer to Table 9-4 , the Titles  table,
and see that the books he bought were Dynamic HTML  and PHP Cookbook . Should
you wish to know the authors of these books, you could also use the ISBNs you just
looked up on Table 9-3 , the Authors  table, and you would see that ISBN 0596527403,
216 | Chapter 9: Mastering MySQL

Dynamic HTML , was written by Danny Goodman, and that ISBN 0596101015, PHP
Cookbook , was written by David Sklar and Adam Trachtenberg.
Third Normal Form
Once you have a database that complies with both the First and Second Normal
Forms, it is in pretty good shape and you might not have to modify it any further.
However, if you wish to be very strict with your database, you can ensure that it
adheres to the Third  Normal Form , which requires that data that is not directly depen‐
dent on the primary key but is dependent on another value in the table should also be
moved into separate tables, according to the dependence.
For example, in Table 9-6 , the Customers  table, it could be argued that the State , City,
and Zip code  keys are not directly related to each customer, because many other peo‐
ple will have the same details in their addresses, too. However, they are directly
related to each other, in that the street Address  relies on the City, and the City relies
on the State .
Therefore, to satisfy Third Normal Form for Table 9-6 , you would need to split it into
Table 9-8  through Table 9-11 .
Table 9-8. Third  Normal Form Customers table
CustNo Name Address Zip
1 Emma Brown 1565 Rainbow Road 90014
2 Darren Ryder 4758 Emily Drive 23219
3 Earl B. Thurston 862 Gregory Lane 40601
4 David Miller 3647 Cedar Lane 02154
Table 9-9. Third  Normal Form Zip codes table
Zip CityID
90014 1234
23219 5678
40601 4321
02154 8765
Table 9-10. Third  Normal Form Cities table
CityID Name StateID
1234 Los Angeles 5
5678 Richmond 46
4321 Frankfort 17
8765 Waltham 21
Normalization | 217

Table 9-11. Third  Normal Form States table
StateID Name Abbreviation
5 California CA
46 Virginia VA
17 Kentucky KY
21 Massachusetts MA
So, how would you use this set of four tables instead of the single Table 9-6 ? Well, you
would look up the Zip code  in Table 9-8 , and then find the matching CityID  in
Table 9-9 . Given this information, you could look up the city Name  in Table 9-10  and
then also find the StateID , which you could use in Table 9-11  to look up the State’s
Name .
Although using the Third Normal Form in this way may seem like overkill, it can
have advantages. For example, take a look at Table 9-11 , where it has been possible to
include both a state’s name and its two-letter abbreviation. It could also contain popu‐
lation details and other demographics, if you desired.
Table 9-10  could also contain even more localized demographics
that could be useful to you and/or your customers. By splitting up
these pieces of data, you can make it easier to maintain your data‐
base in the future, should it be necessary to add columns.
Deciding whether to use the Third Normal Form can be tricky. Y our evaluation
should rest on what data you may need to add at a later date. If you are absolutely
certain that the name and address of a customer is all that you will ever require, you
probably will want to leave out this final normalization stage.
On the other hand, suppose you are writing a database for a large organization such
as the U.S. Postal Service. What would you do if a city were to be renamed? With a
table such as Table 9-6 , you would need to perform a global search-and-replace on
every instance of that city. But if you have your database set up according to the Third
Normal Form, you would have to change only a single entry in Table 9-10  for the
change to be reflected throughout the entire database.
Therefore, I suggest that you ask yourself two questions to help you decide whether
to perform a Third Normal Form normalization on any table:
•Is it likely that many new columns will need to be added to this table?
•Could any of this table’s fields require a global update at any point?
If either of the answers is yes, you should probably consider performing this final
stage of normalization.
218 | Chapter 9: Mastering MySQL

When Not to Use Normalization
Now that you know all about normalization, I’m going to tell you why you should
throw these rules out of the window on high-traffic sites. That’s right—you should
never fully normalize your tables on sites that will cause MySQL to thrash.
Normalization requires spreading data across multiple tables, and this means making
multiple calls to MySQL for each query. On a very popular site, if you have normal‐
ized tables, your database access will slow down considerably once you get above a
few dozen concurrent users, because they will be creating hundreds of database
accesses between them. In fact, I would go so far as to say you should denormalize
any commonly looked-up data as much as you can.
Y ou see, if you have data duplicated across your tables, you can substantially reduce
the number of additional requests that need to be made, because most of the data you
want is available in each table. This means that you can simply add an extra column
to a query and that field will be available for all matching results.
Of course, you have to deal with the downsides previously mentioned, such as using
up large amounts of disk space, and ensuring that you update every single duplicate
copy of data when one of them needs modifying.
Multiple updates can be computerized, though. MySQL provides a feature called trig‐
gers that make automatic changes to the database in response to changes you make.
(Triggers are, however, beyond the scope of this book.) Another way to propagate
redundant data is to set up a PHP program to run regularly and keep all copies in
sync. The program reads changes from a “master” table and updates all the others.
(Y ou’ll see how to access MySQL from PHP in the next chapter.)
However, until you are very experienced with MySQL, I recommend that you fully
normalize all your tables (at least to First and Second Normal Form), as this will
instill the habit and put you in good stead. Only when you actually start to see
MySQL logjams should you consider looking at denormalization.
Relationships
MySQL is called a relational  database management system because its tables store not
only data but the relationships  among the data. There are three categories of relation‐
ships.
One-to-One
A one-to-one relationship  is like a (traditional) marriage: each item has a relationship
to only one item of the other type. This is surprisingly rare. For instance, an author
can write multiple books, a book can have multiple authors, and even an address can
be associated with multiple customers. Perhaps the best example in this chapter so far
Relationships | 219

of a one-to-one relationship is the relationship between the name of a state and its
two-character abbreviation.
However, for the sake of argument, let’s assume that there can always be only one cus‐
tomer at any address. In such a case, the Customers–Addresses relationship in
Figure 9-1  is a one-to-one relationship: only one customer lives at each address, and
each address can have only one customer.
Figure 9-1. The Customers table, Table 9-8 , split into two tables
Usually, when two items have a one-to-one relationship, you just include them as col‐
umns in the same table. There are two reasons for splitting them into separate tables:
•Y ou want to be prepared in case the relationship changes later.
•The table has a lot of columns, and you think that performance or maintenance
would be improved by splitting it.
Of course, when you build your own databases in the real world, you will have to cre‐
ate one-to-many Customer–Address relationships ( one address, many  customers).
One-to-Many
One-to-many  (or many-to-one) relationships occur when one row in one table is
linked to many rows in another table. Y ou have already seen how Table 9-8  would
take on a one-to-many relationship if multiple customers were allowed at the same
address, which is why it would have to be split up if that were the case.
So, looking at Table 9-8a within Figure 9-1 , you can see that it shares a one-to-many
relationship with Table 9-7  because there is only one of each customer in Table 9-8a.
However Table 9-7 , the Purchases  table, can (and does) contain more than one pur‐
chase from customers. Therefore, one customer has a relationship with many  purcha‐
ses.
Y ou can see these two tables alongside each other in Figure 9-2 , where the dashed
lines joining rows in each table start from a single row in the lefthand table but can
connect to more than one row on the righthand table. This one-to-many relationship
220 | Chapter 9: Mastering MySQL

is also the preferred scheme to use when describing a many-to-one relationship, in
which case you would normally swap the left and right tables to view them as a one-
to-many relationship.
Figure 9-2. Illustrating the relationship between two tables
Many-to-Many
In a many-to-many relationship , many rows in one table are linked to many rows in
another table. To create this relationship, add a third table containing the same key
column from each of the other tables. This third table contains nothing else, as its
sole purpose is to link up the other tables.
Table 9-12  is just such a table. It was extracted from Table 9-7 , the Purchases  table, but
omits the purchase date information. It contains a copy of the ISBN of every title
sold, along with the customer number of each purchaser.
Table 9-12. An intermediary table
Customer ISBN
1 0596101015
2 0596527403
2 0596101015
3 0596005436
4 0596006815
With this intermediary table in place, you can traverse all the information in the data‐
base through a series of relations. Y ou can take an address as a starting point and find
out the authors of any books purchased by the customer living at that address.
For example, let’s suppose that you want to find out about purchases in the 23219 zip
code. Look that zip code up in Table 9-8b, and you’ll find that customer number 2 has
bought at least one item from the database. At this point, you can use Table 9-8a to
Relationships | 221

find out his or her name, or use the new intermediary Table 9-12  to see the book(s)
purchased.
From here, you will find that two titles were purchased and can follow them back to
Table 9-4  to find the titles and prices of these books, or to Table 9-3  to see who the
authors were.
If it seems to you that this is really combining multiple one-to-many relationships,
then you are absolutely correct. To illustrate, Figure 9-3  brings three tables together.
Figure 9-3. Creating a many-to-many relationship via a third table
Follow any zip code in the lefthand table to associated customer IDs. From there, you
can link to the middle table, which joins the left and right tables by linking customer
IDs and ISBNs. Now all you have to do is follow an ISBN over to the right-hand table
to see which book it relates to.
Y ou can also use the intermediary table to work your way backward from book titles
to zip codes. The Titles  table can tell you the ISBN, which you can use in the middle
table to find ID numbers of customers who bought the books, and finally, you can use
the Customers  table to match the customer ID numbers to the customers’ zip codes.
Databases and Anonymity
An interesting aspect of using relations is that you can accumulate a lot of informa‐
tion about some item—such as a customer—without actually knowing who that cus‐
tomer is. Note that in the previous example we went from customers’ zip codes to
customers’ purchases, and back again, without finding out the name of a customer.
Databases can be used to track people, but they can also be used to help preserve peo‐
ple’s privacy while still finding useful information.
222 | Chapter 9: Mastering MySQL

Transactions
In some applications, it is vitally important that a sequence of queries runs in the cor‐
rect order and that every single query successfully completes.  For example, suppose
that you are creating a sequence of queries to transfer funds from one bank account
to another. Y ou would not want either of the following events to occur:
•Y ou add the funds to the second account, but when you try to subtract them
from the first account, the update fails, and now both accounts have the funds.
•Y ou subtract the funds from the first bank account, but the update request to add
them to the second account fails, and the funds have disappeared into thin air.
As you can see, not only is the order of queries important in this type of transaction,
but it is also vital that all parts of the transaction complete successfully. But how can
you ensure this happens, because surely after a query has occurred, it cannot be
undone? Do you have to keep track of all parts of a transaction and then undo them
all one at a time if any one fails? The answer is absolutely not, because MySQL comes
with powerful transaction-handling features to cover just these types of eventualities.
In addition, transactions allow concurrent access to a database by many users or pro‐
grams at the same time. MySQL handles this seamlessly by ensuring that all transac‐
tions are queued and that users or programs take their turns and don’t tread on each
other’s toes.
Transaction Storage Engines
To be able to use MySQL ’s transaction facility, you have to be using MySQL ’s InnoDB
storage engine. This is easy to do, as it’s simply another parameter that you use when
creating a table. So go ahead and create a table of bank accounts by typing the com‐
mands in Example 9-1 . (Remember that to do this, you will need access to the
MySQL command line, and must also have already selected a suitable database in
which to create this table.)
Example 9-1. Creating a transaction-ready table
CREATE TABLE accounts (
number INT, balance FLOAT, PRIMARY KEY(number)
) ENGINE InnoDB;
DESCRIBE accounts;
The final line of this example displays the contents of the new table so you can ensure
that it was correctly created. The output from it should look like this:
Transactions | 223

+---------+---------+------+-----+---------+-------+
| Field   | Type    | Null | Key | Default | Extra |
+---------+---------+------+-----+---------+-------+
| number  | int(11) | NO   | PRI | 0       |       |
| balance | float   | YES  |     | NULL    |       |
+---------+---------+------+-----+---------+-------+
2 rows in set (0.00 sec)
Now let’s create two rows within the table so that you can practice using transactions.
Type the commands in Example 9-2 .
Example 9-2. Populating the accounts table
INSERT INTO accounts(number, balance) VALUES(12345, 1025.50);
INSERT INTO accounts(number, balance) VALUES(67890, 140.00);
SELECT * FROM accounts;
The third line displays the contents of the table to confirm that the rows were cor‐
rectly inserted. The output should look like this:
+--------+---------+
| number | balance |
+--------+---------+
|  12345 |  1025.5 |
|  67890 |     140 |
+--------+---------+
2 rows in set (0.00 sec)
With this table created and prepopulated, you are ready to start using transactions.
Using BEGIN
Transactions in MySQL start with  either a BEGIN  or a START TRANSACTION  statement.
Type the commands in Example 9-3  to send a transaction to MySQL.
Example 9-3. A MySQL transaction
BEGIN;
UPDATE accounts SET balance=balance+25.11 WHERE number=12345;
COMMIT;
SELECT * FROM accounts;
The result of this transaction is displayed by the final line, and should look like this:
+--------+---------+
| number | balance |
+--------+---------+
|  12345 | 1050.61 |
|  67890 |     140 |
+--------+---------+
2 rows in set (0.00 sec)
224 | Chapter 9: Mastering MySQL

As you can see, the balance of account number 12345 was increased by 25.11 and is
now 1050.61. Y ou may also have noticed the COMMIT  command in Example 9-3 , which
is explained next.
Using COMMIT
When you are satisfied that a series of queries in a transaction has successfully com‐
pleted, issue a COMMIT  command to commit all the changes to the database. Until it
receives a COMMIT , MySQL considers all the changes you make to be merely tempo‐
rary. This feature gives you the opportunity to cancel a transaction by not sending a
COMMIT  but by issuing a ROLLBACK  command instead.
Using ROLLBACK
Using the ROLLBACK  command,  you can tell MySQL to forget all the queries made
since the start of a transaction and to end the transaction. See this in action by enter‐
ing the funds-transfer transaction in Example 9-4 .
Example 9-4. A funds transfer transaction
BEGIN;
UPDATE accounts SET balance=balance-250 WHERE number=12345;
UPDATE accounts SET balance=balance+250 WHERE number=67890;
SELECT * FROM accounts;
Once you have entered these lines, you should see the following result:
+--------+---------+
| number | balance |
+--------+---------+
|  12345 |  800.61 |
|  67890 |     390 |
+--------+---------+
2 rows in set (0.00 sec)
The first bank account now has a value that is 250 less than before, and the second
has been incremented by 250; you have transferred a value of 250 between them. But
let’s assume that something went wrong and you wish to undo this transaction. All
you have to do is issue the commands in Example 9-5 .
Example 9-5. Canceling a transaction using ROLLBACK
ROLLBACK;
SELECT * FROM accounts;
Transactions | 225

Y ou should now see the following output, showing that the two accounts have had
their previous balances restored, due to the entire transaction being cancelled via the
ROLLBACK  command:
+--------+---------+
| number | balance |
+--------+---------+
|  12345 | 1050.61 |
|  67890 |     140 |
+--------+---------+
2 rows in set (0.00 sec)
Using EXPLAIN
MySQL comes with a powerful tool for  investigating how the queries you issue to it
are interpreted. Using EXPLAIN , you can get a snapshot of any query to find out
whether you could issue it in a better or more efficient way. Example 9-6  shows how
to use it with the accounts table you created earlier.
Example 9-6. Using the EXPLAIN command
EXPLAIN SELECT * FROM accounts WHERE number='12345';
The results of this EXPLAIN  command should look like the following:
+--+-----------+--------+-----+-------------+-------+-------+-----+----+-----+
|id|select_type|table   |type |possible_keys|key    |key_len|ref  |rows|Extra|
+--+-----------+--------+-----+-------------+-------+-------+-----+----+-----+
| 1|SIMPLE     |accounts|const|PRIMARY      |PRIMARY|4      |const|   1|     |
+--+-----------+--------+-----+-------------+-------+-------+-----+----+-----+
1 row in set (0.00 sec)
The information that MySQL is giving you here is as follows:
select_type
The selection type is SIMPLE . If you were joining tables together, this would show the
join type.
table
The current table being queried is accounts .
type
The query type is const . From worst to best, the possible values can be ALL, index ,
range , ref, eq_ref, const , system , and NULL .
possible_keys
There is a possible PRIMARY  key, which means that accessing should be fast.
226 | Chapter 9: Mastering MySQL

key
The key actually used is PRIMARY . This is good.
key_len
The key length is 4. This is the number of bytes of the index that MySQL will use.
ref
The ref column displays which columns or constants are used with the key. In this
case, a constant key is being used.
rows
The number of rows that needs to be searched by this query is 1. This is good.
Whenever you have a query that seems to be taking longer than you think it should
to execute, try using EXPLAIN  to see where you can optimize it. Y ou will discover
which keys (if any) are being used, their lengths, and so on, and will be able to adjust
your query or the design of your table(s) accordingly.
When you have finished experimenting with the temporary
accounts  table, you may wish to remove it by entering the following
command:
DROP TABLE accounts;
Backing Up and Restoring
Whatever kind of data you are storing in your database, it must have some value to
you, even if it’s only the cost of the time required for reentering it should the hard
disk fail. Therefore, it’s important that you keep backups to protect your investment.
Also, there will be times when you have to migrate your database over to a new
server; the best way to do this is usually to back it up first. It is also important that
you test your backups from time to time to ensure that they are valid and will work if
they need to be used.
Thankfully, backing up and restoring MySQL data is easy with the mysqldump  com‐
mand.
Using mysqldump
With mysqldump , you can dump a database or collection of databases into one or
more files containing all the instructions necessary to re-create all your tables and
repopulate them with your data. It can also generate files in CSV (comma-separated
values)  and other delimited text formats, or even in XML format. Its main drawback
is that you must make sure that no one writes to a table while you’re backing it up.
There are various ways to do this, but the easiest is to shut down the MySQL server
before mysqldump  and start up the server again after mysqldump  finishes.
Backing Up and Restoring | 227

Or you can lock the tables you are backing up before running mysqldump . To lock
tables for reading (as we want to read the data), from the MySQL command line issue
this command:
LOCK TABLES tablename1 READ, tablename2  READ ...
Then, to release the lock(s), enter the following:
UNLOCK TABLES;
By default, the output from mysqldump  is simply printed out, but you can capture it in
a file through the > redirect symbol.
The basic format of the mysqldump  command is shown here:
mysqldump -u user -ppassword database
However, before you can dump the contents of a database, you must make sure that
mysqldump  is in your path, or that you specify its location as part of your command.
Table 9-13  shows the likely locations of the program for the different installations and
operating systems covered in Chapter 2 . If you have a different installation, it may be
in a slightly different location.
Table 9-13. Likely locations of mysqldump for different  installations
Operating system and program Likely folder location
Windows XAMPP C:\xampp\mysql\bin
OS X XAMPP /Applications/xampp/bin
Linux XAMPP /Applications/xampp/bin
So, to dump the contents of the publications  database that you created in Chapter 8  to
the screen, enter mysqldump  (or the full path if necessary) and the command in
Example 9-7 .
Example 9-7. Dumping the publications database to screen
mysqldump -u user -ppassword  publications
Make sure that you replace user  and password  with the correct details for your
installation of MySQL. If there is no password set for the user, you can omit that part
of the command, but the -u user  part is mandatory—unless you have root access
without a password and are executing as root (not recommended). The result of issu‐
ing this command will look something like Figure 9-4 .
228 | Chapter 9: Mastering MySQL

Figure 9-4. Dumping the publications database to screen
Creating a Backup File
Now that you have mysqldump  working, and have verified it outputs correctly to the
screen, you can send the backup data directly to a file using the > redirect symbol. 
Assuming that you wish to call the backup file publications.sql , type the command in
Example 9-8  (remembering to replace user  and password  with the correct details).
Example 9-8. Dumping the publications database to file
mysqldump -u user –p password  publications > publications.sql
The command in Example 9-8  stores the backup file into the cur‐
rent directory. If you need it to be saved elsewhere, you should
insert a file path before the filename. Y ou must also ensure that the
directory you are backing up to has the right permissions set to
allow the file to be written.
If you echo the backup file to screen or load it into a text editor, you will see that it
comprises sequences of SQL commands such as the following:
DROP TABLE IF EXISTS 'classics';
CREATE TABLE 'classics' (
  'author' varchar(128) default NULL,
  'title' varchar(128) default NULL,
  'category' varchar(16) default NULL,
  'year' smallint(6) default NULL,
  'isbn' char(13) NOT NULL default '',
  PRIMARY KEY  ('isbn'),
  KEY 'author' ('author'(20)),
  KEY 'title' ('title'(20)),
Backing Up and Restoring | 229

KEY 'category' ('category'(4)),
  KEY 'year' ('year'),
  FULLTEXT KEY 'author_2' ('author','title')
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
This is smart code that can be used to restore a database from a backup, even if it
currently exists, because it will first drop any tables that need to be re-created, thus
avoiding potential MySQL errors.
Backing up a single table
To back up only a single table from a database (such as the classics  table from the
publications  database), you should first lock the table from within the MySQL com‐
mand line, by issuing a command such as the following:
LOCK TABLES publications.classics READ;
This ensures that MySQL remains running for read purposes, but writes cannot be
made. Then, while keeping the MySQL command line open, use another terminal
window to issue the following command from the operating system command line:
mysqldump -u user -ppassword publications classics > classics.sql
Y ou must now release the table lock by entering the following command from the
MySQL command line in the first terminal window, which unlocks all tables that
have been locked during the current session:
UNLOCK TABLES;
Backing up all tables
If you want to back up all your MySQL databases at  once (including the system data‐
bases such as mysql ), you can use a command such as the one in Example 9-9 , which
would enable you to restore an entire MySQL database installation. Remember to use
locking where required.
Example 9-9. Dumping all the MySQL databases to file
mysqldump -u user -ppassword  --all-databases > all_databases.sql
Of course, there’s a lot more than just a few lines of SQL code in
backed-up database files. I recommend that you take a few minutes
to examine a couple in order to familiarize yourself with the types
of commands that appear in backup files and how they work.
230 | Chapter 9: Mastering MySQL

Restoring from a Backup File
To perform a restore  from a file, call the mysql  executable, passing it the file to restore
from using the < symbol. So, to recover an entire database that you dumped using the
--all-databases  option, use a command such as that in Example 9-10 .
Example 9-10. Restoring an entire set of databases
mysql -u user -ppassword  < all_databases.sql
To restore a single database, use the -D option followed by the name of the database,
as in Example 9-11 , where the publications  database is being restored from the backup
made in Example 9-8 .
Example 9-11. Restoring the publications database
mysql -u user -ppassword  -D publications < publications.sql
To restore a single table to a database, use a command such as that in Example 9-12 ,
where just the classics  table is being restored to the publications  database.
Example 9-12. Restoring the classics table to the publications database
mysql -u user -ppassword  -D publications < classics.sql
Dumping Data in CSV Format
As previously mentioned, the mysqldump  program is very flexible and supports vari‐
ous types of output, such as the CSV format. Example 9-13  shows how you can dump
the data from the classics  and customers  tables in the publications  database to the files
classics.txt  and customers.txt  in the folder c:/temp . On OS X or Linux systems, you
should modify the destination path to an existing folder.
Example 9-13. Dumping data to CSV format files
mysqldump -u user -ppassword  --no-create-info --tab=c:/temp
  --fields-terminated-by=',' publications
This command is quite long and is shown here wrapped over two lines, but you must
type it all as a single line. The result is the following:
Mark Twain (Samuel Langhorne Clemens)','The Adventures of Tom Sawyer',
 'Classic Fiction','1876','9781598184891
Jane Austen','Pride and Prejudice','Classic Fiction','1811','9780582506206
Charles Darwin','The Origin of Species','Non Fiction','1856','9780517123201
Charles Dickens','The Old Curiosity Shop','Classic Fiction','1841','9780099533474
William Shakespeare','Romeo and Juliet','Play','1594','9780192814968
Backing Up and Restoring | 231

Mary Smith','9780582506206
Jack Wilson','9780517123201
Planning Your Backups
The golden rule to backing up is to do so as often as you find practical. The more
valuable the data, the more often you should back it up, and the more copies you
should make. If your database gets updated at least once a day, you should really back
it up on a daily basis. If, on the other hand, it is not updated very often, you could
probably get by with backups less often.
Y ou should also consider making multiple backups and storing
them in different locations. If you have several servers, it is a simple
matter to copy your backups between them. Y ou would also be well
advised to make physical backups of removable hard disks, thumb
drives, CDs or DVDs, and so on, and to keep these in separate
locations—preferably somewhere like a fireproof safe.
Once you’ve digested the contents of this chapter, you will be proficient in using both
PHP and MySQL; the next chapter will show you how to bring these two technologies
together.
Questions
1.What does the word relationship  mean in reference to a relational database?
2.What is the term for the process of removing duplicate data and optimizing
tables?
3.What are the three rules of the First Normal Form?
4.How can you make a table satisfy the Second Normal Form?
5.What do you put in a column to tie together two tables that contain items having
a one-to-many relationship?
6.How can you create a database with a many-to-many relationship?
7.What commands initiate and end a MySQL transaction?
8.What feature does MySQL provide to enable you to examine how a query will
work in detail?
9.What command would you use to back up the database publications  to a file
called publications.sql ?
See Chapter 9 Answers  for the answers to these questions.
232 | Chapter 9: Mastering MySQL

CHAPTER 10
Accessing MySQL Using PHP
If you worked through the previous chapters, you’re proficient in using both MySQL
and PHP . In this chapter, you will learn how to integrate the two by using PHP’s built-
in functions to access MySQL.
Querying a MySQL Database with PHP
The reason for using PHP as an interface to MySQL is to format the results of SQL
queries in a form visible in a web page. As long as you can log into your MySQL
installation using your username and password, you can also do so from PHP .
However, instead of using MySQL ’s command line to enter instructions and view out‐
put, you will create query strings that are passed to MySQL. When MySQL returns its
response, it will come as a data structure that PHP can recognize instead of the for‐
matted output you see when you work on the command line. Further PHP com‐
mands can retrieve the data and format it for the web page.
In previous editions of the book, this chapter introduced the old
mysql  extension for accessing a MySQL database, before then mov‐
ing onto discussing the newer mysqli  extensions in the following
chapter. But time marches on, as they say, and by now there should
be very few legacy installations using the old code, so we’ll just go
straight in and look at how to use this newer extension—which is
pretty much standard everywhere nowadays.
The Process
The process of using MySQL with PHP is as follows:
1.Connect to MySQL and select the database to use.
233

2.Build a query string.
3.Perform the query.
4.Retrieve the results and output them to a web page.
5.Repeat steps 2 to 4 until all desired data has been retrieved.
6.Disconnect from MySQL.
We’ll work through these sections in turn, but first it’s important to set up your login
details in a secure manner so people snooping around on your system have trouble
getting access to your database.
Creating a Login File
Most websites developed with PHP contain multiple program files that will require
access to MySQL and will thus need the login and password details. Therefore, it’s
sensible to create a single file to store these and then include that file wherever it’s
needed. Example 10-1  shows such a file, which I’ve called login.php .
Example 10-1. The login.php file
<?php // login.php
  $hn = 'localhost';
  $db = 'publications';
  $un = ' username ';
  $pw = ' password ';
?>
Type the example, replacing username  and password  with the values you use for your
MySQL database, and save it to the document root directory you set up in Chapter 2 .
We’ll be making use of the file shortly.
The hostname localhost  should work as long as you’re using a MySQL database on
your local system, and the database publications  should work if you’re typing the
examples I’ve used so far.
The enclosing <?php  and ?> tags are especially important for the login.php  file in
Example 10-1 , because they mean that the lines between can be interpreted only as
PHP code. If you were to leave them out and someone were to call up the file directly
from your website, it would display as text and reveal your secrets. But, with the tags
in place, all that person will see is a blank page. The file will correctly include in your
other PHP files.
The $hn variable will tell PHP which computer to use when connecting to a database.
This is required, because you can access MySQL databases on any computer connec‐
ted to your PHP installation, and that potentially includes any host anywhere on the
234 | Chapter 10: Accessing MySQL Using PHP

Web. However, the examples in this chapter will be working on the local server. So, in
place of specifying a domain such as mysql.myserver.com , you can just use the word
localhost  (or the IP address 127.0.0.1).
The database we’ll be using, $db, is the one called publications , which we created in
Chapter 8  (or may have been provided to you by your server administrator—in which
case you have to modify login.php  accordingly).
Another benefit of keeping these login details in a single place is
that you can change your password as frequently as you like and
there will be only one file to update when you do, no matter how
many PHP files access MySQL.
Connecting to a MySQL Database
Now that you have the login.php  file saved, you can include it in any PHP files that
will need to access the database by  using the require_once  statement. This is prefera‐
ble to an include  statement, as it will generate a fatal error if the file is not found.
And believe me, not finding the file containing the login details to your database is a
fatal error.
Also, using require_once  instead of require  means  that the file will be read in only
when it has not previously been included, which prevents wasteful duplicate disk
accesses. Example 10-2  shows the code to use.
Example 10-2. Connecting to a MySQL server with mysqli
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
?>
This example creates a new object called $conn  by calling a new instance of the
mysqli  method, passing all the values retrieved from the login.php  file. Error check‐
ing is achieved by referencing the $conn->connect_error  property.
The -> operator indicates that the item on the right is a property or method of the
object on the left. In this case, if connect_error  has a value, then there was an error,
so we call the die function  and display that property, which details the connection
error.
The $conn  object is used in the following examples to access the MySQL database.
Querying a MySQL Database with PHP | 235

The die function is great for when you are developing PHP code,
but of course you will want more user-friendly error messages on a
production server. In this case, you won’t abort your PHP program,
but format a message that will be displayed when the program exits
normally, perhaps something like this:
function mysql_fatal_error($msg)
{
    $msg2 = mysql_error();
    echo <<< _END
We are sorry, but it was not possible to complete
the requested task. The error message we got was:
    <p>$msg: $msg2</p>
Please click the back button on your browser
and try again. If you are still having problems,
please <a href="mailto:admin@server.com">email
our administrator</a>. Thank you.
_END;
}
Building and executing a query
Sending a query to MySQL from PHP is as simple as issuing  it using the query
method of a connection object. Example 10-3  shows you how to use it.
Example 10-3. Querying a database with mysqli
<?php
  $query  = "SELECT * FROM classics";
  $result = $conn->query($query);
  if (!$result) die($conn->error);
?>
Here the variable $query  is assigned a string containing the query to be made, and
then passed to the query  method of the $conn  object, which returns a result that we
place in the object $result . If $result  is FALSE , there was a problem and the error
property of the connection object will contain the details, so the die function is called
to display that error.
All the data returned by MySQL is now stored in an easily interrogatable format in
the $result  object.
236 | Chapter 10: Accessing MySQL Using PHP

Fetching a result
Once you have an object returned in $result , you can use it to extract the data you
want, one item at a time, using the fetch_assoc  method of the object. Example 10-4
combines and extends the previous examples into a program that you can type and
run yourself to retrieve these results (as depicted in Figure 10-1 ). I suggest that you
save this script using the filename query.php  (or use the file saved in the free archive
of files available at lpmj.net ).
Example 10-4. Fetching results one cell at a time
<?php // query.php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = "SELECT * FROM classics";
  $result = $conn->query($query);
  if (!$result) die($conn->error);
  $rows = $result->num_rows;
  for ($j = 0 ; $j < $rows ; ++$j)
  {
    $result->data_seek($j);
    echo 'Author: '   . $result->fetch_assoc()['author']   . '<br>';
    $result->data_seek($j);
    echo 'Title: '    . $result->fetch_assoc()['title']    . '<br>';
    $result->data_seek($j);
    echo 'Category: ' . $result->fetch_assoc()['category'] . '<br>';
    $result->data_seek($j);
    echo 'Year: '     . $result->fetch_assoc()['year']     . '<br>';
    $result->data_seek($j);
    echo 'ISBN: '     . $result->fetch_assoc()['isbn']     . '<br><br>';
  }
  $result->close();
  $conn->close();
?>
Querying a MySQL Database with PHP | 237

Figure 10-1. The output from the query.php program in Example 10-4
Here, to seek to the correct row each time around the loop, we call the data_seek
method of $result  before fetching each item of data. Then we call the fetch_assoc
method to retrieve the value stored in each cell, and output the result using echo
statements.
Y ou will probably agree that all this data seeking is rather cumbersome and that there
ought to be a more efficient method of achieving the same result. And, indeed, there
is a better method, which is to extract a row at a time.
In Chapter 9 , I talked about First, Second, and Third Normal Form,
so you may have now noticed that the classics  table doesn’t satisfy
these, because both author and book details are included within the
same table. That’s because we created this table before encountering
normalization. However, for the purposes of illustrating access to
MySQL from PHP , reusing this table avoids the hassle of typing in a
new set of test data, so we’ll stick with it for the time being.
238 | Chapter 10: Accessing MySQL Using PHP

Fetching a row
To fetch one row at a time, replace the for loop  from Example 10-4  with  the one
highlighted in bold in Example 10-5 , and you will find that you get exactly the same
result that was displayed in Figure 10-1 . Y ou may wish to save this revised file using
the name fetchrow.php .
Example 10-5. Fetching results one row at a time
<?php //fetchrow.php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = "SELECT * FROM classics";
  $result = $conn->query($query);
  if (!$result) die($conn->error);
  $rows = $result->num_rows;
  for ($j = 0 ; $j < $rows ; ++$j)
  {
    $result->data_seek($j);
    $row = $result->fetch_array(MYSQLI_ASSOC);
    echo 'Author: '   . $row['author']   . '<br>';
    echo 'Title: '    . $row['title']    . '<br>';
    echo 'Category: ' . $row['category'] . '<br>';
    echo 'Year: '     . $row['year']     . '<br>';
    echo 'ISBN: '     . $row['isbn']     . '<br><br>';
  }
  $result->close();
  $conn->close();
?>
In this modified code, only one-fifth of the interrogations of the $result  object are
made (compared to the previous example), and only one seek into the object is made
in each iteration of the loop, because each row is fetched in its entirety via the
fetch_array  method. This returns a single row of data as an array, which is then
assigned to the array $row .
The fetch_array  method can return three types of array according to the value
passed to it:
MYSQLI_NUM
Numeric array. Each column appears in the array in the order in which you defined it
when you created (or altered) the table. In our case, the zeroth element of the array
contains the Author column, element 1 contains the Title, and so on.
Querying a MySQL Database with PHP | 239

MYSQLI_ASSOC
Associative array. Each key is the name of a column. Because items of data are refer‐
enced by column name (rather than index number), use this option where possible in
your code to make debugging easier and help other programmers better manage
your code.
MYSQLI_BOTH
Associative and numeric array.
Associative arrays are usually more useful than numeric ones because you can refer to
each column by name, such as $row['author'] , instead of trying to remember where
it is in the column order. So this script uses an associative array, leading us to pass
MYSQLI_ASSOC .
Closing a connection
PHP will eventually return the memory it has allocated for objects after you have fin‐
ished with the script, so in small scripts, you don’t usually need to worry about releas‐
ing memory yourself. However, if you’re allocating a lot of result objects or fetching
large amounts of data, it can be a good idea to free the memory you have been using
to prevent problems later in your script.
This becomes particularly important on higher-traffic pages, because the amount of
memory consumed in a session can rapidly grow. Therefore, note the calls to the
close  methods of the objects $result  and $conn  in the preceding scripts, as soon as
each object is no longer needed, like this:
$result->close();
$conn->close();
Ideally, you should close each result object when you have finished
using it, and then close the connection object when your script will
not be accessing MySQL anymore. This best practice ensures that
resources are returned to the system as quickly as possible to keep
MySQL running optimally, and alleviates doubt over whether PHP
will return unused memory in time for when you next need it.
A Practical Example
It’s time to write our first example of inserting  data in and deleting it from a MySQL
table using PHP . I recommend that you type Example 10-6  and save it to your web
development directory using the filename sqltest.php . Y ou can see an example of the
program’s output in Figure 10-2 .
240 | Chapter 10: Accessing MySQL Using PHP

Example 10-6  creates a standard HTML form. Chapter 11  explains
forms in detail, but in this chapter I take form handling for granted
and just deal with database interaction.
Example 10-6. Inserting and deleting using sqltest.php
<?php // sqltest.php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  if (isset($_POST['delete']) && isset($_POST['isbn']))
  {
    $isbn   = get_post($conn, 'isbn');
    $query  = "DELETE FROM classics WHERE isbn='$isbn'";
    $result = $conn->query($query);
    if (!$result) echo "DELETE failed: $query<br>" .
      $conn->error . "<br><br>";
  }
  if (isset($_POST['author'])   &&
      isset($_POST['title'])    &&
      isset($_POST['category']) &&
      isset($_POST['year'])     &&
      isset($_POST['isbn']))
  {
    $author   = get_post($conn, 'author');
    $title    = get_post($conn, 'title');
    $category = get_post($conn, 'category');
    $year     = get_post($conn, 'year');
    $isbn     = get_post($conn, 'isbn');
    $query    = "INSERT INTO classics VALUES" .
      "('$author', '$title', '$category', '$year', '$isbn')";
    $result   = $conn->query($query);
    if (!$result) echo "INSERT failed: $query<br>" .
      $conn->error . "<br><br>";
  }
  echo <<<_END
  <form action="sqltest.php" method="post"><pre>
    Author <input type="text" name="author">
     Title <input type="text" name="title">
  Category <input type="text" name="category">
      Year <input type="text" name="year">
      ISBN <input type="text" name="isbn">
           <input type="submit" value="ADD RECORD">
  </pre></form>
_END;
  $query  = "SELECT * FROM classics";
A Practical Example | 241

$result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
  $rows = $result->num_rows;
  for ($j = 0 ; $j < $rows ; ++$j)
  {
    $result->data_seek($j);
    $row = $result->fetch_array(MYSQLI_NUM);
    echo <<<_END
  <pre>
    Author $row[0]
     Title $row[1]
  Category $row[2]
      Year $row[3]
      ISBN $row[4]
  </pre>
  <form action="sqltest.php" method="post">
  <input type="hidden" name="delete" value="yes">
  <input type="hidden" name="isbn" value="$row[4]">
  <input type="submit" value="DELETE RECORD"></form>
_END;
  }
  $result->close();
  $conn->close();
  function get_post($conn, $var)
  {
    return $conn->real_escape_string($_POST[$var]);
  }
?>
242 | Chapter 10: Accessing MySQL Using PHP

Figure 10-2. The output from Example 10-6 , sqltest.php
At over 80 lines of code, this program may appear daunting, but don’t worry—you’ve
already covered many of them in Example 10-5 , and what the code does is actually
quite simple.
It first checks for any inputs that may have been made and then either inserts new
data into the table classics  of the publications  database or deletes a row from it,
according to the input supplied. Regardless of whether there was input, the program
then outputs all rows in the table to the browser. So let’s see how it works.
The first section of new code starts by using the isset  function to check whether val‐
ues for all the fields have been posted to the program. Upon confirmation, each line
within the if statement calls the function get_post , which appears at the end of the
program. This function has one small but critical job: fetching input from the
browser.
The $_POST Array
I mentioned in an earlier chapter that a browser sends user input through either a Get
request or a Post request. The Post request is usually preferred (because it avoids
placing unsightly data in the browser’s address bar), and so we use it here. The web
A Practical Example | 243

server bundles up all of the user input (even if the form was filled out with a hundred
fields) and puts in into an array named $_POST .
$_POST  is an associative array, which you encountered in Chapter 6 . Depending on
whether a form has been set to use the Post or the Get method, either the $_POST  or
the $_GET  associative array will be populated with the form data. They can both be
read in exactly the same way.
Each field has an element in the array named after that field. So, if a form contained a
field named isbn , the $_POST  array contains an element keyed by the word isbn . The
PHP program can read that field by referring to either $_POST['isbn']  or
$_POST["isbn"]  (single and double quotes have the same effect in this case).
If the $_POST  syntax still seems complex to you, rest assured that you can just use the
convention I’ve shown in Example 10-6 , copy the user’s input to other variables, and
forget about $_POST  after that. This is normal in PHP programs: they retrieve all the
fields from $_POST  at the beginning of the program and then ignore it.
There is no reason to write to an element in the $_POST  array. Its
only purpose is to communicate information from the browser to
the program, and you’re better off copying data to your own vari‐
ables before altering it.
So, back to the get_post  function, which passes each item it retrieves through the
real_escape_string  method of the connection object to strip out any characters that
a hacker may have inserted in order to break into or alter your database, like this:
function get_post($conn, $var)
{
  return $conn->real_escape_string($_POST[$var]);
}
Deleting a Record
Prior to checking whether new data has been  posted, the program checks whether the
variable $_POST['delete']  has a value. If so, the user has clicked the DELETE
RECORD button to erase a record. In this case, the value of $isbn  will also have been
posted.
As you’ll recall, the ISBN uniquely identifies each record. The HTML form appends
the ISBN to the DELETE FROM  query string created in the variable $query , which is
then passed to the query  method of the $conn  object to issue it to MySQL.
If $_POST['delete'])  is not set (and so there is no record to be deleted),
$_POST['author'])  and other posted values are checked. If they have all been given
244 | Chapter 10: Accessing MySQL Using PHP

values, then $query  is set to an INSERT INTO  command, followed by the five values to
be inserted. The string is then passed to the query  method, which upon completion
returns either TRUE  or FALSE . If FALSE  is returned, the error message held in the error
property of the $conn  object is displayed, like this:
if (!$result) echo "INSERT failed: $query<br>" .
  $conn->error . "<br><br>";
Displaying the Form
Next we get to the part of code that displays the little form at the top of Figure 10-2 .
Y ou should recall the echo <<<_END ..._END  structure from  previous chapters, which
outputs everything between the _END  tags.
Instead of the echo  command, the program could also drop out of
PHP using ?>, issue the HTML, and then reenter PHP processing
with <?php . Whichever style used is a matter of programmer pref‐
erence, but I always recommend staying within PHP code for these
reasons:
•It makes it very clear when debugging (and also for other
users) that everything within a .php file is PHP code. There‐
fore, there is no need to go hunting for dropouts to HTML.
•When you wish to include a PHP variable directly within
HTML, you can just type it. If you had dropped back to
HTML, you would have had to temporarily reenter PHP pro‐
cessing, access the variable, and then drop back out again.
The HTML form section simply sets the form’s action to sqltest.php . This means that
when the form is submitted, the contents of the form fields will be sent to the file
sqltest.php , which is the program itself. The form is also set up to send the fields as a
Post rather than a Get request. This is because Get requests are appended to the URL
being submitted to and can look messy in your browser. They also allow users to
easily modify submissions and try to hack your server. Therefore, whenever possible,
you should use Post submissions, which also have the benefit of hiding the posted
data from view.
Having output the form fields, the HTML displays a Submit button with the name
ADD RECORD and closes the form. Note the <pre>  and </pre>  tags here, which
have been used to force a monospaced font and allow all the inputs to line up neatly.
The carriage returns at the end of each line are also output when inside <pre>  tags.
A Practical Example | 245

Querying the Database
Next, the code returns to the familiar  territory of Example 10-5 , where a query is sent
to MySQL asking to see all the records in the classics  table, like this:
$query  = "SELECT * FROM classics";
$result = $conn->query($query);
After that, $rows  is set to a value representing the number of rows in the table:
$rows = $result->num_rows;
Using the value in $rows , a for loop is then entered to display the contents of each
row. Within each iteration of the loop, the data_seek  method of the $result  object is
called to seek to the relevant items of data we’re interested in, like this:
$result->data_seek($j);
Then the array $row  is populated with a row of results by calling the fetch_array
method of $result , passing it the constant value MYSQLI_NUM , which forces the return
of a numeric (rather than associative) array, like this:
$row = $result->fetch_array(MYSQLI_NUM);
With the data in $row , it’s now a simple matter to display it within the heredoc echo
statement that follows in which I have chosen to use a <pre>  tag to line up the display
of each record in a pleasing manner.
After the display of each record, there is a second form that also posts to sqltest.php
(the program itself) but this time contains two hidden fields: delete  and isbn . The
delete  field is set to yes and isbn  to the value held in $row[4] , which contains the
ISBN for the record.
Then a Submit button with the name DELETE RECORD is displayed, and the form is
closed. A curly brace then completes the for loop, which will continue until all
records have been displayed, at which time the $result  and $conn  object’s close
methods are closed to release resources back to PHP:
$result->close();
$conn->close();
Finally, you see the definition for the function get_post , which we’ve already looked
at. And that’s it—our first PHP program to manipulate a MySQL database. So, let’s
check out what it can do.
Once you have typed the program (and corrected any typing errors), try entering the
following data into the various input fields to add a new record for the book Moby
Dick  to the database:
246 | Chapter 10: Accessing MySQL Using PHP

Herman Melville
Moby Dick
Fiction
1851
9780199535729
Running the Program
When you have submitted this data using the ADD RECORD button, scroll down to
the bottom of the web page to see the new addition. It should look like Figure 10-3 .
Figure 10-3. The result of adding Moby Dick to the database
Now let’s look at how deleting a record works by creating a dummy record. So try
entering just the number 1 in each of the five fields and click the ADD RECORD but‐
ton. If you now scroll down, you’ll see a new record consisting just of 1s. Obviously,
this record isn’t useful in this table, so now click the DELETE RECORD button and
scroll down again to confirm that the record has been deleted.
A Practical Example | 247

Assuming that everything worked, you are now able to add and
delete records at will. Try doing this a few times, but leave the main
records in place (including the new one for Moby Dick ), as we’ll be
using them later. Y ou could also try adding the record with all 1s
again a couple of times and note the error message that you receive
the second time, indicating that there is already an ISBN with the
number 1.
Practical MySQL
Y ou are now ready to look at some practical  techniques that you can use in PHP to
access the MySQL database, including tasks such as creating and dropping tables;
inserting, updating, and deleting data; and protecting your database and website from
malicious users. Note that the following examples assume that you’ve already created
the login.php  program discussed earlier in this chapter.
Creating a Table
Let’s assume that you are working for a wildlife park and need to create a database to
hold details about all the types of cats it houses. Y ou are told that there are nine fami‐
lies of cats—Lion, Tiger, Jaguar, Leopard, Cougar, Cheetah, Lynx, Caracal, and
Domestic—so you’ll need a column for that. Then each cat has been given a name , so
that’s another column, and you also want to keep track of their ages, which is another.
Of course, you will probably need more columns later, perhaps to hold dietary
requirements, inoculations, and other details, but for now that’s enough to get going.
A unique identifier is also needed for each animal, so you also decide to create a col‐
umn for that called id.
Example 10-7  shows the code you might use to create a MySQL table to hold this
data, with the main query assignment in bold text.
Example 10-7. Creating a table called cats
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query = "CREATE TABLE cats (
    id SMALLINT NOT NULL AUTO_INCREMENT,
    family VARCHAR(32) NOT NULL,
    name VARCHAR(32) NOT NULL,
    age TINYINT NOT NULL,
    PRIMARY KEY (id)
  )";
248 | Chapter 10: Accessing MySQL Using PHP

$result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
?>
As you can see, the MySQL query looks pretty similar to how you would type it
directly in the command line, except that there is no trailing semicolon, as none is
needed when you are accessing MySQL from PHP .
Describing a Table
When you aren’t logged into the MySQL command line, here’s a  handy piece of code
that you can use to verify that a table has been correctly created from inside a
browser.  It simply issues the query DESCRIBE cats  and then outputs an HTML table
with four headings— Column , Type , Null, and Key—underneath which all columns
within the table are shown. To use it with other tables, simply replace the name cats
in the query with that of the new table (see Example 10-8 ).
Example 10-8. Describing the table cats
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = " DESCRIBE cats ";
  $result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
  $rows = $result->num_rows;
  echo "<table><tr><th>Column</th><th>Type</th><th>Null</th><th>Key</th></tr>";
  for ($j = 0 ; $j < $rows ; ++$j)
  {
    $result->data_seek($j);
    $row = $result->fetch_array(MYSQLI_NUM);
    echo "<tr>";
    for ($k = 0 ; $k < 4 ; ++$k) echo "<td>$row[$k]</td>";
    echo "</tr>";
  }
  echo "</table>";
?>
The output from the program should look like this:
Column Type        Null Key
id     smallint(6) NO   PRI
family varchar(32) NO
Practical MySQL | 249

name   varchar(32) NO
age    tinyint(4)  NO
Dropping a Table
Dropping a table is very easy to do and is therefore very dangerous, so be careful.
Example 10-9  shows the code that you need. However, I don’t recommend that you
try it until you have been through the other examples, as it will drop the table cats
and you’ll have to re-create it using Example 10-7 .
Example 10-9. Dropping the table cats
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = " DROP TABLE cats ";
  $result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
?>
Adding Data
Let’s add some data to the table by using the code in Example 10-10 .
Example 10-10. Adding data to table cats
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = " INSERT INTO cats VALUES(NULL, 'Lion', 'Leo', 4) ";
  $result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
?>
Y ou may wish to add a couple more items of data by modifying $query  as follows and
calling up the program in your browser again:
$query = "INSERT INTO cats VALUES(NULL, 'Cougar', 'Growler', 2)";
$query = "INSERT INTO cats VALUES(NULL, 'Cheetah', 'Charly', 3)";
By the way, notice the NULL  value passed as the first parameter? This is because the id
column is of type AUTO_INCREMENT , and MySQL will decide what value to assign
according to the next available number in sequence, so we simply pass a NULL  value,
which will be ignored.
250 | Chapter 10: Accessing MySQL Using PHP

Of course, the most efficient way to populate MySQL with data is to create an array
and insert the data with a single query.
Retrieving Data
Now that some data has been entered into the cats table, Example 10-11  shows how
you can check that it was correctly inserted.
Example 10-11. Retrieving rows from the cats table
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = " SELECT * FROM cats ";
  $result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
  $rows = $result->num_rows;
  echo "<table><tr> <th>Id</th> <th>Family</th><th>Name</th><th>Age</th></tr>";
  for ($j = 0 ; $j < $rows ; ++$j)
  {
    $result->data_seek($j);
    $row = $result->fetch_array(MYSQLI_NUM);
    echo "<tr>";
    for ($k = 0 ; $k < 4 ; ++$k) echo "<td>$row[$k]</td>";
    echo "</tr>";
  }
  echo "</table>";
?>
This code simply issues the MySQL query SELECT * FROM cats  and then displays all
the rows returned. Its output is as follows:
Id Family  Name    Age
1  Lion    Leo     4
2  Cougar  Growler 2
3  Cheetah Charly  3
Here you can see that the id column has correctly auto-incremented.
Updating Data
Changing data that you have already  inserted is also quite simple.  Did you notice the
spelling of Charly  for the cheetah’s name? Let’s correct that to Charlie , as in
Example 10-12 .
Practical MySQL | 251

Example 10-12. Renaming Charly the cheetah to Charlie
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = " UPDATE cats SET name='Charlie' WHERE name='Charly' ";
  $result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
?>
If you run Example 10-11  again, you’ll see that it now outputs the following:
Id Family  Name    Age
1  Lion    Leo     4
2  Cougar  Growler 2
3  Cheetah Charlie 3
Deleting Data
Growler the cougar has been transferred to another  zoo, so it’s time to remove him
from the database; see Example 10-13 .
Example 10-13. Removing Growler the cougar from the cats table
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = " DELETE FROM cats WHERE name='Growler' ";
  $result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
?>
This uses a standard DELETE FROM  query, and when you run Example 10-11 , you can
see that the row has been removed in the following output:
Id Family  Name    Age
1  Lion    Leo     4
3  Cheetah Charlie 3
Using AUTO_INCREMENT
When using AUTO_INCREMENT , you cannot know what value has been given to a col‐
umn before a row is inserted. Instead, if you need to know it, you must ask MySQL
afterward using the mysql_insert_id  function. This need is common: for instance,
when you process a purchase, you might insert a new customer into a Customers  table
252 | Chapter 10: Accessing MySQL Using PHP

and then refer to the newly created CustId  when inserting a purchase into the pur‐
chase table.
Example 10-10  can be rewritten as Example 10-14  to display this value after each
insert.
Example 10-14. Adding data to table cats and reporting the insertion id
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = " INSERT INTO cats VALUES(NULL, 'Lynx', 'Stumpy', 5) ";
  $result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
  echo "The Insert ID was: " . $result->insert_id;
?>
The contents of the table should now look like the following (note how the previous
id value of 2 is not reused, as this could cause complications in some instances):
Id Family  Name    Age
1  Lion    Leo     4
3  Cheetah Charlie 3
4  Lynx    Stumpy  5
Using insert IDs
It’s very common to insert data in multiple tables: a book followed by its author, or a
customer followed by his purchase, and so on. When doing this with an auto-
increment column, you will need to retain the insert ID returned for storing in the
related table.
For example, let’s assume that these cats can be “adopted” by the public as a means of
raising funds, and that when a new cat is stored in the cats table, we also want to cre‐
ate a key to tie it to the animal’s adoptive owner. The code to do this is similar to that
in Example 10-14 , except that the returned insert ID is stored in the variable $inser
tID, and is then used as part of the subsequent query:
$query    = "INSERT INTO cats VALUES(NULL, 'Lynx', 'Stumpy', 5)";
$result   = $conn->query($query);
$insertID  = $result->insert_id;
$query    = "INSERT INTO owners VALUES( $insertID , 'Ann', 'Smith')";
$result   = $conn->query($query);
Now the cat is connected to its “owner” through the cat’s unique ID, which was cre‐
ated automatically by AUTO_INCREMENT .
Practical MySQL | 253

Using locks
A completely safe procedure for linking tables through the insert ID is to use locks
(or transactions, as described in Chapter 9 ). It can slow down response time a bit
when there are many people submitting data to the same table, but it can also be
worth it. The sequence is as follows:
1.Lock the first table (e.g., cats).
2.Insert data into the first table.
3.Retrieve the unique ID from the first table (the insert_id  property).
4.Unlock the first table.
5.Insert data into the second table.
Y ou can safely release the lock before inserting data into the second table, because the
insert ID has been retrieved and is stored in a program variable. Y ou could also use a
transaction instead of locking, but that slows down the MySQL server even more.
Performing Additional Queries
Okay, that’s enough feline fun. To explore some slightly more complex queries, we
need to revert to using the customers  and classics  tables that you created in Chapter 8 .
There will be two customers in the customers  table; the classics  table holds the details
of a few books. They also share a common column of ISBNs, called isbn, that we can
use to perform additional queries.
For example, to display all of the customers along with the titles and authors of the
books they have bought, you can use the code in Example 10-15 .
Example 10-15. Performing a secondary query
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $query  = " SELECT * FROM customers ";
  $result = $conn->query($query);
  if (!$result) die ("Database access failed: " . $conn->error);
  $rows = $result->num_rows;
  for ($j = 0 ; $j < $rows ; ++$j)
  {
    $result->data_seek($j);
    $row = $result->fetch_array(MYSQLI_NUM);
    echo "$row[0] purchased ISBN $row[1]:<br>";
254 | Chapter 10: Accessing MySQL Using PHP

$subquery  = "SELECT * FROM classics WHERE isbn=' $row[1]'";
    $subresult = $conn->query($query);
    if (!$subresult) die ("Database access failed: " . $conn->error);
    $subrow = $subresult->fetch_array(MYSQLI_NUM);
    echo "  '$subrow[1]' by $subrow[0]<br>";
  }
?>
This program uses an initial query to the customers  table to look up all the customers
and then, given the ISBN of the book each customer purchased, makes a new query
to the classics  table to find out the title and author for each. The output from this code
should be as follows:
Mary Smith purchased ISBN 9780582506206:
  'Pride and Prejudice' by Jane Austen
Jack Wilson purchased ISBN 9780517123201:
  'The Origin of Species' by Charles Darwin
Of course, although it wouldn’t illustrate performing additional
queries, in this particular case you could also return the same
information using a NATURAL JOIN  query (see Chapter 8 ), like this:
SELECT name,isbn,title,author FROM customers
 NATURAL JOIN classics;
Preventing Hacking Attempts
If you haven’t looked into it, you may find it hard to appreciate just how dangerous it
is to pass user input unchecked to MySQL. For example, suppose you have a simple
piece of code to verify a user, and it looks like this:
$user  = $_POST['user'];
$pass  = $_POST['pass'];
$query = "SELECT * FROM users WHERE user='$user' AND pass='$pass'";
At first glance, you might think this code is perfectly fine. If the user enters values of
fredsmith  and mypass  for $user  and $pass , respectively, then the query string, as
passed to MySQL, will be as follows:
SELECT * FROM users WHERE user='fredsmith' AND pass='mypass'
This is all well and good, but what if someone enters the following for $user  (and
doesn’t even enter anything for $pass )?
admin' #
Let’s look at the string that would be sent to MySQL:
SELECT * FROM users WHERE user='admin' #' AND pass=''
Preventing Hacking Attempts | 255

Do you see the problem there? In MySQL, the # symbol represents the start of a com‐
ment. Therefore, the user will be logged in as admin  (assuming there is a user admin ),
without having to enter a password. In the following, the part of the query that will be
executed is shown in bold; the rest will be ignored.
SELECT * FROM users WHERE user='admin' # ' AND pass=''
But you should count yourself very lucky if that’s all a malicious user does to you. At
least you might still be able to go into your application and undo any changes the user
makes as admin . But what about the case in which your application code removes a
user from the database? The code might look something like this:
$user  = $_POST['user'];
$pass  = $_POST['pass'];
$query = "DELETE FROM users WHERE user='$user' AND pass='$pass'";
Again, this looks quite normal at first glance, but what if someone entered the follow‐
ing for $user ?
anything' OR 1=1 #
This would be interpreted by MySQL as follows:
DELETE FROM users WHERE user='anything' OR 1=1 # ' AND pass=''
Ouch—that SQL query will always be TRUE , and therefore you’ve lost your whole
users  database! So what can you do about this kind of attack?
Steps You Can Take
The first thing is not to rely on PHP’s built-in magic quotes , which  automatically
escape any characters such as single and double quotes by prefacing them with a
backslash ( \). Why? Because this feature can be turned off; many programmers do so
in order to put their own security code in place. So there is no guarantee that this
hasn’t happened on the server you are working on. In fact, the feature was deprecated
as of PHP 5.3.0 and has been removed in PHP 6.0.0.
Instead, you should always use the real_escape_string  method for all calls to
MySQL. Example 10-16  is a function you can use that will remove any magic quotes
added to a user-inputted string and then properly sanitize it for you.
Example 10-16. How to properly sanitize user input for MySQL
<?php
  function mysql_fix_string($conn, $string)
  {
    if (get_magic_quotes_gpc()) $string = stripslashes($string);
    return $conn->real_escape_string($string);
  }
?>
256 | Chapter 10: Accessing MySQL Using PHP

The get_magic_quotes_gpc  function returns TRUE  if magic quotes are active. In that
case, any slashes that have been added to a string have to be removed, or the
real_escape_string  method could end up double-escaping some characters, creat‐
ing corrupted strings. Example 10-17  illustrates how you would incorporate
mysql_fix_string  within your own code.
Example 10-17. How to safely access MySQL with user input
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $user  = mysql_fix_string($conn, $_POST['user']);
  $pass  = mysql_fix_string($conn, $_POST['pass']);
  $query = "SELECT * FROM users WHERE user='$user' AND pass='$pass'";
  // Etc...
  function mysql_fix_string($conn, $string)
  {
    if (get_magic_quotes_gpc()) $string = stripslashes($string);
    return $conn->real_escape_string($string);
  }
?>
These precautions are becoming less important, however, because
there’s a much easier and safer way to access MySQL, which obvi‐
ates the need for these types of functions, and that’s the use of pla‐
ceholders—explained next.
Using Placeholders
Prepared statements with placeholders  provide a method by which only data is trans‐
ferred to the database, without the possibility of user-submitted (or other) data being
interpreted as MySQL statements (and the potential for hacking that could then
result).
It works by requiring you to first prepare the statement you wish to be executed in
MySQL, but leave all the parts of the statement that refer to data as simple question
marks.
In plain MySQL, prepared statements look like Example 10-18 .
Preventing Hacking Attempts | 257

Example 10-18. MySQL placeholders
PREPARE statement FROM "INSERT INTO classics VALUES(?,?,?,?,?)";
SET @author   = "Emily Brontë",
    @title    = "Wuthering Heights",
    @category = "Classic Fiction",
    @year     = "1847",
    @isbn     = "9780553212587";
EXECUTE statement USING @author,@title,@category,@year,@isbn;
DEALLOCATE PREPARE statement;
This can be cumbersome to submit to MySQL, so the mysqli extension makes han‐
dling placeholders easier for you with a ready-made method called prepare , which
you call like this:
$stmt = $conn->prepare('INSERT INTO classics VALUES(?,?,?,?,?)');
The object $stmt  (or whatever you choose to name it) returned by this method is
then used for sending the data to the server in place of the question marks. It’s first
use is to bind some PHP variables to each of the question marks (the placeholder
parameters) in turn, like this:
$stmt->bind_param('sssss', $author, $title, $category, $year, $isbn);
The first argument to bind_param  is a string representing the type of each of the
arguments in turn. In this case, it comprises five s characters, representing strings,
but any combination of types can be specified here, out of the following:
i The data is an integer.
d The data is a double.
s The data is a string.
b The data is a BLOB (and will be sent in packets).
With the variables bound to the prepared statement, it is now necessary to populate
these variables with the data to be passed to MySQL, like this:
$author   = 'Emily Brontë';
$title    = 'Wuthering Heights';
$category = 'Classic Fiction';
$year     = '1847';
$isbn     = '9780553212587';
At this point, PHP now has everything it needs in order to execute the prepared state‐
ment, so we issue the following command, which calls the execute  method of the
$stmt  object earlier created:
$stmt->execute();
258 | Chapter 10: Accessing MySQL Using PHP

Before going any further, it makes sense to next check whether the command was
executed successfully, so here’s how you can do that by checking the affected_rows
property of $statement :
printf("%d Row inserted.\n", $stmt->affected_rows);
In the preceding example, there should be notification of one row inserted.
Once you are happy that the statement executed successfully (or you have otherwise
dealt with any errors), you can close the $stmt  object, like this:
$stmt->close();
And finally, close the $conn  object (assuming you have finished with it too), like this:
$conn->close();
When you put all this together, the result is Example 10-19 .
Example 10-19. Issuing prepared statements
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $stmt = $conn->prepare('INSERT INTO classics VALUES(?,?,?,?,?)');
  $stmt->bind_param('sssss', $author, $title, $category, $year, $isbn);
  $author   = 'Emily Brontë';
  $title    = 'Wuthering Heights';
  $category = 'Classic Fiction';
  $year     = '1847';
  $isbn     = '9780553212587';
  $stmt->execute();
  printf("%d Row inserted.\n", $stmt->affected_rows);
  $stmt->close();
  $conn->close();
?>
Every time you are able to use prepared statements in place of nonprepared, you will
be closing a potential security hole, so it’s worth spending the time getting to know
how to use them.
Preventing HTML Injection
There’s another type of injection you need to concern yourself about—not for the
safety of your own websites, but for your users’ privacy and protection. That’s cross-
site scripting , also referred to as XSS.
Preventing Hacking Attempts | 259

This occurs when you allow HTML, or more often JavaScript code, to be input by a
user and then displayed back by your website. One place this is common is in a com‐
ment form. What happens most often is that a malicious user will try to write code
that steals cookies from your site’s users, allowing him or her to discover username
and password pairs or other information. Even worse, the malicious user might
launch an attack to download a Trojan onto a user’s computer.
But preventing this is as simple as calling the htmlentities  function, which strips
out all HTML markup codes and replaces them with a form that displays the charac‐
ters, but does not allow a browser to act on them. For example, consider this HTML:
<script src='http://x.com/hack.js'>
</script><script>hack();</script>
This code loads in a JavaScript program and then executes malicious functions. But if
it is first passed through htmlentities , it will be turned into the following totally
harmless string:
&lt;script src='http://x.com/hack.js'&gt; &lt;/script&gt;
&lt;script&gt;hack();&lt;/script&gt;
Therefore, if you are ever going to display anything that your users enter, either
immediately or after storing it in a database, you need to first sanitize it using the
htmlentities  function. To do this, I recommend that you create a new function, like
the first one in Example 10-20 , which can sanitize for both SQL and XSS injections.
Example 10-20. Functions for preventing both SQL and XSS injection attacks
<?php
  function mysql_entities_fix_string($conn, $string)
  {
    return htmlentities(mysql_fix_string($conn, $string));
  }
  function mysql_fix_string($conn, $string)
  {
    if (get_magic_quotes_gpc()) $string = stripslashes($string);
    return $conn->real_escape_string($string);
  }
?>
The mysql_entities_fix_string  function first calls mysql_fix_string  and t hen
passes the result through htmlentities  before returning the fully sanitized string. To
use either of these functions, you must already have an active connection object open
to a MySQL database.
Example 10-21  shows your new “ultimate protection” version of Example 10-17 .
260 | Chapter 10: Accessing MySQL Using PHP

Example 10-21. How to safely access MySQL and prevent XSS attacks
<?php
  require_once 'login.php';
  $conn = new mysqli($hn, $un, $pw, $db);
  if ($conn->connect_error) die($conn->connect_error);
  $user  = mysql_entities_fix_string($conn, $_POST['user']);
  $pass  = mysql_entities_fix_string($conn, $_POST['pass']);
  $query = "SELECT * FROM users WHERE user='$user' AND pass='$pass'";
  //Etc...
  function mysql_entities_fix_string($conn, $string)
  {
    return htmlentities(mysql_fix_string($conn, $string));
  }
  function mysql_fix_string($conn, $string)
  {
    if (get_magic_quotes_gpc()) $string = stripslashes($string);
    return $conn->real_escape_string($string);
  }
?>
Using mysqli Procedurally
If you prefer, there is an alternative set of functions you can use to access mysqli in a
procedural (rather than object-oriented) manner.
So, instead of creating a $conn  object like this:
$conn = new mysqli($hn, $un, $pw, $db);
Y ou can use the following:
$link = mysqli_connect($hn, $un, $pw, $db);
To check that the connection has been made and handle it, you could use code such
as this:
if (mysqli_connect_errno()) die(mysqli_connect_error());
And to make a MySQL query, you would use code such as the following:
$result = mysqli_query($link, "SELECT * FROM classics");
Upon return, $result  will contain the data. Y ou can find out the number of rows
returned as follows:
$rows = mysqli_num_rows($result);
Using mysqli Procedurally | 261

An integer is returned in $rows . Y ou can fetch the actual data one row at a time in the
following way, which returns a numeric array:
$row = mysqli_fetch_array($result, MYSQLI_NUM);
In this instance, $row[0]  will contain the first column of data, $row[1]  the second,
and so on. As described in Example 11-5 , rows can also be returned as associative
arrays or as both types, depending on the value passed in the second argument.
When you need to know the insert ID of an insert operation, you can always call the
mysqli_insert_id  function, like this:
$insertID = mysqli_insert_id($result);
Escaping strings procedurally with mysqli is as easy as using the following:
$escaped = mysqli_real_escape_string($link, $val);
To prepare a statement with mysqli is as simple as this:
$stmt = mysqli_prepare($link, 'INSERT INTO classics VALUES(?,?,?,?,?)');
To bind variables to the prepared statement, you would then use the following:
mysqli_stmt_bind_param($stmt, 'sssss', $author, $title, $category, $year, $isbn);
And to execute the prepared statement after assigning the variables with the required
values, you would issue this call:
mysqli_stmt_execute($stmt);
To close a statement, issue the following command:
mysqli_stmt_close($stmt);
And to close the connection to MySQL, enter this command:
mysqli_close($link);
For complete details on using prepared statements (procedurally or
otherwise), check out tinyurl.com/mysqlistmt . And for more advice
on all aspects of mysqli, visit tinyurl.com/usingmysqli .
Now that you have learned how to integrate PHP with MySQL in several different
ways, the next chapter moves on to creating user-friendly forms and dealing with the
data submitted from them.
 
262 | Chapter 10: Accessing MySQL Using PHP

Questions
1.How do you connect to a MySQL database using mysqli ?
2.How do you submit a query to MySQL using mysqli ?
3.How can you retrieve a string containing an error message when a mysqli  error
occurs?
4.How can you determine the number of rows returned by a mysqli  query?
5.How can you retrieve a particular row of data from a set of mysqli  results?
6.Which mysqli  method can be used to properly escape user input to prevent code
injection?
7.What negative effects can happen if you do not close the objects created by
mysqli  methods?
See Chapter 10 Answers  in Appendix A  for the answers to these questions.
Questions | 263



CHAPTER 11
Form Handling
The main way that website users interact with PHP and MySQL is through the use of
HTML forms. These were introduced very early on in the development of the World
Wide Web in 1993—even before the advent of ecommerce—and have remained a
mainstay ever since, due to their simplicity and ease of use.
Of course, enhancements have been made over the years to add extra functionality to
HTML form handling, so this chapter will bring you up to speed on state-of-the-art
form handling and show you the best ways to implement forms for good usability
and security. Plus, as you will see a little later on, the HTML5 specification has further
improved the use of forms.
Building Forms
Handling forms is a multipart process. First a form is created, into which a user can
enter the required details. This data is then sent to the web server, where it is inter‐
preted, often with some error checking. If the PHP code identifies one or more fields
that require reentering, the form may be redisplayed with an error message. When
the code is satisfied with the accuracy of the input, it takes some action that usually
involves the database, such as entering details about a purchase.
To build a form, you must have at least the following elements:
•An opening <form>  and closing </form>  tag
•A submission type specifying either a Get or Post method
•One or more input  fields
•The destination URL to which the form data is to be submitted
265

Example 11-1  shows a very simple form created with PHP , which you should type in
and save as formtest.php .
Example 11-1. formtest.php—a simple PHP form handler
<?php // formtest.php
  echo <<<_END
    <html>
      <head>
        <title>Form Test</title>
      </head>
      <body>
      <form method="post" action="formtest.php">
        What is your name?
        <input type="text" name="name">
        <input type="submit">
      </form>
      </body>
    </html>
_END;
?>
The first thing to notice about this example is that, as you have already seen in this
book, rather than dropping in and out of PHP code, the echo <<<_END..._END  con‐
struct is used whenever multiline HTML must be output.
Inside of this multiline output is some standard code for commencing an HTML
document, displaying its title, and starting the body of the document. This is followed
by the form, which is set to send its data using the Post method to the PHP program
formtest.php , which is the name of the program itself.
The rest of the program just closes all the items it opened: the form, the body of the
HTML document, and the PHP echo <<<_END  statement. The result of opening this
program in a web browser is shown in Figure 11-1 .
Figure 11-1. The result of opening formtest.php in a web browser
266 | Chapter 11: Form Handling

Retrieving Submitted Data
Example 11-1  is only one part of the multipart form-handling process. If you enter a
name and click the Submit Query button, absolutely nothing will happen other than
the form being redisplayed. So now it’s time to add some PHP code to process the
data submitted by the form.
Example 11-2  expands on the previous program to include data processing. Type it or
modify formtest.php  by adding in the new lines, save it as formtest2.php , and try the
program for yourself. The result of running this program and entering a name is
shown in Figure 11-2 .
Example 11-2. Updated version of formtest.php
<?php // formtest2.php
  if (isset($_POST['name'])) $name = $_POST['name'];
  else $name = "(Not entered)";
  echo <<<_END
    <html>
      <head>
        <title>Form Test</title>
      </head>
      <body>
        Your name is: $name<br>
        <form method="post" action="formtest2.php">
          What is your name?
          <input type="text" name="name">
          <input type="submit">
        </form>
      </body>
    </html>
_END;
?>
The only changes are a couple of lines at the start that check the $_POST  associative
array for the field name  having been submitted. Chapter 10  introduced the $_POST
associative array, which contains an element for each field in an HTML form. In
Example 11-2 , the input name used was name  and the form method was Post, so ele‐
ment name  of the $_POST  array contains the value in $_POST['name'] .
The PHP isset  function is used to test whether $_POST['name']  has been assigned a
value. If nothing was posted, the program assigns the value (Not entered) ; other‐
wise, it stores the value that was entered. Then a single line has been added after the
<body>  statement to display that value, which is stored in $name .
Retrieving Submitted Data | 267

Notice how the <input>  elements in this example do not use the />
form of self-closing, because in the new world of HTML5 this style
is optional (and it was never actually required in HTML4 anyway;
it was recommended purely because XHTML was planned to
supersede HTML at some point—but this never happened). So
since I’m always in favor of less work when programming, I no
longer use these characters except for actual XHTML (where this
type of closing remains necessary), saving both a space and a slash
for every self-closing tag.
Figure 11-2. formtest.php with data handling
register_globals: An Old Solution Hangs On
Before security became such a big issue, the default behavior of PHP was to assign the
$_POST  and $_GET  arrays directly to PHP variables. For example, there would be no
need to use the instruction $name=$_POST['name'];  because $name  would already be
given that value automatically by PHP at the program start!
Initially (prior to version 4.2.0 of PHP), this seemed a very useful idea that saved a lot
of extra code writing, but this practice has now been discontinued and the feature is
disabled by default. Should you find register_globals  enabled on a production web
server for which you are developing, you should urgently ask your server administra‐
tor to disable it.
So why disable register_globals ? It enables anyone to enter a Get input on the tail
of a URL, like this: http://myserver.com?override=1 . If your code were ever to use the
variable $override  and you forgot to initialize it (for example, with the statement
$override=0; ), the program could be compromised by such an exploit.
In fact, because many installations on the Web still have this gaping hole, I advise you
to always initialize every variable you use, just in case your code will ever run on such
a system. Initialization is also good programming practice, because you can comment
each initialization to remind yourself and other programmers what a variable is for.
268 | Chapter 11: Form Handling

If you ever find yourself maintaining code that seems to assume
values for certain variables for no apparent reason, you can make
an educated guess that the programmer probably wrote the code
using register_globals , and that these values are intended to be
extracted from a Post or Get. If so, I recommend that you rewrite
the code to load these variables explicitly from the correct $_POST
or $_GET  array.
Default Values
Sometimes it’s convenient to offer your site visitors a default value in a web form. For
example, suppose you put up a loan repayment calculator widget on a real estate web‐
site.  It could make sense to enter default values of, say, 25 years and 6 percent inter‐
est, so that the user can simply type either the principle sum to borrow or the amount
that she can afford to pay each month.
In this case, the HTML for those two values would be something like Example 11-3 .
Example 11-3. Setting default values
<form method="post" action="calc.php"><pre>
      Loan Amount <input type="text" name="principle">
Monthly Repayment <input type="text" name="monthly">
  Number of Years <input type="text" name="years" value="25">
    Interest Rate <input type="text" name="rate"  value="6">
                  <input type="submit">
</pre></form>
If you wish to try this (and the other HTML code samples), type it
and save it with an .html  (or .htm ) file extension, such as test.html
(or test.htm ), and then load that file into your browser.
Take a look at the third and fourth inputs. By populating  the value  attribute, you dis‐
play a default value in the field, which the users can then change if they wish. With
sensible default values, you can often make your web forms more user-friendly by
minimizing unnecessary typing. The result of the previous code looks like
Figure 11-3 . Of course, this was created to illustrate default values and, because the
program calc.php  has not been written, the form will not do anything if submitted.
Retrieving Submitted Data | 269

Figure 11-3. Using default values for selected form fields
Default values are also used for  hidden fields if you want to pass extra information
from your web page to your program, in addition to what users enter. We’ll look at
hidden fields later in this chapter.
Input Types
HTML forms are very versatile and allow you to submit a wide range of input types,
from text boxes and text areas to checkboxes, radio buttons, and more.
Text boxes
The input type you will probably use most often is the text box. It accepts a wide
range of alphanumeric text and other characters in a single-line box. The general for‐
mat of a text box input is as follows:
<input type="text" name=" name" size=" size" maxlength=" length" value=" value">
We’ve already covered the name  and value  attributes, but two more are introduced
here: size  and maxlength . The size  attribute specifies the width of the box (in char‐
acters of the current font) as it should appear on the screen, and maxlength  specifies
the maximum number of characters that a user is allowed to enter into the field.
The only required attributes are type , which tells the web browser what type of input
to expect, and name , for giving the input a name that will be used to process the field
upon receipt of the submitted form.
Text areas
When you need to  accept input of more than a short line of text, use a text area. This
is similar to a text box, but, because it allows multiple lines, it has some different
attributes. Its general format looks like this:
<textarea name=" name" cols=" width" rows=" height" wrap=" type">
</textarea>
270 | Chapter 11: Form Handling

The first thing  to notice is that <textarea>  has its own tag and is not a subtype of the
<input>  tag. It therefore requires a closing </textarea>  to end input.
Instead of a default attribute, if you have default text to display, you must put it before
the closing </textarea> , and it will then be displayed and be editable by the user:
<textarea name=" name" cols=" width" rows=" height" wrap=" type">
  This is some default text.
</textarea>
To control the width and height, use the cols  and rows  attributes. Both use the char‐
acter spacing of the current font to determine the size of the area. If you omit these
values, a default input box will be created that will vary in dimensions depending on
the browser used, so you should always define them to be certain about how your
form will appear.
Last, you can control how the text entered into the box will wrap (and how any such
wrapping will be sent to the server) using the wrap  attribute. Table 11-1  shows the
wrap types available. If you leave out the wrap  attribute, soft wrapping is used.
Table 11-1. The wrap types available in a textarea input
Type Action
off Text does not wrap, and lines appear exactly as the user types them.
soft Text wraps but is sent to the server as one long string without carriage returns and line feeds.
hard Text wraps and is sent to the server in wrapped format with soft returns and line feeds.
Checkboxes
When you want to offer a number of different options to a user, from which he can
select one or more items, checkboxes are the way to go. Here is the format to use:
<input type="checkbox" name=" name" value=" value" checked="checked">
If you include the checked  attribute, the box is already checked when the browser is
displayed. The string you assign to the attribute should be either a double quote or
the value "checked" , or there should be no value assigned. If you don’t include the
attribute, the box is shown unchecked. Here is an example of creating an unchecked
box:
I Agree <input type="checkbox" name="agree">
If the user doesn’t check the box, no value will be submitted. But if he does, a value of
"on"  will be submitted for the field named agree . If you prefer to have your own
value submitted instead of the word on (such as the number 1), you could use the
following syntax:
I Agree <input type="checkbox" name="agree" value="1">
Retrieving Submitted Data | 271

On the other hand, if you wish to offer a newsletter to your readers when submitting
a form, you might want to have the checkbox already checked as the default value:
Subscribe? <input type="checkbox" name="news" checked="checked">
If you want to allow groups of items to be selected at one time, assign them all the
same name. However, only the last item checked will be submitted, unless you pass
an array as the name. For example, Example 11-4  allows the user to select his favorite
ice creams (see Figure 11-4  for how it displays in a browser).
Example 11-4. Offering  multiple checkbox choices
   Vanilla <input type="checkbox" name="ice" value="Vanilla">
 Chocolate <input type="checkbox" name="ice" value="Chocolate">
Strawberry <input type="checkbox" name="ice" value="Strawberry">
Figure 11-4. Using checkboxes to make quick selections
If only one of the checkboxes is selected, such as the second one, only that item will
be submitted (the field named ice would be assigned the value "Chocolate" ). But if
two or more are selected, only the last value will be submitted, with prior values being
ignored.
If you want  exclusive behavior—so that only one item can be submitted—then you
should  use radio buttons  (see the next section), but to allow multiple submissions,
you have to slightly alter the HTML, as in Example 11-5  (note the addition of the
square brackets, [], following the values of ice).
Example 11-5. Submitting multiple values with an array
   Vanilla <input type="checkbox" name="ice[]" value="Vanilla">
 Chocolate <input type="checkbox" name="ice[]" value="Chocolate">
Strawberry <input type="checkbox" name="ice[]" value="Strawberry">
Now, when the form is submitted, if any of these items have been checked, an array
called ice will be submitted that contains any and all values. In each case, you can
extract either the single submitted value, or the array of values, to a variable like this:
$ice = $_POST['ice'];
272 | Chapter 11: Form Handling

If the field ice has been posted as a single value, $ice  will be a single string, such as
"Strawberry" . But if ice was defined in the form as an array (like Example 11-5 ),
$ice  will be an array, and its number of elements will be the number of values sub‐
mitted. Table 11-2  shows the seven possible sets of values that could be submitted by
this HTML for one, two, or all three selections. In each case, an array of one, two, or
three items is created.
Table 11-2. The seven possible sets of values for the array $ice
One value submitted Two values submitted Three values submitted
$ice[0] => Vanilla
$ice[0] => Chocolate
$ice[0] => Strawberry$ice[0] => Vanilla
$ice[1] => Chocolate
$ice[0] => Vanilla
$ice[1] => Strawberry
$ice[0] => Chocolate
$ice[1] => Strawberry$ice[0] => Vanilla
$ice[1] => Chocolate
$ice[2] => Strawberry
If $ice  is an array, the PHP code to display its contents is quite simple and might look
like this:
foreach($ice as $item) echo "$item<br>";
This uses the standard PHP foreach  construct to iterate through the array $ice  and
pass each element’s value into the variable $item , which is then displayed via the echo
command. The <br>  is just an HTML formatting device to force a new line after each
flavor in the display. By default, checkboxes are square.
Radio buttons
Radio buttons are named after the push-in preset buttons found on many older
radios, where any previously depressed button pops back up when another is pressed.
They are used when you want only a single value to be returned from a selection of
two or more options. All the buttons in a group must use the same name and,
because only a single value is returned, you do not have to pass an array.
For example, if your website offers a choice of delivery times for items purchased
from your store, you might use HTML like that in Example 11-6  (see Figure 11-5  to
see how it displays).
Example 11-6. Using radio buttons
8am-Noon<input type="radio" name="time" value="1">
Noon-4pm<input type="radio" name="time" value="2" checked="checked">
 4pm-8pm<input type="radio" name="time" value="3">
Retrieving Submitted Data | 273

Figure 11-5. Selecting a single value with radio buttons
Here, the second option of Noon–4pm has been selected by default. This default
choice ensures that at least one delivery time will be chosen by the user, which she
can change to one of the other two options if she prefers. Had one of the items not
been already checked, the user might forget to select an option, and no value would
be submitted at all for the delivery time. By default, radio buttons are round.
Hidden fields
Sometimes it is convenient to have hidden form fields so that you can keep track of
the state of form entry. For example, you might wish to know whether a form has
already been submitted. Y ou can achieve this by adding some HTML in your PHP
code, such as the following:
echo '<input type="hidden" name="submitted" value="yes">'
This is a simple PHP echo  statement that adds an input  field to the HTML form. Let’s
assume the form was created outside the program and displayed to the user. The first
time the PHP program receives the input, this line of code has not run, so there will
be no field named submitted . The PHP program re-creates the form, adding the
input  field. So when the visitor resubmits the form, the PHP program receives it with
the submitted  field set to "yes" . The code can simply check whether the field is
present:
if (isset($_POST['submitted']))
{...
Hidden fields can also be useful for storing other details, such as a session ID string
that you might create to identify a user, and so on.
Never treat hidden fields as secure—because they are not. Someone
could easily view the HTML containing them by using a browser’s
View Source feature.
274 | Chapter 11: Form Handling

<select>
The <select>  tag lets you create a drop-down list of options, offering either single or
multiple selections. It conforms to the following syntax:
<select name=" name" size=" size" multiple="multiple">
The attribute size  is the number of lines to display. Clicking on the display causes a
list to drop down, showing all the options. If you use the multiple  attribute, a user
can select multiple options from the list by pressing the Ctrl key when clicking. So to
ask a user for his favorite vegetable from a choice of five, you might use HTML as in
Example 11-7 , which offers a single selection.
Example 11-7. Using select
Vegetables
<select name="veg" size="1">
  <option value="Peas">Peas</option>
  <option value="Beans">Beans</option>
  <option value="Carrots">Carrots</option>
  <option value="Cabbage">Cabbage</option>
  <option value="Broccoli">Broccoli</option>
</select>
This HTML offers five choices, with the first one, Peas , preselected (due to it being the
first item). Figure 11-6  shows the output where the list has been clicked to drop it down,
and the option Carrots  has been highlighted. If you want to have a different default option
offered first (such as Beans ), use the <selected>  tag, like this:
<option selected="selected" value="Beans">Beans</option>
Figure 11-6. Creating a drop-down list with select
Y ou can also allow users to select more than one item, as in Example 11-8 .
Example 11-8. Using select with the multiple attribute
Vegetables
<select name="veg" size="5" multiple="multiple">
Retrieving Submitted Data | 275

<option value="Peas">Peas</option>
  <option value="Beans">Beans</option>
  <option value="Carrots">Carrots</option>
  <option value="Cabbage">Cabbage</option>
  <option value="Broccoli">Broccoli</option>
</select>
This HTML is not very different; only the size has been changed to "5" and the
attribute multiple  has been added. But, as you can see from Figure 11-7 , it is now
possible for the user to select more than one option by using the Ctrl key when click‐
ing. Y ou can leave out the size  attribute if you wish, and the output will be the same;
however, with a larger list, the drop-down box might take up too much screen space,
so I recommend that you pick a suitable number of rows and stick with it. I also rec‐
ommend against multiple select boxes smaller than two rows in height—some brows‐
ers may not correctly display the scroll bars needed to access it.
Figure 11-7. Using a select with the multiple attribute
Y ou can also use the selected  attribute within a multiple select and can, in fact, have
more than one option preselected if you wish.
Labels
Y ou can provide an even better user experience by utilizing the <label>  tag. With it,
you can surround a form element, making it selectable by clicking any visible part
contained between the opening and closing <label>  tags.
For example, going back to the example of choosing a delivery time, you could allow
the user to click the radio button itself and the associated text, like this:
<label>8am-Noon<input type="radio" name="time" value="1"></label>
The text will not be underlined like a hyperlink when you do this, but as the mouse
passes over, it will change to an arrow instead of a text cursor, indicating that the
whole item is clickable.
276 | Chapter 11: Form Handling

The submit button
To match the type of form being submitted, you can change the text of the submit
button to anything you like by using the value  attribute, like this:
<input type="submit" value="Search">
Y ou can also replace the standard text button with a graphic image of your choice,
using HTML such as this:
<input type="image" name="submit" src="image.gif">
Sanitizing Input
Now we return to PHP programming. It can never be emphasized enough that han‐
dling user data is a security minefield, and that it is essential to learn to treat all such
data with utmost caution from the word go. It’s actually not that difficult to sanitize
user input from potential hacking attempts, but it must be done.
The first thing to remember is that regardless of what constraints you have placed in
an HTML form to limit the types and sizes of inputs, it is a trivial matter for a hacker
to use her browser’s View Source feature to extract the form and modify it to provide
malicious input to your website.
Therefore, you must never trust any variable that you fetch from either the $_GET  or
$_POST  arrays until you have processed it. If you don’t, users may try to inject Java‐
Script into the data to interfere with your site’s operation, or even attempt to add
MySQL commands to compromise your database.
Therefore, instead of just using code such as the following when reading in user
input:
$variable = $_POST['user_input'];
you should also use one or more of the following lines of code. For example, to pre‐
vent escape characters from being injected into a string that will be presented to
MySQL, use the following. Remember that this function takes into account the cur‐
rent character set of a MySQL connection, so it must be used with a mysqli  connec‐
tion object (in this instance, $connection ), as discussed in Chapter 10 .
$variable = $connection->real_escape_string($variable);
Remember that the safest way to secure MySQL from hacking
attempts is to use placeholders and prepared statements, as
described in Chapter 10 . If you do so for all accesses to MySQL, it
becomes unnecessary to escape data being transferred into or out
of the database. Y ou will, however, still need to sanitize input when
including it within HTML.
Retrieving Submitted Data | 277

To get rid of unwanted slashes, use this:
$variable = stripslashes($variable);
And to remove any HTML from a string, use the following:
$variable = htmlentities($variable);
For example, this would change a string of interpretable HTML code like <b>hi</b>
into &lt;b&gt;hi&lt;/b&gt; , which displays as text, and won’t be interpreted as
HTML tags.
Finally, if you wish to strip HTML entirely from an input, use the following (but
ensure you use it before calling htmlentities , which replaces any angle brackets
used as part of HTML tags):
$variable = strip_tags($variable);
In fact, until you know exactly what sanitization you require for a program,
Example 11-9  shows a pair of functions that brings all these checks together to pro‐
vide a very good level of security.
Example 11-9. The sanitizeString and sanitizeMySQL functions
<?php
  function sanitizeString($var)
  {
    $var = stripslashes($var);
    $var = strip_tags($var);
    $var = htmlentities($var);
    return $var;
  }
  function sanitizeMySQL($connection, $var)
  { 
    $var = $connection->real_escape_string($var);
    $var = sanitizeString($var);
    return $var;
  }
?>
Add this code to the end of your PHP programs, and you can then call it for each user
input to sanitize, like this:
$var = sanitizeString($_POST['user_input']);
Or, when you have an open MySQL connection, and a mysqli  connection object (in
this case, called $connection ):
$var = sanitizeMySQL($connection, $_POST['user_input']);
278 | Chapter 11: Form Handling

If you are using the procedural version of the mysqli  extension,
you will need to modify the sanitizeMySQL  function to call the
mysqli_real_escape_string  function,  like this (in which case
$connection  will then be a handle, not an object):
$var = mysqli_real_escape_string($connection, $var);
An Example Program
So let’s look at how a real-life PHP program integrates with an HTML form by creat‐
ing the program convert.php  listed in Example 11-10 . Type it as shown and try it for
yourself.
Example 11-10. A program to convert values between Fahrenheit and Celsius
<?php // convert.php
  $f = $c = '';
  if (isset($_POST['f'])) $f = sanitizeString($_POST['f']);
  if (isset($_POST['c'])) $c = sanitizeString($_POST['c']);
  if ($f != '')
  {
    $c = intval((5 / 9) * ($f - 32));
    $out = "$f °f equals $c °c";
  }
  elseif($c != '')
  {
    $f = intval((9 / 5) * $c + 32);
    $out = "$c °c equals $f °f";
  }
  else $out = "";
  echo <<<_END
<html>
  <head>
    <title>Temperature Converter</title>
  </head>
  <body>
    <pre>
      Enter either Fahrenheit or Celsius and click on Convert
      <b>$out</b>
      <form method="post" action="convert.php">
        Fahrenheit <input type="text" name="f" size="7">
           Celsius <input type="text" name="c" size="7">
                   <input type="submit" value="Convert">
      </form>
    </pre>
  </body>
An Example Program | 279

</html>
_END;
  function sanitizeString($var)
  {
    $var = stripslashes($var);
    $var = strip_tags($var);
    $var = htmlentities($var);
    return $var;
  }
?>
When you call up convert.php  in a browser, the result should look something like
Figure 11-8 .
Figure 11-8. The temperature conversion program in action
To break the program down, the first line initializes the variables $c and $f in case
they do not get posted to the program. The next two lines fetch the values of either
the field named f or the one named c, for an input Fahrenheit or Celsius value. If the
user inputs both, the Celsius is simply ignored and the Fahrenheit value is converted.
As a security measure, the new function sanitizeString  from Example 11-9  is also
used.
So, having either submitted values or empty strings in both $f and $c, the next por‐
tion of code constitutes an if...elseif...else  structure that first tests whether $f
has a value. If not, it checks $c; otherwise, the variable $out  is set to the empty string
(more on that in a moment).
If $f is found to have a value, the variable $c is assigned a simple mathematical
expression that converts the value of $f from Fahrenheit to Celsius. The formula used
is Celsius = (5 / 9) × (Fahrenheit – 32). The variable $out  is then set to a message
string explaining the conversion.
280 | Chapter 11: Form Handling

On the other hand, if $c is found to have a value, a complementary operation is per‐
formed to convert the value of $c from Celsius to Fahrenheit and assign the result to
$f. The formula used is Fahrenheit = (9 / 5) × Celsius + 32. As with the previous sec‐
tion, the string $out  is then set to contain a message about the conversion.
In both conversions, the PHP intval  function is called to convert the result of the
conversion to an integer value. It’s not necessary, but looks better.
With all the arithmetic done, the program now outputs the HTML, which starts with
the basic head and title and then contains some introductory text before displaying
the value of $out . If no temperature conversion was made, $out  will have a value of
NULL  and nothing will be displayed, which is exactly what we want when the form
hasn’t yet been submitted. But if a conversion was made, $out  contains the result,
which is displayed.
After this, we come to the form, which is set to submit using the Post method to the
file convert.php  (the program itself). Within the form, there are two inputs for either a
Fahrenheit or Celsius value to be entered. A submit button with the text Convert is
then displayed, and the form is closed.
After outputting the HTML to close the document, we come finally to the function
sanitizeString  from Example 11-9 . Try playing with the example by inputting dif‐
ferent values into the fields; for a bit of fun, can you find a value for which Fahrenheit
and Celsius are the same?
All the examples in this chapter have used the Post method to send
form data. I recommend this, as it’s the neatest and most secure
method. However, the forms can easily be changed to use the Get
method, as long as values are fetched from the $_GET  array instead
of the $_POST  array. Reasons to do this might include making the
result of a search bookmarkable or directly linkable from another
page.
What’s New in HTML5?
With HTML5, developers can draw on a number of useful enhancements to form
handling to make using forms easier than ever, including new attributes; color, date,
and time pickers; and new input types—although some of these features are not yet
implanted across all major browsers. The following new features, however, will work
on all browsers.
What’s New in HTML5? | 281

The autocomplete Attribute
Y ou can apply the autocomplete  attribute to either the <form>  element, or to any of
the color , date , email , password , range , search , tel, text , or url types of the
<input>  element.
With autocomplete enabled, previous user inputs are recalled and automatically
entered into fields as suggestions. Y ou can also disable this feature by turning auto‐
complete off. Here’s how to turn autocomplete on for an entire form but disable it for
specific fields (highlighted in bold):
<form action='myform.php' method='post' autocomplete='on' >
  <input type='text'     name='username'>
  <input type='password' name='password' autocomplete='off' >
</form>
The autofocus Attribute
The autofocus  attribute gives immediate focus to an element when a page loads. It
can be applied to any <input> , <textarea> , or <button>  element, like this:
<input type='text' name='query' autofocus='autofocus' >
Browsers that use touch interfaces (such as Android, iOS, or Win‐
dows Phone) usually ignore the autofocus  attribute, leaving it to
the user to tap on a field to give it focus; otherwise, the zoom in,
focusing, and pop-up keyboards this attribute would generate
could quickly become very annoying.
Because this feature will cause the focus to move in to an input element, the Back‐
space key will no longer take the user back a web page (although Alt-Left and Alt-
Right will still move backward and forward within the browsing history).
The placeholder Attribute
The placeholder  attribute  lets you place into any blank input field a helpful hint to
explain to users what they should enter. Y ou use it like this:
<input type='text' name='name' size='50' placeholder='First & Last name' >
The input field will display the placeholder text as a prompt until the user starts typ‐
ing, at which point the placeholder will disappear.
The required Attribute
The required  attribute is used to ensure that a field has been completed before a
form is submitted. Y ou use it like this:
282 | Chapter 11: Form Handling

<input type='text' name='creditcard' required='required' >
When the browser detects attempted form submission where there’s an uncompleted
required  input, a message is displayed, prompting the user to complete the field.
Override Attributes
With override attributes, you can override form settings on an element-by-element
basis. So, for example, using the formaction  attribute,  you can specify that a submit
button should submit a form to a different URL than is specified in the form itself,
like the following (in which the default and overridden action URLs are bold):
<form action='url1.php'  method='post'>
  <input type='text' name='field'>
  <input type='submit' formaction='url2.php' >
</form>
HTML5 also brings support for the formenctype , formmethod , formnovalidate , and
formtarget  override attributes, which you can use in exactly the same manner as for
maction  to override one of these settings.
The form overrides have been supported in most major browsers
for a few years, but have been featured in Internet Explorer only
since version 10.
The width and height Attributes
Using these new attributes, you can alter the dimensions of an input image, like this:
<input type='image' src='picture.png' width='120' height='80' >
Features Awaiting Full Implementation
Since HTML5 is  still  in its  early days (even though it’s been around for many years),
browser developers have been implementing features according to their own sched‐
ules, so many parts of the specification are available only on some browsers. However,
during the life of this edition, more and more of them will become available across
the board, so it’s worth mentioning what’s coming here so that you’ll be ready to use
them sooner rather than later.
The form Attribute
With HTML5, you no longer have to place <input>  elements within <form>  elements,
because you can specify the form to which an input applies by supplying a form
Features Awaiting Full Implementation | 283

attribute. The following code shows a form being created, but with its input outside
of the <form>  and </form>  tags:
<form action='myscript.php' method='post' id='form1' >
</form>
<input type='text' name='username' form='form1' >
To do this, you must give the form an ID using the id attribute, and this is the ID to
which the form  attribute of an input element must refer.
At the time of writing, this attribute is unsupported by Internet Explorer.
The list Attribute
HTML5 supports attaching lists to inputs to enable users to easily select from a pre‐
defined list. But, at the time of writing, only Firefox, Chrome, Safari, and IE support
the list  attribute.  Nevertheless, once Opera picks it up, it will be a very handy fea‐
ture, which you’ll be able to use like this:
Select destination:
<input type='url' name='site' list='links' >
<datalist id='links' >
  <option label='Google' value='http://google.com'>
  <option label='Yahoo!' value='http://yahoo.com'>
  <option label='Bing'   value='http://bing.com'>
  <option label='Ask'    value='http://ask.com'>
</datalist >
The min and max Attributes
With the min and max attributes,  you can specify minimum and maximum values for
inputs, but currently not in Firefox or IE. Y ou use the attributes like this:
<input type='time' name='alarm' value='07:00' min='05:00' max='09:00' >
The browser will then either offer up and down selectors for the range of values
allowed, or simply disallow values outside of that range. In tests, however, I have
found this attribute to be flaky in some implementations, and suggest you fully test
before implementing this feature, even when it is available on all browsers.
The step Attribute
Often used with min and max, the step  attribute supports  stepping through number
or date values, like this:
<input type='time' name='meeting' value='12:00'
  min='09:00' max='16:00' step='3600' >
284 | Chapter 11: Form Handling

When you are stepping through date or time values, each unit represents 1 second.
This attribute is not yet supported by Firefox or IE.
The color Input Type
The color  input type calls up a color  picker so that you can simply click the color of
your choice. Y ou use it like this:
Choose a color <input type='color'  name='color'>
Neither Firefox nor IE supports this input type at the time of writing.
The number and range Input Types
The number  and range  input types restrict input to either a number or a number
within a specified range, like this:
<input type='number' name='age'>
<input type='range' name='num' min='0' max='100' value='50' step='1'>
Firefox does not appear to support the number  input type at the time of writing.
Date and Time Pickers
When you choose an input type of date , month , week , time , datetime , or datetime-
local , a picker will pop up on supported browsers from which the user can make a
selection, like this one, which inputs the time:
<input type='time'  name='time' value='12:34'>
However, without support from IE or Firefox, these pickers are probably not worth
using in your web pages yet.
There are a few other form-related enhancements to HTML5 that are still under
development, and you can keep abreast of them at http://tinyurl.com/h5forms  (or this
direct URL: http://www.w3.org/TR/html5/forms.html ).
The next chapter will show you how to use cookies and authentication to store users’
preferences and keep them logged in, and how to maintain a complete user session.
Questions
1.Y ou can submit form data using either the POST  or the GET method. Which asso‐
ciative arrays are used to pass this data to PHP?
2.What is register_globals , and why is it a bad idea?
3.What is the difference between a text box and a text area?
Questions | 285

4.If a form has to offer three choices to a user, each of which is mutually exclusive
so that only one of the three can be selected, which input type would you use,
given a choice between checkboxes and radio buttons?
5.How can you submit a group of selections from a web form using a single field
name?
6.How can you submit a form field without displaying it in the browser?
7.Which HTML tag is used to encapsulate a form element and supporting text or
graphics, making the entire unit selectable with a mouse-click?
8.Which PHP function converts HTML into a format that can be displayed but will
not be interpreted as HTML by a browser?
9.What form attribute can be used to help users complete input fields?
10.How can you ensure that an input is completed before a form gets submitted?
See Chapter 11 Answers  in Appendix A  for the answers to these questions. 
286 | Chapter 11: Form Handling

CHAPTER 12
Cookies, Sessions, and Authentication
As your web projects grow larger and more complicated, you will find an increasing
need to keep track of your users. Even if you aren’t offering logins and passwords, you
will still often need to store details about a user’s current session and possibly also
recognize her when she returns to your site.
Several technologies support this kind of interaction, ranging from simple browser
cookies to session handling and HTTP authentication. Between them, they offer the
opportunity for you to configure your site to your users’ preferences and ensure a
smooth and enjoyable transition through it.
Using Cookies in PHP
A cookie  is an item of data that a web server saves to your computer’s hard disk via a
web browser. It can contain almost any alphanumeric information (as long as it’s
under 4 KB) and can be retrieved from your computer and returned to the server.
Common uses include session tracking, maintaining data across multiple visits, hold‐
ing shopping cart contents, storing login details, and more.
Because of their privacy implications, cookies can be read only from the issuing
domain. In other words, if a cookie is issued by, for example, oreilly.com , it can be
retrieved only by a web server using that domain. This prevents other websites from
gaining access to details for which they are not authorized.
Because of the way the Internet works, multiple elements on a web page can be
embedded from multiple domains, each of which can issue its own cookies. When
this happens, they are referred to as third-party cookies . Most commonly, these are
created by advertising companies in order to track users across multiple websites.
287

Because of this, most browsers allow users to turn cookies off either for the current
server’s domain, third-party servers, or both. Fortunately, most people who disable
cookies do so only for third-party websites.
Cookies are exchanged during the transfer of headers, before the actual HTML of a
web page is sent, and it is impossible to send a cookie once any HTML has been
transferred. Therefore, careful planning of cookie usage is important. Figure 12-1
illustrates a typical request and response dialog between a web browser and  web
server passing cookies.
Figure 12-1. A browser/server request/response dialog with cookies
This exchange shows a browser receiving two pages:
1.The browser issues a request to retrieve the main page, index.html , at the website
http://www.webserver.com . The first header specifies the file, and the second
header specifies the server.
2.When the web server at webserver.com  receives this pair of headers, it returns
some of its own. The second header defines the type of content to be sent ( text/
html ), and the third one sends a cookie of the name name  and with the value
value . Only then are the contents of the web page transferred.
3.Once the browser has received the cookie, it will then return it with every future
request made to the issuing server until the cookie expires or is deleted. So, when
the browser requests the new page /news.html , it also returns the cookie name
with the value value .
288 | Chapter 12: Cookies, Sessions, and Authentication

4.Because the cookie has already been set, when the server receives the request to
send /news.html , it does not have to resend the cookie, but just returns the
requested page.
Setting a Cookie
Setting a cookie in PHP is a simple matter. As long as no HTML has yet been trans‐
ferred, you can call the setcookie  function, which has the following syntax (see
Table 12-1 ):
setcookie(name, value, expire, path, domain, secure, httponly);
Table 12-1. The setcookie parameters
Parameter Description Example
name The name of the cookie. This is the name that your server will use to access the
cookie on subsequent browser requests.username
value The value of the cookie, or the cookie’s contents. This can contain up to 4 KB of
alphanumeric text.Hannah
expire (Optional. ) Unix timestamp of the expiration date. Generally, you will probably use
time()  plus a number of seconds. If not set, the cookie expires when the browser
closes.time() + 2592000
path (Optional. ) The path of the cookie on the server. If this is a / (forward slash), the
cookie is available over the entire domain, such as www.webserver.com . If it is a
subdirectory, the cookie is available only within that subdirectory. The default is
the current directory that the cookie is being set in, and this is the setting you will
normally use./
domain (Optional. ) The Internet domain of the cookie. If this is .webserver.com , the cookie is
available to all of webserver.com  and its subdomains, such as www.webserver.com
and images.webserver.com . If it is images.webserver.com , the cookie is available
only to images.webserver.com  and its subdomains such as
sub.images.webserver.com , but not, say, to www.webserver.com ..webserver.com
secure (Optional. ) Whether the cookie must use a secure connection ( https:// ). If this value
is TRUE , the cookie can be transferred only across a secure connection. The default
is FALSE .FALSE
httponly (Optional ; implemented since PHP version 5.2.0.) Whether the cookie must use the
HTTP protocol. If this value is TRUE , scripting languages such as JavaScript cannot
access the cookie. (Not supported in all browsers.) The default is FALSE .FALSE
So, to create a cookie with the name username  and the value Hannah  that is accessible
across the entire web server on the current domain, and will be removed from the
browser’s cache in seven days, use the following:
setcookie('username', 'Hannah', time() + 60 * 60 * 24 * 7, '/');
Using Cookies in PHP | 289

Accessing a Cookie
Reading the value of a cookie is as simple as accessing  the $_COOKIE  system array. For
example, if you wish to see whether the current browser has the cookie called user
name  already stored and, if so, to read its value, use the following:
if (isset($_COOKIE['username'])) $username = $_COOKIE['username'];
Note that you can read a cookie back only after it has been sent to a web browser.
This means that when you issue a cookie, you cannot read it in again until the
browser reloads the page (or another with access to the cookie) from your website
and passes the cookie back to the server in the process.
Destroying a Cookie
To delete a cookie, you must issue it again and set a date in the past.  It is important
for all parameters in your new setcookie  call except the timestamp to be identical to
the parameters when the cookie was first issued; otherwise, the deletion will fail.
Therefore, to delete the cookie created earlier, you would use the following:
setcookie('username', 'Hannah', time() - 2592000, '/');
As long as the time given is in the past, the cookie should be deleted. However, I have
used a time of 2,592,000 seconds (one month) in the past in case the client computer’s
date and time are not correctly set.
HTTP Authentication
HTTP authentication uses the web server to manage users and passwords for the
application. It’s adequate for most applications that ask users to log in, although some
applications have specialized needs or more stringent security requirements that call
for other techniques.
To use HTTP authentication, PHP sends a header  request asking to start an authenti‐
cation dialog with the browser. The server must have this feature turned on in order
for it to work, but because it’s so common, your server is likely to offer the feature.
Although it is usually installed with Apache, HTTP authentication
may not necessarily be installed on the server you use. So attempt‐
ing to run these examples may generate an error telling you that the
feature is not enabled, in which case you must install the module,
change the configuration file to load the module, or ask your sys‐
tem administrator to do these fixes.
290 | Chapter 12: Cookies, Sessions, and Authentication

After entering your URL into the browser or visiting via a link, the user will see an
“ Authentication Required” prompt pop up, requesting two fields: User Name and
Password ( Figure 12-2  shows how this looks in Firefox).
Figure 12-2. An HTTP authentication login prompt
Example 12-1  shows the code to make this happen.
Example 12-1. PHP authentication
<?php
  if (isset($_SERVER['PHP_AUTH_USER']) &&
      isset($_SERVER['PHP_AUTH_PW']))
  {
    echo "Welcome User: " . $_SERVER['PHP_AUTH_USER'] .
         " Password: "    . $_SERVER['PHP_AUTH_PW'];
  }
  else
  {
    header('WWW-Authenticate: Basic realm="Restricted Section"');
    header('HTTP/1.0 401 Unauthorized');
    die("Please enter your username and password");
  }
?>
HTTP Authentication | 291

By default, the type of interface Zend Server uses is cgi-fcgi , which
is incompatible with basic authentication. However, configuring
Zend is beyond the scope of this book, so if you are using it for
Example 12-1  through Example 12-5 , you may prefer to test them
on a different server. To determine the interface of a server, you can
call the php_sapi_name  function, which will return a string such as
'cgi-fcgi' , 'cli' , and so on. Basic authentication is not recom‐
mended anyway on a production website, as it is very insecure, but
you need to know how it works for maintaining legacy code. Please
refer to http://php.net/php_sapi_name  for further details.
The first thing the program does is look for two particular array values:
$_SERVER['PHP_AUTH_USER']  and $_SERVER['PHP_AUTH_PW'] . If they both exist, they
represent the username and password entered by a user into an authentication
prompt.
If either value does not exist, the user has not yet been authenticated and you display
the prompt in Figure 12-2  by issuing the following header, where Basic realm  is the
name of the section that is protected and appears as part of the pop-up prompt:
WWW-Authenticate: Basic realm="Restricted Area"
If the user fills out the fields, the PHP program runs again from the top. But if the
user clicks the Cancel button, the program proceeds to the following two lines, which
send the following header and an error message:
HTTP/1.0 401 Unauthorized
The die statement causes the text “Please enter your username and password” to be
displayed (see Figure 12-3 ).
Figure 12-3. The result of clicking the Cancel button
292 | Chapter 12: Cookies, Sessions, and Authentication

Once a user has been authenticated, you will not be able to get the
authentication dialog to pop up again unless the user closes and
reopens all browser windows, as the web browser will keep return‐
ing the same username and password to PHP . Y ou may need to
close and reopen your browser a few times as you work through
this section and try different things out.
Now let’s check for a valid username and  password. The code in Example 12-1  doesn’t
require you to change much to add this check, other than modifying the previous
welcome message code to test for a correct username and password, and then issuing
a welcome message. A failed authentication causes an error message to be sent (see
Example 12-2 ).
Example 12-2. PHP authentication with input checking
<?php
  $username = 'admin';
  $password = 'letmein';
  if (isset($_SERVER['PHP_AUTH_USER']) &&
      isset($_SERVER['PHP_AUTH_PW']))
  {
    if ($_SERVER['PHP_AUTH_USER'] == $username &&
        $_SERVER['PHP_AUTH_PW']   == $password)
          echo "You are now logged in";
    else die("Invalid username / password combination");
  }
  else
  {
    header('WWW-Authenticate: Basic realm="Restricted Section"');
    header('HTTP/1.0 401 Unauthorized');
    die ("Please enter your username and password");
  }
?>
Incidentally, take a look at the wording of the error message: Invalid username /
password combination . It doesn’t say whether the username or the password or both
were wrong—the less information you can give to a potential hacker, the better.
A mechanism is now in place to authenticate users, but only for a single username
and password. Also, the password appears in clear text within the PHP file, and if
someone managed to hack into your server, he would instantly know it. So let’s look
at a better way to handle usernames and passwords.
HTTP Authentication | 293

Storing Usernames and Passwords
Obviously, MySQL is the natural way to store usernames and passwords. But again,
we don’t want to store the passwords as clear text, because our website could be com‐
promised if the database were accessed by a hacker. Instead, we’ll use a neat trick
called a one-way function .
This type of function is easy to use and converts a string of text into a seemingly ran‐
dom string. Because of their one-way nature, such functions are virtually impossible
to reverse, so their output can be safely stored in a database—and anyone who steals
it will be none the wiser as to the passwords used.
In previous editions of this book, I recommended using the md5  hashing algorithm
for your data security. Time marches on, however, and now md5 is considered easily
hackable and therefore unsafe, while even its previously recommended  replacement
of sha1  can apparently be hacked (plus sha1 and sha2 were designed by the NSA and
therefore considerable caution is recommended for their use in highly secure imple‐
mentations).
So now I have moved on to using the PHP hash  function, passing it a version of the
ripemd  algorithm, which was designed by the open academic community and which
(like md5) returns a 32-character hexadecimal number—so it can easily replace md5
in most databases. Use it like this:
$token = hash('ripemd128', 'mypassword');
That example happens to give $token  this value:
7b694600c8a2a2b0897c719958713619
By using the hash  function, you can keep up with future developments in security
and simply pass the hashing algorithm to it that you wish to implement, resulting in
less code maintenance (although you will probably have to accommodate larger hash
lengths than 32 characters in your databases).
Salting
Unfortunately, hash  on its own is not enough to protect a database of passwords,
because it could still be susceptible to a brute force attack that uses another database
of known 32-character hexadecimal tokens. Such databases do exist, as a quick Goo‐
gle search will verify, although probably only for md5 and sha1 or sha2 at the
moment.
Thankfully, though, we can put a spanner in the works of any such attempts by salting
all the passwords before they are sent to hash . Salting is simply a matter of adding
some text that only we know about to each parameter to be encrypted, like this (with
the salt highlighted in bold):
294 | Chapter 12: Cookies, Sessions, and Authentication

$token = hash('ripemd128', ' saltstring mypassword');
In this example, the text saltstring  has been prepended to the password. Of course, the
more obscure you can make the salt, the better. I like to use salts such as this:
$token = hash('ripemd128', ' hqb%$tmypassword cg*l');
Here some random characters have been placed both before and after the password.
Given just the database, and without access to your PHP code, it should now be next
to impossible to work out the stored passwords.
All you have to do when verifying someone’s login password is to add these same ran‐
dom strings back in before and after it, and then check the resulting token from a
hash  call against the one stored in the database for that user.
Let’s create a MySQL table to hold some user details and add a couple of accounts. So
type and save the program in Example 12-3  as setupusers.php , and then open it in
your browser.
Example 12-3. Creating a users table and adding two accounts
<?php // setupusers.php
  require_once 'login.php';
  $connection =
    new mysqli($db_hostname, $db_username, $db_password, $db_database);
  if ($connection->connect_error) die($connection->connect_error);
  $query = "CREATE TABLE users (
    forename VARCHAR(32) NOT NULL,
    surname  VARCHAR(32) NOT NULL,
    username VARCHAR(32) NOT NULL UNIQUE,
    password VARCHAR(32) NOT NULL
  )";
  $result = $connection->query($query);
  if (!$result) die($connection->error);
  $salt1    = "qm&h*";
  $salt2    = "pg!@";
  $forename = 'Bill';
  $surname  = 'Smith';
  $username = 'bsmith';
  $password = 'mysecret';
  $token    = hash('ripemd128', "$salt1$password$salt2");
  add_user($connection, $forename, $surname, $username, $token);
  $forename = 'Pauline';
  $surname  = 'Jones';
  $username = 'pjones';
HTTP Authentication | 295

$password = 'acrobat';
  $token    = hash('ripemd128', "$salt1$password$salt2");
  add_user($connection, $forename, $surname, $username, $token);
  function add_user($connection, $fn, $sn, $un, $pw)
  {
    $query  = "INSERT INTO users VALUES('$fn', '$sn', '$un', '$pw')";
    $result = $connection->query($query);
    if (!$result) die($connection->error);
  }
?>
This program will create the table users  within your publications  database (or
whichever database you set up for the login.php  file in Chapter 10 ). In this table, it
will create two users: Bill Smith and Pauline Jones. They have the usernames and
passwords of bsmith/mysecret  and pjones/acrobat , respectively.
Using the data in this table, we can now modify Example 12-2  to properly authenti‐
cate users, and Example 12-4  shows the code needed to do this. Type it, save it as
authenticate.php , and call it up in your browser.
Example 12-4. PHP authentication using MySQL
<?php // authenticate.php
  require_once 'login.php';
  $connection =
    new mysqli($db_hostname, $db_username, $db_password, $db_database);
  if ($connection->connect_error) die($connection->connect_error);
  if (isset($_SERVER['PHP_AUTH_USER']) &&
      isset($_SERVER['PHP_AUTH_PW']))
  {
    $un_temp = mysql_entities_fix_string($connection, $_SERVER['PHP_AUTH_USER']);
    $pw_temp = mysql_entities_fix_string($connection, $_SERVER['PHP_AUTH_PW']);
    $query  = "SELECT * FROM users WHERE username='$un_temp'";
    $result = $connection->query($query);
    if (!$result) die($connection->error);
    elseif ($result->num_rows)
    {
        $row = $result->fetch_array(MYSQLI_NUM);
          $result->close();
        $salt1 = "qm&h*";
        $salt2 = "pg!@";
        $token = hash('ripemd128', "$salt1$pw_temp$salt2");
        if ($token == $row[3]) echo "$row[0] $row[1] :
296 | Chapter 12: Cookies, Sessions, and Authentication

Hi $row[0], you are now logged in as '$row[2]'";
        else die("Invalid username/password combination");
    }
    else die("Invalid username/password combination");
  }
  else
  {
    header('WWW-Authenticate: Basic realm="Restricted Section"');
    header('HTTP/1.0 401 Unauthorized');
    die ("Please enter your username and password");
  }
  $connection->close();
  function mysql_entities_fix_string($connection, $string)
  {
    return htmlentities(mysql_fix_string($connection, $string));
  }
  function mysql_fix_string($connection, $string)
  {
    if (get_magic_quotes_gpc()) $string = stripslashes($string);
    return $connection->real_escape_string($string);
  }
?>
As you might expect at this point in the book, some of these examples are starting to
get quite a bit longer. But don’t be put off. The final 10 lines are simply Example 10-22
from Chapter 10 . They are there to sanitize the user input—very important.
The only lines to really concern yourself with at this point start with the assigning of
two variables, $un_temp  and $pw_temp , using the submitted username and password,
highlighted in bold text. Next, a query is issued to MySQL to look up the user
$un_temp  and, if a result is returned, to assign the first row to $row . (Because user‐
names are unique, there will be only one row.) Then the two salts are created in
$salt1  and $salt2 , which are then added before and after the submitted password
$pw_temp . This string is then passed to the hash  function, which returns a 32-
character hexadecimal value in $token .
Now all that’s necessary is to check $token  against the value stored in the database,
which happens to be in the fourth column—which is column 3 when starting from 0.
So $row[3]  contains the previous token calculated for the salted password. If the two
match, a friendly welcome string is output, calling the user by his or her first name
(see Figure 12-4 ). Otherwise, an error message is displayed. As mentioned before, the
error message is the same regardless of whether such a username exists, as this pro‐
vides minimal information to potential hackers or password guessers.
HTTP Authentication | 297

Figure 12-4. Bill Smith has now been authenticated
Y ou can try this out for yourself by calling up the program in your browser and enter‐
ing a username of bsmith  and password of mysecret  (or pjones  and acrobat ), the
values that were saved in the database by Example 12-3 .
By sanitizing input immediately after it is encountered, you will
block any malicious HTML, JavaScript, or MySQL attacks before
they can get any further, and will not have to sanitize this data
again. Remember, however, that if a user has characters such as < or
& in a password (for example), these will be expanded to &lt;  or
&amp;  by the htmlemtities  function. But as long as your code
allows for strings that may end up larger than the provided input
width, and as long as you always run passwords through this sani‐
tization, you’ll be just fine.
Using Sessions
Because your program can’t tell what variables were set in other programs—or even
what values the same program set the previous time it ran—you’ll sometimes want to
track what your users are doing from one web page to another. Y ou can do this by
setting hidden fields in a form, as seen in Chapter 10 , and checking the value of the
fields after the form is submitted, but PHP provides a much more powerful and sim‐
pler solution in the form of sessions . These are groups of variables that are stored on
the server but relate only to the current user. To ensure that the right variables are
applied to the right users, PHP saves a cookie in the users’ web browsers to uniquely
identify them.
This cookie has meaning only to the web server and cannot be used to ascertain any
information about a user. Y ou might ask about those users who have their cookies
turned off. Well, that’s not a problem as of PHP 4.2.0, because it will identify when
this is the case and place a cookie token in the Get portion of each URL request
instead. Either way, sessions provide a solid way of keeping track of your users.
298 | Chapter 12: Cookies, Sessions, and Authentication

Starting a Session
Starting a session requires calling the PHP function session_start  before  any
HTML has been output, similarly to how cookies are sent during header exchanges.
Then, to begin saving session variables, you just assign them as part of the $_SESSION
array, like this:
$_SESSION['variable'] = $value;
They can then be read back just as easily in later program runs, like this:
$variable = $_SESSION['variable'];
Now assume that you have an application that always needs access to the username,
password, first name, and last name of each user, as stored in the table users , which
you should have created a little earlier. So let’s further modify authenticate.php  from
Example 12-4  to set up a session once a user has been authenticated.
Example 12-5  shows the changes needed. The only difference is the content of the if
($token == $row[3])  section, which we now start by opening a session and saving
these four variables into it. Type this program (or modify Example 12-4 ) and save it
as authenticate2.php . But don’t run it in your browser yet, as you will also need to cre‐
ate a second program in a moment.
Example 12-5. Setting a session after  successful authentication
<?php //authenticate2.php
  require_once 'login.php';
  $connection =
    new mysqli($db_hostname, $db_username, $db_password, $db_database);
  if ($connection->connect_error) die($connection->connect_error);
  if (isset($_SERVER['PHP_AUTH_USER']) &&
      isset($_SERVER['PHP_AUTH_PW']))
  {
    $un_temp = mysql_entities_fix_string($connection, $_SERVER['PHP_AUTH_USER']);
    $pw_temp = mysql_entities_fix_string($connection, $_SERVER['PHP_AUTH_PW']);
    $query = "SELECT * FROM users WHERE username='$un_temp'";
    $result = $connection->query($query);
    if (!$result) die($connection->error);
    elseif ($result->num_rows)
    {
          $row = $result->fetch_array(MYSQLI_NUM);
          $result->close();
          $salt1 = "qm&h*";
Using Sessions | 299

$salt2 = "pg!@";
        $token = hash('ripemd128', "$salt1$pw_temp$salt2");
          if ($token == $row[3])
          {
               session_start();
               $_SESSION['username'] = $un_temp;
               $_SESSION['password'] = $pw_temp;
               $_SESSION['forename'] = $row[0];
               $_SESSION['surname']  = $row[1];
               echo "$row[0] $row[1] : Hi $row[0],
                     you are now logged in as '$row[2]'";
               die ("<p><a href=continue.php>Click here to continue</a></p>");
          }
          else die("Invalid username/password combination");
    }
    else die("Invalid username/password combination");
  }
  else
  {
    header('WWW-Authenticate: Basic realm="Restricted Section"');
    header('HTTP/1.0 401 Unauthorized');
    die ("Please enter your username and password");
  }
  $connection->close();
  function mysql_entities_fix_string($connection, $string)
  {
    return htmlentities(mysql_fix_string($connection, $string));
  }
  function mysql_fix_string($connection, $string)
  {
    if (get_magic_quotes_gpc()) $string = stripslashes($string);
    return $connection->real_escape_string($string);
  }
?>
One other addition to the program is the “Click here to continue” link with a destina‐
tion URL of continue.php . This will be used to illustrate how the session will transfer
to another program or PHP web page. So create continue.php  by typing the program
in Example 12-6  and saving it.
Example 12-6. Retrieving session variables
<?php // continue.php
  session_start();
  if (isset($_SESSION['username']))
  {
300 | Chapter 12: Cookies, Sessions, and Authentication

$username = $_SESSION['username'];
    $password = $_SESSION['password'];
    $forename = $_SESSION['forename'];
    $surname  = $_SESSION['surname'];
    echo "Welcome back $forename.<br>
          Your full name is $forename $surname.<br>
          Your username is '$username'
          and your password is '$password'.";
  }
  else echo "Please <a href='authenticate2.php'>click here</a> to log in.";
?>
Now you are ready to call up authenticate2.php  into your browser. Enter a username
of bsmith  and password of mysecret  (or pjones  and acrobat ) when prompted, and
click the link to load in continue.php . When your browser calls it up, the result should
be something like Figure 12-5 .
Figure 12-5. Maintaining user data with sessions
Sessions neatly confine to a single program the extensive code required to authenti‐
cate and log in a user. Once a user has been authenticated, and you have created a
session, your program code becomes very simple indeed. Y ou need only to call up
session_start  and look up any variables to which you need access from $_SESSION .
In Example 12-6 , a quick test of whether $_SESSION['username']  has a value  is
enough to let you know that the current user is authenticated, because session vari‐
ables are stored on the server (unlike cookies, which are stored on the web browser)
and can therefore be trusted.
If $_SESSION['username']  has not been assigned a value, no session is active, so the
last line of code in Example 12-6  directs users to the login page at authenticate2.php .
The continue.php  program prints back the value of the user’s pass‐
word to show you how session variables work. In practice, you
already know that the user is logged in, so you shouldn’t need to
keep track of (or display) any passwords, and in fact doing so
would be a security risk.
Using Sessions | 301

Ending a Session
When the time comes to end a session, usually when a user requests to log out from
your site, you can use the session_destroy  function  in association, as in
Example 12-7 . That example provides a useful function for totally destroying a ses‐
sion, logging a user out, and unsetting all session variables.
Example 12-7. A handy function to destroy a session and its data
<?php
  function destroy_session_and_data()
  {
    session_start();
    $_SESSION = array();
    setcookie(session_name(), '', time() - 2592000, '/');
    session_destroy();
  }
?>
To see this in action, you could modify continue.php  as in Example 12-8 .
Example 12-8. Retrieving session variables and then destroying the session
<?php
  session_start();
  if (isset($_SESSION['username']))
  {
    $username = $_SESSION['username'];
    $password = $_SESSION['password'];
    $forename = $_SESSION['forename'];
    $surname  = $_SESSION['surname'];
    destroy_session_and_data();
    echo "Welcome back $forename.<br>
          Your full name is $forename $surname.<br>
          Your username is '$username'
          and your password is '$password'.";
  }
  else echo "Please <a href='authenticate2.php'>click here</a> to log in.";
  function destroy_session_and_data()
  {
    $_SESSION = array();
    setcookie(session_name(), '', time() - 2592000, '/');
    session_destroy();
  }
?>
302 | Chapter 12: Cookies, Sessions, and Authentication

The first time you navigate from authenticate2.php  to continue.php , it will display all
the session variables. But, because of the call to destroy_session_and_data , if you
then click your browser’s Reload button, the session will have been destroyed and
you’ll be prompted to return to the login page.
Setting a Time-Out
There are other times when you might wish to close a user’s session yourself, such as
when the user has forgotten or neglected to log out, and you want the program to do
so for her for her own security. Y ou do this by setting the time-out after which a log‐
out will automatically occur if there has been no activity.
To do this, use the ini_set  function as follows. This example sets the time-out to
exactly one day:
ini_set('session.gc_maxlifetime', 60 * 60 * 24);
If you wish to know what the current time-out period is, you can display it using the
following:
echo ini_get('session.gc_maxlifetime');
Session Security
Although I mentioned that once you had authenticated a user and set up a session,
you could safely assume that the session variables were trustworthy, this isn’t exactly
the case. The reason is that it’s possible to use packet sniffing  (sampling of data) to
discover session IDs passing across a network. Additionally, if the session ID is passed
in the Get part of a URL, it might appear in external site server logs. The only truly
secure way of preventing these from being discovered is to implement Secure Sockets
Layer (SSL)  and run HTTPS instead of HTTP web pages. That’s beyond the scope of
this book, although you may like to take a look at http://apache-ssl.org  for details on
setting up a secure web server.
Preventing session hijacking
When SSL is not a possibility, you can further authenticate users by storing their IP
address along with their other details by adding a line such as the following when you
store their session:
$_SESSION['ip'] = $_SERVER['REMOTE_ADDR'];
Then, as an extra check, whenever any page loads and a session is available, perform
the following check. It calls the function different_user  if the stored IP address
doesn’t match the current one:
if ($_SESSION['ip'] != $_SERVER['REMOTE_ADDR']) different_user();
Using Sessions | 303

What code you place in your different_user  function is up to you. I recommend
that you simply delete the current session and ask the user to log in again due to a
technical error. Don’t say any more than that, or you’re giving away potentially useful
information.
Of course, you need to be aware that users on the same proxy server, or sharing the
same IP address on a home or business network, will have the same IP address.
Again, if this is a problem for you, use SSL. Y ou can also store a copy of the browser
user agent string  (a string that developers put in their browsers to identify them by
type and version), which might also distinguish users due to the wide variety of
browser types, versions, and computer platforms. Use the following to store the user
agent:
$_SESSION['ua'] = $_SERVER['HTTP_USER_AGENT'];
And use this to compare the current agent string with the saved one:
if ($_SESSION['ua'] != $_SERVER['HTTP_USER_AGENT']) different_user();
Or, better still, combine the two checks like this and save the combination as a hash
hexadecimal string:
$_SESSION['check'] = hash('ripemd128', $_SERVER['REMOTE_ADDR'] .
    $_SERVER['HTTP_USER_AGENT']);
And use this to compare the current and stored strings:
if ($_SESSION['check'] != hash('ripemd128', $_SERVER['REMOTE_ADDR'] .
    $_SERVER['HTTP_USER_AGENT'])) different_user();
Preventing session fixation
Session fixation  happens when a malicious user tries to present a session ID to the
server rather than letting the server create one. It can happen when a user takes
advantage of the ability to pass a session ID in the Get part of a URL, like this:
http://yourserver.com/authenticate.php?PHPSESSID=123456789
In this example, the made-up session ID of 123456789 is being passed to the server.
Now, consider Example 12-9 , which is susceptible to session fixation. To see how, type
it and save it as sessiontest.php .
Example 12-9. A session susceptible to session fixation
<?php // sessiontest.php
  session_start();
  if (!isset($_SESSION['count'])) $_SESSION['count'] = 0;
  else ++$_SESSION['count'];
304 | Chapter 12: Cookies, Sessions, and Authentication

echo $_SESSION['count'];
?>
Once it’s saved, call it up in your browser using the following URL (prefacing it with
the correct pathname, such as http://localhost/web/ ):
sessiontest.php?PHPSESSID=1234
Press Reload a few times, and you’ll see the counter increase. Now try browsing to
sessiontest.php?PHPSESSID=5678
Press Reload a few times here, and you should see it count up again from 0. Leave the
counter on a different number than the first URL and then go back to the first URL
and see how the number changes back. Y ou have created two different sessions of
your own choosing here, and you could easily create as many as you needed.
The reason this approach is so dangerous is that a malicious attacker could try to dis‐
tribute these types of URLs to unsuspecting users, and if any of them followed these
links, the attacker would be able to come back and take over any sessions that had not
been deleted or expired!
To prevent this, add a simple check to change the session ID using session_regener
ate_id . This function keeps all current session variable values, but replaces the ses‐
sion ID with a new one that an attacker cannot know.
To do this, check for a special session variable that you arbitrarily invent. If it doesn’t
exist, you know that this is a new session, so you simply change the session ID and set
the special session variable to note the change.
Example 12-10  shows how the code to do this might look, using the session variable
initiated .
Example 12-10. Session regeneration
<?php
  session_start();
  if (!isset($_SESSION['initiated']))
  {
    session_regenerate_id();
    $_SESSION['initiated'] = 1;
  }
  if (!isset($_SESSION['count'])) $_SESSION['count'] = 0;
  else ++$_SESSION['count'];
  echo $_SESSION['count'];
?>
Using Sessions | 305

This way, an attacker can come back to your site using any of the session IDs that he
or she generated, but none of them will call up another user’s session, as they will all
have been replaced with regenerated IDs. If you want to be ultra-paranoid, you can
even regenerate the session ID on each request.
Forcing cookie-only sessions
If you are prepared to require your users to enable cookies on your website, you can
use the ini_set  function, like this:
ini_set('session.use_only_cookies', 1);
With that setting, the ?PHPSESSID=  trick will be completely ignored. If you use this
security measure, I also recommend that you inform your users that your site
requires cookies, so they know what’s wrong if they don’t get the results they want.
Using a shared server
On a server shared with other accounts, you will not want to have all your session
data saved into the same directory as theirs. Instead, you should choose a directory to
which only your account has access (and that is not web-visible) to store your ses‐
sions, by placing an ini_set  call near the start of a program, like this:
ini_set('session.save_path', '/home/user/myaccount/sessions');
The configuration option will keep this new value only during the program’s execu‐
tion, and the original configuration will be restored at the program’s ending.
This sessions folder can fill up quickly; you may wish to periodically clear out older
sessions according to how busy your server gets. The more it’s used, the less time you
will want to keep a session stored.
Remember that your websites can and will be subject to hacking
attempts. There are automated bots running riot around the Inter‐
net, trying to find sites vulnerable to exploits. So whatever you do,
whenever you are handling data that is not 100 percent generated
within your own program, you should always treat it with the
utmost caution.
At this point, you should now have a very good grasp of both PHP and MySQL, so in
the next chapter it’s time to introduce the third major technology covered by this
book, JavaScript. 
306 | Chapter 12: Cookies, Sessions, and Authentication

Questions
1.Why must a cookie be transferred at the start of a program?
2.Which PHP function stores a cookie on a web browser?
3.How can you destroy a cookie?
4.Where are the username and password stored in a PHP program when you are
using HTTP authentication?
5.Why is the hash  function a powerful security measure?
6.What is meant by salting a string?
7.What is a PHP session?
8.How do you initiate a PHP session?
9.What is session hijacking?
10.What is session fixation?
See Chapter 12 Answers  in Appendix A  for the answers to these questions.
Questions | 307



CHAPTER 13
Exploring JavaScript
JavaScript brings a dynamic functionality to your websites. Every time you see some‐
thing pop up when you mouse over an item in the browser, or see new text, colors, or
images appear on the page in front of your eyes, or grab an object on the page and
drag it to a new location—all those things are done through JavaScript. It offers
effects that are not otherwise possible, because it runs inside the browser and has
direct access to all the elements in a web document.
JavaScript first appeared in the Netscape Navigator browser in 1995, coinciding with
the addition of support for Java technology in the browser. Because of the initial
incorrect impression that JavaScript was a spin-off of Java, there has been some long-
term confusion over their relationship. However, the naming was just a marketing
ploy to help the new scripting language benefit from the popularity of the Java pro‐
gramming language.
JavaScript gained new power when the HTML elements of the web page got a more
formal, structured definition in what is called the Document Object Model , or DOM .
The DOM makes it relatively easy to add a new paragraph or focus on a piece of text
and change it.
Because both JavaScript and PHP support much of the structured programming syn‐
tax used by the C programming language, they look very similar to each other. They
are both fairly high-level languages, too; for instance, they are weakly typed, so it’s
easy to change a variable to a new type just by using it in a new context.
Now that you have learned PHP , you should find JavaScript even easier. And you’ll be
glad you did, because it’s at the heart of the Web 2.0 Ajax technology that provides the
fluid web frontends that (along with HTML5 features) savvy web users expect these
days.
309

JavaScript and HTML Text
JavaScript is a client-side scripting language that runs entirely  inside the web browser.
To call it up, you place it between  opening <script>  and closing </script>  HTML
tags. A typical HTML 4.01 “Hello World” document using JavaScript might look like
Example 13-1 .
Example 13-1. “Hello World” displayed using JavaScript
<html>
  <head><title>Hello World</title></head>
  <body>
    <script type="text/javascript">
      document.write("Hello World")
    </script>
    <noscript>
      Your browser doesn't support or has disabled JavaScript
    </noscript>
  </body>
</html>
Y ou may have seen web pages that use the HTML tag <script
language="javascript"> , but that usage has now been deprecated.
This example uses the more recent and preferred <script
type="text/javascript"> , or you can just use <script>  on its
own if you like.
Within the <script>  tags is a single line of JavaScript code that uses its equivalent of
the PHP echo  or print  commands, document.write . As you’ d expect, it simply out‐
puts the supplied string to the current document, where it is displayed.
Y ou may also have noticed that, unlike with PHP , there is no trailing semicolon ( ;).
This is because a newline serves the same purpose as a semicolon in JavaScript. How‐
ever, if you wish to have more than one statement on a single line, you do need to
place a semicolon after each command except the last one. Of course, if you wish, you
can add a semicolon to the end of every statement, and your JavaScript will work fine.
The other thing to note in this example  is the <noscript>  and </noscript>  pair of
tags. These are used when you wish to offer alternative HTML to users whose
browser does not  support JavaScript or who have it disabled. Using these tags is up to
you, as they are not required, but you really ought to use them because it’s usually not
that difficult to provide static HTML alternatives to the operations you provide using
JavaScript. However, the remaining examples in this book will omit <noscript>  tags,
because we’re focusing on what you can do with JavaScript, not what you can do
without it.
310 | Chapter 13: Exploring JavaScript

When Example 13-1  is loaded, a web browser with JavaScript enabled will output the
following (see Figure 13-1 ):
Hello World
Figure 13-1. JavaScript, enabled and working
A browser with JavaScript disabled will display this message (see Figure 13-2 ):
Your browser doesn't support or has disabled JavaScript.
Figure 13-2. JavaScript has been disabled
Using Scripts Within a Document Head
In addition to placing a script within the body of a document, you can put it in the
<head>  section,  which is the ideal place if you wish to execute a script when a page
loads. If you place critical code and functions there, you can also ensure that they are
ready to use immediately by any other script sections in the document that rely on
them.
Another reason for placing a script in the document head is to enable JavaScript to
write things such as meta tags into the <head>  section, because the location of your
script is the part of the document it writes to by default.
Older and Nonstandard Browsers
If you need to support browsers that do not offer scripting, you will need to use the
HTML comment tags ( <!--  and -->) to prevent them from encountering script code
that they should not see. Example 13-2  shows how you add them to your script code.
JavaScript and HTML Text | 311

Example 13-2. The “Hello World” example modified  for non-JavaScript browsers
<html>
  <head><title>Hello World</title></head>
  <body>
    <script type="text/javascript"> <!--
      document.write("Hello World")
    // --></script>
  </body>
</html>
Here an opening HTML comment tag ( <!-- ) has been added directly after the open‐
ing <script>  statement and a closing comment tag ( // --> ) directly before the script
is closed with </script> .
The double forward slash ( //) is used by JavaScript to indicate that the rest of the line
is a comment. It is there so that browsers that do support JavaScript will ignore the
following -->, but non-JavaScript browsers will ignore the preceding //, and act on
the --> by closing the HTML comment.
Although the solution is a little convoluted, all you really need to remember is to use
the two following lines to enclose your JavaScript when you wish to support very old
or nonstandard browsers:
<script type="text/javascript"><!—
  (Your JavaScript goes here...)
// --></script>
However, the use of these comments is unnecessary for any browser released over the
past several years.
There are a couple of other scripting languages you should know
about. These include Microsoft’s VBScript, which is based on the
Visual Basic programming language, and Tcl, a rapid prototyping
language. They are called up in a similar way to JavaScript, except
they use types of text/vbscript  and text/tcl , respectively.
VBScript works only in Internet Explorer; use of it in other brows‐
ers requires a plug-in. Tcl always needs a plug-in. So both should be
considered nonstandard, and neither is covered in this book.
Including JavaScript Files
In addition to writing JavaScript code directly in HTML documents, you can include
files of JavaScript code either from your website or from anywhere on the Internet. 
The syntax for this is as follows:
<script type="text/javascript" src="script.js"></script>
Or, to pull a file in from the Internet, use this:
312 | Chapter 13: Exploring JavaScript

<script type="text/javascript" src="http://someserver.com/script.js">
</script>
As for the script files themselves, they must not include any <script>  or </script>
tags, because they are unnecessary: the browser already knows that a JavaScript file is
being loaded. Putting them in the JavaScript files will cause an error.
Including script files is the preferred way for you to use third-party JavaScript files on
your website.
It is possible to leave out the type="text/javascript"  parameters;
all modern browsers default to assuming that the script contains
JavaScript.
Debugging JavaScript Errors
When you’re learning JavaScript, it’s  important to be able to track typing or other
coding errors. Unlike PHP , which displays error messages in the browser, JavaScript
handles error messages in a way that changes according to the browser used.
Table 13-1  lists how to access JavaScript error messages in each of the five most  com‐
monly used browsers.
Table 13-1. Accessing JavaScript error messages in different  browsers
Browser How to access JavaScript error messages
Apple Safari Safari does not have an Error Console enabled by default, but you can turn it on by selecting
Safari→Preferences→Advanced→“Show Develop menu in menu bar.” However, you may prefer
to use the Firebug Lite JavaScript module , which many people find  easier to use.
Google Chrome Click the menu icon that looks like a page with a corner turned; then select
Developer→JavaScript Console. You can also use the shortcut Ctrl-Shift-J on a PC, or Command-
Shift-J on a Mac.
Microsoft Internet Explorer Select Tools→Internet Options →Advanced; then uncheck the Disable Script Debugging box and
check the “Display a Notification  about Every Script Error” box.
Mozilla Firefox Select Tools→Error Console or use the shortcut Ctrl-Shift-J on a PC, or Command-Shift-J on a Mac.
Opera Select Tools→Advanced→Error Console.
OS X users: Although I have shown you how to create an Error
Console for JavaScript, you may prefer to use Google Chrome (for
Intel OS X 10.5 or higher).
To try out whichever Error Console you are using, let’s create a script with a minor
error. Example 13-3  is much the same as Example 13-1 , but the final double quota‐
JavaScript and HTML Text | 313

tion mark has been left off the end of the string "Hello World" —a common syntax
error.
Example 13-3. A JavaScript “Hello World” script with an error
<html>
  <head><title>Hello World</title></head>
  <body>
    <script type="text/javascript">
      document.write("Hello World)
    </script>
  </body>
</html>
Type the example and save it as test.html ; then call it up in your browser. It should
succeed only in displaying the title, not anything in the main browser window. Now
call up the Error Console in your browser, and you should see a message such as the
one in Example 13-4 . To the right there will be a link to the source, which, when
clicked, shows the error line highlighted (but does not indicate the position at which
the error was encountered).
Example 13-4. A Mozilla Firefox Error Console message
SyntaxError: unterminated string literal
In Microsoft Internet Explorer, the error message will look like Example 13-5 , and
there’s no helpful arrow, but you are given the line and position.
Example 13-5. A Microsoft  Internet Explorer Error Console message
unterminated string constant
Google Chrome and Opera will give the message in Example 13-6 . Again, you’ll be
given the line error number but not the exact location.
Example 13-6. A Google Chrome/Opera Error Console message
Uncaught SyntaxError: Unexpected token ILLEGAL
And Apple Safari provides the message in Example 13-7 , with a link to the source on
the right stating the line number of the error. Y ou can click the link to highlight the
line, but it will not show where on the line the error occurred.
Example 13-7. An Opera Error Console message
SyntaxError: Unexpected EOF
314 | Chapter 13: Exploring JavaScript

If you find this support a little underwhelming, the Firebug plug-in for Firefox (and
now Chrome too) at http://getfirebug.com  is very popular among JavaScript develop‐
ers and is definitely worth a look.
If you will be typing the following code snippets to try them out,
don’t forget to surround them with <script>  and </script>  tags.
Using Comments
Because of their shared inheritance  from the C programming  language,  PHP and
JavaScript have many similarities, one of which is commenting. First, there’s the
single-line comment, like this:
// This is a comment
This style uses a pair of forward slash characters ( //) to inform JavaScript that every‐
thing following is to be ignored. Y ou also have multiline comments, like this:
/* This is a section
   of multiline comments
   that will not be
   interpreted */
Here you start a multiline comment with the sequence /* and end it with */. Just
remember that you cannot nest multiline comments, so make sure that you don’t
comment out large sections of code that already contain multiline comments.
Semicolons
Unlike PHP , JavaScript generally does not require semicolons if you have only one
statement on a line. Therefore, the following is valid:
x += 10
However, when you wish to place more than one statement on a line, you must sepa‐
rate them with semicolons, like this:
x += 10; y -= 5; z = 0
Y ou can normally leave the final semicolon off, because the newline terminates the
final statement.
Using Comments | 315

There are exceptions to the semicolon rule. If you write JavaScript
bookmarklets, or end a statement with a variable or function refer‐
ence, and the first character of the line below is a left parenthesis or
bracket, you must  remember to append a semicolon or the Java‐
Script will fail. So, when in doubt, use a semicolon.
Variables
No particular character identifies a variable in JavaScript as the dollar sign does in
PHP . Instead, variables use the following naming rules:
•A variable may include only the letters a-z, A-Z, 0-9, the $ symbol, and the
underscore ( _).
•No other characters, such as spaces or punctuation, are allowed in a variable
name.
•The first character of a variable name can be only a-z, A-Z, $, or _ (no numbers).
•Names are case-sensitive. Count , count , and COUNT  are all different variables.
•There is no set limit on variable name lengths.
And yes, you’re right that is a $ there in that list. It is allowed by JavaScript and may
be the first character of a variable or function name. Although I don’t recommend
keeping the $ symbols, it means that you can port a lot of PHP code more quickly to
JavaScript that way.
String Variables
JavaScript string variables should be enclosed in either single or double quotation
marks, like this:
greeting = "Hello there"
warning  = 'Be careful'
Y ou may include a single quote within a double-quoted string or a double quote
within a single-quoted string. But you must escape a quote of the same type by using
the backslash character, like this:
greeting = "\"Hello there\" is a greeting"
warning  = '\'Be careful\' is a warning'
To read from a string variable, you can assign it to another one, like this:
newstring = oldstring
or you can use it in a function, like this:
status = "All systems are working"
document.write(status)
316 | Chapter 13: Exploring JavaScript

Numeric Variables
Creating a numeric variable is as simple as assigning a value, like these examples:
count       = 42
temperature = 98.4
Like strings, numeric variables can be read from and used in expressions and func‐
tions.
Arrays
JavaScript arrays are also very similar to those in PHP , in that an array can contain
string or numeric data, as well as other arrays. To assign values to an array, use the
following syntax (which in this case creates an array of strings):
toys = ['bat', 'ball', 'whistle', 'puzzle', 'doll']
To create a multidimensional array, nest smaller arrays  within a larger one. So, to cre‐
ate a two-dimensional array containing the colors of a single face of a scrambled
Rubik’s Cube (where the colors red, green, orange, yellow, blue, and white are repre‐
sented by their capitalized initial letters), you could use the following code:
face =
[
  ['R', 'G', 'Y'],
  ['W', 'R', 'O'],
  ['Y', 'W', 'G']
]
The previous example has been formatted to make it obvious what is going on, but it
could also be written like this:
face = [['R', 'G', 'Y'], ['W', 'R', 'O'], ['Y', 'W', 'G']]
or even like this:
top = ['R', 'G', 'Y']
mid = ['W', 'R', 'O']
bot = ['Y', 'W', 'G']
face = [top, mid, bot]
To access the element two down and three along in this matrix, you would use the
following (because array elements start at position 0):
document.write(face[1][2])
This statement will output the letter O for orange .
Variables | 317

JavaScript arrays are powerful storage structures, so Chapter 15  dis‐
cusses them in much greater depth.
Operators
Operators in JavaScript,  as in PHP , can involve mathematics, changes to strings, and
comparison and logical operations ( and, or, etc.). JavaScript mathematical operators
look a lot like plain arithmetic; for instance, the following statement outputs 15:
document.write(13 + 2)
The following sections teach you about the various operators.
Arithmetic Operators
Arithmetic operators  are used to perform mathematics.  Y ou can use  them for the
main four  operations (addition, subtraction, multiplication, and division) as well as
to find the modulus (the remainder after a division) and  to increment or decrement a
value (see Table 13-2 ).
Table 13-2. Arithmetic operators
Operator Description Example
+ Addition j + 12
- Subtraction j - 22
* Multiplication j * 7
/ Division j / 3.13
% Modulus (division remainder) j % 6
++ Increment ++j
-- Decrement --j
Assignment Operators
The assignment  operators  are used to assign values to variables. They start with the
very  simple =, and move  on to +=, -=, and so on. The operator += adds the value on 
the right side to the variable on the left, instead of totally replacing the value on the
left. Thus, if count  starts with the value 6, the statement
count += 1
sets count  to 7, just like the more familiar assignment statement:
count = count + 1
318 | Chapter 13: Exploring JavaScript

Table 13-3  lists the various assignment operators available.
Table 13-3. Assignment operators
Operator Example Equivalent to
= j = 99 j = 99
+= j += 2 j = j + 2
+= j += 'string' j = j + 'string'
-= j -= 12 j = j - 12
*= j *= 2 j = j * 2
/= j /= 6 j = j / 6
%= j %= 7 j = j % 7
Comparison Operators
Comparison operators  are generally used inside a construct such as an if statement,
where you need to compare two items. For example, you may wish to know whether a
variable you have been incrementing has reached a specific value, or whether another
variable is less than a set value, and so on (see Table 13-4 ).
Table 13-4. Comparison operators
Operator Description Example
== Is equal  to j == 42
!= Is not equal  to j != 17
> Is greater than j > 0
< Is less than j < 100
>= Is greater than or equal  to j >= 23
<= Is less than or equal  to j <= 13
=== Is equal  to (and of the same type) j === 56
!== Is not equal  to (and of the same type) j !== '1'
Logical Operators
Unlike PHP , JavaScript’s logical  operators  do not include and and or equivalents  to &&
and ||, and there is no xor operator (see Table 13-5 ).
Operators | 319

Table 13-5. Logical operators
Operator Description Example
&& And j == 1 && k == 2
|| Or j < 100 || j > 0
! Not ! (j == k)
Variable Incrementing and Decrementing
The following forms of post- and pre-incrementing and  decrementing you learned  to
use in PHP are also supported by JavaScript:
++x
--y
x += 22
y -= 3
String Concatenation
JavaScript handles string concatenation  slightly   differently from PHP . Instead of
the . (period) operator, it uses the plus sign ( +), like this:
document.write("You have " + messages + " messages.")
Assuming that the variable messages  is set to the value 3, the output from this line of
code will be as follows:
You have 3 messages.
Just as you can add a value to a numeric variable with the += operator, you can also
append one string to another the same way:
name =  "James"
name += " Dean"
Escaping Characters
Escape characters, which you’ve seen used to insert quotation marks in strings, can
also insert various special characters such as tabs, newlines, and carriage returns.
Here is an  example using tabs to lay out a heading; it is included here merely  to illus‐
trate escapes, because in web pages, there are better ways to do layout:
heading = "Name\tAge\tLocation"
Table 13-6  details the escape characters available.
320 | Chapter 13: Exploring JavaScript

Table 13-6. JavaScript’s escape characters
Character Meaning
\b Backspace
\f Form feed
\n New line
\r Carriage return
\t Tab
\' Single quote (or apostrophe)
\" Double quote
\\ Backslash
\XXX An octal number between 000  and 377  that represents the Latin-1 character equivalent (such as \251  for the
© symbol)
\xXX A hexadecimal number between 00 and FF that represents the Latin-1 character equivalent (such as \xA9  for
the © symbol)
\uXXXX A hexadecimal number between 0000  and FFFF  that represents the Unicode character equivalent (such as
\u00A9  for the © symbol)
Variable Typing
Like PHP , JavaScript is a very loosely typed language; the type of a variable is deter‐
mined only when a value is assigned and can change as the variable appears in differ‐
ent contexts. Usually, you don’t have to worry about the type; JavaScript figures out
what you want and just does it.
Take a look at Example 13-8 , in which:
1.The variable n is assigned the string value 838102050 , the next line prints out its
value, and the typeof  operator is used to look up the type.
2.n is given the value returned when the numbers 12345 and 67890 are multiplied
together. This value is also 838102050 , but it is a number, not a string. The type of
variable is then looked up and displayed.
3.Some text is appended to the number n and the result is displayed.
Example 13-8. Setting a variable’s type by assignment
<script>
  n = '838102050'        // Set 'n' to a string
  document.write('n = ' + n + ', and is a ' + typeof n + '<br>')
  n = 12345 * 67890;     // Set 'n' to a number
  document.write('n = ' + n + ', and is a ' + typeof n + '<br>')
Variable Typing | 321

n += ' plus some text' // Change 'n' from a number to a string
  document.write('n = ' + n + ', and is a ' + typeof n + '<br>')
</script>
The output from this script looks like this:
n = 838102050, and is a string
n = 838102050, and is a number
n = 838102050 plus some text, and is a string
If there is ever any doubt about the type of a variable, or you need to ensure that a
variable has a particular type, you can force it to that type by using statements such as
the following (which respectively turn a string into a number and a number into a
string):
n = "123"
n *= 1    // Convert 'n' into a number
n = 123
n += ""   // Convert 'n' into a string
Or, of course, you can always look up a variable’s type by using the typeof  operator.
Functions
As with PHP , JavaScript functions are used to separate out sections of code that per‐
form a particular task. To create a function, declare it in the manner shown in
Example 13-9 .
Example 13-9. A simple function declaration
<script>
  function product(a, b)
  {
    return a*b
  }
</script>
This function takes the two parameters passed, multiplies them together, and returns
the product.
Global Variables
Global  variables are ones defined outside of any functions (or within functions, but
defined without the var keyword). They can be defined in the following ways:
322 | Chapter 13: Exploring JavaScript

a = 123               // Global scope
var b = 456               // Global scope
if (a == 123) var c = 789 // Global scope
Regardless of whether you are using the var keyword,  as long as a variable is defined
outside of a function, it is global in scope. This means that every part of a script can
have access to it.
Local Variables
Parameters passed to a function automatically  have local scope; that is, they can be
referenced only from within that function. However, there is one exception. Arrays
are passed to a function by reference, so if you modify any elements in an array
parameter, the elements of the original array will be modified.
To define a local variable that has scope only within the current function, and has not
been passed as a parameter, use the var keyword. Example 13-10  shows a function
that creates one variable with global scope and two with local scope.
Example 13-10. A function creating variables with global and local scope
<script>
  function test()
  {
        a = 123               // Global scope
    var b = 456               // Local scope
    if (a == 123) var c = 789 // Local scope
  }
</script>
To test whether scope setting has worked in PHP , we can use the isset  function. But
in JavaScript there isn’t one, so Example 13-11  makes use of the typeof  operator,
which returns the string undefined  when a variable is not defined.
Example 13-11. Checking the scope of the variables defined  in function test
<script>
  test()
  if (typeof a != 'undefined') document.write('a = "' + a + '"<br>')
  if (typeof b != 'undefined') document.write('b = "' + b + '"<br>')
  if (typeof c != 'undefined') document.write('c = "' + c + '"<br>')
  function test()
  {
    a     = 123
    var b = 456
Local Variables | 323

if (a == 123) var c = 789
  }
</script>
The output from this script is the following single line:
a = "123"
This shows that only the variable a was given global scope, which is exactly what we
would expect, since the variables b and c were given local scope by being prefaced
with the var keyword.
If your browser issues a warning about b being undefined, the warning is correct but
can be ignored.
The Document Object Model
The designers of JavaScript were very smart. Rather than just creating yet another
scripting language (which would have still been a pretty good improvement at the
time), they had the vision to build it around the Document Object Model , or DOM .
This breaks down the parts of an HTML document into discrete objects , each with its
own properties  and methods  and each subject to JavaScript’s control.
JavaScript separates  objects, properties, and methods by using a period (one good
reason why + is the string concatenation operator in JavaScript, rather than the
period). For example, let’s consider a business card as an object we’ll call card . This
object contains properties such as a name, address, phone number, and so on. In the
syntax of JavaScript, these properties would look like this:
card.name
card.phone
card.address
Its methods are functions that retrieve, change, and otherwise act on the properties.
For instance, to invoke a method that displays the properties of object card , you
might use syntax such as this:
card.display()
Have a look at some of the earlier examples in this chapter and look at where the
statement document.write  is used. Now that you understand how JavaScript is based
around objects, you will see that write  is actually a method of the document  object.
Within JavaScript, there is a hierarchy of parent and child objects, which is what is
known as the Document Object Model (see Figure 13-3 ).
324 | Chapter 13: Exploring JavaScript

Figure 13-3. Example of DOM object hierarchy
The figure uses HTML tags that you are already familiar with to illustrate the parent/
child relationship between the various objects in a document. For example, a URL
within a link is part of the body of an HTML document. In JavaScript, it is referenced
like this:
url = document.links.linkname.href
Notice how this follows the central column down. The first part, document , refers to
the <html>  and <body>  tags; links.linkname  to the <a> tag; and href  to the href
attribute.
Let’s turn this into some HTML and a script to read a link’s properties. Type
Example 13-12  and save it as linktest.html ; then call it up in your browser.
If you are using Microsoft Internet Explorer as your main develop‐
ment browser, please just read through this section, then read the
section entitled “But It’s Not That Simple” on page 326, and finally
come back here and try the example with the getElementById
modification discussed there. Without it, this example will not
work for you.
Example 13-12. Reading a link URL with JavaScript
<html>
  <head>
    <title>Link Test</title>
  </head>
  <body>
    <a id="mylink" href="http://mysite.com">Click me</a><br>
    <script>
      url = document.links.mylink.href
      document.write('The URL is ' + url)
The Document Object Model | 325

</script>
  </body>
</html>
Note the short form of the <script>  tags where I have omitted the parameter
type="text/JavaScript"  to save you some typing. If you wish, just for the purposes
of testing this (and other examples), you could also omit everything outside of the
<script>  and </script>  tags. The output from this example is as follows:
Click me
The URL is http://mysite.com
The second line of output comes from the document.write  method. Notice how the
code follows the document tree down from document  to links  to mylink  (the id
given to the link) to href  (the URL destination value).
There is also a short form that works equally well, which starts with the value in the
id attribute: mylink.href . So you can replace this:
url = document.links.mylink.href
with the following:
url = mylink.href
But It’s Not That Simple
If you tried Example 13-12  in Safari,  Firefox, Opera, or Chrome, it will have worked
just great. But in Internet Explorer it will fail, because Microsoft’s implementation of
JavaScript, called JScript, has many subtle differences from the recognized standards.
Welcome to the world of advanced web development!
So what can we do about this? Well, in this case, instead of using the links  child
object  of the parent document  object, which Internet Explorer balks at, you have to
replace it with a method to fetch the element by its id. Therefore, the following line:
url = document.links.mylink.href
can be replaced with this one:
url = document.getElementById('mylink').href
And now the script will work in all major browsers. Incidentally, when you don’t have
to look up the element by id, the short form that follows will still work in Internet
Explorer, as well as the other browsers:
url = mylink.href
326 | Chapter 13: Exploring JavaScript

Another use for the $ symbol
As mentioned earlier, the $ symbol is allowed in JavaScript variable and function
names. Because of this, you may sometimes encounter strange-looking code like this:
url = $('mylink').href
Some enterprising programmers have decided that the getElementById  function is so
prevalent in JavaScript that they have written a function to replace it  called $, as with
jQuery (although it uses the $ for much more than that—see Chapter 21), and shown
in Example 13-13 .
Example 13-13. A replacement function for the getElementById method
<script>
  function $(id)
  {
    return document.getElementById(id)
  }
</script>
Therefore, as long as you have included the $ function in your code, syntax such as
this:
$('mylink').href
can replace code such as this:
document.getElementById('mylink').href
Using the DOM
The links  object is actually an array of URLs, so the mylink  URL in Example 13-12
can also be safely referred to on all browsers in the following way (because it’s the
first, and only, link):
url = document.links[0].href
If you want to know how many links there are in an entire document, you can query
the length  property of the links  object like this:
numlinks = document.links.length
Y ou can therefore extract and display all links in a document like this:
for (j=0 ; j < document.links.length ; ++j)
  document.write(document.links[j].href + '<br>')
The length  of something is a property of every array, and many objects as well. For
example, the number of items in your browser’s web history can be queried like this:
document.write(history.length)
The Document Object Model | 327

However, to stop websites from snooping on your browsing  history, the history
object stores only the number of sites in the array: you cannot read from or write to
these values. But you can replace the current page with one from the history, if you
know what position it has within the history. This can be very useful in cases in which
you know that certain pages in the history came from your site, or you simply wish to
send the browser back one or more pages, which you do with the go method of the
history  object. For example, to send the browser back three pages, issue the follow‐
ing command:
history.go(-3)
Y ou can also use the following methods to move back or forward a page at a time:
history.back()
history.forward()
In a similar manner, you can replace the currently loaded URL with one of your
choosing, like this:
document.location.href = 'http://google.com'
Of course, there’s a whole lot more to the DOM than reading and modifying links. As
you progress through the following chapters on JavaScript, you’ll become quite famil‐
iar with the DOM and how to access it.
About document.write
When teaching programming it’s necessary to have a quick and easy way to display
the results of expressions. In PHP (for example) there are the echo  and print  state‐
ments, which simply send text to the browser, so that’s easy. In JavaScript, though,
there are the following alternatives.
Using console.log
The console.log  function  will output the result of any value or expression passed to
it in the console of the current browser. This is a special mode with a frame or win‐
dow separate to the browser window, and in which errors and other messages can be
made to display. While great for experienced programmers, it is not ideal for begin‐
ners because calling up the console is different in all browsers, it works differently in
all browsers, and the output is not near the web content in the browser.
Using alert
The alert  function displays values or expressions passed to it in a pop-up window,
which requires you to click a button to close. Clearly this can become quite irritating
very quickly, and it has the downside of displaying only the current message—previ‐
ous ones are erased.
328 | Chapter 13: Exploring JavaScript

Writing into Elements
It is possible to write directly into the text of an HTML element, which is a fairly ele‐
gant solution (and the best one for production websites), except that for this book
every example would require such an element to be created, and some lines of Java‐
Script code to access it. This gets in the way of teaching the core of an example and
would make the code look overly cumbersome and confusing.
Using document.write
The document.write  function writes a value or expression at the current browser
location, and is therefore the perfect choice for quickly displaying results, because it
keeps all the examples short and sweet, by placing the output right there in the
browser next to the web content and code.
Y ou may, however, have have heard that this function is regarded as unsafe by some
developers, because when you call it after a web page is fully loaded, it will overwrite
the current document. While this is correct, it doesn’t apply to any of the examples in
this book, because they all use document.write  the way it was originally intended; as
part of the page creation process, calling it only before the page has completed load‐
ing and displaying.
However, although I use document.write  in this way for simple examples, I never use
it in production code (except in the very rarest of circumstances, where it actually is
necessary). Instead I almost always use the preceding option of writing directly into a
specially prepared element, as per the more complex examples in Chapter 17  onward
(which access the innerHTML  property of elements for program output).
So please remember that where you see document.write  being called in this book, it
is there only to simplify an example, and I recommend that you also only use the
function in the same way—for obtaining quick test results.
With that caveat explained, in the following chapter we’ll continue our exploration of
JavaScript by looking at how to control program flow and write expressions.
Questions
1.Which tags do you use to enclose JavaScript code?
2.By default, to which part of a document will JavaScript code output?
3.How can you include JavaScript code from another source in your documents?
4.Which JavaScript function is the equivalent of echo  or print  in PHP?
5.How can you create a comment in JavaScript?
6.What is the JavaScript string concatenation operator?
7.Which keyword can you use within a JavaScript function to define a variable that
has local scope?
Questions | 329

8.Give two cross-browser methods to display the URL assigned to the link with an
id of thislink .
9.Which two JavaScript commands will make the browser load the previous page
in its history array?
10.What JavaScript command would you use to replace the current document with
the main page at the oreilly.com  website?
See Chapter 13 Answers  in Appendix A  for the answers to these questions.
330 | Chapter 13: Exploring JavaScript

CHAPTER 14
Expressions and Control Flow in JavaScript
In the previous chapter, I introduced the basics of JavaScript and the DOM. Now it’s
time to look at how to construct complex expressions in JavaScript and how to con‐
trol the program flow of your scripts by using conditional statements.
Expressions
JavaScript  expressions are very similar to those in PHP . As you learned in Chapter 4 ,
an expression is a combination of values, variables, operators, and functions that
results in a value; the result can be a number, a string, or a Boolean value (which eval‐
uates to either true  or false ).
Example 14-1  shows some simple expressions. For each line, it prints out a letter
between a and d, followed by a colon and the result of the expressions. The <br>  tag is
there to create a line break and separate the output into four lines (remember that
both <br>  and <br />  are acceptable in HTML5, so I chose to use the former style for
brevity).
Example 14-1. Four simple Boolean expressions
<script>
  document.write("a: " + (42 > 3) + "<br>")
  document.write("b: " + (91 < 4) + "<br>")
  document.write("c: " + (8 == 2) + "<br>")
  document.write("d: " + (4 < 17) + "<br>")
</script>
The output from this code is as follows:
a: true
b: false
331

c: false
d: true
Notice that both expressions a: and d: evaluate to true . But b: and c: evaluate to
false . Unlike PHP (which would print the number 1 and nothing, respectively),
actual strings of true  and false  are displayed.
In JavaScript, when you are checking whether a value is true  or false , all values eval‐
uate to true  except the following, which evaluate to false : the string false  itself, 0, –
0, the empty string, null , undefined , and NaN (Not a Number, a computer engineer‐
ing concept for an illegal floating-point operation such as division by zero).
Note how I am referring to true  and false  in lowercase. This is because, unlike in
PHP , these values must  be in lowercase in JavaScript. Therefore, only the first of the
two following statements will display, printing the lowercase word true , because the
second will cause a 'TRUE' is not defined  error:
if (1 == true) document.write('true') // True
if (1 == TRUE) document.write('TRUE') // Will cause an error
Remember that any code snippets you wish to type and try for
yourself in an HTML file need to be enclosed within <script>  and
</script>  tags.
Literals and Variables
The simplest form of an  expression is a literal , which means something that evaluates
to itself, such as the number 22 or the string Press Enter . An expression could also
be a variable, which evaluates to the value that has been assigned to it. They are both
types of expressions, because they return a value.
Example 14-2  shows three different literals and two variables, all of which return val‐
ues, albeit of different types.
Example 14-2. Five types of literals
<script>
  myname = "Peter"
  myage  = 24
  document.write("a: " + 42     + "<br>") // Numeric literal
  document.write("b: " + "Hi"   + "<br>") // String literal
  document.write("c: " + true   + "<br>") // Constant literal
  document.write("d: " + myname + "<br>") // String variable
  document.write("e: " + myage  + "<br>") // Numeric variable
</script>
332 | Chapter 14: Expressions and Control Flow in JavaScript

And, as you’ d expect, you see a return value from all of these in the following output:
a: 42
b: Hi
c: true
d: Peter
e: 24
Operators let you create more-complex expressions that evaluate to useful results.
When you combine assignment or control-flow constructs with expressions, the
result is a statement .
Example 14-3  shows one of each. The first assigns the result of the expression 366 -
day_number  to the variable days_to_new_year , and the second outputs a friendly
message only if the expression days_to_new_year < 30  evaluates to true .
Example 14-3. Two simple JavaScript statements
<script>
  days_to_new_year = 366 - day_number;
  if (days_to_new_year < 30) document.write("It's nearly New Year")
</script>
Operators
JavaScript offers a lot of powerful operators that range from arithmetic, string, and
logical operators to assignment, comparison, and more (see Table 14-1 ).
Table 14-1. JavaScript operator types
Operator Description Example
Arithmetic Basic mathematics a + b
Array Array manipulation a + b
Assignment Assign values a = b + 23
Bitwise Manipulate bits within bytes 12 ^ 9
Comparison Compare two values a < b
Increment/decrement Add or subtract one a++
Logical Boolean a && b
String Concatenation a + 'string'
Each operator takes a different number of operands:
•Unary  operators, such as incrementing ( a++) or negation ( -a), take a single
operand.
Operators | 333

•Binary  operators, which represent the bulk of JavaScript operators—including
addition, subtraction, multiplication, and division—take two operands.
•One ternary  operator, which takes the form ? x : y . It’s a terse single-line if
statement that chooses between two expressions depending on a third one.
Operator Precedence
As with PHP ,  JavaScript utilizes operator precedence,  in which some operators in an 
expression  are considered more  important  than others and are therefore  evaluated 
first. Table 14-2  lists JavaScript’s operators and their precedencies.
Table 14-2. Precedence of JavaScript operators (high to low)
Operator(s) Type(s)
() [] . Parentheses, call, and member
++ -- Increment/decrement
+ - ~ ! Unary, bitwise, and logical
* / % Arithmetic
+ - Arithmetic and string
<< >> >>> Bitwise
< > <= >= Comparison
== != === !== Comparison
& ^ | Bitwise
&& Logical
|| Logical
? : Ternary
= += -= *= /= %= Assignment
<<= >>= >>>= &= ^= |= Assignment
, Separator
Associativity
Most  JavaScript  operators  are  processed  in order  from  left to right  in an equation.
But some  operators require  processing  from  right  to left instead.  The  direction  of
processing  is called the operator’s associativity .
This associativity becomes important in cases where you do not explicitly force prece‐
dence. For example, look at the following assignment operators, by which three vari‐
ables are all set to the value 0:
level = score = time = 0
334 | Chapter 14: Expressions and Control Flow in JavaScript

This multiple assignment is possible only because the rightmost part of the expres‐
sion is evaluated first and then processing continues in a right-to-left direction.
Table 14-3  lists operators and their associativity.
Table 14-3. Operators and associativity
Operator Description Associativity
++ -- Increment and decrement None
new Create a new object Right
+ - ~ ! Unary and bitwise Right
?: Ternary Right
= *= /= %= += -= Assignment Right
<<= >>= >>>= &= ^= |= Assignment Right
, Separator Left
+ - * / % Arithmetic Left
<< >> >>> Bitwise Left
< <= > >= == != === !== Arithmetic Left
Relational Operators
Relational operators  test two operands and return a Boolean result of either true  or
false . There are three types of relational operators: equality , comparison , and logical .
Equality operators
The equality  operator is == (which  should not be confused with the = assignment
operator). In Example 14-4 , the first statement assigns a value, and the second tests it
for equality. As it stands, nothing will be printed out, because month  is assigned the
string value July , and therefore the check for it having a value of October  will fail.
Example 14-4. Assigning a value and testing for equality
<script>
  month = "July"
  if (month == "October") document.write("It's the Fall")
</script>
If the two operands  of an equality expression are of different types, JavaScript will
convert them to whatever type makes best sense to it. For example, any strings com‐
posed entirely of numbers will be converted to numbers whenever compared with a
number. In Example 14-5 , a and b are two different values (one is a number and the
other is a string), and we would therefore normally expect neither of the if state‐
ments to output a result.
Operators | 335

Example 14-5. The equality and identity operators
<script>
  a = 3.1415927
  b = "3.1415927"
  if (a == b)  document.write("1")
  if (a === b) document.write("2")
</script>
However, if you run the example, you will see that it outputs the number 1, which
means that the first if statement evaluated to true . This is because the string value of
b was first temporarily converted to a number, and therefore both halves of the equa‐
tion had a numerical value of 3.1415927.
In contrast, the second if statement uses the identity  operator, three equals signs in a
row, which prevents JavaScript from automatically converting types. This means that
a and b are therefore found to be different, so nothing is output.
As with forcing operator precedence, whenever you’re in doubt about how JavaScript
will convert operand types, you can use the identity operator to turn this behavior off.
Comparison operators
Using  comparison  operators, you can test for more than  just equality and inequality.
JavaScript  also gives you > (is greater than), < (is less than), >= (is greater than or
equal to), and <= (is less than or equal to) to play with. Example 14-6  shows these
operators in use.
Example 14-6. The four comparison operators
<script>
  a = 7; b = 11
  if (a > b)  document.write("a is greater than b<br>")
  if (a < b)  document.write("a is less than b<br>")
  if (a >= b) document.write("a is greater than or equal to b<br>")
  if (a <= b) document.write("a is less than or equal to b<br>")
</script>
In this example, where a is 7 and b is 11, the following is output (because 7 is less than
11, and also less than or equal to 11):
a is less than b
a is less than or equal to b
Logical operators
Logical operators produce true-or-false results, and are also known  as Boolean  opera‐
tors. There are three of them in JavaScript (see Table 14-4 ).
336 | Chapter 14: Expressions and Control Flow in JavaScript

Table 14-4. JavaScript’s logical operators
Logical operator Description
&& (and) true  if both operands are true
|| (or) true  if either operand is true
! (not) true  if the operand is false , or false  if the operand is true
Y ou can see how these can be used in Example 14-7 , which outputs 0, 1, and true .
Example 14-7. The logical operators in use
<script>
  a = 1; b = 0
  document.write((a && b) + "<br>")
  document.write((a || b) + "<br>")
  document.write((  !b  ) + "<br>")
</script>
The && statement requires both operands to be true  if it is going to return a value of
true , the || statement will be true  if either value is true , and the third statement
performs a NOT on the value of b, turning it from 0 into a value of true .
The || operator can cause unintentional problems, because the second operand will
not be evaluated if the first is evaluated as true . In Example 14-8 , the  getnext  func‐
tion will never be called if finished  has a value of 1.
Example 14-8. A statement using the || operator
<script>
  if (finished == 1 || getnext() == 1) done = 1
</script>
If you need  getnext  to be called at each if statement, you should rewrite the code as
shown in Example 14-9 .
Example 14-9. The if...or statement modified  to ensure calling of getnext
<script>
  gn = getnext()
  if (finished == 1 OR gn == 1) done = 1;
</script>
In this case, the code in function getnext  will be executed and its return value stored
in gn before the if statement.
Operators | 337

Table 14-5  shows all the possible variations of using the logical operators. Y ou should
also note that !true  equals false , and !false  equals true .
Table 14-5. All possible logical expressions
Inputs Operators and results
Ab&& ||
truetruetrue true
truefalsefalse true
falsetruefalse true
falsefalsefalse false
The with Statement
The with  statement is not one that you’ve seen in earlier chapters on PHP , because it’s
exclusive to JavaScript. With it (if you see what I mean), you can simplify some types
of JavaScript statements by reducing many references to an object to just one refer‐
ence. References to properties and methods within the with  block are assumed to
apply to that object.
For example, take the code in Example 14-10 , in which the document.write  function
never references the variable string  by name.
Example 14-10. Using the with statement
<script>
  string = "The quick brown fox jumps over the lazy dog"
  with (string)
  {
    document.write("The string is " + length + " characters<br>")
    document.write("In upper case it's: " + toUpperCase())
  }
</script>
Even though string  is never directly referenced by document.write , this code still
manages to output the following:
The string is 43 characters
In upper case it's: THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
This is how the code works: the JavaScript interpreter recognizes that the length
property and toUpperCase()  method have to be applied to some object. Because they
stand alone, the interpreter assumes they apply to the string  object that you specified
in the with  statement.
338 | Chapter 14: Expressions and Control Flow in JavaScript

Using onerror
There are more constructs not available in PHP . Using either the onerror  event, or a
combination of the try and catch  keywords, you can catch JavaScript errors and deal
with them yourself.
Events  are actions that can be detected by JavaScript. Every element on a web page has
certain events that can trigger JavaScript functions. For example, the onclick  event of 
a button element can be set to call a function and make it run whenever a user clicks
the button.
Example 14-11  illustrates how to use the onerror  event.
Example 14-11. A script employing the onerror event
<script>
  onerror = errorHandler
  document.writ("Welcome to this website") // Deliberate error
  function errorHandler(message, url, line)
  {
    out  = "Sorry, an error was encountered.\n\n";
    out += "Error: " + message + "\n";
    out += "URL: "   + url     + "\n";
    out += "Line: "  + line    + "\n\n";
    out += "Click OK to continue.\n\n";
    alert(out);
    return true;
  }
</script>
The first line of this script tells the error event to use the new errorHandler  function
from now onward. This function takes three parameters—a message , a url, and a
line  number—so it’s a simple matter to display all these in an alert pop up.
Then, to test the new function, we deliberately place a syntax error in the code with a
call to document.writ  instead of document.write  (the final e is missing). Figure 14-1
shows the result of running this script in a browser. Using onerror  this way can also
be quite useful during the debugging process.
Using onerror | 339

Figure 14-1. Using the onerror event with an alert method pop-up
Using try...catch
The try and catch  keywords are more  standard and more flexible than the onerror
technique shown in the previous section. These keywords let you trap errors for a
selected section of code, rather than all scripts in a document. However, they do not
catch syntax errors, for which you need onerror .
The try...catch  construct is supported by all major browsers and is handy when
you want to catch a certain condition that you are aware could occur in a specific part
of your code.
For example, in Chapter 17  we’ll be exploring Ajax techniques that make use of the
XMLHttpRequest  object.  Unfortunately, this isn’t available in the Internet Explorer
browser (although it is in all other major browsers). Therefore, we can use try and
catch  to trap this case and do something else if the function is not available.
Example 14-12  shows how.
Example 14-12. Trapping an error with try and catch
<script>
  try
  {
    request = new XMLHTTPRequest()
  }
  catch(err)
  {
    // Use a different method to create an XML HTTP Request object
  }
</script>
340 | Chapter 14: Expressions and Control Flow in JavaScript

I won’t go into how we implement the missing object in Internet Explorer here, but
you can see how the system works. There’s also another keyword associated with try
and catch  called finally  that is always executed, regardless of whether an error
occurs in the try clause. To use it, just add something like the following statements
after a catch  statement:
finally
{
  alert("The 'try' clause was encountered")
}
Conditionals
Conditionals alter program flow.  They enable you to ask questions about certain
things and respond to the answers you get in different ways. There are three types of
nonlooping conditionals: the if statement, the switch  statement, and the ? operator.
The if Statement
Several examples in this chapter have already made use of if statements. The code
within such a statement is executed only if the given expression evaluates to true .
Multiline if statements require curly braces around them, but as in PHP , you can
omit the braces for single statements. Therefore, the following statements are valid:
if (a > 100)
{
  b=2
  document.write("a is greater than 100")
}
if (b == 10) document.write("b is equal to 10")
The else Statement
When a condition has not been met, you can execute an alternative by using an else
statement, like this:
if (a > 100)
{
  document.write("a is greater than 100")
}
else
{
  document.write("a is less than or equal to 100")
}
Conditionals | 341

Unlike PHP , JavaScript has no elseif  statement, but that’s not a problem, because
you can use an else  followed by another if to form the equivalent of an elseif
statement, like this:
if (a > 100)
{
  document.write("a is greater than 100")
}
else if(a < 100)
{
  document.write("a is less than 100")
}
else
{
  document.write("a is equal to 100")
}
As you can see, you can use another else  after the new if, which could equally be
followed by another if statement, and so on. Although I have shown braces on the
statements, because each is a single line, the whole previous example could be written
as follows:
if     (a > 100) document.write("a is greater than 100")
else if(a < 100) document.write("a is less than 100")
else             document.write("a is equal to 100")
The switch Statement
The switch  statement is useful when one variable or the result of an expression can
have multiple values, and you want to perform a different function for each value.
For example, the following code takes the PHP menu system we put together in
Chapter 4  and converts it to JavaScript. It works by passing a single string to the main
menu code according to what the user requests. Let’s say the options are Home,
About, News, Login, and Links, and we set the variable page  to one of these according
to the user’s input.
The code for this written using if...else if...  might look like Example 14-13 .
Example 14-13. A multiline if...else if... statement
<script>
  if      (page == "Home")  document.write("You selected Home")
  else if (page == "About") document.write("You selected About")
  else if (page == "News")  document.write("You selected News")
  else if (page == "Login") document.write("You selected Login")
  else if (page == "Links") document.write("You selected Links")
</script>
342 | Chapter 14: Expressions and Control Flow in JavaScript

But using a switch  construct, the code could look like Example 14-14 .
Example 14-14. A switch construct
<script>
  switch (page)
  {
    case "Home":
      document.write("You selected Home")
      break
    case "About":
      document.write("You selected About")
      break
    case "News":
      document.write("You selected News")
      break
    case "Login":
      document.write("You selected Login")
      break
    case "Links":
      document.write("You selected Links")
      break
  }
</script>
The variable page  is mentioned only once at the start of the switch  statement. There‐
after, the case  command checks for matches. When one occurs, the matching condi‐
tional statement is executed. Of course, a real program would have code here to
display or jump to a page, rather than simply telling the user what was selected.
Breaking out
As you can see in Example 14-14 , just as with PHP , the break  command allows your
code to break out of the switch  statement once a condition has been satisfied.
Remember to include the break  unless you want to continue executing the statements
under the next case .
Default action
When no condition is satisfied, you can specify a default action for a switch  state‐
ment by using the default  keyword. Example 14-15  shows a code snippet that could
be inserted into Example 14-14 .
Example 14-15. A default statement to add to Example 14-14
default:
  document.write("Unrecognized selection")
  break
Conditionals | 343

The ? Operator
The ternary  operator ( ?), combined with the : character,  provides a quick way of
doing if...else  tests. With it you can write an expression to evaluate, and then fol‐
low it with a ? symbol and the code to execute if the expression is true . After that,
place a : and the code to execute if the expression evaluates to false .
Example 14-16  shows a ternary operator being used to print out whether the variable
a is less than or equal to 5, and prints something either way.
Example 14-16. Using the ternary operator
<script>
  document.write(
    a <= 5 ?
    "a is less than or equal to 5" :
    "a is greater than 5"
  )
</script>
The statement has been broken up into several lines for clarity, but you would be
more likely to use such a statement on a single line, in this manner:
size = a <= 5 ? "short" : "long"
Looping
Again, you will find many close similarities between  JavaScript and PHP when it
comes to looping. Both languages support while , do...while , and for loops.
while Loops
A JavaScript while  loop first checks the value of an expression and starts executing
the statements within the loop only if that expression is true . If it is false , execution
skips over to the next JavaScript statement (if any).
Upon completing an iteration of the loop, the expression is again tested to see if it is
true , and the process continues until such a time as the expression evaluates to false
or until execution is otherwise halted. Example 14-17  shows such a loop.
Example 14-17. A while loop
<script>
  counter=0
  while (counter < 5)
  {
344 | Chapter 14: Expressions and Control Flow in JavaScript

document.write("Counter: " + counter + "<br>")
    ++counter
  }
</script>
This script outputs the following:
Counter: 0
Counter: 1
Counter: 2
Counter: 3
Counter: 4
If the variable counter  were not incremented within the loop, it is
quite possible that some browsers could become unresponsive due
to a never-ending loop, and the page may not even be easy to ter‐
minate with Escape or the Stop button. So be careful with your
JavaScript loops.
do...while Loops
When you require a loop to iterate at least once before any tests are made, use a
do...while  loop, which is similar to a while  loop, except that the test expression is
checked only after each iteration of the loop. So, to output the first seven results in
the 7 times table, you could use code such as that in Example 14-18 .
Example 14-18. A do...while loop
<script>
  count = 1
  do
  {
    document.write(count + " times 7 is " + count * 7 + "<br>")
  } while (++count <= 7)
</script>
As you might expect, this loop outputs the following:
1 times 7 is 7
2 times 7 is 14
3 times 7 is 21
4 times 7 is 28
5 times 7 is 35
6 times 7 is 42
7 times 7 is 49
Looping | 345

for Loops
A for loop combines the  best of all worlds into a single looping construct that allows
you to pass three parameters for each statement:
•An initialization expression
•A condition expression
•A modification expression
These are separated by semicolons, like this: for (expr1 ; expr2 ; expr3). At the
start of the first iteration of the loop, the initialization expression is executed. In the
case of the code for the multiplication table for 7, count  would be initialized to the
value 1. Then, each time around the loop, the condition expression (in this case,
count <= 7 ) is tested, and the loop is entered only if the condition is true . Finally, at
the end of each iteration, the modification expression is executed. In the case of the
multiplication table for 7, the variable count  is incremented. Example 14-19  shows
what the code would look like.
Example 14-19. Using a for loop
<script>
  for (count = 1 ; count <= 7 ; ++count)
  {
    document.write(count + "times 7 is " + count * 7 + "<br>");
  }
</script>
As in PHP , you can assign multiple variables in the first parameter of a for loop by
separating them with a comma, like this:
for (i = 1, j = 1 ; i < 10 ; i++)
Likewise, you can perform multiple modifications in the last parameter, like this:
for (i = 1 ; i < 10 ; i++, --j)
Or you can do both at the same time:
for (i = 1, j = 1 ; i < 10 ; i++, --j)
Breaking Out of a Loop
The break  command, which you’ll recall is important inside a switch  statement, is
also available within for loops. Y ou might need to use this, for example, when search‐
ing for a match of some kind. Once the match is found, you know that continuing to
search will only waste time and make your visitor wait. Example 14-20  shows how to
use the break  command.
346 | Chapter 14: Expressions and Control Flow in JavaScript

Example 14-20. Using the break command in a for loop
<script>
  haystack     = new Array()
  haystack[17] = "Needle"
  for (j = 0 ; j < 20 ; ++j)
  {
    if (haystack[j] == "Needle")
    {
      document.write("<br>- Found at location " + j)
      break
    }
    else document.write(j + ", ")
  }
</script>
This script outputs the following:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
- Found at location 17
The continue Statement
Sometimes you don’t want to entirely exit from a loop, but instead wish to skip the
remaining statements just for this iteration of the loop. In such cases, you can use the
continue  command. Example 14-21  shows this in use.
Example 14-21. Using the continue command in a for loop
<script>
  haystack     = new Array()
  haystack[4]  = "Needle"
  haystack[11] = "Needle"
  haystack[17] = "Needle"
  for (j = 0 ; j < 20 ; ++j)
  {
    if (haystack[j] == "Needle")
    {
      document.write("<br>- Found at location " + j + "<br>")
      continue
    }
    document.write(j + ", ")
  }
</script>
Looping | 347

Notice how the second document.write  call does not have to be enclosed in an else
statement (as it did before), because the continue  command will skip it if a match has
been found. The output from this script is as follows:
0, 1, 2, 3,
- Found at location 4
5, 6, 7, 8, 9, 10,
- Found at location 11
12, 13, 14, 15, 16,
- Found at location 17
18, 19,
Explicit Casting
Unlike PHP , JavaScript has no explicit casting of types such as (int)  or (float) .
Instead, when you need a value to be of a certain type, use one of JavaScript’s built-in
functions, shown in Table 14-6 .
Table 14-6. JavaScript’s type-changing functions
Change to type Function to use
Int, Integer parseInt()
Bool, Boolean Boolean()
Float, Double, Real parseFloat()
String String()
Array split()
So, for example, to change a floating-point number to an integer, you could use code
such as the following (which displays the value 3):
n = 3.1415927
i = parseInt(n)
document.write(i)
Or you can use the compound form:
document.write(parseInt(3.1415927))
That’s it for control flow and expressions. The next chapter focuses on the use of
functions, objects, and arrays in JavaScript.
Questions
1.How are Boolean values handled differently by PHP and JavaScript?
2.What characters are used to define a JavaScript variable name?
3.What is the difference between unary, binary, and ternary operators?
348 | Chapter 14: Expressions and Control Flow in JavaScript

4.What is the best way to force your own operator precedence?
5.When would you use the === (identity) operator?
6.What are the simplest two forms of expressions?
7.Name the three conditional statement types.
8.How do if and while  statements interpret conditional expressions of different
data types?
9.Why is a for loop more powerful than a while  loop?
10.What is the purpose of the with  statement?
See Chapter 14 Answers  in Appendix A  for the answers to these questions.
Questions | 349



CHAPTER 15
JavaScript Functions, Objects, and Arrays
Just like PHP , JavaScript offers access to functions and objects. In fact, JavaScript is
actually based on objects, because—as you’ve seen—it has to access the DOM, which
makes every element of an HTML document available to manipulate as an object.
The usage and syntax are also quite similar to those of PHP , so you should feel right at
home as I take you through using functions and objects in JavaScript, as well as
through an in-depth exploration of array handling.
JavaScript Functions
In addition to having access to dozens of built-in functions (or methods) such as
write , which you have already seen being used in document.write , you can easily
create your own functions. Whenever you have a more complex piece of code that is
likely to be reused, you have a candidate for a function.
Defining  a Function
The general syntax for a function is shown here:
function function_name ([parameter  [, ...]])
{
  statements
}
The first line of the syntax indicates the following:
•A definition starts with the word function .
•A name follows that must start with a letter or underscore, followed by any num‐
ber of letters, digits, dollar symbols, or underscores.
•The parentheses are required.
351

•One or more parameters, separated by commas, are optional (indicated by the
square brackets, which are not part of the function syntax).
Function names are case-sensitive, so all of the following strings refer to different
functions: getInput , GETINPUT , and getinput .
In JavaScript there is a general naming convention for functions: the first letter of
each word in a name is capitalized except for the very first letter, which is lowercase.
Therefore, of the previous examples, getInput  would be the preferred name used by
most programmers. This convention is commonly referred to as bumpyCaps , bumpy‐
Case , or camelCase .
The opening curly brace starts the statements that will execute when you call the
function; a matching curly brace must close it. These statements may include one or
more return  statements,  which force the function to cease execution and return to
the calling code. If a value is attached to the return  statement, the calling code can
retrieve it.
The arguments  array
The arguments  array is a member of every function. With it, you can determine the
number of variables passed to a function and what they are. Take the example of a
function called displayItems . Example 15-1  shows one way of writing it.
Example 15-1. Defining  a function
<script>
  displayItems("Dog", "Cat", "Pony", "Hamster", "Tortoise")
  function displayItems(v1, v2, v3, v4, v5)
  {
    document.write(v1 + "<br>")
    document.write(v2 + "<br>")
    document.write(v3 + "<br>")
    document.write(v4 + "<br>")
    document.write(v5 + "<br>")
  }
</script>
When you call up this script in your browser, it will display the following:
Dog
Cat
Pony
Hamster
Tortoise
352 | Chapter 15: JavaScript Functions, Objects, and Arrays

All of this is fine, but what if you wanted to pass more than five items to the function?
Also, reusing the document.write  call multiple times instead of employing a loop is
wasteful programming. Luckily, the arguments  array gives you the flexibility to han‐
dle a variable number of arguments. Example 15-2  shows how you can use it to
rewrite the example in a much more efficient manner.
Example 15-2. Modifying the function to use the arguments array
<script>
  function displayItems()
  {
    for (j = 0 ; j < displayItems.arguments.length ; ++j)
      document.write(displayItems.arguments[j] + "<br>")
  }
</script>
Note the use of the length  property, which you already encountered in the previous
chapter, and also how the array displayItems.arguments  is referenced using the
variable j as an offset into it. I also chose to keep the function short and sweet by not
surrounding the contents of the for loop in curly braces, as it contains only a single
statement.
Using this technique, you now have a function that can take as many (or as few) argu‐
ments as you like and act on each argument as you desire.
Returning a Value
Functions are not used just to display things. In fact,  they are mostly used to perform
calculations or data manipulation and then return a result. The function fixNames  in
Example 15-3  uses the arguments  array (discussed in the previous section) to take a
series of strings passed to it and return them as a single string. The “fix” it performs is
to convert every character in the arguments to lowercase except for the first character
of each argument, which is set to a capital letter.
Example 15-3. Cleaning up a full name
<script>
  document.write(fixNames("the", "DALLAS", "CowBoys"))
  function fixNames()
  {
    var s = ""
    for (j = 0 ; j < fixNames.arguments.length ; ++j)
      s += fixNames.arguments[j].charAt(0).toUpperCase() +
           fixNames.arguments[j].substr(1).toLowerCase() + " "
JavaScript Functions | 353

return s.substr(0, s.length-1)
  }
</script>
When called with the parameters the, DALLAS , and CowBoys , for example, the func‐
tion returns the string The Dallas Cowboys . Let’s walk through the function.
The function first initializes the temporary (and local) variable s to the empty string.
Then a for loop iterates through each of the passed parameters, isolating the parame‐
ter’s first character using the charAt  method and converting it to uppercase with the
toUpperCase  method.  The various methods shown in this example are all built into
JavaScript and available by default.
Then the substr  method is used to fetch the rest of each string,  which is converted to
lowercase using the toLowerCase  method. A fuller version of the substr  method here
would specify how many characters are part of the substring as a second argument:
substr(1, (arguments[j].length) - 1 )
In other words, this substr  method says, “Start with the character at position 1 (the
second character) and return the rest of the string (the length minus one). ” As a nice
touch, though, the substr  method assumes that you want the rest of the string if you
omit the second argument.
After the whole argument is converted to our desired case, a space character is added
to the end and the result is appended to the temporary variable s.
Finally, the substr  method is used again to return the contents of the variable s,
except for the final space—which is unwanted. We remove this by using substr  to
return the string up to, but not including, the final character.
This example is particularly interesting in that it illustrates the use of multiple proper‐
ties and methods in a single expression. For example:
fixNames.arguments[j].substr(1).toLowerCase()
Y ou have to interpret the statement by mentally dividing it into parts at the periods.
JavaScript evaluates these elements of the statement from left to right as follows:
1.Start with the name of the function itself: fixNames .
2.Extract element j from the array arguments  representing fixNames  arguments.
3.Invoke substr  with a parameter of 1 to the extracted element. This passes all but
the first character to the next section of the expression.
4.Apply the method toLowerCase  to the string that has been passed this far.
354 | Chapter 15: JavaScript Functions, Objects, and Arrays

This practice is often referred to as method chaining . So, for example, if the string
mixedCASE  is passed to the example expression, it will go through the following trans‐
formations:
mixedCASE
ixedCASE
ixedcase
One final reminder: the s variable created inside the function is local, and therefore
cannot be accessed outside the function. By returning s in the return  statement, we
made its value available to the caller, which could store or use it any way it wanted.
But s itself disappears at the end of the function. Although we could make a function
operate on global variables (and sometimes that’s necessary), it’s much better to just
return the values you want to preserve and let JavaScript clean up all the other vari‐
ables used by the function.
Returning an Array
In Example 15-3 , the function  returned only one parameter, but what if you need to
return multiple parameters? Y ou can do this by returning an array, as in
Example 15-4 .
Example 15-4. Returning an array of values
<script>
  words = fixNames("the", "DALLAS", "CowBoys")
  for (j = 0 ; j < words.length ; ++j)
    document.write(words[j] + "<br>")
  function fixNames()
  {
    var s = new Array()
    for (j = 0 ; j < fixNames.arguments.length ; ++j)
      s[j] = fixNames.arguments[j].charAt(0).toUpperCase() +
             fixNames.arguments[j].substr(1).toLowerCase()
  return s
}
</script>
Here the variable words  is automatically defined as an array and populated with the
returned result of a call to the function fixNames . Then a for loop iterates through
the array and displays each member.
JavaScript Functions | 355

As for the fixNames  function, it’s almost identical to Example 15-3 , except that the
variable s is now an array, and after each word has been processed, it is stored as an
element of this array, which is returned by the return  statement.
This function enables the extraction of individual parameters from its returned val‐
ues, like the following (the output from which is simply The Cowboys ):
words = fixNames("the", "DALLAS", "CowBoys")
document.write(words[0] + " " + words[2])
JavaScript Objects
A JavaScript object  is a step up from a variable, which can contain only one value at a
time, in that objects can contain multiple values and even functions. An object groups
data together with the functions needed to manipulate it.
Declaring a Class
When creating a script to use objects, you need to design a composite of data and
code called a class . Each new object based on this class is called  an instance  (or occur‐
rence ) of that class. As you’ve already seen, the data associated with an object is called
its properties , while the functions it uses are called methods .
Let’s look at how to declare the class for an object called User  that will contain details
about the current user. To create the class, just write a function named after the class.
This function can accept arguments (I’ll show later how it’s invoked) and can create
properties and methods for objects in that class. The function is called a constructor .
Example 15-5  shows a constructor for the class User  with three properties: forename ,
username , and password . The class also defines the method showUser .
Example 15-5. Declaring the User class and its method
<script>
  function User(forename, username, password)
  {
    this.forename = forename
    this.username = username
    this.password = password
    this.showUser = function()
    {
      document.write("Forename: " + this.forename + "<br>")
      document.write("Username: " + this.username + "<br>")
      document.write("Password: " + this.password + "<br>")
    }
  }
</script>
356 | Chapter 15: JavaScript Functions, Objects, and Arrays

The function is different from other functions we’ve seen so far in two ways:
•It refers to an object named this . When the program creates an instance of User
by running this function, this  refers to the instance being created. The same
function can be called over and over with different arguments, and will create a
new User  each time with different values for the properties forename , and so on.
•A new function named showUser  is created within the function. The syntax
shown here is new and rather complicated, but its purpose is to tie showUser  to
the User  class. Thus, showUser  comes into being as a method of the User  class.
The naming convention I have used is to keep all properties in lowercase and to use at
least one uppercase character in method names, following the bumpyCaps conven‐
tion mentioned earlier in the chapter.
Example 15-5  follows the recommended way to write a class constructor, which is to
include methods in the constructor function. However, you can also refer to func‐
tions defined outside the constructor, as in Example 15-6 .
Example 15-6. Separately defining  a class and method
<script>
  function User(forename, username, password)
  {
    this.forename = forename
    this.username = username
    this.password = password
    this.showUser = showUser
  }
  function showUser()
  {
    document.write("Forename: " + this.forename + "<br>")
    document.write("Username: " + this.username + "<br>")
    document.write("Password: " + this.password + "<br>")
  }
</script>
I show you this form because you are certain to encounter it when perusing other
programmers’ code.
Creating an Object
To create an instance of the class User , you can use a statement such as the following:
details = new User("Wolfgang", "w.a.mozart", "composer")
Or you can create an empty object, like this:
JavaScript Objects | 357

details = new User()
and then populate it later, like this:
details.forename = "Wolfgang"
details.username = "w.a.mozart"
details.password = "composer"
Y ou can also add new properties to an object, like this:
details.greeting = "Hello"
Y ou can verify that adding such new properties works with the following statement:
document.write(details.greeting)
Accessing Objects
To access an object, you can refer to its properties, as in the following two unrelated
example statements:
name = details.forename
if (details.username == "Admin") loginAsAdmin()
So, to access the showUser  method of an object of class User , you would use the fol‐
lowing syntax, in which the object details  has already been created and populated
with data:
details.showUser()
Assuming the data supplied earlier, this code would display the following:
Forename: Wolfgang
Username: w.a.mozart
Password: composer
The prototype Keyword
The prototype  keyword can save you a lot of memory. In the User  class, every
instance will contain the three properties and the method. Therefore, if you have
1,000 of these objects in memory, the method showUser  will also be replicated 1,000
times. However, because the method is identical in every case, you can specify that
new objects should refer to a single instance of the method instead of creating a copy
of it. So, instead of using the following in a class constructor:
this.showUser = function()
you could replace it with this:
User.prototype.showUser = function()
Example 15-7  shows what the new constructor would look like.
358 | Chapter 15: JavaScript Functions, Objects, and Arrays

Example 15-7. Declaring a class using the prototype keyword for a method
<script>
  function User(forename, username, password)
  {
    this.forename = forename
    this.username = username
    this.password = password
    User.prototype.showUser = function()
    {
      document.write("Forename: " + this.forename + "<br>")
      document.write("Username: " + this.username + "<br>")
      document.write("Password: " + this.password + "<br>")
    }
  }
</script>
This works because all functions have a prototype  property, designed to hold proper‐
ties and methods that are not replicated in any objects created from a class. Instead,
they are passed to its objects by reference.
This means that you can add a prototype  property or method at any time, and all
objects (even those already created) will inherit it, as the following statements illus‐
trate:
User.prototype.greeting = "Hello"
document.write(details.greeting)
The first statement adds the prototype  property of greeting  with a value of Hello  to
the class User . In the second line, the object details , which has already been created,
correctly displays this new property.
Y ou can also add to or modify methods in a class, as the following statements illus‐
trate:
User.prototype.showUser = function()
{
  document.write("Name "  + this.forename +
                 " User " + this.username +
                 " Pass " + this.password)
}
details.showUser()
Y ou might add these lines to your script in a conditional statement (such as if), so
they run if user activities cause you to decide you need a different showUser  method.
After these lines run, even if the object details  has been created already, further calls
to details.showUser  will run the new function. The old definition of showUser  has
been erased.
JavaScript Objects | 359

Static methods and properties
When reading  about PHP objects, you learned that classes can have static properties
and methods as well as properties and methods associated with a particular instance
of a class. JavaScript also supports static properties and methods, which you can con‐
veniently store and retrieve from the class’s prototype . Thus, the following state‐
ments set and read a static string from User :
User.prototype.greeting = "Hello"
document.write(User.prototype.greeting)
Extending JavaScript objects
The prototype  keyword even lets you add  functionality to a built-in object. For
example, suppose that you would like to add the ability to replace all spaces in a string
with nonbreaking spaces in order to prevent it from wrapping around. Y ou can do
this by adding a prototype method to JavaScript’s default String  object definition,
like this:
String.prototype.nbsp = function()
{
  return this.replace(/ /g, '&nbsp;')
}
Here the replace  method is used with a regular expression (see Chapter 16 ) to find
and replace all single spaces with the string &nbsp; . If you then enter the following
command:
document.write("The quick brown fox".nbsp())
it will output the string The&nbsp;quick&nbsp;brown&nbsp;fox . Or here’s a method
you can add that will trim leading and trailing spaces from a string (once again using
a regular expression):
String.prototype.trim = function()
{
  return this.replace(/^\s+|\s+$/g, '')
}
If you issue the following statement, the output will be the string Please trim me
(with the leading and trailing spaces removed):
document.write("  Please trim me    ".trim())
If we break down the expression into its component parts, the two / characters mark
the start and end of the expression, and the final g specifies a global search. Inside the
expression, the ^\s+  part searches for one or more whitespace characters appearing at
the start of the search string, while the \s+$  part searches for one or more whitespace
characters at the end of the search string. The | character in the middle acts to sepa‐
rate the alternatives.
360 | Chapter 15: JavaScript Functions, Objects, and Arrays

The result is that when either of these expressions matches, the match is replaced
with the empty string, thus returning a trimmed version of the string without any
leading or trailing whitespace.
JavaScript Arrays
Array handling in JavaScript is very similar to PHP ,  although the syntax is a little dif‐
ferent. Nevertheless, given all you have already learned about arrays, this section
should be relatively straightforward for you.
Numeric Arrays
To create a new array, use the following syntax:
arrayname = new Array()
Or you can use the shorthand form, as follows:
arrayname = []
Assigning element values
In PHP , you could add a new  element to an array by  simply assigning it without spec‐
ifying the element offset, like this:
$arrayname[] = "Element 1";
$arrayname[] = "Element 2";
But in JavaScript you use the push  method to achieve the same thing, like this:
arrayname.push("Element 1")
arrayname.push("Element 2")
This allows you to keep adding items to an array without having to keep track of the
number of items. When you need to know how many elements are in an array, you
can use the length  property, like this:
document.write(arrayname.length)
Alternatively, if you wish to keep track of the element locations yourself and place
them in specific locations, you can use syntax such as this:
arrayname[0] = "Element 1"
arrayname[1] = "Element 2"
Example 15-8  shows a simple script that creates an array, loads it with some values,
and then displays them.
JavaScript Arrays | 361

Example 15-8. Creating, building, and printing an array
<script>
  numbers = []
  numbers.push("One")
  numbers.push("Two")
  numbers.push("Three")
  for (j = 0 ; j < numbers.length ; ++j)
    document.write("Element " + j + " = " + numbers[j] + "<br>")
</script>
The output from this script is as follows:
Element 0 = One
Element 1 = Two
Element 2 = Three
Assignment using the array keyword
Y ou can also create an array together with some initial elements by using the Array
keyword, like this:
numbers = Array("One", "Two", "Three")
There is nothing stopping you from adding more elements afterward as well.
So now you have a couple of ways you can add items to an array, and one way of ref‐
erencing them, but JavaScript offers many more, which I’ll get to shortly. But first
we’ll look at another type of array.
Associative Arrays
An associative array  is one in which its elements are referenced by name rather than
by numeric offset. To create an associative array, define a block of elements within
curly braces. For each element, place the key on the left and the contents on the right
of a colon ( :). Example 15-9  shows how you might create an associative array to hold
the contents of the “balls” section of an online sports equipment retailer.
Example 15-9. Creating and displaying an associative array
<script>
  balls = {"golf":    "Golf balls, 6",
           "tennis":  "Tennis balls, 3",
           "soccer":  "Soccer ball, 1",
           "ping":    "Ping Pong balls, 1 doz"}
  for (ball in balls)
    document.write(ball + " = " + balls[ball] + "<br>")
</script>
362 | Chapter 15: JavaScript Functions, Objects, and Arrays

To verify that the array has been correctly created and populated, I have used another
kind of for loop using the in keyword. This creates a new variable to use only within
the array ( ball , in this example) and iterates through all elements of the array to the
right of the in keyword ( balls , in this example). The loop acts on each element of
balls , placing the key value into ball .
Using this key value stored in ball , you can also get the value of the current element
of balls . The result of calling up the example script in a browser is as follows:
golf = Golf balls, 6
tennis = Tennis balls, 3
soccer = Soccer ball, 1
ping = Ping Pong balls, 1 doz
To get a specific element of an associative array, you can specify a key explicitly, in the
following manner (in this case, outputting the value Soccer ball, 1 ):
document.write(balls['soccer'])
Multidimensional Arrays
To create a  multidimensional array in JavaScript, just place arrays inside other arrays.
For example, to create an array to hold the details of a two-dimensional checkerboard
(8×8 squares), you could use the code in Example 15-10 .
Example 15-10. Creating a multidimensional numeric array
<script>
  checkerboard = Array(
    Array(' ', 'o', ' ', 'o', ' ', 'o', ' ', 'o'),
    Array('o', ' ', 'o', ' ', 'o', ' ', 'o', ' '),
    Array(' ', 'o', ' ', 'o', ' ', 'o', ' ', 'o'),
    Array(' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
    Array(' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
    Array('O', ' ', 'O', ' ', 'O', ' ', 'O', ' '),
    Array(' ', 'O', ' ', 'O', ' ', 'O', ' ', 'O'),
    Array('O', ' ', 'O', ' ', 'O', ' ', 'O', ' '))
  document.write("<pre>")
  for (j = 0 ; j < 8 ; ++j)
  {
    for (k = 0 ; k < 8 ; ++k)
      document.write(checkerboard[j][k] + " ")
    document.write("<br>")
  }
  document.write("</pre>")
</script>
JavaScript Arrays | 363

In this example, the lowercase letters represent black pieces, and the uppercase white.
A pair of nested for loops walks through the array and displays its contents.
The outer loop contains two statements, so curly braces enclose them. The inner loop
then processes each square in a row, outputting the character at location [j][k] , fol‐
lowed by a space (to square up the printout). This loop contains a single statement, so
curly braces are not required to enclose it. The <pre>  and </pre>  tags ensure that the
output displays correctly, like this:
  o   o   o   o
o   o   o   o
  o   o   o   o
O   O   O   O
  O   O   O   O
O   O   O   O
Y ou can also directly access any element within this array by using square brackets:
document.write(checkerboard[7][2])
This statement outputs the uppercase letter O, the eighth element down and the third
along—remember that array indexes start at 0, not 1.
Using Array Methods
Given the power of arrays, JavaScript comes ready-made with a number of methods
for manipulating them and their data. Here is a selection of the most useful ones.
concat
The concat  method concatenates two arrays, or a series of values within an array. For
example, the following code outputs Banana,Grape,Carrot,Cabbage :
fruit = ["Banana", "Grape"]
veg   = ["Carrot", "Cabbage"]
document.write(fruit.concat(veg))
Y ou can specify multiple arrays as arguments, in which case concat  adds all their ele‐
ments in the order that the arrays are specified.
Here’s another way to use concat . This time, plain values are concatenated with the
array pets , which outputs Cat,Dog,Fish,Rabbit,Hamster :
pets      = ["Cat", "Dog", "Fish"]
more_pets = pets.concat("Rabbit", "Hamster")
document.write(more_pets)
364 | Chapter 15: JavaScript Functions, Objects, and Arrays

forEach (for non-IE browsers)
The forEach  method in JavaScript is another way of achieving functionality similar to
the PHP foreach  keyword, but only for browsers other than Internet Explorer . To use
it, you pass it the name of a function, which will be called for each element within the
array. Example 15-11  shows how.
Example 15-11. Using the forEach method
<script>
  pets = ["Cat", "Dog", "Rabbit", "Hamster"]
  pets.forEach(output)
  function output(element, index, array)
  {
    document.write("Element at index " + index + " has the value " +
      element + "<br>")
  }
</script>
In this case, the function passed to forEach  is called output . It takes three parame‐
ters: the element , its index , and the array . These can be used as required by your
function. In this example, just the element  and index  values are displayed using the
function document.write .
Once an array has been populated, the method is called like this:
pets.forEach(output)
This is the output:
Element at index 0 has the value Cat
Element at index 1 has the value Dog
Element at index 2 has the value Rabbit
Element at index 3 has the value Hamster
forEach (a cross-browser solution)
Of course, as is its way, Microsoft chose not to support the forEach  method, so the
previous example will work only on non–Internet Explorer browsers. Therefore, until
IE does support it, and to ensure cross-browser compatibility, you should use a state‐
ment such as the following instead of pets.forEach(output) :
for (j = 0 ; j < pets.length ; ++j) output(pets[j], j)
join
With the join  method, you can convert all the values in an array to strings and then
join them together into one large string, placing an optional separator between them.
Example 15-12  shows three ways of using this method.
JavaScript Arrays | 365

Example 15-12. Using the join method
<script>
  pets = ["Cat", "Dog", "Rabbit", "Hamster"]
  document.write(pets.join()      + "<br>")
  document.write(pets.join(' ')   + "<br>")
  document.write(pets.join(' : ') + "<br>")
</script>
Without a parameter, join  uses a comma to separate the elements; otherwise, the
string passed to join  is inserted between each element. The output of Example 15-12
looks like this:
Cat,Dog,Rabbit,Hamster
Cat Dog Rabbit Hamster
Cat : Dog : Rabbit : Hamster
push and pop
Y ou already saw how the push  method can be used to insert a value into an array. The
inverse method is pop. It deletes the most recently inserted element from an array and
returns it. Example 15-13  shows an example of its use.
Example 15-13. Using the push and pop methods
<script>
  sports = ["Football", "Tennis", "Baseball"]
  document.write("Start = "      + sports +  "<br>")
  sports.push("Hockey")
  document.write("After Push = " + sports +  "<br>")
  removed = sports.pop()
  document.write("After Pop = "  + sports +  "<br>")
  document.write("Removed = "    + removed + "<br>")
</script>
The three main statements of this script are shown in bold type. First, the script cre‐
ates an array called sports  with three elements and then push es a fourth element into
the array. After that, it pops that element back off. In the process, the various current
values are displayed via document.write . The script outputs the following:
Start = Football,Tennis,Baseball
After Push = Football,Tennis,Baseball,Hockey
After Pop = Football,Tennis,Baseball
Removed = Hockey
The push  and pop functions are useful in situations where you need to divert from
some activity to do another, and then return, as in Example 15-14 .
366 | Chapter 15: JavaScript Functions, Objects, and Arrays

Example 15-14. Using push and pop inside and outside of a loop
<script>
  numbers = []
  for (j = 0 ; j < 3 ; ++j)
  {
    numbers.push(j);
    document.write("Pushed " + j + "<br>")
  }
  // Perform some other activity here
  document.write("<br>")
  document.write("Popped " + numbers.pop() + "<br>")
  document.write("Popped " + numbers.pop() + "<br>")
  document.write("Popped " + numbers.pop() + "<br>")
</script>
The output from this example is as follows:
Pushed 0
Pushed 1
Pushed 2
Popped 2
Popped 1
Popped 0
Using reverse
The reverse  method  simply reverses the order of all elements in an array.
Example 15-15  shows this in action.
Example 15-15. Using the reverse method
<script>
  sports = ["Football", "Tennis", "Baseball", "Hockey"]
  sports.reverse()
  document.write(sports)
</script>
The original array is modified, and the output from this script is as follows:
Hockey,Baseball,Tennis,Football
sort
With the sort  method, you can  place all elements of an array in alphabetical or other
order, depending on the parameters used. Example 15-16  shows four types of sort.
JavaScript Arrays | 367

Example 15-16. Using the sort method
<script>
  // Alphabetical sort
  sports = ["Football", "Tennis", "Baseball", "Hockey"]
  sports.sort()
  document.write(sports + "<br>")
  // Reverse alphabetical sort
  sports = ["Football", "Tennis", "Baseball", "Hockey"]
  sports.sort().reverse()
  document.write(sports + "<br>")
  // Ascending numeric sort
  numbers = [7, 23, 6, 74]
  numbers.sort(function(a,b){return a - b})
  document.write(numbers + "<br>")
  // Descending numeric sort
  numbers = [7, 23, 6, 74]
  numbers.sort(function(a,b){return b - a})
  document.write(numbers + "<br>")
</script>
The first of the four example sections is the default sort  method, alphabetical sort ,
while the second uses the default sort  and then applies the reverse  method to get a
reverse alphabetical sort .
The third and fourth sections are a little more complicated; they use a function to
compare the relationships between a and b. The function doesn’t have a name,
because it’s used only in the sort. Y ou have already seen the function named function
to create an anonymous function; we used it to define a method in a class (the show
User  method).
Here, function  creates an anonymous function meeting the needs of the sort
method. If the function returns a value greater than zero, the sort assumes that b
comes before a. If the function returns a value less than zero, the sort assumes that a
comes before b. The sort runs this function across all the values in the array to deter‐
mine their order.
By manipulating the value returned ( a - b  in contrast to b - a ), the third and fourth
sections of Example 15-16  choose between an ascending numerical sort  and a descend‐
ing numerical sort .
And, believe it or not, this represents the end of your introduction to JavaScript. Y ou
should now have a core knowledge of the three main technologies covered in this
book. The next chapter will look at some advanced techniques used across these tech‐
nologies, such as pattern matching and input validation.
368 | Chapter 15: JavaScript Functions, Objects, and Arrays

Questions
1.Are JavaScript functions and variable names case-sensitive or -insensitive?
2.How can you write a function that accepts and processes an unlimited number of
parameters?
3.Name a way to return multiple values from a function.
4.When you’re defining a class, what keyword do you use to refer to the current
object?
5.Do all the methods of a class have to be defined within the class definition?
6.What keyword is used to create an object?
7.How can you make a property or method available to all objects in a class
without replicating the property or method within the object?
8.How can you create a multidimensional array?
9.What syntax is used to create an associative array?
10.Write a statement to sort an array of numbers in descending numerical order.
See Chapter 15 Answers  in Appendix A  for the answers to these questions.
Questions | 369



CHAPTER 16
JavaScript and PHP Validation
and Error Handling
With your solid foundation in both PHP and JavaScript, it’s time to bring these tech‐
nologies together to create web forms that are as user-friendly as possible.
We’ll be using PHP to create the forms and JavaScript to perform client-side valida‐
tion to ensure that the data is as complete and correct as it can be before it is submit‐
ted. Final validation of the input will then be made by PHP , which will, if necessary,
present the form again to the user for further modification.
In the process, this chapter will cover validation and regular expressions in both Java‐
Script and PHP .
Validating User Input with JavaScript
JavaScript validation should be considered an assistance more to your users than to
your websites because, as I have already stressed many times, you cannot trust any
data submitted to your server, even if it has supposedly been validated with Java‐
Script. This is because hackers can quite easily simulate your web forms and submit
any data of their choosing.
Another reason you cannot rely on JavaScript to perform all your input validation is
that some users disable JavaScript, or use browsers that don’t support it.
So the best types of validation to do in JavaScript are checking that fields have content
if they are not to be left empty, ensuring that email addresses conform to the proper
format, and ensuring that values entered are within expected bounds.
371

The validate.html Document (Part 1)
Let’s begin with a general sign-up form, common on most sites that offer member‐
ships or registered users. The inputs requested will be forename , surname , username ,
password , age, and email address . Example 16-1  provides a good template for such a
form.
Example 16-1. A form with JavaScript validation (part 1)
<!DOCTYPE html>
<html>
  <head>
    <title>An Example Form</title>
    <style>
      .signup {
        border:1px solid #999999;
        font:  normal 14px helvetica;
        color: #444444;
      }
    </style>
    <script>
      function validate(form)
      {
        fail  = validateForename(form.forename.value)
        fail += validateSurname(form.surname.value)
        fail += validateUsername(form.username.value)
        fail += validatePassword(form.password.value)
        fail += validateAge(form.age.value)
        fail += validateEmail(form.email.value)
        if   (fail == "")   return true
        else { alert(fail); return false }
      }
    </script>
  </head>
  <body>
    <table border="0" cellpadding="2" cellspacing="5" bgcolor="#eeeeee">
      <th colspan="2" align="center">Signup Form</th>
      <form method="post" action="adduser.php" onsubmit="return validate(this)">
        <tr><td>Forename</td>
          <td><input type="text" maxlength="32" name="forename"></td></tr>
        <tr><td>Surname</td>
          <td><input type="text" maxlength="32" name="surname"></td></tr>
        <tr><td>Username</td>
          <td><input type="text" maxlength="16" name="username"></td></tr>
        <tr><td>Password</td>
          <td><input type="text" maxlength="12" name="password"></td></tr>
        <tr><td>Age</td>
          <td><input type="text" maxlength="3"  name="age"></td></tr>
        <tr><td>Email</td>
          <td><input type="text" maxlength="64" name="email"></td></tr>
372 | Chapter 16: JavaScript and PHP Validation and Error Handling

<tr><td colspan="2" align="center"><input type="submit"
          value="Signup"></td></tr>
      </form>
    </table>
  </body>
</html>
As it stands, this form will display correctly but will not self-validate, because the
main validation functions have not yet been added. Even so, save it as validate.html ,
and when you call it up in your browser, it will look like Figure 16-1 .
Figure 16-1. The output from Example 16-1
Let’s look at how this document is made up. The first few lines set up the document
and use a little CSS to make the form look a little less plain. The parts of the docu‐
ment related to JavaScript come next and are shown in bold.
Between the <script>  and </script>  tags lies a single function called validate  that
itself calls up  six other functions to validate each of the form’s input fields. We’ll get
to these functions shortly. For now I’ll just explain that they return either an empty
string if a field validates, or an error message if it fails. If there are any errors, the final
line of the script pops up an alert box to display them.
Upon passing validation, the validate  function returns a value of true ; otherwise, it
returns false . The return values from validate  are important, because if it returns
false , the form is prevented from being submitted. This allows the user to close the
alert pop up and make changes. If true  is returned, no errors were encountered in
the form’s fields and so the form is allowed to be submitted.
Validating User Input with JavaScript | 373

The second part of this example features the HTML for the form with each field and
its name placed within its own row of a table. This is pretty straightforward HTML,
with the exception of the onSubmit="return validate(this)"  statement within the
opening <form>  tag. Using onSubmit , you  can cause a function of your choice to be
called when a form is submitted. That function can perform some checking and
return a value of either true  or false  to signify whether the form should be allowed
to be submitted.
The this  parameter is the current object (i.e., this form) and is passed to the vali
date  function just discussed. The validate  function receives this parameter as the
object form .
As you can see, the only JavaScript used within the form’s HTML is the call to return
buried in the onSubmit  attribute. Browsers with JavaScript disabled or not available
will simply ignore the onSubmit  attribute, and the HTML will display just fine.
The validate.html Document (Part 2)
Now we come to Example 16-2 , a set of six functions that do the actual form-field
validation. I suggest that you type all of this second part and save it in the
<script> ...</script>  section of Example 16-1 , which you should already have saved
as validate.html .
Example 16-2. A form with JavaScript validation (part 2)
function validateForename(field)
{
  return (field == "") ? "No Forename was entered.\n" : ""
}
function validateSurname(field)
{
  return (field == "") ? "No Surname was entered.\n" : ""
}
function validateUsername(field)
{
  if (field == "") return "No Username was entered.\n"
  else if (field.length < 5)
    return "Usernames must be at least 5 characters.\n"
  else if (/[^a-zA-Z0-9_-]/.test(field))
    return "Only a-z, A-Z, 0-9, - and _ allowed in Usernames.\n"
  return ""
}
function validatePassword(field)
{
  if (field == "") return "No Password was entered.\n"
374 | Chapter 16: JavaScript and PHP Validation and Error Handling

else if (field.length < 6)
    return "Passwords must be at least 6 characters.\n"
  else if (!/[a-z]/.test(field) || ! /[A-Z]/.test(field) ||
           !/[0-9]/.test(field))
    return "Passwords require one each of a-z, A-Z and 0-9.\n"
  return ""
}
function validateAge(field)
{
  if (isNaN(field)) return "No Age was entered.\n"
  else if (field < 18 || field > 110)
    return "Age must be between 18 and 110.\n"
  return ""
}
function validateEmail(field)
{
  if (field == "") return "No Email was entered.\n"
    else if (!((field.indexOf(".") > 0) &&
               (field.indexOf("@") > 0)) ||
              /[^a-zA-Z0-9.@_-]/.test(field))
      return "The Email address is invalid.\n"
  return ""
}
We’ll go through each of these functions in turn, starting with validateForename , so
you can see how validation works.
Validating the forename
validateForename  is quite a short function that accepts the parameter field , which
is the value of the forename passed to it by the validate  function.
If this value is the empty string, an error message is returned; otherwise, an empty
string is returned to signify that no error was encountered.
If the user entered spaces in this field, it would be accepted by validateForename ,
even though it’s empty for all intents and purposes. Y ou can fix this by adding an
extra statement to trim whitespace from the field before checking whether it’s empty,
use a regular expression to make sure there’s something besides whitespace in the
field, or—as I do here—just let the user make the mistake and allow the PHP pro‐
gram to catch it on the server.
Validating the surname
The validateSurname  function is almost identical to validateForename  in that an
error is returned only if the surname supplied was an empty string. I chose not to
Validating User Input with JavaScript | 375

limit the characters allowed in either of the name fields to allow for possibilities such
as non-English and accented characters.
Validating the username
The validateUsername  function is a little more interesting, because it has a more
complicated job. It has to allow through only the characters a-z, A-Z, 0-9, _ and -,
and ensure that usernames are at least five characters long.
The if...else  statements commence by returning an error if field  has not been fil‐
led in. If it’s not the empty string, but is fewer than five characters in length, another
error message is returned.
Then the JavaScript test  function is called, passing a regular expression (which
matches any character that is not one of those allowed) to be matched against field
(see “Regular Expressions” on page 377). If even one character that isn’t one of the
acceptable characters is encountered, the test  function returns true , and so valida
teUser  returns an error string.
Validating the password
Similar techniques are used in the validatePassword  function. First the function
checks whether field  is empty, and if it is, returns an error. Next, an error message is
returned if a password is shorter than six characters.
One of the requirements we’re imposing on passwords is that they must have at least
one each of a lowercase, uppercase, and numerical character, so the test  function is
called three times, once for each of these cases. If any one of them returns false , one
of the requirements was not met and so an error message is returned. Otherwise, the
empty string is returned to signify that the password was OK.
Validating the age
validateAge  returns an error message if field  is not a number (determined by a call
to the isNaN  function), or if the age entered is lower than 18 or greater than 110. Y our
applications may well have different or no age requirements. Again, upon successful
validation, the empty string is returned.
Validating the email
In the last and most complicated example, the email address is validated with valida
teEmail . After checking whether anything was actually entered, and returning an
error message if it wasn’t, the function calls the JavaScript indexOf  function twice.
The first time a check is made to ensure there is a period ( .) somewhere from at least
the second character of the field, and the second checks that an @ symbol appears
somewhere at or after the second character.
376 | Chapter 16: JavaScript and PHP Validation and Error Handling

If those two checks are satisfied, the test  function is called to see whether any disal‐
lowed characters appear in the field. If any of these tests fail, an error message is
returned. The allowed characters in an email address are uppercase and lowercase let‐
ters, numbers, and the _, -, period, and @ characters, as detailed in the regular expres‐
sion passed to the test  method. If no errors are found, the empty string is returned
to indicate successful validation. On the last line, the script and document are closed.
Figure 16-2  shows the result of the user clicking the Signup button without having
completed any fields.
Figure 16-2. JavaScript form validation in action
Using a separate JavaScript file
Of course, because they are generic in construction and could apply to many types of
validations you might require, these six functions make ideal candidates for moving
out into a separate JavaScript file. Y ou could name the file something like vali‐
date_functions.js  and include it right after the initial script section in Example 16-1 ,
using the following statement:
<script src="validate_functions.js"></script>
Regular Expressions
Let’s look a little more closely at the pattern matching  we have been doing. We’ve
achieved it using regular expressions , which are supported by both JavaScript and
PHP . They make it possible to construct the most powerful of pattern-matching algo‐
rithms within a single expression.
Regular Expressions | 377

Matching Through Metacharacters
Every regular expression must be enclosed in slashes. Within these slashes, certain
characters have special meanings; they are called metacharacters . For instance, an
asterisk ( *) has  a meaning similar to what you have seen if you use a shell or Win‐
dows command prompt (but not quite the same). An asterisk means, “The text you’re
trying to match may have any number of the preceding characters—or none at all. ”
For instance, let’s say you’re looking for the name Le Guin  and know that someone
might spell it with or without a space. Because the text is laid out strangely (for
instance, someone may have inserted extra spaces to right-justify lines), you could
have to search for a line such as this:
The   difficulty  of   classifying Le      Guin's    works
So you need to match LeGuin , as well as Le and Guin  separated by any number of
spaces. The solution is to follow a space with an asterisk:
/Le *Guin/
There’s a lot more than the name Le Guin  in the line, but that’s OK. As long as the
regular expression matches some part of the line, the test  function returns a true
value. What if it’s important to make sure the line contains nothing but Le Guin ? I’ll
show you how to ensure that later.
Suppose that you know there is always at least one space. In that case, you could use
the plus sign ( +), because it requires at least one of the preceding characters to be
present:
/Le +Guin/
Fuzzy Character Matching
The dot ( .) is particularly useful, because it can match anything except a newline.
Suppose that you are looking for HTML tags, which start with < and end with >. A
simple way to do so is shown here:
/<.*>/
The dot matches any character, and the * expands it to match zero or more charac‐
ters, so this is saying, “Match anything that lies between < and >, even if there’s noth‐
ing. ” Y ou will match <>, <em> , <br> , and so on. But if you don’t want to match the
empty case, <>, you should use + instead of *, like this:
/<.+>/
The plus sign expands the dot to match one or more characters, saying, “Match any‐
thing that lies between < and > as long as there’s at least one character between them. ”
Y ou will match <em>  and </em> , <h1>  and </h1> , and tags with attributes, such as this:
378 | Chapter 16: JavaScript and PHP Validation and Error Handling

<a href="www.mozilla.org">
Unfortunately, the plus sign keeps on matching up to the last > on the line, so you
might end up with this:
<h1><b>Introduction</b></h1>
A lot more than one tag! I’ll show a better solution later in this section.
If you use the dot on its own between the angle brackets, without
following it with either a + or *, then it matches a single character;
you will match <b> and <i> but not <em>  or <textarea> .
If you want to match the dot character itself ( .), you have to escape it by placing a
backslash ( \) before it, because otherwise it’s a metacharacter and matches anything.
As an example, suppose you want to match the floating-point number 5.0. The regu‐
lar expression is as follows:
/5\.0/
The backslash can escape any metacharacter, including another backslash (in case
you’re trying to match a backslash in text). However, to make things a bit confusing,
you’ll see later how backslashes sometimes give the following character a special
meaning.
We just matched a floating-point number. But perhaps you want to match 5. as well
as 5.0, because both mean the same thing as a floating-point number. Y ou also want
to match 5.00 , 5.000 , and so forth—any number of zeros is allowed. Y ou can do this
by adding an asterisk, as you’ve seen:
/5\.0*/
Grouping Through Parentheses
Suppose you want to match powers  of increments of units, such as kilo, mega, giga,
and tera. In other words, you want all the following to match:
1,000
1,000,000
1,000,000,000
1,000,000,000,000
...
The plus sign works here, too, but you need to group the string ,000  so the plus sign
matches the whole thing. The regular expression is as follows:
/1(,000)+ /
Regular Expressions | 379

The parentheses mean “treat this as a group when you apply something such as a plus
sign. ” 1,00,000  and 1,000,00  won’t match because the text must have a 1 followed by
one or more complete groups of a comma followed by three zeros.
The space after the + character indicates that the match must end when a space is
encountered. Without it, 1,000,00  would incorrectly match because only the first
1,000  would be taken into account, and the remaining ,00 would be ignored. Requir‐
ing a space afterward ensures that matching will continue right through to the end of
a number.
Character Classes
Sometimes you want to match something fuzzy, but not so broad that you want to use
a dot. Fuzziness is the great strength of regular expressions: they allow you to be as
precise or vague as you want.
One of the key features supporting fuzzy matching is the pair of  square brackets, [].
It matches a single character, like a dot, but inside the brackets you put a list of things
that can match. If any of those characters appears, the text matches. For instance, if
you wanted to match both the American spelling gray and the British spelling grey,
you could specify the following:
/gr[ae]y/
After the gr in the text you’re matching, there can be either an a or an e. But there
must be only one of them: whatever you put inside the brackets matches exactly one
character. The group of characters inside the brackets is called a character class .
Indicating a Range
Inside the brackets, you can use a hyphen ( -) to indicate a range. One very common
task is matching a single digit, which you can do with a range as follows:
/[0-9]/
Digits are such a common item in regular expressions that a single character is pro‐
vided to represent them: \d. Y ou can use it in place of the bracketed regular expres‐
sion to match a digit:
/\d/
Negation
One other important feature of the square brackets is negation  of a character class.
Y ou can turn the whole character class on its head by placing a caret ( ^) after the
opening bracket. Here it means, “Match any characters except  the following. ” So let’s
say you want to find instances of Yahoo  that lack the following exclamation point.
380 | Chapter 16: JavaScript and PHP Validation and Error Handling

(The name of the company officially contains an exclamation point!) Y ou could do it
as follows:
/Yahoo[^!]/
The character class consists of a single character—an exclamation point—but it is
inverted by the preceding ^. This is actually not a great solution to the problem—for
instance, it fails if Yahoo  is at the end of the line, because then it’s not followed by
anything , whereas the brackets must match a character. A better solution involves
negative lookahead  (matching something that is not followed by anything else), but
that’s beyond the scope of this book.
Some More-Complicated Examples
With an understanding of character classes and negation,  you’re ready now to see a
better solution to the problem of matching an HTML tag. This solution avoids going
past the end of a single tag, but still matches tags such as <em>  and </em>  as well as
tags with attributes such as this:
<a href="www.mozilla.org">
Here is one solution:
/<[^>]+>/
That regular expression may look like I just dropped my teacup on the keyboard, but
it is perfectly valid and very useful. Let’s break it apart. Figure 16-3  shows the various
elements, which I’ll describe one by one.
Figure 16-3. Breakdown of a typical regular expression
The elements are as follows:
/
Opening slash that indicates this is a regular expression.
<
Opening bracket of an HTML tag. This is matched exactly; it is not a metacharacter.
[^>]
Character class. The embedded ^> means “match anything except a closing angle
bracket. ”
Regular Expressions | 381

+
Allows any number of characters to match the previous [^>] , as long as there is at
least one of them.
>
Closing bracket of an HTML tag. This is matched exactly.
/
Closing slash that indicates the end of the regular expression.
Another solution to the problem of matching HTML tags is to use
a nongreedy operation. By default, pattern matching is greedy,
returning the longest match possible. Nongreedy matching finds
the shortest possible match, and its use is beyond the scope of this
book, but there are more details at http://oreilly.com/catalog/regex/
chapter/ch04.html .
We are going to look now at one of the expressions from Example 16-1 , where the
validateUsername  function is used:
/[^a-zA-Z0-9_-]/
Figure 16-4  shows the various elements.
Figure 16-4. Breakdown of the validateUsername regular expression
Let’s look at these elements in detail:
/
Opening slash that indicates this is a regular expression.
[
Opening bracket that starts a character class.
^
Negation character: inverts everything else between the brackets.
382 | Chapter 16: JavaScript and PHP Validation and Error Handling

a-z
Represents any lowercase letter.
A-Z
Represents any uppercase letter.
0-9
Represents any digit.
_
An underscore.
-
A dash.
]
Closing bracket that ends a character class.
/
Closing slash that indicates the end of the regular expression.
There are two other important metacharacters. They “anchor” a regular expression by
requiring that it appear in a particular place. If a  caret (^) appears at the beginning of
the regular expression, the expression has to appear at the beginning of a line of text;
otherwise, it doesn’t match.  Similarly, if a dollar sign ( $) appears at the end of the reg‐
ular expression, the expression has to appear at the end of a line of text.
It may be somewhat confusing that ^ can mean “negate the charac‐
ter class” inside square brackets and “match the beginning of the
line” if it’s at the beginning of the regular expression. Unfortunately,
the same character is used for two different things, so take care
when using it.
We’ll finish our exploration of regular expression basics by answering a question
raised earlier: suppose you want to make sure there is nothing extra on a line besides
the regular expression? What if you want a line that has “Le Guin” and nothing else?
We can do that by amending the earlier regular expression to anchor the two ends:
/^Le *Guin$/
Summary of Metacharacters
Table 16-1  shows the metacharacters available in regular expressions.
Regular Expressions | 383

Table 16-1. Regular expression metacharacters
Metacharacters Description
/ Begins and ends the regular expression
. Matches any single character except the newline
element* Matches element  zero or more times
element+ Matches element  one or more times
element? Matches element  zero or one times
[characters ] Matches a character out of those contained within the brackets
[^characters ] Matches a single character that is not contained within the brackets
(regex) Treats the regex  as a group for counting or a following *, +, or ?
left|right Matches either left  or right
[l-r] Matches a range of characters between l and r
^ Requires match to be at the string’s start
$ Requires match to be at the string’s end
\b Matches a word boundary
\B Matches where there is not a word boundary
\d Matches a single digit
\D Matches a single nondigit
\n Matches a newline character
\s Matches a whitespace character
\S Matches a nonwhitespace character
\t Matches a tab character
\w Matches a word character ( a-z , A-Z , 0-9 , and _)
\W Matches a nonword character (anything but a-z , A-Z , 0-9 , and _)
\x x (useful if x is a metacharacter, but you really want x)
{n} Matches exactly n times
{n,} Matches n times or more
{min,max} Matches at least min  and at most max  times
Provided with this  table, and looking again at the expression /[^a-zA-Z0-9_]/ , you
can see that it could easily be shortened to /[^\w]/  because the single metacharacter
\w (with a lowercase w) specifies the characters a-z, A-Z, 0-9, and _.
In fact, we can be cleverer than that, because the metacharacter \W (with an uppercase
W) specifies all characters except  for a-z, A-Z, 0-9, and _. Therefore, we could also
drop the ^ metacharacter and simply use /[\W]/  for the expression.
384 | Chapter 16: JavaScript and PHP Validation and Error Handling

To give you more ideas of how this all works, Table 16-2  shows a range of expressions
and the patterns they match.
Table 16-2. Some example regular expressions
Example Matches
r The first  r in The quick brown
rec[ei][ei]ve Either of receive  or recieve  (but also receeve  or reciive )
rec[ei]{2}ve Either of receive  or recieve  (but also receeve  or reciive )
rec(ei|ie)ve Either of receive  or recieve  (but not receeve  or reciive )
cat The word cat in I like cats and dogs
cat|dog Either of the words cat or dog in I like cats and dogs
\. . (the \ is necessary because . is a metacharacter)
5\.0* 5., 5.0, 5.00 , 5.000 , etc.
[a-f] Any of the characters a, b, c, d, e or f
cats$ Only the final  cats  in My cats are friendly cats
^my Only the first  my in my cats are my pets
\d{2,3} Any two- or three-digit number ( 00 through 999)
7(,000)+ 7,000 ; 7,000,000 ; 7,000,000,000 ; 7,000,000,000,000 ; etc.
[\w]+ Any word of one or more characters
[\w]{5} Any five-letter  word
General Modifiers
Some additional modifiers are available for regular expressions:
•/g enables global  matching. When using a replace function, specify this modifier
to replace all matches, rather than only the first one.
•/i makes the regular expression match case-insensitive. Thus, instead of /[a-zA-
Z]/, you could specify /[a-z]/i  or /[A-Z]/i .
•/m enables multiline mode, in which the caret ( ^) and dollar ( $) match before and
after any newlines in the subject string. Normally, in a multiline string, ^ matches
only at the start of the string, and $ matches only at the end of the string.
For example, the expression /cats/g  will match both occurrences of the word cats in
the sentence I like cats, and cats like me . Similarly, /dogs/gi  will match both occur‐
rences of the word dogs  (Dogs  and dogs ) in the sentence Dogs like other dogs , because
you can use these specifiers together.
Regular Expressions | 385

Using Regular Expressions in JavaScript
In JavaScript, you will use regular expressions mostly in two methods: test  (which
you have already seen) and replace . Whereas test  just tells you whether its argu‐
ment matches the regular expression, replace  takes a second parameter: the string to
replace the text that matches. Like most functions, replace  generates a new string as
a return value; it does not change the input.
To compare the two methods, the following statement just returns true  to let us
know that the word cats appears at least once somewhere within the string:
document.write(/cats/i.test("Cats are funny. I like cats."))
But the following statement replaces both occurrences of the word cats with the word
dogs , printing the result. The search has to be global ( /g) to find all occurrences, and
case-insensitive ( /i) to find the capitalized Cats :
document.write("Cats are friendly. I like cats.".replace(/cats/gi,"dogs"))
If you try out the statement, you’ll see a limitation of replace : because it replaces text
with exactly the string you tell it to use, the first word Cats  is replaced by dogs  instead
of Dogs .
Using Regular Expressions in PHP
The most common regular expression functions that you are likely to use in PHP are
preg_match , preg_match_all , and preg_replace .
To test whether the word cats appears anywhere within a string, in any combination
of upper- and lowercase, you could use preg_match  like this:
$n = preg_match("/cats/i", "Cats are crazy. I like cats.");
Because PHP uses 1 for TRUE  and 0 for FALSE , the preceding statement sets $n to 1.
The first argument is the regular expression, and the second is the text to match. But
preg_match  is actually a good deal more powerful and complicated, because it takes a
third argument that shows what text matched:
$n = preg_match("/cats/i", "Cats are curious. I like cats.", $match);
echo "$n Matches: $match[0]";
The third argument is an array (here, given the name $match ). The function puts the
text that matches into the first element, so if the match is successful, you can find the
text that matched in $match[0] . In this example, the output lets us know that the
matched text was capitalized:
1 Matches: Cats
If you wish to locate all matches, you use the preg_match_all  function, like this:
386 | Chapter 16: JavaScript and PHP Validation and Error Handling

$n = preg_match_all("/cats/i", "Cats are strange. I like cats.", $match);
echo "$n Matches: ";
for ($j=0 ; $j < $n ; ++$j) echo $match[0][$j]." ";
As before, $match  is passed to the function and the element $match[0]  is assigned the
matches made, but this time as a subarray. To display the subarray, this example iter‐
ates through it with a for loop.
When you want to replace part of a string, you can use preg_replace  as shown here.
This example replaces all occurrences of the word cats with the word dogs , regardless
of case:
echo preg_replace("/cats/i", "dogs", "Cats are furry. I like cats.");
The subject of regular expressions is a large one, and entire books
have been written about it. If you would like further information, I
suggest the Wikipedia entry , or Jeffrey Friedl’s excellent book Mas‐
tering Regular Expressions .
Redisplaying a Form After PHP Validation
OK, back to form validation. So far we’ve created the  HTML document validate.html ,
which  will post through to the PHP program adduser.php , but only if JavaScript vali‐
dates the fields or if JavaScript is disabled or unavailable.
So now it’s time to create adduser.php  to receive the posted form, perform its own val‐
idation, and then present the form again to the visitor if the validation fails.
Example 16-3  contains the code that you should type and save (or download from the
companion website).
Example 16-3. The adduser.php program
<?php // adduser.php
  // The PHP code
  $forename = $surname = $username = $password = $age = $email = "";
  if (isset($_POST['forename']))
    $forename = fix_string($_POST['forename']);
  if (isset($_POST['surname']))
    $surname  = fix_string($_POST['surname']);
  if (isset($_POST['username']))
    $username = fix_string($_POST['username']);
  if (isset($_POST['password']))
    $password = fix_string($_POST['password']);
  if (isset($_POST['age']))
    $age      = fix_string($_POST['age']);
Redisplaying a Form After PHP Validation | 387

if (isset($_POST['email']))
    $email    = fix_string($_POST['email']);
  $fail  = validate_forename($forename);
  $fail .= validate_surname($surname);
  $fail .= validate_username($username);
  $fail .= validate_password($password);
  $fail .= validate_age($age);
  $fail .= validate_email($email);
  echo "<!DOCTYPE html>\n<html><head><title>An Example Form</title>";
  if ($fail == "")
  {
    echo "</head><body>Form data successfully validated:
      $forename, $surname, $username, $password, $age, $email.</body></html>";
    // This is where you would enter the posted fields into a database,
    // preferably using hash encryption for the password.
    exit;
  }
  echo <<<_END
    <!-- The HTML/JavaScript section -->
    <style>
      .signup {
        border: 1px solid #999999;
      font:   normal 14px helvetica; color:#444444;
      }
    </style>
    <script>
      function validate(form)
      {
        fail  = validateForename(form.forename.value)
        fail += validateSurname(form.surname.value)
        fail += validateUsername(form.username.value)
        fail += validatePassword(form.password.value)
        fail += validateAge(form.age.value)
        fail += validateEmail(form.email.value)
        if (fail == "")     return true
        else { alert(fail); return false }
      }
      function validateForename(field)
      {
        return (field == "") ? "No Forename was entered.\n" : ""
      }
388 | Chapter 16: JavaScript and PHP Validation and Error Handling

function validateSurname(field)
      {
        return (field == "") ? "No Surname was entered.\n" : ""
      }
      function validateUsername(field)
      {
        if (field == "") return "No Username was entered.\n"
        else if (field.length < 5)
          return "Usernames must be at least 5 characters.\n"
        else if (/[^a-zA-Z0-9_-]/.test(field))
          return "Only a-z, A-Z, 0-9, - and _ allowed in Usernames.\n"
        return ""
      }
      function validatePassword(field)
      {
        if (field == "") return "No Password was entered.\n"
        else if (field.length < 6)
          return "Passwords must be at least 6 characters.\n"
        else if (!/[a-z]/.test(field) || ! /[A-Z]/.test(field) ||
                 !/[0-9]/.test(field))
          return "Passwords require one each of a-z, A-Z and 0-9.\n"
        return ""
      }
      function validateAge(field)
      {
        if (isNaN(field)) return "No Age was entered.\n"
        else if (field < 18 || field > 110)
          return "Age must be between 18 and 110.\n"
        return ""
      }
      function validateEmail(field)
      {
        if (field == "") return "No Email was entered.\n"
          else if (!((field.indexOf(".") > 0) &&
                     (field.indexOf("@") > 0)) ||
                    /[^a-zA-Z0-9.@_-]/.test(field))
            return "The Email address is invalid.\n"
        return ""
      }
    </script>
  </head>
  <body>
    <table border="0" cellpadding="2" cellspacing="5" bgcolor="#eeeeee">
      <th colspan="2" align="center">Signup Form</th>
        <tr><td colspan="2">Sorry, the following errors were found<br>
Redisplaying a Form After PHP Validation | 389

in your form: <p><font color=red size=1><i>$fail</i></font></p>
        </td></tr>
      <form method="post" action="adduser.php" onSubmit="return validate(this)">
        <tr><td>Forename</td>
          <td><input type="text" maxlength="32" name="forename" value="$forename">
        </td></tr><tr><td>Surname</td>
          <td><input type="text" maxlength="32" name="surname"  value="$surname">
        </td></tr><tr><td>Username</td>
          <td><input type="text" maxlength="16" name="username" value="$username">
        </td></tr><tr><td>Password</td>
          <td><input type="text" maxlength="12" name="password" value="$password">
        </td></tr><tr><td>Age</td>
          <td><input type="text" maxlength="3"  name="age"      value="$age">
        </td></tr><tr><td>Email</td>
          <td><input type="text" maxlength="64" name="email"    value="$email">
        </td></tr><tr><td colspan="2" align="center"><input type="submit"
          value="Signup"></td></tr>
      </form>
    </table>
  </body>
</html>
_END;
  // The PHP functions
  function validate_forename($field)
  {
    return ($field == "") ? "No Forename was entered<br>": "";
  }
  function validate_surname($field)
  {
    return($field == "") ? "No Surname was entered<br>" : "";
  }
  function validate_username($field)
  {
    if ($field == "") return "No Username was entered<br>";
    else if (strlen($field) < 5)
      return "Usernames must be at least 5 characters<br>";
    else if (preg_match("/[^a-zA-Z0-9_-]/", $field))
      return "Only letters, numbers, - and _ in usernames<br>";
    return "";
  }
  function validate_password($field)
  {
    if ($field == "") return "No Password was entered<br>";
    else if (strlen($field) < 6)
      return "Passwords must be at least 6 characters<br>";
390 | Chapter 16: JavaScript and PHP Validation and Error Handling

else if (!preg_match("/[a-z]/", $field) ||
             !preg_match("/[A-Z]/", $field) ||
             !preg_match("/[0-9]/", $field))
      return "Passwords require 1 each of a-z, A-Z and 0-9<br>";
    return "";
  }
  function validate_age($field)
  {
    if ($field == "") return "No Age was entered<br>";
    else if ($field < 18 || $field > 110)
      return "Age must be between 18 and 110<br>";
    return "";
  }
  function validate_email($field)
  {
    if ($field == "") return "No Email was entered<br>";
      else if (!((strpos($field, ".") > 0) &&
                 (strpos($field, "@") > 0)) ||
                  preg_match("/[^a-zA-Z0-9.@_-]/", $field))
        return "The Email address is invalid<br>";
    return "";
  }
  function fix_string($string)
  {
    if (get_magic_quotes_gpc()) $string = stripslashes($string);
    return htmlentities ($string);
  }
?>
In this example, all input is sanitized prior to use, even passwords,
which—since they may contain characters used to format HTML—
will be changed into HTML entities. For example, & will become
&amp;  and < will become &lt; , and so on. If you will be using a
hash function to store encrypted passwords, this will not be an
issue as long as when you later check the password entered, it is
sanitized in the same way, so that the same inputs will be com‐
pared.
The result of submitting the form with JavaScript disabled (and two fields incorrectly
completed) is shown in Figure 16-5 .
Redisplaying a Form After PHP Validation | 391

Figure 16-5. The form as represented after  PHP validation fails
I have put the PHP section of this code (and changes to the HTML section) in a bold
typeface so that you can more clearly see the difference between this and
Example 16-1  and Example 16-2 .
If you browsed through this example (or typed it or downloaded it from the http://
lpmj.net  website), you’ll have seen that the PHP code is almost a clone of the Java‐
Script code; the same regular expressions are used to validate each field in very simi‐
lar functions.
But there are a couple of things to note. First, the fix_string  function (right at the
end) is used to sanitize each field and prevent any attempts at code injection from
succeeding.
Also, you will see that the HTML from Example 16-1  has been repeated in the PHP
code within a <<<_END..._END;  structure, displaying the form with the values that
the visitor entered the previous time. Y ou do this by simply adding an extra value
parameter  to each <input>  tag (such as value="$forename" ). This courtesy is highly
recommended so that the user has to edit only the previously entered values, and
doesn’t have to type the fields all over again.
392 | Chapter 16: JavaScript and PHP Validation and Error Handling

In the real world, you probably wouldn’t start with an HTML form
such as the one in Example 16-1 . Instead, you’ d be more likely to go
straight ahead and write the PHP program in Example 16-3 , which
incorporates all the HTML. And, of course, you’ d also need to
make a minor tweak for the case when it’s the first time the pro‐
gram is called up, to prevent it from displaying errors when all the
fields are empty. Y ou also might drop the six JavaScript functions
into their own .js file for separate inclusion.
Now that you’ve seen how to bring all of PHP , HTML, and JavaScript together, the
next chapter will introduce Ajax (Asynchronous JavaScript and XML), which uses
JavaScript calls to the server in the background to seamlessly update portions of a
web page, without having to resubmit the entire page to the web server.
Questions
1.What JavaScript method can you use to send a form for validation prior to sub‐
mitting it?
2.What JavaScript method is used to match a string against a regular expression?
3.Write a regular expression to match any characters that are not in a word, as
defined by regular expression syntax.
4.Write a regular expression to match either of the words fox or fix.
5.Write a regular expression to match any single word followed by any nonword
character.
6.Using regular expressions, write a JavaScript function to test whether the word
fox exists in the string The quick brown fox .
7.Using regular expressions, write a PHP function to replace all occurrences of the
word the in The cow jumps over the moon  with the word my.
8.What HTML attribute is used to precomplete form fields with a value?
See Chapter 16 Answers  in Appendix A  for the answers to these questions.
Questions | 393



CHAPTER 17
Using Ajax
The term Ajax  was first coined in 2005. It stands for Asynchronous JavaScript and
XML , which, in simple terms, means using a set of methods built in to JavaScript to
transfer data between the browser and a server in the background. An excellent
example of this technology is Google Maps (see Figure 17-1 ), in which new sections
of a map are downloaded from the server when needed, without requiring a page
refresh.
Using Ajax not only substantially reduces the amount of data that must be sent back
and forth, but also makes web pages seamlessly dynamic—allowing them to behave
more like self-contained applications. The results are a much improved user interface
and better responsiveness.
What Is Ajax?
The beginnings of Ajax as used today started with the release of Internet Explorer 5 in
1999, which introduced a new ActiveX object, XMLHttpRequest . ActiveX is Micro‐
soft’s technology for signing plug-ins that install additional software to your com‐
puter. Other browser developers later followed suit, but rather than using ActiveX,
they all implemented the feature as a native part of the JavaScript interpreter.
However, even before then, an  early form of Ajax had already surfaced that used hid‐
den frames on a page that interacted with the server in the background. Chat rooms
were early adopters of this technology, using it to poll for and display new message
posts without requiring page reloads.
So let’s see how to implement Ajax by using JavaScript.
395

Figure 17-1. Google Maps is an excellent example of Ajax in action
Using XMLHttpRequest
Because of the differences between  browser implementations of XMLHttpRequest , you
must create a special function in order to ensure that your code will work on all
major browsers.
To do this, you must understand the three ways of creating an XMLHttpRequest
object:
•IE 5: request = new ActiveXObject("Microsoft.XMLHTTP")
•IE 6+: request = new ActiveXObject("Msxml2.XMLHTTP")
•All others: request = new XMLHttpRequest()
This is the case because Microsoft chose to implement a change with the release of
Internet Explorer 6, while all other browsers use a slightly different method. There‐
fore, the code in Example 17-1  will work for all major browsers released over the last
few years.
396 | Chapter 17: Using Ajax

Example 17-1. A cross-browser Ajax function
<script>
  function ajaxRequest()
  {
    try // Non IE Browser?
    {   // Yes
      var request = new XMLHttpRequest()
    }
    catch(e1)
    {
      try // IE 6+?
      {   // Yes
        request = new ActiveXObject("Msxml2.XMLHTTP")
      }
      catch(e2)
      {
        try // IE 5?
        {   // Yes
          request = new ActiveXObject("Microsoft.XMLHTTP")
        }
        catch(e3) // There is no AJAX Support
        {
          request = false
        }
      }
    }
    return request
  }
</script>
Y ou may remember the introduction to error handling in the  previous chapter, using
the try...catch  construct. Example 17-1  is a perfect illustration of its utility, because
it uses the try keyword to execute the non-IE Ajax command, and upon success,
jumps on to the final return  statement, where the new object is returned.
Otherwise, a catch  traps the error, and the subsequent command is executed. Again,
upon success, the new object is returned; otherwise, the final of the three commands
is tried. If that attempt fails, then the browser doesn’t support Ajax and the request
object is set to false ; otherwise, the object is returned. So there you have it: a cross-
browser Ajax request function that you may wish to add to your library of useful
JavaScript functions.
OK, so now you have a means of creating an XMLHttpRequest  object, but what can
you do with these objects? Well, each one comes with a set of properties (variables)
and methods (functions), which  are detailed in Table 17-1  and Table 17-2 .
Using XMLHttpRequest | 397

Table 17-1. An XMLHttpRequest object’s properties
Property Description
onreadystatechange Specifies  an event-handling function to be called whenever the readyState  property of an
object changes.
readyState An integer property that reports on the status of a request. It can have any of these values: 0 =
Uninitialized, 1 = Loading, 2 = Loaded, 3 = Interactive, and 4 = Completed.
responseText The data returned by the server in text format.
responseXML The data returned by the server in XML format.
status The HTTP status code returned by the server.
statusText The HTTP status text returned by the server.
Table 17-2. An XMLHttpRequest object’s methods
Method Description
abort() Aborts the current request.
getAllResponseHeaders() Returns all headers as a string.
getResponseHeader( param) Returns the value of param  as a string.
open('method', 'url', 'asynch') Specifies  the HTTP method to use (Get or Post), the target URL, and
whether the request should be handled asynchronously ( true  or
false ).
send(data) Sends data  to the target server using the specified  HTTP method.
setRequestHeader(' param', 'value') Sets a header with a parameter/value pair.
These properties and methods give you control over what data you send to the server
and receive back, as well as a choice of send and receive methods. For example, you
can choose whether to request data in plain text (which could include HTML and
other tags) or in XML format. Y ou can also decide whether you wish to use the Post
or Get method to send to the server.
Let’s look at the Post method first by creating a very simple pair of documents: a com‐
bination of HTML and JavaScript, and a PHP program to interact via Ajax with the
first. Hopefully you’ll enjoy these examples, because they illustrate just what Web 2.0
and Ajax are all about. With a few lines of JavaScript, they request a web document
from a third-party web server, which is then returned to the browser by your server
and placed within a section of the current document.
Your First Ajax Program
Type and save the code in Example 17-2  as urlpost.html , but don’t load it into your
browser yet.
398 | Chapter 17: Using Ajax

Example 17-2. urlpost.html
<!DOCTYPE html>
<html>
  <head>
    <title>AJAX Example</title>
  </head>
  <body style='text-align:center'>
    <h1>Loading a web page into a DIV</h1>
    <div id='info'>This sentence will be replaced</div>
    <script>
      params  = "url=amazon.com/gp/aw"
      request = new ajaxRequest()
      request.open("POST", "urlpost.php", true)
      request.setRequestHeader("Content-type",
        "application/x-www-form-urlencoded")
      request.setRequestHeader("Content-length", params.length)
      request.setRequestHeader("Connection", "close")
      request.onreadystatechange = function()
      {
        if (this.readyState == 4)
        {
          if (this.status == 200)
          {
            if (this.responseText != null)
            {
              document.getElementById('info').innerHTML =
                this.responseText
            }
            else alert("Ajax error: No data received")
          }
          else alert( "Ajax error: " + this.statusText)
        }
      }
      request.send(params)
      function ajaxRequest()
      {
        try
        {
          var request = new XMLHttpRequest()
        }
        catch(e1)
        {
          try
          {
            request = new ActiveXObject("Msxml2.XMLHTTP")
          }
Using XMLHttpRequest | 399

catch(e2)
          {
            try
            {
              request = new ActiveXObject("Microsoft.XMLHTTP")
            }
            catch(e3)
            {
              request = false
            }
          }
        }
        return request
      }
    </script>
  </body>
</html>
Let’s go through this document and look at what it does, starting with the first six
lines, which simply set up an HTML document and display a heading. The next line
creates a DIV with the ID info , containing the text This sentence will be
replaced  by default. Later on, the text returned from the Ajax call will be inserted
here.
The next six lines are required for making an HTTP Post Ajax request. The first sets
the variable params  to a parameter =value  pair, which is what we’ll send to the server.
Then the Ajax object request  is created. After this, the open  method is called to set
the object to make a Post request to urlpost.php  in asynchronous mode. The last three
lines in this group set up headers that are required for the receiving server to know
that a Post request is coming.
The readyState property
Now we get to the nitty-gritty of an Ajax call, which all hangs on the readyState
property. The “asynchronous” aspect of Ajax allows the browser to keep accepting
user input and changing the screen, while our program sets the onreadystatechange
property to call a function of our choice each time readyState  changes. In this case, a
nameless (or anonymous), inline function has been used, as opposed to a separate,
named function. This type of function is known as a callback  function, as it is called
back each time readyState  changes.
The syntax to set up the callback function using an inline, anonymous function is as
follows:
request.onreadystatechange = function()
{
  if (this.readyState == 4)
  {
    // do something
400 | Chapter 17: Using Ajax

}
}
If you wish to use a separate, named function, the syntax is slightly different:
request.onreadystatechange = ajaxCallback
function ajaxCallback()
{
  if (this.readyState == 4)
  {
    // do something
  }
}
Looking at Table 17-1 , you’ll see that readyState  can have five values. But only one
concerns us: value 4, which represents a completed Ajax call. Therefore, each time the
new function gets called, it returns without doing anything until readyState  has a
value of 4. When our function detects that value, it next inspects the status  of the
call to ensure it has a value of 200, which means that the call succeeded. If it’s not 200,
an alert pop up displays the error message contained in statusText .
Y ou will notice that all of these object properties are referenced
using this.readyState , this.status , and so on, rather than the
object’s current name, request , as in request.readyState  or
request.status . This is so that you can easily copy and paste the
code and it will work with any object name, because the this  key‐
word always refers to the current object.
So, having ascertained that the readyState  is 4 and the status is 200, we test the
responseText  value to see whether it contains a value. If not, an error message is dis‐
played in an alert box. Otherwise, the inner HTML of the DIV is assigned the value of
responseText , like this:
document.getElementById('info').innerHTML = this.responseText
In this line, the  element info  is referenced via the getElementByID  method, and then
its innerHTML  property is assigned the value that was returned by the Ajax call.
After all this setting up and preparation, the Ajax request is finally sent to the server
via the following command, which passes the parameters already defined in the vari‐
able params :
request.send(params)
After that, all the preceding code is activated each time readyState  changes.
The remainder of the document is the ajaxRequest  function from Example 17-1 , and
the closing script and HTML tags.
Using XMLHttpRequest | 401

The server half of the Ajax process
Now we get to the PHP half of the equation, which you can see in Example 17-3 . Type
it and save it as urlpost.php .
Example 17-3. urlpost.php
<?php // urlpost.php
  if (isset($_POST['url']))
  {
    echo file_get_contents('http://' . SanitizeString($_POST['url']));
  }
  function SanitizeString($var)
  {
    $var = strip_tags($var);
    $var = htmlentities($var);
    return stripslashes($var);
  }
?>
As you can see, this is short and sweet, and also makes use of the ever-important Sani
tizeString  function, as should be done with all posted data. In this instance, unsani‐
tized data could result in the user gaining an advantage over your code.
This program uses the file_get_contents  PHP function to load in the web page at
the URL supplied to it in the Post variable $_POST['url'] . The file_get_contents
function is versatile in that it loads in the entire contents of a file or web page from
either a local or a remote server; it even takes into account moved pages and other
redirects.
Once you have typed the program, you are ready to call up urlpost.html  into your web
browser and, after a few seconds, you should see the contents of the Amazon mobile
front page loaded into the DIV that we created for that purpose. It won’t be as fast as
directly loading the web page, because it is transferred twice: once to the server and
again from the server to your browser. The result should look like Figure 17-2 .
402 | Chapter 17: Using Ajax

Figure 17-2. The Amazon mobile website has been loaded into a DIV
Not only have we succeeded in making an Ajax call and having a response returned to
JavaScript, but we’ve also harnessed the power of PHP to enable the merging in of a
totally unrelated web object. Incidentally, if we had tried to find a way to fetch the
Amazon mobile web page directly via Ajax (without recourse to the PHP server-side
module), we wouldn’t have succeeded, because there are security blocks preventing
cross-domain Ajax. So this example also illustrates a handy solution to a practical
problem.
Using Get Instead of Post
As with submitting any form  data, you have the option of submitting your data in
the form of Get requests, and you will save a few lines of code if you do so. However,
there is a downside: some browsers may cache Get requests, whereas Post requests
will never be cached. Y ou don’t want to cache a request, because the browser will just
redisplay what it got the last time instead of going to the server for fresh input. The
solution to this is to use a workaround that adds a random parameter to each request,
ensuring that each URL requested is unique.
Using XMLHttpRequest | 403

Example 17-4  shows how you would achieve the same result as with Example 17-2 ,
but using an Ajax Get request instead of Post.
Example 17-4. urlget.html
<!DOCTYPE html>
<html>
  <head>
    <title>AJAX Example</title>
  </head>
  <body style='text-align:center'>
    <h1>Loading a web page into a DIV</h1>
    <div id='info'>This sentence will be replaced</div>
    <script>
      nocache = "&nocache=" + Math.random() * 1000000
      request = new ajaxRequest()
      request.open("GET", "urlget.php?url=amazon.com/gp/aw" + nocache, true)
      request.onreadystatechange = function()
      {
        if (this.readyState == 4)
        {
          if (this.status == 200)
          {
            if (this.responseText != null)
            {
              document.getElementById('info').innerHTML =
                this.responseText
            }
            else alert("Ajax error: No data received")
          }
          else alert( "Ajax error: " + this.statusText)
        }
      }
      request.send( null)
      function ajaxRequest()
      {
        try
        {
          var request = new XMLHttpRequest()
        }
        catch(e1)
        {
          try
          {
            request = new ActiveXObject("Msxml2.XMLHTTP")
          }
          catch(e2)
404 | Chapter 17: Using Ajax

{
            try
            {
              request = new ActiveXObject("Microsoft.XMLHTTP")
            }
            catch(e3)
            {
              request = false
            }
          }
        }
        return request
      }
    </script>
  </body>
</html>
The differences to note between the two documents are highlighted in bold, and
described as follows:
•It is not necessary to send headers for a Get request.
•We call the open  method using a Get request, supplying a URL with a string com‐
prising a ? symbol followed by the parameter/value pair url=amazon.com/gp/aw .
•We start a second parameter/value pair using an & symbol, and then set the value
of the parameter nocache  to a random value between 0 and a million. This is
used to ensure that each URL requested is different, and therefore that no
requests will be cached.
•The call to send  now contains only a parameter of null , as no parameters are
being passed via a Post request. Note that leaving the parameter out is not an
option, as it would result in an error.
To accompany this new document, the PHP program must be modified to respond to
a Get request, as in Example 17-5 , urlget.php .
Example 17-5. urlget.php
<?php
  if (isset( $_GET['url']))
  {
    echo file_get_contents("http://".sanitizeString( $_GET['url']));
  }
  function sanitizeString($var)
  {
    $var = strip_tags($var);
    $var = htmlentities($var);
    return stripslashes($var);
Using XMLHttpRequest | 405

}
?>
All that’s different between this and Example 17-3  is that the references to $_POST
have been replaced with $_GET . The end result of calling up urlget.html  in your
browser is identical to loading in urlpost.html .
Sending XML Requests
Although the objects we’ve been creating are called XMLHttpRequest  objects, so far we
have made absolutely no use of XML. This is where the Ajax term is a bit of a misno‐
mer, because the technology actually allows you to request any type of textual data,
only one of which is XML. As you have seen, we have requested an entire HTML
document via Ajax, but we could equally have asked for a text page, a string or num‐
ber, or even spreadsheet data.
So let’s modify the previous example document and PHP program to fetch some
XML data. To do this, first take a look at the PHP program, xmlget.php , shown in
Example 17-6 .
Example 17-6. xmlget.php
<?php
  if (isset($_GET['url']))
  {
    header('Content-Type: text/xml');
    echo file_get_contents("http://".sanitizeString($_GET['url']));
  }
  function sanitizeString($var)
  {
    $var = strip_tags($var);
    $var = htmlentities($var);
    return stripslashes($var);
  }
?>
This program has been very slightly modified (shown in bold highlighting) to output
the correct XML header before returning a fetched document. No checking is made
here, as it is assumed that the calling Ajax will request an actual XML document.
Now on to the HTML document, xmlget.html , shown in Example 17-7 .
Example 17-7. xmlget.html
<!DOCTYPE html>
<html>
  <head>
406 | Chapter 17: Using Ajax

<title>AJAX Example</title>
  </head>
  <body>
    <h1>Loading a web page into a DIV</h1>
    <div id='info'>This sentence will be replaced</div>
    <script>
      nocache = "&nocache=" + Math.random() * 1000000
      url     = "rss.news.yahoo.com/rss/topstories"
      out     = "";
      request = new ajaxRequest()
      request.open("GET", "xmlget.php?url=" + url + nocache, true)
      request.onreadystatechange = function()
      {
        if (this.readyState == 4)
        {
          if (this.status == 200)
          {
            if (this.responseText != null)
            {
              titles = this.responseXML.getElementsByTagName('title')
              for (j = 0 ; j < titles.length ; ++j)
              {
                out += titles[j].childNodes[0].nodeValue + '<br>'
              }
              document.getElementById('info').innerHTML = out
            }
            else alert("Ajax error: No data received")
          }
          else alert( "Ajax error: " + this.statusText)
        }
      }
      request.send(null)
      function ajaxRequest()
      {
        try
        {
          var request = new XMLHttpRequest()
        }
        catch(e1)
        {
          try
          {
            request = new ActiveXObject("Msxml2.XMLHTTP")
          }
          catch(e2)
          {
Using XMLHttpRequest | 407

try
            {
              request = new ActiveXObject("Microsoft.XMLHTTP")
            }
            catch(e3)
            {
              request = false
            }
          }
        }
        return request
      }
    </script>
  </body>
</html>
Again, the differences have been highlighted in bold, so you can see that this code is
substantially similar to previous versions, except that the URL now being requested,
rss.news.yahoo.com/rss/topstories , contains an XML document, the Yahoo! News Top
Stories  feed.
The other big change is the use of the responseXML  property, which replaces the
responseText  property. Whenever a server returns XML data, responseXML  will con‐
tain the XML returned.
However, responseXML  doesn’t simply contain a string of XML text: it is actually a
complete XML document object that we can examine and parse using DOM tree
methods and properties. This means it is accessible, for example, by the JavaScript
getElementsByTagName  method.
About XML
An XML document will generally take the form of the RSS feed shown in
Example 17-8 . However, the beauty of XML is that we can store this type of structure
internally in a DOM tree (see Figure 17-3 ) to make it quickly searchable.
Example 17-8. An XML document
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>RSS Feed</title>
    <link>http://website.com</link>
    <description>website.com's RSS Feed</description>
    <pubDate>Mon, 11 May 2020 00:00:00 GMT</pubDate>
    <item>
      <title>Headline</title>
      <guid>http://website.com/headline</guid>
      <description>This is a headline</description>
408 | Chapter 17: Using Ajax

</item>
    <item>
      <title>Headline 2</title>
      <guid>http://website.com/headline2</guid>
      <description>The 2nd headline</description>
    </item>
  </channel>
</rss>
Figure 17-3. The DOM tree of Example 17-8
Therefore, using the getElementsByTagName  method, you can quickly extract the val‐
ues associated with various tags without a lot of string searching. This is exactly what
we do in Example 17-7 , where the following command is issued:
titles = this.responseXML.getElementsByTagName('title')
This single command has the effect of placing all the values of the title  elements
into the array titles . From there, it is a simple matter to extract them with the fol‐
lowing expression (where j is the title to access):
titles[j].childNodes[0].nodeValue
All the titles are then appended to the string variable out and, once all have been pro‐
cessed, the result is inserted into the empty DIV at the document start. When you call
up xmlget.html  in your browser, the result will be something like Figure 17-4 .
Using XMLHttpRequest | 409

Figure 17-4. Fetching a Yahoo! XML news feed via Ajax
As with all form data, you can use either the Post or the Get
method when requesting XML data; your choice will make little
difference to the result.
Why use XML?
Y ou may ask why you would use XML other than for fetching XML documents such
as RSS feeds.  Well, the simple answer is that you don’t have to, but if you wish to pass
structured data back to your Ajax applications, it could be a real pain to send a sim‐
ple, unorganized jumble of text that would need complicated processing in JavaScript.
Instead, you can create an XML document and pass that back to the Ajax function,
which will automatically place it into a DOM tree, as easily accessible as the HTML
DOM object with which you are now familiar.
410 | Chapter 17: Using Ajax

Using Frameworks for Ajax
Now that you know how to code your own Ajax routines, you might like to investi‐
gate some of the free frameworks that are available to make it even easier, and which
offer many more advanced features. In particular, I would suggest you check out
jQuery, probably the most commonly used framework, and which I introduce in
Chapter 21 . In the following chapter, though, we’ll look at how to apply styling to
your websites with CSS.
Questions
1.Why is it necessary to write a function for creating new XMLHttpRequest  objects?
2.What is the purpose of the try...catch  construct?
3.How many properties and how many methods does an XMLHttpRequest  object
have?
4.How can you tell when an Ajax call has completed?
5.How do you know whether an Ajax call completed successfully?
6.What XMLHttpRequest  object’s property returns an Ajax text response?
7.What XMLHttpRequest  object’s property returns an Ajax XML response?
8.How can you specify a callback function to handle Ajax responses?
9.What XMLHttpRequest  method is used to initiate an Ajax request?
10.What are the main differences between an Ajax GET and POST  request?
See Chapter 17 Answers  in Appendix A  for the answers to these questions.
Questions | 411



CHAPTER 18
Introduction to CSS
Using CSS (Cascading Style Sheets) , you can apply styles to your web pages to make
them look exactly how you want. This works because CSS is connected to the DOM
(Document Object Model), which I explained in Chapter 13 .
With CSS and its integration with the DOM, you can quickly and easily restyle any
element. For example, if you don’t like the default look of the <h1> , <h2> , and other
heading tags, you can assign new styles to override the default settings for the font
family and size used, or whether bold or italics should be set, and many more proper‐
ties too.
One way you can add styling to a web page is by inserting the required statements
into the head of a web page between the <head>  and </head>  tags. So, to change the
style of the <h1>  tag, you might use the following code (I’ll explain the syntax later):
<style>
  h1 { color:red; font-size:3em; font-family:Arial; }
</style>
Within an HTML page, this might look like Example 18-1  (see Figure 18-1 ), which,
like all the examples in this chapter, uses the standard HTML5 DOCTYPE  declaration.
Example 18-1. A simple HTML page
<!DOCTYPE html>
<html>
  <head>
    <title>Hello World</title>
    <style>
      h1 { color:red; font-size:3em; font-family:Arial; }
    </style>
  </head>
  <body>
413

<h1>Hello there</h1>
  </body>
</html>
Figure 18-1. Styling a tag, with the original style shown in the inset
Importing a Style Sheet
When you wish to style a whole site, rather than a single page, a better way to manage
style sheets is to move them completely out of your web pages to separate files, and
then import the ones you need. This lets you apply different style sheets for different
layouts (such as web and print), without changing the HTML.
There are a couple of different ways you can achieve this, the first of which is by using
the CSS @import  directive, like this:
<style>
  @import url('styles.css');
</style>
This statement tells the browser to fetch a style sheet with the name styles.css . The
@import  command is quite flexible in that you can create style sheets that themselves
pull in other style sheets, and so on. Just make sure that there are no <style>  or
</style>  tags in any of your external style sheets, or they will not work.
Importing CSS from Within HTML
Y ou can also include a style sheet with the HTML <link>  tag, like this:
<link rel='stylesheet' type='text/css' href='styles.css'>
This has the exact same effect as the @import  directive, except that <link>  is an
HTML-only tag and is not a valid style directive, so it cannot be used from within one
style sheet to pull in another, and also cannot be placed within a pair of
<style>...</style>  tags.
414 | Chapter 18: Introduction to CSS

Just as you can use multiple @import  directives within your CSS to include multiple
external style sheets, you can also use as many <link>  elements as you like in your
HTML.
Embedded Style Settings
There’s also nothing stopping you from individually setting or overriding certain
styles for the current page on a case-by-case basis by inserting style declarations
directly within HTML, like this (which results in italic, blue text within the tags):
<div style='font-style:italic; color:blue;'>Hello there</div>
But this should be reserved only for the most exceptional circumstances, as it breaks
the separation of content and presentation.
Using IDs
A better solution for setting the style of an element is to assign an ID to it in the
HTML, like this:
<div id='welcome'>Hello there</div>
This states that the contents of the <div>  with the ID welcome  should have applied to
them the style defined in the welcome  style setting. The matching CSS statement  for
this might look like the following
#welcome { font-style:italic; color:blue; }
Note the use of the # symbol, which specifies that only the ID with
the name welcome  should be styled with this statement.
Using Classes
If you would like to apply the same style to many elements, you do not have to give
each one a different ID because you can specify a class to manage them all, like this:
<div class='welcome'>Hello</div>
This states that the contents of this element (and any others that use the class) should
have applied to them the style defined in the welcome  class. Once a class is applied,
you can use the following rule, either in the page header or within an external style
sheet for setting the styles for the class:
.welcome { font-style:italic; color:blue; }
Using IDs | 415

Instead  of the # symbol, which is reserved for IDs, class statements are prefaced with
a . (period).
Using Semicolons
In CSS, semicolons are used to separate multiple CSS statements on the same line.
But if there is only one statement in a rule (or in an inline style setting within an
HTML tag), you can omit the semicolon, as you can for the final statement in a
group.
However, to avoid hard-to-find CSS errors, you may prefer to always use a semicolon
after every CSS setting. Y ou can then copy and paste them, and otherwise modify
properties, without worrying about removing semicolons where they aren’t strictly
necessary or having to add them where they are required.
CSS Rules
Each statement in a CSS rule starts  with a selector , which is the item to which the rule
will be applied. For example, in this assignment, h1 is the selector being given a font
size 240 percent larger than the default:
h1 { font-size:240%; }
font-size  is a property . Providing a value of 240%  to the font-size  property of the
selector ensures that the contents of all <h1>...</h1>  pairs of tags will be displayed at
a font size that is 240 percent of the default size. All changes in rules must be within
the { and } symbols that follow the selector. In font-size:240%;  the part before the :
(colon) is the property, while the remainder is the value applied to it.
Last comes a ; (semicolon) to end the statement.  In this instance, because font-size
is the last property in the rule, the semicolon is not required (but it would be if
another assignment were to follow).
Multiple Assignments
Y ou can create multiple style declarations in a couple of different ways. First, you can
concatenate them on the same line, like this:
h1 { font-size:240%; color:blue; }
This adds a second assignment that changes the color of all <h1>  headings to blue.
Y ou can also place the assignments one per line, like the following:
h1 { font-size:240%;
color:blue; }
416 | Chapter 18: Introduction to CSS

Or you can space out the assignments a little more, so that they line up below each
other in a column at the colons, like this:
h1 {
  font-size:240%;
  color    :blue;
}
This way, you can easily see where each new set of rules begins, because the selector  is
always in the first column, and the assignments that follow are neatly lined up with all
property values starting at the same horizontal offset. In the preceding examples, the
final semicolon is unnecessary, but should you ever want to concatenate any such
groups of statements into a single line, it is very quick to do with all semicolons
already in place.
Y ou can specify the same selector as many times as you want, and CSS combines all
the properties. So the previous example could also be specified as follows:
h1 { font-size: 240%; }
h1 { color    : blue; }
There is no right or wrong way to lay out your CSS, but I recom‐
mend that you at least try to keep each block of CSS consistent with
itself, so that other people can take it in at a glance.
What if you specified the same property to the same selector twice?
h1 { color : red; }
h1 { color : blue; }
The last value specified—in this case, blue—would apply. In a single file, repeating the
same property for the same selector would be pointless, but such repetition happens
frequently in real-life web pages when multiple style sheets are applied. It’s one of the
valuable features of CSS, and where the term cascading  comes from.
Using Comments
It is a good idea to comment  your CSS rules, even if you describe only the main
groups of statements rather than all or most of them. Y ou can do this in two different
ways. First, you can place a comment within a pair of /*...*/  tags, like this:
/* This is a CSS comment */
CSS Rules | 417

Or you can extend a comment over many lines, like this:
/*
    A Multi
    line
    comment
*/
When using multiline comments, note that you cannot nest single-
line (or any other) comments within them. Doing so can lead to
unpredictable errors.
Style Types
There are a number  of different style types, ranging from the default styles set up by
your browser (and any user styles you may have applied in your browser to override
its defaults), through inline or embedded styles, to external style sheets. The styles
defined in each type have a hierarchy of precedence, from low to high.
Default Styles
The lowest level of style precedence is the default styling applied by a web browser.
These styles are created as a fallback for when a web page doesn’t have any styles, and
they are intended to be a generic set of styles that will display reasonably well in most
instances.
Pre-CSS, these were the only styles applied to a document, and only a handful of
them could be changed by a web page (such as font face, color, and size, and a few
element sizing arguments).
User Styles
These are the next highest precedence of styles, and they are supported by most
modern browsers but are implemented differently by each. If you would like to learn
how to create your own default styles for browsing, use a search engine to enter your
browser name followed by “user styles” (for example, “Firefox user styles” or “Opera
user styles”) to find out how. Figure 18-2  shows a user style sheet being applied to
Microsoft Internet Explorer.
418 | Chapter 18: Introduction to CSS

Figure 18-2. Applying a user style to Internet Explorer
If a user style is assigned that has already been defined as a browser default, it will
then override the browser’s default setting. Any styles not defined in a user style sheet
will retain their default values as set up in the browser.
External Style Sheets
The next types of styles are those assigned in an external style sheet. These settings
will override any assigned either by the user or by the browser. External style sheets
are the recommended way to create your styles because you can produce different
style sheets for different purposes such as styling for general web use, for viewing on a
mobile browser with a smaller screen, for printing purposes, and so on. Just apply the
one needed for each type of media when you create the web page.
Internal Styles
Then there are internal styles, which you create within <style> ...</style>  tags, and
which take precedence over all the preceding style types. At this point, though, you
are beginning to break the separation between styling and content, as any external
style sheets loaded in at the same time will have a lower precedence.
Style Types | 419

Inline Styles
Finally, inline styles are where you assign a property directly to an element. They have
the highest precedence of any style type, and are used like this:
<a href="http://google.com" style="color:green;">Visit Google</a>
In this example, the link specified will be displayed in green, regardless of any default
or other color settings applied by any other type of style sheet, whether directly to this
link or generically for all links.
When you use this type of styling, you are breaking the separation
between layout and content; therefore, it is recommended that you
do so only when you have a very good reason.
CSS Selectors
The means by which you access one or more elements is called selection , and the part
of a CSS rule that does this is known as a selector . As you might expect, there are
many varieties of selector.
The Type Selector
The type selector works  on types of HTML elements such as <p> or <i>. For example,
the following rule will ensure that all text within <p>...</p>  tags is fully justified:
p { text-align:justify; }
The Descendant Selector
Descendant selectors let you apply styles to elements that are contained within other
elements. For example, the following rule sets all text within <b>...</b>  tags to red,
but only if they occur within <p>...</p>  tags (like this: <p><b>Hello</b> there</p> ):
p b { color:red; }
Descendant selectors can continue nesting indefinitely, so the following is a perfectly
valid rule to make the text blue within bold text, inside a list element of an unordered
list:
ul li b { color:blue; }
As a practical example, suppose you want to use a different numbering system for an
ordered list that is nested within another ordered list. Y ou can achieve this in the fol‐
lowing way, which will replace the default numeric numbering (starting from 1) with
lowercase letters (starting from a):
420 | Chapter 18: Introduction to CSS

<!DOCTYPE html>
<html>
  <head>
    <style>
      ol ol { list-style-type:lower-alpha; }
    </style>
  </head>
  <body>
    <ol>
      <li>One</li>
      <li>Two</li>
      <li>Three
        <ol>
          <li>One</li>
          <li>Two</li>
          <li>Three</li>
        </ol>
      </li>
    </ol>
  </body>
</html>
The result of loading this HTML into a web browser is as follows, in which you can
see that the second list elements display differently:
1. One
2. Two
3. Three
  a. One
  b. Two
  c. Three
The Child Selector
The child selector is similar to the descendant selector but is more restrictive about
when the style will be applied, by selecting only those elements that are direct chil‐
dren of another element. For example, the following code uses a descendant selector
that will change any bold text within a paragraph to red, even if the bold text is itself
within italics (like this <p><i><b>Hello</b> there</i></p> ):
p b { color:red; }
In this instance, the word Hello  displays in red. However, when this more general
type of behavior is not required, a child selector can be used to narrow the scope of
the selector. For example, the following child selector will set bold text to red only if
the element is a direct child of a paragraph, and is not itself contained within another
element:
p > b { color:red; }
Now Hello  will not change color because it is not a direct child of the paragraph.
CSS Selectors | 421

For a practical example, suppose you wish to make bold only those <li>  elements
that are direct children of <ol>  elements. Y ou can achieve this as follows, where the
<li>  elements that are direct children of <ul>  elements are not made bold:
<!DOCTYPE html>
<html>
  <head>
    <style>
      ol > li { font-weight:bold; }
    </style>
  </head>
  <body>
    <ol>
      <li>One</li>
      <li>Two</li>
      <li>Three</li>
    </ol>
    <ul>
      <li>One</li>
      <li>Two</li>
      <li>Three</li>
    </ul>
  </body>
</html>
The result of loading this HTML into a browser will be as follows:
1. One
2. Two
3. Three
 • One
 • Two
 • Three
The ID Selector
If you give an element an ID name (like this: <div id='mydiv'> ), you can directly
access it from CSS in the following way, which changes all text in the element to italic:
#mydiv { font-style:italic; }
IDs can be used only once within a document, so only the first occurrence found will
receive the new property value assigned by a CSS rule. But in CSS you can directly
reference any IDs that have the same name, as long as they occur within different ele‐
ment types, like this:
<div id='myid'>Hello</div> <span id='myid'>Hello</span>
Because IDs normally apply only to unique elements, the following rule will apply an
underline to only the first occurrence of myid :
422 | Chapter 18: Introduction to CSS

#myid { text-decoration:underline; }
However, you can ensure that CSS applies the rule to both occurrences, like this:
span#myid { text-decoration:underline; }
div#myid  { text-decoration:underline; }
Or more succinctly, like this (see “Selecting by Group” on page 425 ):
span#myid, div#myid { text-decoration:underline; }
I don’t recommend using this form of selection because any Java‐
Script that also must access these elements cannot easily do so
because the commonly used getElementByID()  function  will
return only the first occurrence. To reference any other instances, a
program would have to search through the whole list of elements
in the document—a trickier task to undertake. So it’s generally bet‐
ter to always use unique ID names.
The Class Selector
When there are a number of elements in a page that you want to share the same styl‐
ing, you can assign them all the same class name (like this: <span class='my
class'> ); then, create a single rule to modify all those elements at once, as in the
following rule, which creates a 10-pixel left margin offset for all elements using the
class:
.myclass { margin-left:10px; }
In modern browsers, you can have HTML elements use more than one class by sepa‐
rating the class names with spaces, like this: <span class='class1 class2
class3'> . Remember, though, that some very old browsers allow only a single class
name in a class  argument.
Y ou can narrow the scope of action of a class by specifying the types of elements to
which it should apply. For example, the following rule applies the setting only to
paragraphs that use the class main :
p.main { text-indent:30px; }
In this example, only paragraphs using the class main  (like this: <p class="main"> )
will receive the new property value. Any other element types that may try to use the
class (such as <div class="main"> ) will not be affected by this rule.
The Attribute Selector
Many HTML tags support  attributes, and using this type of selector can save you
from having to use IDs and classes to refer to them. For example, you can directly
CSS Selectors | 423

reference attributes in the following manner, which sets all elements with the
attribute type="submit"  to a width of 100 pixels:
[type="submit"] { width:100px; }
If you wish to narrow down the scope of the selector to, for example, only form  input
elements with that attribute type, you could use the following rule instead:
form input[type="submit"] { width:100px; }
Attribute selectors also work on IDs and classes so that, for exam‐
ple, [class~="classname"]  works exactly like the class selec‐
tor .classname  (except that the latter has a higher precedence).
Likewise, [id="idname"]  is equivalent to using the ID selector
#idname . The class and ID selectors prefaced by # and . can there‐
fore be viewed as shorthand for attribute selectors, but with a
higher precedence. The ~= operator  matches an attribute even if it
is one of a space-separated group of attributes.
The Universal Selector
The * wildcard or universal selector matches  any element, so the following rule will
make a complete mess of a document by giving a green border to all of its elements:
* { border:1px solid green; }
It’s therefore unlikely that you will use the * on its own, but as part of a compound
rule it can be very powerful. For example, the following rule will apply the same styl‐
ing as the preceding one, but only to all paragraphs that are subelements of the ele‐
ment with the ID boxout , and only as long as they are not direct children:
#boxout * p {border:1px solid green; }
Let’s look at what’s going on here. The first selector following #boxout  is a * symbol,
so it refers to any element within the boxout  object. The following p selector then
narrows down the selection focus by changing the selector to apply only to para‐
graphs (as defined by the p) that are subelements of elements returned by the * selec‐
tor. Therefore, this CSS rule performs the following actions (in which I use the terms
object  and element  interchangeably):
1.Find the object with the ID of boxout .
2.Find all subelements of the object returned in step 1.
3.Find all p subelements of the objects returned in step 2 and, since this is the final
selector in the group, also find all p sub- and sub-subelements (and so on) of the
objects returned in step 2.
424 | Chapter 18: Introduction to CSS

4.Apply the styles within the {and } characters to the objects returned in step 3.
The net result of this is that the green border is applied only to paragraphs that are
grandchildren (or great-grandchildren, and so on) of the main element.
Selecting by Group
Using CSS, you can apply a rule to  more than one element, class, or any other type of
selector at the same time by separating the selectors with commas. So, for example,
the following rule will place a dotted orange line underneath all paragraphs, the ele‐
ment with the ID of idname , and all elements that use the class classname :
p, #idname, .classname { border-bottom:1px dotted orange; }
Figure 18-3  shows various selectors in use, with the rules applied to them alongside.
Figure 18-3. Some HTML and the CSS rules used by it
The CSS Cascade
One of the  most fundamental things about CSS properties is that they cascade, which
is why they are called Cascading Style Sheets. But what does this mean?
Cascading is a method used to resolve potential conflicts between the various types of
style sheet a browser supports, and apply them in order of precedence by who created
them, the method used to create the style, and the types of properties selected.
The CSS Cascade | 425

Style Sheet Creators
There are three main types of style sheet supported by all modern browsers. In order
of precedence from high to low, they are as follows:
1.Those created by a document’s author
2.Those created by the user
3.Those created by the browser
These three sets of style sheets are processed in reverse order. First, the defaults in the
web browser are applied to the document. Without these defaults, web pages that
don’t use style sheets would look terrible. They include the font face, size, and color;
element spacing; table borders and spacing; and all the other reasonable standards a
user would expect.
Next, if the user has created any styles to use instead of the standard ones, these are
applied, replacing any of the browser’s default styles that may conflict.
Last, any styles created by the current document’s author are then applied, replacing
any that have been created either as browser defaults or by the user.
Style Sheet Methods
Style sheets can be created via three different methods. In order of precedence from
high to low, they are as follows:
1.As inline styles
2.In an embedded style sheet
3.As an external style sheet
Again, these methods of style sheet creation are applied in reverse order of prece‐
dence. Therefore, all external style sheets are processed first, and their styles are
applied to the document.
Next, any embedded styles (within <style> ...</style>  tags) are processed, and any
that conflict with external rules are given precedence and will override them.
Last, any styles applied directly to an element as an inline style (such as <div
style="..."> ...</div> ) are given the highest precedence, and override all previously
assigned properties.
Style Sheet Selectors
There are three different ways of selecting elements to be styled. Going from highest
to lowest order of precedence, they are as follows:
426 | Chapter 18: Introduction to CSS

1.Referencing by individual ID or attribute selector
2.Referencing in groups by class
3.Referencing by element tags (such as <p> or <b>)
Selectors are processed according to the number and types of elements affected by a
rule, which is a little different from the previous two methods for resolving conflicts.
This is because rules do not have to apply only to one type of selector at a time, and
may reference many different selectors.
Therefore, we need a method to determine the precedence of rules that can contain
any combinations of selectors. It does this by calculating the specificity of each rule by
ordering them from the widest to narrowest scope of action.
Calculating Specificity
We calculate the specificity of a rule by creating three-part numbers based on the
selector types in the preceding numbered list. These compound numbers start off
looking like [0,0,0] . When processing a rule, each selector that references an ID
increments the first number by 1, so that the compound number would become
[1,0,0] .
Let’s look at the following rule, which has seven references, with three of them to the
IDs #heading , #main , and #menu . So the compound number becomes [3,0,0] .
#heading #main #menu .text .quote p span {
  // Rules go here;
}
Then the number of classes in the selector is placed in the second part of the com‐
pound number. In this example, there are two of them ( .text  and .quote ), so the
compound number becomes [3,2,0] .
Finally, all selectors that reference element tags are counted, and this number is
placed in the last part of the compound number. In the example, there are two ( p and
span ), so the final compound number becomes [3,2,2] , which is all that is needed to
compare this rule’s specificity with another, such as the following:
#heading #main .text .quote .news p span {
  // Rules go here;
}
Here, although seven elements are also referenced, there are now only two ID refer‐
ences, but three class references, which results in the compound number [2,3,2] .
Since 322 is greater than 232, the former example has precedence over the latter.
In cases where there are nine or fewer of each type in a compound number, you can
convert it directly to a decimal number, which in this case is 352. Rules with a lower
number than this will have lower precedence, and those with a higher number will
The CSS Cascade | 427

have greater precedence. Where two rules share the same value, the most recently
applied one wins.
Using a different  number base
Where there are more than nine of a type in a number, you have to work in a higher
number base. For example, you can’t convert the compound number [11,7,19]  to
decimal by simply concatenating the three parts. Instead, you can convert the number
to a higher base such as base 20 (or higher if there are more than 19 of any type).
To do this, multiply the three parts out and add the results like this, starting with the
rightmost number and working left:
         20 × 19 = 380
      20×20 ×  7 = 2800
   20×20×20 × 11 = 88000
Total in decimal = 91180
On the left, replace the values of 20 with the base you are using. Once all of the com‐
pound numbers of a set of rules are converted from this base to decimal, it is easy to
determine the specificity, and therefore the precedence, of each.
Thankfully, the CSS processor handles all of this for you, but knowing how it works
helps you to properly construct rules and understand what precedence they will have.
If all this precedence calculation sounds rather complicated, you’ll
be pleased to know that in most cases you can usually get by with
this simple rule of thumb: in general, the fewer elements that there
are to be modified, and the more specific they are, the greater the
precedence that is given to a rule.
Some rules are more equal than others
Where two or more style rules are exactly equivalent, only the most recently pro‐
cessed rule will take precedence. However, you can force a rule to a higher precedence
than other equivalent rules by using the !important  declaration, like this:
p { color:#ff0000 !important; }
When you do this, all previous equivalent settings are overridden (even ones using !
important ) and any equivalent rules that are processed later will be ignored. So, for
example, the second of the two following rules would normally take precedence, but
because of the use of !important  in the prior assignment, the second one is ignored:
p { color:#ff0000 !important; }
p { color:#ffff00 }
428 | Chapter 18: Introduction to CSS

User style sheets can be created for specifying default browser
styles, and they may use the !important  declaration, in which case
the user’s style setting will take precedence over the same proper‐
ties specified in the current web page. However, on very old brows‐
ers using CSS 1, this feature isn’t supported.
The Difference  Between Div and Span Elements
Both <div>  and <span>  elements are types of containers, but with some different
qualities. By default, a <div>  element has infinite width (at least to the browser edge),
which you can see by applying a border to one, like this:
<div style="border:1px solid green;">Hello</div>
A <span>  element, however, is only as wide as the text it contains. Therefore, the fol‐
lowing line of HTML creates a border only around the word Hello , which does not
extend to the righthand edge of the browser.
<span style="border:1px solid green;">Hello</span>
Also, <span>  elements follow text or other objects as they wrap around, and can
therefore have a complicated border. For example, in Example 18-2 , I used CSS to
make the background of all <div>  elements yellow, to make all <span>  elements cyan,
and to add a border to both, before then creating a few example <span>  and <div>
sections.
Example 18-2. Div and span example
<!DOCTYPE html>
<html>
  <head>
    <title>Div and span example</title>
    <style>
      div, span { border          :1px solid black; }
      div       { background-color:yellow;          }
      span      { background-color:cyan;            }
    </style>
  </head>
  <body>
    <div>This text is within a div tag</div>
    This isn't. <div>And this is again.</div><br>
    <span>This text is inside a span tag.</span>
    This isn't. <span>And this is again.</span><br><br>
    <div>This is a larger amount of text in a div that wraps around
    to the next line of the browser</div><br>
    <span>This is a larger amount of text in a span that wraps around
The CSS Cascade | 429

to the next line of the browser</span>
  </body>
</html>
Figure 18-4  shows what this example looks like in a web browser. Although it is
printed only in shades of gray in this book, the figure clearly shows how <div>  ele‐
ments extend to the righthand edge of a browser, and force the following content to
appear at the start of the first available position below them.
Figure 18-4. A variety of elements of differing  width
The figure also shows how <span>  elements keep to themselves and take up only the
space required to hold their content, without forcing subsequent content to appear
below them.
For example, in the bottom two examples of the figure, you can also see that when
<div>  elements wrap around the screen edge, they retain a rectangular shape,
whereas <span>  elements simply follow the flow of the text (or other contents) they
contain.
Since <div>  tags can be only rectangular, they are better suited for
containing objects such as images, boxouts, quotations, and so on,
while <span>  tags are best used for holding text or other attributes
that are placed one after another inline, and which should flow
from left to right (or right to left in some languages).
430 | Chapter 18: Introduction to CSS

Measurements
CSS supports an impressive range of units of measurement, enabling you to tailor
your web pages precisely to specific values, or by relative dimensions. The ones I gen‐
erally use (and believe you will also find the most useful) are pixels, points, ems, and
percent, but here’s the complete list:
Pixels
The size of a pixel varies according to the dimensions and pixel depth of the user’s
monitor. One pixel equals the width/height of a single dot on the screen, and so this
measurement is best suited to monitors. For example:
.classname { margin:5px; }
Points
A point is equivalent  in size to 1/72 of an inch. The measurement comes from a print
design background and is best suited for that medium, but is also commonly used on
monitors. For example:
.classname { font-size:14pt; }
Inches
An inch is the equivalent of 72 points and is also a measurement type best suited for
print. For example:
.classname { width:3in; }
Centimeters
Centimeters are another unit of measurement best suited for print. One centimeter is
a little over 28 points. For example:
.classname { height:2cm; }
Millimeters
A millimeter is 1/10 of a centimeter (or almost 3 points). Millimeters are another
measure best suited to print. For example:
.classname { font-size:5mm; }
Picas
A pica is another print typographic measurement, which is equivalent to 12 points.
For example:
.classname { font-size:1pc; }
Ems
An em is equal to the current font size and is therefore one of the more useful meas‐
urements for CSS since it is used to describe relative dimensions. For example:
.classname { font-size:2em; }
Exs
An ex is also related to the current font size; it is equivalent to the height of a
lowercase letter x. This is a less popular unit of measurement that is most often
Measurements | 431

used as a good approximation for helping to set the width of a box that will con‐
tain some text. For example:
.classname { width:20ex; }
Percent
This unit is related to the em in that it is exactly 100 times greater (when used on a
font). Whereas 1 em equals the current font size, the same size is 100 in percent.
When not relating to a font, this unit is relative to the size of the container of the
property being accessed. For example:
.classname { height:120%; }
Figure 18-5  shows each of these measurement types in turn being used to display text
in almost identical sizes.
Figure 18-5. Different  measurements that display almost the same
Fonts and Typography
There are four main font properties that you can style using CSS: family , style ,
size , and weight . Between them, you can fine-tune the way text displays in your web
pages and/or when printed.
432 | Chapter 18: Introduction to CSS

font-family
The font-family  property  assigns the font to use. It also supports listing a variety of
fonts in order of preference from left to right, so that styling can fall back gracefully
when the user doesn’t have the preferred font installed. For example, to set the default
font for paragraphs, you might use a CSS rule such as this:
p { font-family:Verdana, Arial, Helvetica, sans-serif; }
Where a font name is made up of two or more words, you must enclose the name in
quotation marks, like this:
p { font-family:"Times New Roman", Georgia, serif; }
Because they should be available on virtually all web browsers and
operating systems, the safest font families to use on a web page are
Arial , Helvetica , Times New Roman , Times , Courier New , and Cou‐
rier. The Verdana , Georgia , Comic Sans MS , Trebuchet MS , Arial
Black , and Impact  fonts are safe for Mac and PC use, but may not
be installed on other operating systems such as Linux. Other com‐
mon but less safe fonts are Palatino , Garamond , Bookman , and
Avant Garde . If you use one of the less safe fonts, make sure you
offer fallbacks of one or more safer fonts in your CSS so that your
web pages will degrade gracefully on browsers without your prefer‐
red fonts.
Figure 18-6  shows these two sets of CSS rules being applied.
Figure 18-6. Selecting font families
font-style
With the font-style  property,  you can choose to display a font normally, in italics,
or obliquely. The following rules create three classes ( normal , italic , and oblique )
that can be applied to elements to create these effects:
Fonts and Typography | 433

.normal  { font-style:normal;  }
.italic  { font-style:italic;  }
.oblique { font-style:oblique; }
font-size
As described in the earlier section on measurements, there are a large number of ways
you can change a font’s size.  But these all boil down to two main types: fixed and rela‐
tive. A fixed setting looks like the following rule, which sets the default paragraph
font size to 14 point:
p { font-size:14pt; }
Alternatively, you may wish to work with the current default font size, using it to style
various types of text such as headings. In the following rules, relative sizes of some
headers are defined, with the <h4>  tag starting off 20 percent bigger than the default,
and with each greater size another 40 percent larger than the previous one:
h1 { font-size:240%; }
h2 { font-size:200%; }
h3 { font-size:160%; }
h4 { font-size:120%; }
Figure 18-7  shows a selection of font sizes in use.
Figure 18-7. Setting four heading sizes and the default paragraph size
font-weight
Using the font-weight  property, you can choose how boldly to display a font. It sup‐
ports a number of values, but the main ones you will use are likely to be normal  and
bold , like this:
434 | Chapter 18: Introduction to CSS

.bold { font-weight:bold; }
Managing Text Styles
Regardless of the font in use, you can  further modify the way text displays by altering
its decoration, spacing, and alignment. There is a crossover between the text and font
properties, though, in that effects such as italics or bold text are achieved via the
font-style  and font-weight  properties, while others such as underlining require
the text-decoration  property.
Decoration
With the text-decoration  property, you can apply effects to text such as underline ,
line-through , overline , and blink . The following rule creates a new class called
over  that applies overlines to text (the weight of over, under, and through lines will
match that of the font):
.over { text-decoration:overline; }
In Figure 18-8  you can see a selection of font styles, weight, and decorations.
Figure 18-8. Examples of the styles and decoration rules available
Spacing
A number of different properties allow you to modify line, word, and letter spacing.
For example, the following rules change the line spacing for paragraphs by modifying
the line-height  property  to be 25 percent greater, the word-spacing  property  is set
to 30 pixels, and letter-spacing  is set to 3 pixels:
Managing Text Styles | 435

p {
  line-height   :125%;
  word-spacing  :30px;
  letter-spacing:3px;
}
Alignment
There are four types of text alignment  available in CSS: left , right , center , and jus
tify . In the following rule, default paragraph text is set to full justification:
p { text-align:justify; }
Transformation
There are four properties available for transforming your text: none , capitalize ,
uppercase , and lowercase . The following rule creates a class called upper  that will
ensure that all text is displayed in uppercase when it is used:
.upper { text-transform:uppercase; }
Indenting
Using the text-indent  property,  you can indent the first line of a block of text by a
specified amount. The following rule indents the first line of every paragraph by 20
pixels, although a different unit of measurement or a percent increase could also be
applied:
p { text-indent:20px; }
In Figure 18-9  the following rules have been applied to a section of text:
p {          line-height   :150%;
             word-spacing  :10px;
             letter-spacing:1px;
}
.justify   { text-align    :justify;   }
.uppercase { text-transform:uppercase; }
.indent    { text-indent   :20px;      }
436 | Chapter 18: Introduction to CSS

Figure 18-9. Indenting, uppercase, and spacing rules being applied
CSS Colors
Y ou can apply colors to the foreground and background of text and objects by using
the color  and background-color  properties  (or by supplying a single argument to
the background  property). The colors specified can be one of the named colors (such
as red or blue ), colors created from hexadecimal RGB triplets (such as #ff0000  or
#0000ff ), or colors created using the rgb CSS function.
The standard 16 color names as defined by the W3C ( http://www.w3.org/ ) standards
organization are aqua , black , blue , fuchsia , gray , green , lime , maroon , navy , olive ,
purple , red, silver , teal , white , and yellow . The following rule uses one of these
names to set the background color for an object with the ID of object .
#object { background-color:silver; }
In this rule, the foreground color of text in all <div>  elements is set to yellow (because
on a computer display, hexadecimal levels of ff red, plus ff green, plus 00 blue cre‐
ates the color yellow):
div { color:#ffff00; }
Or, if you don’t wish to work in hexadecimal, you can specify your color triplets by
using the rgb function,  as in the following rule, which changes the background color
of the current document to aqua:
body { background-color:rgb(0, 255, 255); }
CSS Colors | 437

If you prefer not to work in ranges of 256 levels per color, you can
use percentages in the rgb function instead, with values from 0 to
100 ranging from the lowest ( 0) amount of a primary color,
through to the highest ( 100), like this: rgb(58%, 95%, 74%) . Y ou
can also use floating-point values for even finer color control, like
this: rgb(23.4%, 67.6%, 15.5%) .
Short Color Strings
There is also a short form of the hex digit string in which only the first of each 2-byte
pair is used for each color. For example, instead of assigning the color #fe4692 , you
instead use #f49 , omitting the second hex digit from each pair, which equates to a
color value of #ff4499 .
This results in almost the same color and is useful where exact colors are not
required. The difference between a six-digit and three-digit string is that the former
supports 16 million different colors, while the latter supports four thousand.
Wherever you intend to use a color such as #883366 , this is the direct equivalent of
#836  (since the repeated digits are implied by the shorter version), and you can use
either string to create the exact same color.
Gradients
In place of using a solid background color, you can  choose to apply a gradient, which
will then automatically flow from a given initial color to a final color of your choice.
It is best used in conjunction with a simple color rule so that browsers that don’t sup‐
port gradients will at least display a solid color.
Example 18-3  uses a rule to display an orange gradient (or simply plain orange on
nonsupporting browsers), as shown in the middle section of Figure 18-10 .
Example 18-3. Creating a linear gradient
<!DOCTYPE html>
<html>
  <head>
    <title>Creating a linear gradient</title>
    <style>
      .orangegrad {
        background:orange;
        background:linear-gradient(top, #fb0, #f50);
        background:-moz-linear-gradient(top, #fb0, #f50);
        background:-webkit-linear-gradient(top, #fb0, #f50);
        background:-o-linear-gradient(top, #fb0, #f50);
        background:-ms-linear-gradient(top, #fb0, #f50); }
    </style>
438 | Chapter 18: Introduction to CSS

</head>
  <body>
    <div class='orangegrad'>Black text<br>
    on an orange<br>linear gradient</div>
  </body>
</html>
Figure 18-10. A solid background color, a linear gradient, and a radial gradient
As shown in the preceding example, many CSS rules require
browser-specific  prefixes such as -moz- , -webkit- , -o-, and -ms-
(for Mozilla-based browsers such as Firefox; WebKit-based brows‐
ers such as Apple Safari, Google Chrome, and the iOS and Android
browsers; and the Opera and Microsoft browsers). The website at
http://caniuse.com  lists the major CSS rules and attributes, and
whether browser-specific versions are required.
To create a gradient, choose where it will begin out of top, bottom , left , right , and
center  (or any combination, such as top left  or center right ), enter the start and
end colors you require, and then apply either the linear-gradient  or radial-
gradient  rule, making sure you also supply rules for all browsers you are targeting.
Y ou can also use more than just a start and end color by supplying what are termed
stop colors in between as additional arguments. In this case, for example, if five argu‐
ments are supplied, each argument will control the color change over a fifth of the
area represented by its location in the argument list.
Positioning Elements
Elements within a web page fall where they are placed in the document, but you can
move them about by changing an element’s position  property from  the default of
static  to one of absolute , relative , or fixed .
Positioning Elements | 439

Absolute Positioning
An element with absolute positioning is removed from the document, and any other
elements that are capable will flow into its released space. Y ou can then position the
object anywhere you like within the document by using the top, right , bottom , and
left  properties. It will then rest on top of (or behind) other elements.
So, for example, to move an object with the ID of object  to the absolute location of
100 pixels down from the document start and 200 pixels in from the left, you would
apply the following rules to it (you can also use any of the other units of measurement
supported by CSS):
#object {
  position:absolute;
  top     :100px;
  left    :200px;
}
Relative Positioning
Likewise, you can move the object relative to the location  it would occupy in the nor‐
mal document flow. So, for example, to move object  10 pixels down and 10 pixels to
the right of its normal location, you would use the following rules:
#object {
  position:relative;
  top     :10px;
  left    :10px;
}
Fixed Positioning
The final positioning property setting lets you move an object to an absolute location,
but only within the current browser viewport. Then, when the document is scrolled,
the object remains exactly where it has been placed, with the main document scroll‐
ing beneath it—a great way to create dock bars and other similar devices. To fix the
object to the top-left corner of the browser window, you use the following rules:
#object {
  position:fixed;
  top     :0px;
  left    :0px;
}
In Figure 18-11 , Example 18-4  has been loaded into a browser, and the browser has
been reduced in width and height so that you must scroll down to see all of the web
page.
440 | Chapter 18: Introduction to CSS

Figure 18-11. Using different  positioning values
When this is done, it is immediately obvious that the element with fixed positioning
remains in place even through scrolling. Y ou can also see that the element with abso‐
lute positioning is located exactly at 100 pixels down, with 0 horizontal offset, while
the element with relative positioning is actually moved up by 8 pixels and then offset
from the left margin by 110 pixels in order to line up alongside the first element.
Example 18-4. Applying different  positioning values
<!DOCTYPE html>
<html>
  <head>
    <title>Positioning</title>
    <style>
      #object1 {
        position  :absolute;
        background:pink;
        width     :100px;
        height    :100px;
        top       :100px;
        left      :0px;
      }
      #object2 {
        position  :relative;
        background:lightgreen;
        width     :100px;
        height    :100px;
        top       :-8px;
        left      :110px;
      }
      #object3 {
        position  :fixed;
        background:yellow;
        width     :100px;
        height    :100px;
        top       :100px;
        left      :236px;
Positioning Elements | 441

}
    </style>
  </head>
  <body>
       <br><br><br><br><br>
    <div id='object1'>Absolute Positioning</div>
    <div id='object2'>Relative Positioning</div>
    <div id='object3'>Fixed Positioning</div>
  </body>
</html>
In the figure, the element with fixed positioning initially lines up with the other two
elements, but has stayed put while the others have been scrolled up the page, and now
appears offset below them.
Pseudoclasses
A number of selectors and classes are used only within a style sheet and do not have
any matching tags or attributes within any HTML. Their task is to classify elements
using characteristics other than their name, attributes, or content—that is, character‐
istics that cannot be deduced from the document tree. These include pseudoclasses
such as link  and visited . There are also pseudoelements that make a selection,
which may consist of partial elements such as first-line  or first-letter .
Pseudoclasses and pseudoelements are separated by a : (colon) character. For exam‐
ple, to create a class called bigfirst  for emphasizing the first letter of an element,
you would use a rule such as the following:
.bigfirst:first-letter {
  font-size:400%;
  float    :left;
}
When the bigfirst  class is applied to an element, the first letter will be displayed
much enlarged, with the remaining text shown at normal size, neatly flowing around
it (due to the float  property) as if the first letter were an image or other object. Pseu‐
doclasses include hover , link , active , and visited , all of which are mostly useful for
applying to anchor elements, as in the following rules, which set the default color of
all links to blue, and that of links that have already been visited to light blue:
a:link    { color:blue;      }
a:visited { color:lightblue; }
The following rules are interesting in that they  use the hover  pseudoclass so that they
are applied only when the mouse is placed over the element. In this example, they
change the link to white text on a red background, providing a dynamic effect you
would normally expect only from using JavaScript code:
442 | Chapter 18: Introduction to CSS

a:hover {
  color     :white;
  background:red;
}
Here I have used the background  property  with a single argument, instead of the
longer background-color  property.
The active  pseudoclass is also dynamic  in that it effects a change to a link during the
time between the mouse button being clicked and released, as with this rule, which
changes the link color to dark blue:
a:active { color:darkblue; }
Another interesting dynamic pseudoclass is focus , which is applied only when an ele‐
ment is given focus by the user selecting it with the keyboard or mouse. The follow‐
ing rule uses the universal selector to always place a mid-gray, dotted, 2-pixel border
around the currently focused object:
*:focus { border:2px dotted #888888; }
Example 18-5  displays two links and an input field, as shown in Figure 18-12 . The
first link shows up as gray since it has already been visited in this browser, but the
second link has not and displays in blue. The Tab key has been pressed, and the focus
of input is now the input field, so its background has changed to yellow. When either
link is clicked, it will display in purple, and when hovered over, it will appear red.
Example 18-5. Link and focus pseudoclasses
<!DOCTYPE html>
<html>
  <head>
    <title>Pseudo-classes</title>
    <style>
      a:link    { color:blue; }
      a:visited { color:gray; }
      a:hover   { color:red; }
      a:active  { color:purple; }
      *:focus   { background:yellow; }
    </style>
  </head>
  <body>
    <a href='http://google.com'>Link to Google'</a><br>
    <a href='nowhere'>Link to nowhere'</a><br>
    <input type='text'>
  </body>
</html>
Pseudoclasses | 443

Figure 18-12. Pseudoclasses applied to a selection of elements
Other pseudoclasses are also available, and you can get more information on them at
http://tinyurl.com/pseudoclasses .
Beware of applying the focus  pseudoclass to the universal selector,
*, as shown in this example; Internet Explorer regards an unfo‐
cused document as having focus applied to the entire web page,
and (in this instance) the whole page will turn yellow until Tab is
pressed or focus is otherwise applied to one of the page’s elements.
Shorthand Rules
To save space, groups of related CSS properties can be concatenated into a single
shorthand assignment. For example, I have already used the shorthand for creating a
border a few times, as in the focus  rule in the previous section:
*:focus { border:2px dotted #ff8800; }
This is actually a shorthand concatenation of the following rule set:
*:focus {
  border-width:2px;
  border-style:dotted;
  border-color:#ff8800;
}
When using a shorthand rule, you need only apply the properties up to the point
where you wish to change values. So you could use the following to set only a border’s
width and style, choosing not to set its color:
*:focus { border:2px dotted; }
444 | Chapter 18: Introduction to CSS

The order in which the properties are placed in a shorthand rule
can be important, and misplacing them is a common way to get
unexpected results. Since there are far too many to detail in this
chapter, if you wish to use shorthand CSS, you will need to look up
the default properties and their order of application using a CSS
manual or search engine. To get you started, I recommend visiting
http://dustindiaz.com/css-shorthand .
The Box Model and Layout
The CSS properties affecting  the layout of a page are based  around the box model  (see
Chapter 13  for more details), a nested set of properties surrounding an element. Vir‐
tually all elements have (or can have) these properties, including the document body,
whose margin you can (for example) remove with the following rule:
body { margin:0px; }
The box model of an object starts at the outside, with the object’s margin. Inside this
is the border, then there is padding between the border and the inner contents, and
finally there’s the object’s contents.
Once you have the hang of the box model, you will be well on your way to creating
professionally laid-out pages, since these properties alone will make up much of your
page styling.
Setting Margins
The margin is the outermost level of the box model. It separates elements from each
other and its use is quite smart. For example, assume you give a number of elements a
default margin of 10 pixels around each. When they are placed on top of each other,
this would create a gap of 20 pixels (the total of the adjacent border widths).
CSS overcomes this potential issue, however: when two elements with borders are
positioned directly one above the other, only the larger of the two margins is used to
separate them. If both margins are the same width, just one of the widths is used.
This way, you are much more likely to get the result you want. But you should note
that the margins of absolutely positioned or inline elements do not collapse.
The margins of an element can be changed en masse with  the margin  property, or
individually with margin-left , margin-top , margin-right , and margin-bottom .
When setting the margin  property, you can supply one, two, three, or four arguments,
which have the effects commented in the following rules:
/* Set all margins to 1 pixel */
margin:1px;
/* Set top and bottom to 1 pixel, and left and right to 2 */
The Box Model and Layout | 445

margin:1px 2px;
/* Set top to 1 pixel, left and right to 2, and bottom to 3 */
margin:1px 2px 3px;
/* Set top to 1 pixel, right to 2, bottom to 3, and left to 4 */
margin:1px 2px 3px 4px;
Figure 18-13  shows Example 18-6  loaded into a browser, with the margin  property
rule (highlighted in bold) applied to a square element that has been placed inside a
table element. The table has been given no dimensions, so it will simply wrap as
closely around the inner <div>  element as it can. As a consequence, there is a margin
of 10 pixels above it, 20 pixels to its right, 30 pixels below it, and 40 pixels to its left.
Example 18-6. How margins are applied
<!DOCTYPE html>
<html>
  <head>
    <title>Margins</title>
    <style>
      #object1 {
        background  :lightgreen;
        border-style:solid;
        border-width:1px;
        font-family :"Courier New";
        font-size   :9px;
        width       :100px;
        height      :100px;
        padding     :5px;
        margin      :10px 20px 30px 40px;
      }
      table {
        padding     :0;
        border      :1px solid black;
        background  :cyan;
      }
    </style>
  </head>
  <body>
    <table>
      <tr>
        <td>
          <div id='object1'>margin:<br>10px 20px 30px 40px;</div>
        </td>
      </tr>
    </table>
  </body>
</html>
446 | Chapter 18: Introduction to CSS

Figure 18-13. The outer table expands according to the margin widths
Applying Borders
The border level  of the box model is  similar to the margin except that there is no col‐
lapsing. It is the next level as we move into the box model. The main properties used
to modify borders are border , border-left , border-top , border-right , and
border-bottom , and each of these can have other subproperties added as suffixes,
such as -color , -style , and -width .
The four ways of accessing individual property settings used for the margin  property
also apply with the border-width  property, so all the following are valid rules:
/* All borders */
border-width:1px;
/* Top/bottom left/right */
border-width:1px 5px;
/* Top left/right bottom */
border-width:1px 5px 10px;
/* Top right bottom left */
border-width:1px 5px 10px 15px;
Figure 18-14  shows each of these rules applied in turn to a group of square elements.
In the first one, you can clearly see that all borders have a width of 1 pixel. The sec‐
ond element, however, has a top and bottom border width of 1 pixel, while its side
widths are 5 pixels each.
The third element has a 1-pixel-wide top, its sides are 5 pixels wide, and its bottom is
10 pixels wide. The fourth element has a 1-pixel top border width, a 5-pixel right bor‐
der width, a 10-pixel bottom border width, and a 15-pixel left border width.
The Box Model and Layout | 447

Figure 18-14. Applying long- and shorthand border rule values
The final element, under the previous ones, doesn’t use the shorthand rules; instead,
it has each of the border widths set separately. As you can see, it takes a lot more typ‐
ing to achieve the same result.
Adjusting Padding
The deepest of the box model levels (other than the contents of an element) is the
padding, which is applied inside any borders and/or margins. The main properties
used to modify padding are padding , padding-left , padding-top , padding-right ,
and padding-bottom .
The four ways of accessing individual property settings used for the margin  and the
border  properties also apply with the padding  property, so all the following are valid
rules:
/* All padding */
padding:1px;
/* Top/bottom and left/right */
padding:1px 2px;
/* Top, left/right and bottom */
padding:1px 2px 3px;
/* Top, right, bottom and left */
padding:1px 2px 3px 4px;
Figure 18-15  shows the padding rule (shown in bold) in Example 18-7  applied to
some text within a table cell (as defined by the rule display:table-cell; , which
makes the encapsulating <div>  element display like a table cell), which has been given
448 | Chapter 18: Introduction to CSS

no dimensions so it will simply wrap as closely around the text as it can. As a conse‐
quence, there is padding of 10 pixels above the inner element, 20 pixels to its right, 30
pixels below it, and 40 pixels to its left.
Example 18-7. Applying padding
<!DOCTYPE html>
<html>
  <head>
    <title>Padding</title>
    <style>
      #object1 {
        border-style:solid;
        border-width:1px;
        background  :orange;
        color       :darkred;
        font-family :Arial;
        font-size   :12px;
        text-align  :justify;
        display     :table-cell;
        width       :148px;
        padding     :10px 20px 30px 40px; }
    </style>
  </head>
  <body>
    <div id='object1'>To be, or not to be that is the question:
    Whether 'tis Nobler in the mind to suffer
    The Slings and Arrows of outrageous Fortune,
    Or to take Arms against a Sea of troubles,
    And by opposing end them.</div>
  </body>
</html>
Figure 18-15. Applying different  padding values to an object
The Box Model and Layout | 449

Object Contents
Deep within the box model levels, at  its center, lies an element that can be styled in all
the ways discussed in this chapter, and which can (and usually will) contain further
subelements, which in turn may contain sub-subelements, and so on, each with its
own styling and box model settings.
Questions
1.Which directive do you use to import one style sheet into another (or the
<style>  section of some HTML)?
2.What HTML tag can you use to import a style sheet into a document?
3.Which HTML tag attribute is used to directly embed a style into an element?
4.What is the difference between a CSS ID and a CSS class?
5.Which characters are used to prefix (a) IDs, and (b) class names in a CSS rule?
6.In CSS rules, what is the purpose of the semicolon?
7.How can you add a comment to a style sheet?
8.Which character is used by CSS to represent any element?
9.How can you select a group of different elements and/or element types in CSS?
10.Given a pair of CSS rules with equal precedence, how can you make one have
greater precedence over the other?
See Chapter 18 Answers  in Appendix A  for the answers to these questions.
450 | Chapter 18: Introduction to CSS

CHAPTER 19
Advanced CSS with CSS3
The first implementation of CSS was drawn up in 1996, was released in 1999, and has
been supported by all browser releases since 2001. The standard for this version,
CSS1, was revised in 2008. Beginning in 1998, developers began drawing up the sec‐
ond specification, CSS2; its standard was completed in 2007 and revised in 2009.
Development for the CSS3 specification commenced in 2001, with some features
being proposed as recently as 2009. Therefore, the development process will likely
continue for some time before a final recommendation for CSS3 is approved. And
even though CSS3 isn’t yet complete, people are already beginning to put forward
suggestions for CSS4.
In this chapter, I’ll take you through the CSS3 features that have already been gener‐
ally adopted by the major browsers. Some of these features provide functionality that
hitherto could be provided only with JavaScript.
I recommend using CSS3 to implement dynamic features where you can, instead of
JavaScript. The features provided by CSS make document attributes part of the docu‐
ment itself, instead of being tacked on through JavaScript. Making them part of the
document is a cleaner design.
Attribute Selectors
In the previous chapter, I detailed the various CSS attribute selectors, which I will
now quickly recap. Selectors are used in CSS to match HTML elements, and there are
10 different types, as detailed in Table 19-1 .
451

Table 19-1. CSS selectors, pseudoclasses, and pseudoelements
Selector type Example
Universal selector * { color:#555; }
Type selectors b { color:red; }
Class selectors .classname { color:blue; }
ID selectors #idname { background:cyan; }
Descendant selectors span em { color:green; }
Child selectors div > em { background:lime; }
Adjacent sibling selectors i + b { color:gray; }
Attribute selectors a[href='info.htm'] { color:red; }
Pseudoclasses a:hover { font-weight:bold; }
Pseudoelements P::first-letter { font-size:300%; }
The CSS3 designers decided that most of these selectors work just fine the way they
are, but three enhancements have been made so that you can more easily match ele‐
ments based on the contents of their attributes.
Matching Parts of Strings
In CSS2 you can use a selector  such as a[href='info.htm']  to match the string
info.htm  when found in an href  attribute, but there’s no way to match only a portion
of a string. However, CSS3 comes to the rescue with three new operators: ^, $, and *.
If one directly precedes the = symbol, you can match the start, end, or any part of a
string, respectively.
The ^ operator
This operator matches at  the start of a string so, for example, the following will match
any href  attribute whose value begins with the string http://website :
a[href^='http://website']
Therefore, the following element will match:
<a href='http://website.com'>
But this will not:
<a href='http://mywebsite.com'>
The $ operator
To match only at the end of a string, you can use a selector such as the following,
which will match any img tag whose src attribute ends with .png :
img[src$='.png']
452 | Chapter 19: Advanced CSS with CSS3

For example, the following will match :
<img src='photo.png'>
But this will not:
<img src='snapshot.jpg'>
The * operator
To match any substring anywhere  in the attribute, you can use a selector such as the
following to find any links on a page that have the string google  anywhere within
them:
a[href*='google']
For example, the HTML segment <a href='http://google.com'>  will match, while
the segment <a href='http://gmail.com'>  will not.
The box-sizing Property
The W3C box model specifies that the width and height of an object should refer only
to the dimensions of an element’s content, ignoring any padding or border. But some
web designers have expressed a desire to specify dimensions that refer to an entire
element, including any padding and border.
To provide this feature, CSS3 lets you choose the  box model you wish to use with the
box-sizing  property. For example, to use the total width and height of an object
including padding and borders, you would use this declaration:
box-sizing:border-box;
Or, to have an object’s width and height refer only to its content, you would use this
declaration (the default):
box-sizing:content-box;
Safari and Mozilla-based browsers (such as Firefox) require their
own prefixes to this declaration ( -webkit-  and –moz- ), as detailed
at http://caniuse.com .
CSS3 Backgrounds
CSS3 provides two new properties: background-clip  and background-origin .
Between them, you can specify where a background should start within an element,
and how to clip the background so that it doesn’t appear in parts of the box model
where you don’t want it to.
The box-sizing Property | 453

To accomplish these, both properties support the following values:
border-box
Refers to the outer edge of the border
padding-box
Refers to the outer edge of the padding area
content-box
Refers to the outer edge of the content area
The background-clip Property
The background-clip  property specifies whether the background should be ignored
(clipped) if it appears within either the border or padding area of an element. For
example, the following declaration states that the background may display in all parts
of an element, all the way to the outer edge of the border:
background-clip:border-box;
To keep the background from appearing within the border area of an element, you
can restrict it to only the section of an element inside the outer edge of its padding
area, like this:
background-clip:padding-box;
Or to restrict the background to display only within the content area of an element,
you would use this declaration:
background-clip:content-box;
Figure 19-1  shows three rows of elements displayed in the Safari web browser, in
which the first row uses border-box  for the background-clip  property, the second
uses padding-box , and the third uses content-box .
454 | Chapter 19: Advanced CSS with CSS3

Figure 19-1. Different  ways of combining CSS3 background properties
In the first row, the inner box (an image file that has been loaded into the top left of
the element, with repeating disabled) is allowed to display anywhere in the element.
Y ou can also clearly see it displayed in the border area of the first box because the
border has been set to dotted.
In the second row, neither the background image nor the background shading dis‐
plays in the border area, because they have been clipped to the padding area with a
background-clip  property value of padding-box .
CSS3 Backgrounds | 455

Then, in the third row, both the background shading and the image have been clip‐
ped to display only within the inner content area of each element (shown inside a
light-colored, dotted box), using a background-clip  property of content-box .
The background-origin Property
With the background-origin  property, you can control where a background image
will be located by specifying where the top left of the image should start. For example,
the following declaration states that the background image’s origin should be the top-
left corner of the outer edge of the border:
background-origin:border-box;
To set the origin of an image to the top-left outer corner of the padding area, you
would use this declaration:
background-origin:padding-box;
Or to set the origin of an image to the top-left corner of an element’s inner content
section, you would use this declaration:
background-origin:content-box;
Looking again at Figure 19-1 , you can see in each row the first box uses a
background-origin  property of border-box , the second uses padding-box , and the
third uses content-box . Consequently, in each row the smaller inner box displays at
the top left of the border in the first box, the top left of the padding in the second, and
the top left of the content in the third box.
The only differences to note between the rows, with regard to the
origins of the inner box in Figure 19-1 , are that in rows 2 and 3 the
inner box is clipped to the padding and content areas, respectively;
therefore, outside these areas no portion of the box is displayed.
The background-size Property
In the same way that you can specify the width and height of an image when used in
the <img>  tag, you can now also do so for background images on the latest versions of
all browsers.
Y ou apply the property as follows (where ww is the width and hh is the height):
background-size: wwpx hhpx;
If you prefer, you can use only one argument, and then both dimensions will be set to
that value. Also, if you apply this property to a block-level element such as a <div>
(rather than one that is inline such as a <span> ), you can specify the width and/or
height as a percentage, instead of a fixed value.
456 | Chapter 19: Advanced CSS with CSS3

Using the auto Value
If you wish to scale only one dimension of a background image, and then have the
other one scale automatically to retain the same proportions, you can use the value
auto  for the other dimension, like this:
background-size:100px auto;
This sets the width to 100 pixels, and the height to a value proportionate to the
increase or decrease in width.
Different browsers may require different versions of the various
background property names, so please refer to http://caniuse.com
when using them to ensure you are applying all the versions
required for the browsers you are targeting.
Multiple Backgrounds
With CSS3 you can now attach multiple backgrounds to an element, each of which
can use the previously discussed CSS3 background properties. Figure 19-2  shows an
example of this; eight different images have been assigned to the background, to cre‐
ate the four corners and four edges of the certificate border.
Figure 19-2. A background created with multiple images
To display multiple background images in a single CSS declaration, separate them
with commas. Example 19-1  shows the HTML and CSS that was used to create the
background in Figure 19-2 .
Multiple Backgrounds | 457

Example 19-1. Using multiple images in a background
<!DOCTYPE html>
<html> <!-- backgroundimages.html -->
  <head>
    <title>CSS3 Multiple Backgrounds Example</title>
    <style>
      .border {
        font-family:'Times New Roman';
        font-style :italic;
        font-size  :170%;
        text-align :center;
        padding    :60px;
        width      :350px;
        height     :500px;
        background :url('b1.gif') top    left  no-repeat,
                    url('b2.gif') top    right no-repeat,
                    url('b3.gif') bottom left  no-repeat,
                    url('b4.gif') bottom right no-repeat,
                    url('ba.gif') top          repeat-x,
                    url('bb.gif') left         repeat-y,
                    url('bc.gif') right        repeat-y,
                    url('bd.gif') bottom       repeat-x
      }
    </style>
  </head>
  <body>
    <div class='border'>
      <h1>Employee of the month</h1>
      <h2>Awarded To:</h2>
      <h3>__________________</h3>
      <h2>Date:</h2>
      <h3>___/___/_____</h3>
    </div>
  </body>
</html>
Looking at the CSS section, you see that the first four lines of the background  declara‐
tion place the corner images into the four corners of the element, and the final four
place the edge images, which are handled last because the order of priority for back‐
ground images goes from high to low. In other words, where they overlap, additional
background images will appear behind already placed images. If the GIFs were in the
reverse order, the repeating edge images would display on top of the corners, which
would be incorrect.
Using this CSS, you can resize the containing element to any
dimensions, and the border will always correctly resize to fit, which
is much easier than using tables or multiple elements for the same
effect.
458 | Chapter 19: Advanced CSS with CSS3

CSS3 Borders
CSS3 also brings a lot more flexibility to the way borders can be presented, by allow‐
ing you to independently change the colors of all four border edges, to display images
for the edges and corners, to provide a radius value for applying rounded corners to
borders, and to place box shadows underneath elements.
The border-color Property
There are two ways you can apply colors  to a border. First, you can pass a single color
to the property, as follows:
border-color:#888;
This property sets all the borders of an element to mid-gray. Y ou can also set border
colors individually, like this (which sets the border colors to various shades of gray):
border-top-color   :#000;
border-left-color  :#444;
border-right-color :#888;
border-bottom-color:#ccc;
Y ou can also set all the colors individually with a single declaration, as follows:
border-color:#f00 #0f0 #880 #00f;
This declaration sets the top border color to #f00 , the right one to #0f0 , the bottom
one to #880 , and the left one to #00f  (red, green, orange, and blue, respectively). Y ou
can also use color names for the arguments.
The border-radius Property
Prior to CSS3, talented web developers came up with numerous tweaks and fixes in
order to achieve rounded borders, generally using <table>  or <div>  tags.
But now adding rounded borders to an element is really simple, and it works on the
latest versions of all major browsers, as shown in Figure 19-3 , in which a 10-pixel
border is displayed in different ways. Example 19-2  shows the HTML for this.
Example 19-2. The border-radius property
<!DOCTYPE html>
<html> <!-- borderradius.html -->
  <head>
    <title>CSS3 Border Radius Examples</title>
    <style>
      .box {
        margin-bottom:10px;
        font-family  :'Courier New', monospace;
        font-size    :12pt;
CSS3 Borders | 459

text-align   :center;
        padding      :10px;
        width        :380px;
        height       :75px;
        border       :10px solid #006;
      }
      .b1 {
        -moz-border-radius   :40px;
        -webkit-border-radius:40px;
        border-radius        :40px;
      }
      .b2 {
        -moz-border-radius   :40px 40px 20px 20px;
        -webkit-border-radius:40px 40px 20px 20px;
        border-radius        :40px 40px 20px 20px;
      }
      .b3 {
        -moz-border-radius-topleft        :20px;
        -moz-border-radius-topright       :40px;
        -moz-border-radius-bottomleft     :60px;
        -moz-border-radius-bottomright    :80px;
        -webkit-border-top-left-radius    :20px;
        -webkit-border-top-right-radius   :40px;
        -webkit-border-bottom-left-radius :60px;
        -webkit-border-bottom-right-radius:80px;
        border-top-left-radius            :20px;
        border-top-right-radius           :40px;
        border-bottom-left-radius         :60px;
        border-bottom-right-radius        :80px;
      }
      .b4 {
        -moz-border-radius-topleft        :40px 20px;
        -moz-border-radius-topright       :40px 20px;
        -moz-border-radius-bottomleft     :20px 40px;
        -moz-border-radius-bottomright    :20px 40px;
        -webkit-border-top-left-radius    :40px 20px;
        -webkit-border-top-right-radius   :40px 20px;
        -webkit-border-bottom-left-radius :20px 40px;
        -webkit-border-bottom-right-radius:20px 40px;
        border-top-left-radius            :40px 20px;
        border-top-right-radius           :40px 20px;
        border-bottom-left-radius         :20px 40px;
        border-bottom-right-radius        :20px 40px;
      }
    </style>
  </head>
  <body>
    <div class='box b1'>
      border-radius:40px;
    </div>
    <div class='box b2'>
460 | Chapter 19: Advanced CSS with CSS3

border-radius:40px 40px 20px 20px;
    </div>
    <div class='box b3'>
      border-top-left-radius &nbsp;&nbsp;&nbsp;:20px;<br>
      border-top-right-radius &nbsp;&nbsp;:40px;<br>
      border-bottom-left-radius :60px;<br>
      border-bottom-right-radius:80px;
    </div>
    <div class='box b4'>
      border-top-left-radius &nbsp;&nbsp;&nbsp;:40px 20px;<br>
      border-top-right-radius &nbsp;&nbsp;:40px 20px;<br>
      border-bottom-left-radius :20px 40px;<br>
      border-bottom-right-radius:20px 40px;
    </div>
  </body>
</html>
Figure 19-3. Mixing and matching various border radius properties
CSS3 Borders | 461

So, for example, to create a rounded border with a radius of 19 pixels, you could sim‐
ply use the following declaration:
border-radius:20px;
Although most browsers will work fine with border radius proper‐
ties (including IE), some current (and many older) versions of the
major browsers use different property names. So, if you wish to
support them all, you will need to also use the relevant browser-
specific prefixes for them, such as -moz-  and -webkit- . To ensure
that Example 19-2  works in all browsers, I have included all the
required prefixes.
Y ou can specify a separate radius for each of the four corners, like this (applied in a
clockwise direction starting from the top-left corner):
border-radius:10px 20px 30px 40px;
If you prefer, you can also address each corner of an element individually, like this:
border-top-left-radius    :20px;
border-top-right-radius   :40px;
border-bottom-left-radius :60px;
border-bottom-right-radius:80px;
And, when referencing individual corners, you can supply two arguments to choose a
different vertical and horizontal radius (giving more interesting and subtle borders),
like this:
border-top-left-radius    :40px 20px;
border-top-right-radius   :40px 20px;
border-bottom-left-radius :20px 40px;
border-bottom-right-radius:20px 40px;
The first argument is the horizontal, and the second is the vertical radius.
Box Shadows
To apply a box shadow, specify a horizontal and vertical  offset from the object, the
amount of blurring to add to the shadow, and the color to use, like this:
box-shadow:15px 15px 10px #888;
The two instances of 15px  specify the vertical and horizontal offset from the element,
and these values can be negative, zero, or positive. The 10px  specifies the amount of
blurring, with smaller values resulting in less blurring. And the #888  is the color for
the shadow, which can be any valid color value. The result of this declaration can be
seen in Figure 19-4 .
462 | Chapter 19: Advanced CSS with CSS3

Figure 19-4. A box shadow displayed under an element
Y ou must use the WebKit and Mozilla prefixes to this property for
those browsers.
Element Overflow
In CSS2, you can indicate what to do when one element is too large to be fully con‐
tained by its parent by setting the overflow  property to hidden , visible , scroll , or
auto . But with CSS3, you can now separately apply these values in the horizontal or
vertical directions, too, as with these example declarations:
overflow-x:hidden;
overflow-x:visible;
overflow-y:auto;
overflow-y:scroll;
Multicolumn Layout
One of the most requested features by web developers is multiple columns, and this
has finally been realized in CSS3, with Internet Explorer 10 being the last major
browser to adopt it.
Now, flowing text over multiple columns is as easy as specifying the number of col‐
umns, and then (optionally) choosing the spacing between them and the type of
dividing line (if any), as shown in Figure 19-5  (created using Example 19-3 ).
Element Overflow  | 463

Figure 19-5. Flowing text in multiple columns
Example 19-3. Using CSS to create multiple columns
<!DOCTYPE html>
<html> <!-- multiplecolumns.html -->
  <head>
    <title>Multiple Columns</title>
    <style>
      .columns {
        text-align          :justify;
        font-size           :16pt;
        -moz-column-count   :3;
        -moz-column-gap     :1em;
        -moz-column-rule    :1px solid black;
        -webkit-column-count:3;
        -webkit-column-gap  :1em;
        -webkit-column-rule :1px solid black;
        column-count        :3;
        column-gap          :1em;
        column-rule         :1px solid black;
      }
    </style>
  </head>
  <body>
    <div class='columns'>
      Now is the winter of our discontent
      Made glorious summer by this sun of York;
      And all the clouds that lour'd upon our house
      In the deep bosom of the ocean buried.
      Now are our brows bound with victorious wreaths;
      Our bruised arms hung up for monuments;
      Our stern alarums changed to merry meetings,
      Our dreadful marches to delightful measures.
      Grim-visaged war hath smooth'd his wrinkled front;
      And now, instead of mounting barded steeds
464 | Chapter 19: Advanced CSS with CSS3

To fright the souls of fearful adversaries,
      He capers nimbly in a lady's chamber
      To the lascivious pleasing of a lute.
    </div>
  </body>
</html>
Within the .columns  class, the first two lines simply tell the browser to right-justify
the text and to set it to a font size of 16pt . These declarations aren’t needed for multi‐
ple columns, but they improve the text display. The remaining lines set up the ele‐
ment so that, within it, text will flow over three columns, with a gap of 1em between
the columns, and with a single-pixel border down the middle of each gap.
In Example 19-3 , Mozilla- and WebKit-based browsers require
browser-specific prefixes to the declarations.
Colors and Opacity
The ways in which you can define colors have been greatly expanded with CSS3, and
you can now also use CSS functions to apply colors in the common formats RGB
(Red, Green, and Blue), RGBA (Red, Green, Blue, and Alpha), HSL (Hue, Saturation,
and Luminance), and HSLA (Hue, Saturation, Luminance, and Alpha). The Alpha
value specifies a color’s transparency, which allows underlying elements to show
through.
HSL Colors
To define a color with the hsl function, you must first  choose a value for the hue
between 0 and 359 from a color wheel. Any higher color numbers simply wrap
around to the beginning again, so the value of 0 is red, and so are the values 360 and
720.
In a color wheel, the primary colors of red, green, and blue are separated by 120
degrees, so that pure red is 0, green is 120, and blue is 240. The numbers between
these values represent shades comprising different proportions of the primary colors
on either side.
Next you need the saturation level, which is a value between 0 and 100 percent. This
specifies how washed-out or vibrant a color will appear. The saturation values com‐
mence in the center of the wheel with a mid-gray color (a saturation of 0 percent) and
then become more and more vivid as they progress to the outer edge (a saturation of
100 percent).
Colors and Opacity | 465

All that’s left then is for you to decide how bright you want the color to be, by choos‐
ing a luminance value of between 0 and 100 percent. A value of 50% for the lumi‐
nance gives the fullest, brightest color; decreasing the value (down to a minimum of
0%) darkens the color until it displays as black; and increasing the value (up to a max‐
imum of 100%) lightens the color until it shows as white. Y ou can visualize this as if
you are mixing levels of either black or white into the color.
Therefore, for example, to choose a fully saturated yellow color with standard percent
brightness, you would use a declaration such as this:
color:hsl(60, 100%, 50%);
Or, for a darker blue color, you might use a declaration such as this:
color:hsl(240, 100%, 40%);
Y ou can also use this (and all other CSS color functions) with any property that
expects a color, such as background-color , and so on.
HSLA Colors
To provide even further control over how colors will appear, you can use the hsla  
function, supplying it with a fourth (or alpha) level for a color, which is a floating-
point value between 0 and 1. A value of 0 specifies that the color is totally transparent,
while 1 means it is fully opaque.
Here’s how you would choose a fully saturated yellow color with standard brightness
and 30 percent opacity:
color:hsla(60, 100%, 50%, 0.3);
Or, for a fully saturated but lighter blue color with 82 percent opacity, you might use
this declaration:
color:hsla(240, 100%, 60%, 0.82);
RGB Colors
Y ou will probably  be more familiar with using the RGB system of selecting a color, as
it’s similar to using the #nnnnnn  and #nnn  color formats. For example, to apply a yel‐
low color to a property, you can use either of the following declarations (the first sup‐
porting 16 million colors, and the second supporting 4,000):
color:#ffff00;
color:#ff0;
Y ou can also use the CSS rgb function to achieve the same result, but you use decimal
numbers instead of hexadecimal (where 255 decimal is ff hexadecimal):
color:rgb(255, 255, 0);
466 | Chapter 19: Advanced CSS with CSS3

But even better than that, you don’t even have to think in amounts of up to 256 any‐
more, because you can specify percentage values, like this:
color:rgb(100%, 100%, 0);
In fact, you can now get very close to a desired color by simply thinking about its
primary colors. For example, green and blue make cyan, so to create a color close to
cyan, but with more blue in it than green, you could make a good first guess at 0%
red, 40% green, and 60% blue, and try a declaration such as this:
color:rgb(0%, 40%, 60%);
RGBA Colors
As with the hsla  function,  the rgba  function  supports a fourth alpha argument, so
you can, for example, apply the previous cyan-like color with an opacity of 40 percent
by using a declaration such as this:
color:rgba(0%, 40%, 60%, 0.4);
The opacity Property
The opacity  property provides the same alpha control as the hsla  and rgba  func‐
tions, but lets you modify an object’s opacity (or transparency if you prefer) sepa‐
rately from its color.
To use it, apply a declaration such as the following to an element (which in this exam‐
ple sets the opacity to 25 percent, or 75 percent transparent):
opacity:0.25;
WebKit- and Mozilla-based browsers require browser-specific pre‐
fixes to this property.  And for backward compatibility with releases
of Internet Explorer prior to version 9, you should add the follow‐
ing declaration (in which the opacity value is multiplied by 100):
filter:alpha(opacity='25');
Text Effects
A number of new effects can now be applied to text with the help of CSS3, including
text shadows, text overlapping, and word wrapping.
The text-shadow Property
The text-shadow  property is similar to the box-shadow  property and takes the same
set of arguments: a horizontal and vertical offset, an amount for the blurring, and the
color to use. For example, the following declaration offsets the shadow by 3 pixels
Text Effects  | 467

both horizontally and vertically, and displays the shadow in dark gray, with a blurring
of 4 pixels:
text-shadow:3px 3px 4px #444;
The result of this declaration looks like Figure 19-6 , and works in all recent versions
of all major browsers (but not IE9 or lower).
Figure 19-6. Applying a shadow to text
The text-overflow  Property
When using any of the CSS overflow properties with a value of hidden , you can also
use the text-overflow  property to place an ellipsis (three dots) just before the cutoff
to indicate that some text has been truncated, like this:
text-overflow:ellipsis;
Without this property, when the text “To be, or not to be. That is the question. ” is
truncated, the result will look like Figure 19-7 ; with the declaration applied, however,
the result is like Figure 19-8 .
Figure 19-7. The text is automatically truncated
Figure 19-8. Instead of being cut off, the text trails off using an ellipsis
For this to work, three things are required:
•The element should have an overflow  property that is not visible, such as over
flow:hidden .
•The element must have the white-space:nowrap  property set to constrain  the
text.
•The width of the element must be less than that of the text to truncate.
468 | Chapter 19: Advanced CSS with CSS3

The word-wrap Property
When you have a really long word that is wider than the element containing it, it will
either overflow or be truncated. But as an alternative to using the text-overflow
property and truncating text, you can use the word-wrap  property with a value of
break-word  to wrap long lines, like this:
word-wrap:break-word;
For example, in Figure 19-9  the word Honorificabilitudinitatibus  is too wide for the
containing box (whose righthand edge is shown as a solid vertical line between the
letters t and a) and, because no overflow properties have been applied, it has over‐
flowed its bounds.
Figure 19-9. The word is too wide for its container and has overflowed
But in Figure 19-10 , the word-wrap  property of the element has been assigned a value
of break-word , so the word has neatly wrapped around to the next line.
Figure 19-10. The word now wraps at the right-hand edge
Web Fonts
The use of CSS3 web fonts vastly increases  the typography available to web designers
by allowing fonts to be loaded in and displayed from across the Web, not just from
the user’s computer. To achieve this, declare a web font by using @font-face , like this:
@font-face
{
  font-family:FontName;
  src:url('FontName.otf');
}
The url function  requires a value containing the path or URL of a font. On most
browsers, you can use either TrueType ( .ttf) or OpenType ( .otf) fonts,  but Internet
Explorer restricts you to TrueType fonts that have been converted to EOT ( .eot).
Web Fonts | 469

To tell the browser the type of font, you can use the format  function, like this (for
OpenType fonts):
@font-face
{
  font-family:FontName;
  src:url('FontName.otf') format('opentype');
}
Or this for TrueType fonts:
@font-face
{
  font-family:FontName;
  src:url('FontName.ttf') format('truetype');
}
However, because Microsoft Internet Explorer accepts only EOT fonts, it ignores
@font-face  declarations that contain the format  function.
Google Web Fonts
One of the best ways to use web fonts is to load them in for free from Google’s
servers. To find out more about this, check out the Google Fonts website (at http://
google.com/fonts , see Figure 19-11 ), where you can get access to over 630 font fami‐
lies, and counting!
470 | Chapter 19: Advanced CSS with CSS3

Figure 19-11. It’s easy to include Google’s web fonts
To show you how easy it is to use one of these fonts, here’s how you load a Google
font (in this case, Lobster) into your HTML for use in <h1>  headings:
<!DOCTYPE html>
<html>
  <head>
    <style>
      h1 { font-family:'Lobster', arial, serif; }
    </style>
    <link href='http://fonts.googleapis.com/css?family=Lobster'
      rel='stylesheet' type='text/css'>
  </head>
  <body>
    <h1>Hello</h1>
  </body>
</html>
Google Web Fonts | 471

Transformations
Using transformations, you can skew, rotate, stretch, and squash elements in any of
up to three  dimensions (yes, 3D is supported, but only in WebKit-based browsers for
now). This makes it easy to create great effects by stepping out of the uniform rectan‐
gular layout of <div>  and other elements, because now they can be shown at a variety
of angles and in many different forms.
To perform a transformation, use the transform  property (which unfortunately has
browser-specific prefixes for Mozilla, WebKit, Opera, and Microsoft browsers, so
once again you’ll need to refer to http://caniuse.com ).
Y ou can apply various properties to the transform  property, starting with the value
none , which resets an object to a nontransformed state:
transform:none;
Y ou can supply one or more of the following functions to the transform  property:
matrix
Transforms an object by applying a matrix of values to it
translate
Moves an element’s origin
scale
Scales an object
rotate
Rotates an object
skew
Skews an object
There are also single versions of many of these functions, such as translateX ,
scaleY , and so on.
So, for example, to rotate an element clockwise by 45 degrees, you could apply this
declaration to it:
transform:rotate(45deg);
At the same time, you could enlarge this object, as in the following declaration, which
enlarges its width by 1.5 times and its height by 2 times, and then performs the rota‐
tion. Figure 19-12  shows an object before the transformations are applied, and then
afterward:
transform:scale(1.5, 2) rotate(45deg);
472 | Chapter 19: Advanced CSS with CSS3

Figure 19-12. An object before and after  transformation
3D Transformations
Y ou can also transform objects in three dimensions by using the following CSS3 3D
transformation features:
perspective
Releases an element from 2D space and creates a third dimension within which it can
move
transform-origin
Sets the location at which all lines converge to a single point
translate3d
Moves an element to another location in its 3D space
scale3d
Rescales one or more dimensions
rotate3d
Rotates an element around any of the x-, y-, and z-axes
Figure 19-13  shows a 2D object that has been rotated in 3D space with a CSS rule
such as the following:
transform:perspective(200px) rotateX(10deg) rotateY(20deg) rotateZ(30deg);
3D Transformations | 473

Figure 19-13. A figure  rotated in 3D space
For more information, please refer to the tutorial at http://tinyurl.com/3dcsstransforms
(or use the direct URL http://24ways.org/2010/intro-to-css-3d-transforms ).
Transitions
Also appearing on all the latest versions of the major browsers (including Internet
Explorer 10, but not lower versions) is a dynamic new feature called transitions . These
specify an animation effect you want to occur when an element is transformed, and
the browser will automatically take care of all the in-between frames for you.
There are four properties you should supply in order to set up a transition, as follows:
transition-property       : property ;
transition-duration       : time;
transition-delay          : time;
transition-timing-function: type;
Y ou must preface these properties with the relevant browser pre‐
fixes for Mozilla, WebKit, Opera, and Microsoft browsers.
Properties to Transition
Transitions have properties such as height  and border-color . Specify the properties
you want to change in the CSS property named transition-property  (here the word
property  is used by different tools to mean different things). Y ou can include multiple
properties by separating them with commas, like this:
transition-property:width, height, opacity;
474 | Chapter 19: Advanced CSS with CSS3

Or, if you want absolutely everything about an element to transition (including col‐
ors), use the value all, like this:
transition-property:all;
Transition Duration
The transition-duration  property  requires a value of 0 seconds or greater, like the
following, which specifies that the transition should take 1.25 seconds to complete:
transition-duration:1.25s;
Transition Delay
If the transition-delay  property is given a value greater than 0 seconds (the
default), it introduces a delay between the initial display of the element and the begin‐
ning of the transition. The following starts the transition after a 0.1-second delay:
transition-delay:0.1s;
If the transition-delay  property is given a value of less than 0 seconds (in other
words, a negative value), the transition will execute the moment the property is
changed, but will appear to have begun execution at the specified offset, partway
through its cycle.
Transition Timing
The transition-timing  function property requires one of the following values:
ease
Start slowly, get faster, and then end slowly.
linear
Transition at constant speed.
ease-in
Start slowly, and then go quickly until finished.
ease-out
Start quickly, stay fast until near the end, and then end slowly.
ease-in-out
Start slowly, go fast, and then end slowly.
Using any of the values containing the word ease ensures that the transition looks
extra fluid and natural, unlike a linear transition that somehow seems more mechani‐
cal. And if these aren’t sufficiently varied for you, you can also create your own transi‐
tions using the cubic-bezier  function.
Transitions | 475

For example, following are the declarations used to create the preceding five transi‐
tion types, illustrating how you can easily create your own:
transition-timing-function:cubic-bezier(0.25, 0.1, 0.25, 1);
transition-timing-function:cubic-bezier(0,    0,   1,    1);
transition-timing-function:cubic-bezier(0.42, 0,   1,    1);
transition-timing-function:cubic-bezier(0,    0,   0.58, 1);
transition-timing-function:cubic-bezier(0.42, 0,   0.58, 1);
Shorthand Syntax
Y ou may find it easier to use the shorthand version of this property and include all
the values in a single declaration like the following, which will transition all proper‐
ties in a linear  fashion, over a period of .3 seconds, after an initial (optional) delay of .
2 seconds:
transition:all .3s linear .2s;
Doing so will save you the trouble of entering many very similar declarations, partic‐
ularly if you are supporting all the major browser prefixes.
Example 19-4  illustrates how you might use transitions and transformations together.
The CSS creates a square, orange element with some text in it, and a hover  pseudo‐
class  specifying that when the mouse passes over the object, it should rotate by 180
degrees and change from orange to yellow (see Figure 19-14 ).
Example 19-4. A transition on hover effect
<!DOCTYPE html>
<html>
  <head>
    <title>Transitioning on hover</title>
    <style>
      #square {
        position          :absolute;
        top               :50px;
        left              :50px;
        width             :100px;
        height            :100px;
        padding           :2px;
        text-align        :center;
        border-width      :1px;
        border-style      :solid;
        background        :orange;
        transition        :all .8s ease-in-out;
        -moz-transition   :all .8s ease-in-out;
        -webkit-transition:all .8s ease-in-out;
        -o-transition     :all .8s ease-in-out;
        -ms-transition    :all .8s ease-in-out;
      }
476 | Chapter 19: Advanced CSS with CSS3

#square:hover {
        background        :yellow;
        -moz-transform    :rotate(180deg);
        -webkit-transform :rotate(180deg);
        -o-transform      :rotate(180deg);
        -ms-transform     :rotate(180deg);
        transform         :rotate(180deg);
      }
    </style>
  </head>
  <body>
    <div id='square'>
      Square shape<br>
      created using<br>
      a simple div<br>
      element with<br>
      a 1px border
    </div>
  </body>
</html>
Figure 19-14. The object rotates and changes color when hovered over
The sample code caters to all browsers by providing browser-specific versions of the
declarations. On all the latest browsers (including IE10 or higher), the object will
rotate clockwise when hovered over, while slowly changing from orange to yellow.
CSS transitions are smart in that when they are cancelled, they smoothly return to
their original value. So if you move the mouse away before the transition has comple‐
ted, it will instantly reverse and start transition back to its initial state.
Questions
1.What do the CSS3 attribute selector operators ^=, $=, and *= do?
2.What property do you use to specify the size of a background image?
Questions | 477

3.With which property can you specify the radius of a border?
4.How can you flow text over multiple columns?
5.Name the four functions with which you can specify CSS colors.
6.How would you create a gray text shadow under some text, offset diagonally to
the bottom right by 5 pixels, with a blurring of 3 pixels?
7.How can you indicate with an ellipsis that text is truncated?
8.How can you include a Google web font in a web page?
9.What CSS declaration would you use to rotate an object by 90 degrees?
10.How do you set up a transition on an object so that when any of its properties are
changed, the change will transition immediately in a linear fashion over the
course of half a second?
See Chapter 19 Answers  in Appendix A  for the answers to these questions.
478 | Chapter 19: Advanced CSS with CSS3

CHAPTER 20
Accessing CSS from JavaScript
With a good understanding of the DOM and CSS now under your belt, you’ll learn in
this chapter how to access both the DOM and CSS directly from JavaScript, enabling
you to create highly dynamic and responsive websites.
I’ll also show you how to use interrupts so you can create animations or provide any
code that must continue running (such as a clock). Finally, I’ll explain how you can
add new elements to or remove existing ones from the DOM so you don’t have to
pre-create elements in HTML just in case JavaScript may need to access them later.
Revisiting the getElementById Function
To help with the examples in the rest of this book, I would like to provide an
enhanced version of the getElementbyId  function,  for handling DOM elements and
CSS styles quickly and efficiently, without the need for including a framework such as
jQuery.
However, to avoid conflicting with frameworks that use the $ character, I’ll use the
uppercase O, since it’s the first letter of Object , which is what will be returned when
the function is called (the object represented by the ID passed to the function).
The O function
Here’s what the bare-bones O function looks like:
function O(i)
{
  return document.getElementById(i)
}
479

This alone saves 22 characters of typing each time it’s called. But I choose to extend
the function a little by allowing either an ID name or an object to be passed to this
function, as shown in the complete version of the function in Example 20-1 .
Example 20-1. The O() function
function O(i)
{
  return typeof i == 'object' ? i : document.getElementById(i)
}
If an object is passed to the function, it just returns that object back again. Otherwise,
it assumes that an ID is passed and returns the object to which the ID refers.
But why on earth would I want to add this first statement, which simply returns the
object passed to it?
The S Function
The answer to this question becomes clear when you look at a partner function called
S, which gives you easy access to the style  (or CSS) properties of an object, as shown
in Example 20-2 .
Example 20-2. The S() function
function S(i)
{
  return O(i).style
}
The S in this function name is the first letter of Style , and the function performs the
task of returning the style  property (or subobject) of the element referred to.
Because the embedded O function accepts either an ID or an object, you can pass
either an ID or an object to S as well.
Let’s look at what’s going on here by taking a <div>  element with the ID of myobj  and
setting its text color to green, like this:
<div id='myobj'>Some text</div>
<script>
  O('myobj').style.color = 'green'
</script>
The preceding code will do the job, but it’s much simpler to call the new S function,
like this:
S('myobj').color = 'green'
480 | Chapter 20: Accessing CSS from JavaScript

Now consider the case in which the object returned by calling O is stored in, for
example, an object called fred , like this:
fred = O('myobj')
Because of the way function S works, we can still call it to change the text color to
green, like this:
S(fred).color = 'green'
This means that whether you wish to access an object directly or via its ID, you can
do so by passing it to either the O or S function as required. Just remember that when
you pass an object (rather than an ID), you must not place it in quotation marks.
The C Function
So far I’ve provided you with two simple functions that make it easy for you to access
any element on a web page, and any style  property of an element. Sometimes,
though, you will want to access more than one element at a time, and you can do this
by assigning a CSS class name to each such element, like these examples, which both
employ the class myclass :
<div class='myclass'>Div contents</fiv>
<p class='myclass'>Paragraph contents</p>
If you want to access all elements on a page that use a particular class, you can use the
C function (for the first letter of Class ), shown in Example 20-3 , to return an array
containing all the objects that match a class name provided.
Example 20-3. The C() function
function C(i)
{
  return document.getElementsByClassName(i)
}
To use this function, simply call it as follows, saving the returned array so that you
can access each of the elements individually as required or (more likely to be the case)
en masse via a loop:
myarray = C('myclass')
Now you can do whatever you like with the objects returned, such as (for example)
setting their textDecoration  style property to underline , as follows:
for (i = 0 ; i < myarray.length ; ++i)
  S(myarray[i]).textDecoration = 'underline'
This code iterates through the objects in myarray[]  and then uses the S function to
reference each one’s style property, setting its textDecoration  property to underline .
Revisiting the getElementById Function | 481

Including the Functions
I use the O and S functions in the examples for the remainder of this chapter, as they
make the code shorter and easier to follow. Therefore, I have saved them in the file
OSC.js  (along with the C function, as I think you’ll find it extremely useful) in the
Chapter 20  folder of the accompanying archive of examples, freely downloadable
from the http://lpmj.net  website.
Y ou can include these functions in any web page by using the following statement—
preferably in its <head>  section, anywhere before any script that relies on calling
them:
<script src='OSC.js'></script>
The contents of OSC.js  are shown in Example 20-4 , where everything is neatened into
just three lines.
Example 20-4. The OSC.js file
function O(i) { return typeof i == 'object' ? i : document.getElementById(i) }
function S(i) { return O(i).style                                            }
function C(i) { return document.getElementsByClassName(i)                    }
Accessing CSS Properties from JavaScript
The textDecoration  property I used in an earlier  example represents a CSS property
that is normally hyphenated like this: text-decoration . But since JavaScript reserves
the hyphen character for use as a mathematical operator, whenever you access a
hyphenated CSS property, you must omit the hyphen and set the character immedi‐
ately following it to uppercase.
Another example of this is the font-size  property (for example), which is referenced
in JavaScript as fontSize  when placed after a period operator, like this:
myobject.fontSize = '16pt'
An alternative to this is to be more long-winded and use the setAttribute  function,
which does support (and in fact requires) standard CSS property names, like this:
myobject.setAttribute('style', 'font-size:16pt')
Some older versions of Microsoft Internet Explorer are picky in
certain instances about using the JavaScript-style CSS property
names when applying the browser-specific -ms-  prefixed versions
of the rules. If you encounter this, use the setAttribute  function
and you should be all right.
482 | Chapter 20: Accessing CSS from JavaScript

Some Common Properties
Using JavaScript, you can modify any property of any element in a web document, in
a similar manner to using CSS. I’ve already shown you how to access CSS properties
using either the JavaScript short form or the setAttribute  function to use exact CSS
property names, so I won’t bore you by detailing all of these hundreds of properties.
Rather, I’ d like to show you how to access just a few of the CSS properties as an over‐
view of some of the things you can do.
First, then, let’s look at modifying a few CSS properties from JavaScript using
Example 20-5 , which loads in the three earlier functions, creates a <div>  element, and
then issues JavaScript statements within a <script>  section of HTML, to modify vari‐
ous of its attributes (see Figure 20-1 ).
Example 20-5. Accessing CSS properties from JavaScript
<!DOCTYPE html>
<html>
  <head>
    <title>Accessing CSS Properties</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <div id='object'>Div Object</div>
    <script>
      S('object').border     = 'solid 1px red'
      S('object').width      = '100px'
      S('object').height     = '100px'
      S('object').background = '#eee'
      S('object').color      = 'blue'
      S('object').fontSize   = '15pt'
      S('object').fontFamily = 'Helvetica'
      S('object').fontStyle  = 'italic'
    </script>
  </body>
</html>
Accessing CSS Properties from JavaScript | 483

Figure 20-1. Modifying styles from JavaScript
Y ou gain nothing by modifying properties like this, because you could just as easily
have included some CSS directly, but shortly we’ll be modifying properties in
response to user interaction—and then you’ll see the real power of combining Java‐
Script and CSS.
Other Properties
JavaScript also opens up access to a very wide range of other properties, such as the
width and height of the browser and of any pop-up or in-browser windows or frames,
handy information such as the parent window (if there is one), and the history of
URLs visited this session.
All these properties are accessed from the window  object via the period operator (for
example, window.name ), and Table 20-1  lists them all, along with descriptions of each.
Table 20-1. Common window properties
Property Sets and/or returns
closed Returns a Boolean value indicating whether a window has been closed or not
defaultStatus Sets or returns the default text in the status bar of a window
document Returns the document  object for the window
frames Returns an array of all the frames and iframes in the window
history Returns the history  object for the window
innerHeight Sets or returns the inner height of a window’s content area
innerWidth Sets or returns the inner width of a window’s content area
length Returns the number of frames and iframes in a window
location Returns the location  object for the window
name Sets or returns the name of a window
484 | Chapter 20: Accessing CSS from JavaScript

Property Sets and/or returns
navigator Returns the navigator  object for the window
opener Returns a reference to the window that created the window
outerHeight Sets or returns the outer height of a window, including tool and scroll bars
outerWidth Sets or returns the outer width of a window, including tool and scroll bars
pageXOffset Returns the pixels the document has been scrolled horizontally from the left of the window
pageYOffset Returns the pixels the document has been scrolled vertically from the top of the window
parent Returns the parent window of a window
screen Returns the screen  object for the window
screenLeft Returns the x coordinate of the window relative to the screen in all recent browsers except Mozilla
Firefox (for which you should use screenX )
screenTop Returns the y coordinate of the window relative to the screen in all recent browsers except Mozilla
Firefox (for which you should use screenY )
screenX Returns the x coordinate of the window relative to the screen in all recent browsers except Opera, which
returns incorrect values; not supported in versions of IE prior to 9
screenY Returns the y coordinate of the window relative to the screen in all recent browsers except Opera, which
returns incorrect values; not supported in versions of IE prior to 9
self Returns the current window
status Sets or returns the text in the status bar of a window
top Returns the top browser window
There are a few points to note about some of these properties:
•The defaultStatus  and status  properties can be  set only if users have modified
their browsers to allow it (very unlikely).
•The history  object cannot be read from (so you cannot see where your visitors
have been surfing). But it supports the length  property to determine how long
the history is, and the back , forward , and go methods to navigate to specific
pages in the history.
•When you need to know how much space there is available in a current window
of the web browser, just read  the values in window.innerHeight  and
window.innerWidth . I often use these values for centering in-browser pop-up
alert or “confirm dialog” windows.
•The screen  object supports the read properties availHeight , availWidth , color
Depth , height , pixelDepth , and width , and is therefore great for determining
information about the user’s display.
Accessing CSS Properties from JavaScript | 485

Many of these properties can be invaluable when you’re targeting
mobile phones and tablet devices, as they will tell you exactly how
much screen space you have to work with, the type of browser
being used, and more.
These few items of information will get you started and already provide you with
many new and interesting things you can do with JavaScript. But, in fact, there are far
more properties and methods available than can be covered in this chapter. However,
now that you know how to access and use properties, all you need is a resource listing
them all, so I recommend that you check out tinyurl.com/domproperties as a good
starting point.
Inline JavaScript
Using <script>  tags isn’t the only  way you can execute JavaScript statements; you
can also access JavaScript from within HTML tags, which makes for great dynamic
interactivity. For example, to add a quick effect when the mouse passes over an object,
you can use code such as that in the <img>  tag in Example 20-6 , which displays an
apple by default, but replaces it with an orange when the mouse passes over, and
restores the apple again when the mouse leaves.
Example 20-6. Using inline JavaScript
<!DOCTYPE html>
<html>
  <head>
    <title>Inline JavaScript</title>
  </head>
  <body>
    <img src='apple.png'
      onmouseover="this.src='orange.png'"
      onmouseout="this.src='apple.png'">
  </body>
</html>
The this Keyword
In the preceding example, you see the this  keyword in use. It tells the JavaScript to
operate on the calling object, namely the <img>  tag. Y ou can see the result in
Figure 20-2 , where the mouse has yet to pass over the apple.
486 | Chapter 20: Accessing CSS from JavaScript

Figure 20-2. Inline mouse hover JavaScript example
When supplied from an inline JavaScript call, the this  keyword
represents the calling object. When used in class methods, it repre‐
sents an object to which the method applies.
Attaching Events to Objects in a Script
The preceding code is the equivalent of providing an ID to the <img>  tag, and then
attaching the actions to the tag’s mouse events, like Example 20-7 .
Example 20-7. Non-inline JavaScript
<!DOCTYPE html>
<html>
  <head>
    <title>Non-inline JavaScript</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <img id='object' src='apple.png'>
    <script>
      O('object').onmouseover = function() { this.src = 'orange.png' }
      O('object').onmouseout  = function() { this.src = 'apple.png'  }
    </script>
  </body>
</html>
In the HTML section, this example gives the <img>  element an ID of object , and
then proceeds to manipulate it separately in the JavaScript section by attaching
anonymous functions to each event.
Inline JavaScript | 487

Attaching to Other Events
Whether you’re using inline or separate JavaScript, there are several events to which
you can attach actions, providing a wealth of additional features you can offer your
users. Table 20-2  lists these events and details when they will be triggered.
Table 20-2. Events and when they are triggered
Event Occurs
onabort When an image’s loading is stopped before completion
onblur When an element loses focus
onchange When any part of a form has changed
onclick When an object is clicked
ondblclick When an object is double-clicked
onerror When a JavaScript error is encountered
onfocus When an element gets focus
onkeydown When a key is being pressed (including Shift, Alt, Ctrl, and Esc)
onkeypress When a key is being pressed (not including Shift, Alt, Ctrl, and Esc)
onkeyup When a key is released
onload When an object has loaded
onmousedown When the mouse button is pressed over an element
onmousemove When the mouse is moved over an element
onmouseout When the mouse leaves an element
onmouseover When the mouse passes over an element from outside it
onmouseup When the mouse button is released
onsubmit When a form is submitted
onreset When a form is reset
onresize When the browser is resized
onscroll When the document is scrolled
onselect When some text is selected
onunload When a document is removed
Make sure you attach events to objects that make sense. For exam‐
ple, an object that is not a form will not respond to the onsubmit
event.
488 | Chapter 20: Accessing CSS from JavaScript

Adding New Elements
With JavaScript, you are not limited to manipulating the elements and objects sup‐
plied to a document in its HTML. In fact, you can create objects at will by inserting
them into the DOM.
For example, suppose you need a new <div>  element. Example 20-8  shows one way 
you can add it to the web page.
Example 20-8. Inserting an element into the DOM
<!DOCTYPE html>
<html>
  <head>
    <title>Adding Elements</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    This is a document with only this text in it.<br><br>
    <script>
      alert('Click OK to add an element')
      newdiv    = document.createElement('div')
      newdiv.id = 'NewDiv'
      document.body.appendChild(newdiv)
      S(newdiv).border = 'solid 1px red'
      S(newdiv).width  = '100px'
      S(newdiv).height = '100px'
      newdiv.innerHTML = "I'm a new object inserted in the DOM"
      tmp              = newdiv.offsetTop
      alert('Click OK to remove the element')
      pnode = newdiv.parentNode
      pnode.removeChild(newdiv)
      tmp = pnode.offsetTop
    </script>
  </body>
</html>
Figure 20-3  shows this code being used to add a new <div>  element to a web docu‐
ment. First, the new element is created with createElement ; then the appendChild
function is called, and the element gets inserted into the DOM.
Adding New Elements | 489

Figure 20-3. Inserting a new element into the DOM
After this, various properties are assigned to the element, including some text for its
inner HTML. And then, in order to make sure the new element is instantly revealed,
its offsetTop  property is read into the throwaway variable tmp. This forces a DOM
refresh and makes the element display in any browser that might otherwise delay
before doing so—particularly Internet Explorer.
This new element is exactly the same as if it had been included in the original HTML,
and has all the same properties and methods available.
I sometimes use the technique of creating new elements when I
want to create in-browser pop-up windows, because it doesn’t rely
on there having to be a spare <div>  element available in the DOM.
Removing Elements
Y ou can also remove elements from the DOM, including ones  that you didn’t insert
using JavaScript; it’s even easier than adding an element. It works like this, assuming
the element to remove is in the object element :
element.parentNode.removeChild(element)
This code accesses the element’s parentNode  object so that it can remove the element
from that node. Then it calls the removeChild  method on that object, passing the
object to be removed. However, to ensure the DOM instantly refreshes on all brows‐
ers, you may prefer to replace the preceding single statement with something like this:
pnode = element.parentNode
pnode.removeChild(element)
tmp   = pnode.offsetTop
490 | Chapter 20: Accessing CSS from JavaScript

This first statement makes a copy of element.parentNode  (the parent element of the
object) in pnode , which (after the child element is removed) has its offsetTop  prop‐
erty looked up (and discarded in the throwaway variable tmp), thus ensuring that the
DOM is fully refreshed.
Alternatives to Adding and Removing Elements
Inserting an element is intended  for adding totally new objects into a web page. But if
all you intend to do is hide and reveal objects according to an onmouseover  or other
event, don’t forget that there are always a couple of CSS properties  you can use for
this purpose, without taking such drastic measures as creating and deleting DOM ele‐
ments.
For example, when you want to make an element invisible but leave it in place (and
with all the elements surrounding it remaining in their positions), you can simply set
the object’s visibility  property to 'hidden' , like this:
myobject.visibility = 'hidden'
And to redisplay the object, you can use the following:
myobject.visibility = 'visible'
Y ou can also collapse elements down to occupy zero width and height (with all
objects around it filling in the freed-up space), like this:
myobject.display = 'none'
To then restore an element to its original dimensions, you would use the following:
myobject.display = 'block'
And, of course, there’s always the innerHTML  property, with which you can change the
HTML applied to an element, like this, for example:
mylement.innerHTML = '<b>Replacement HTML</b>'
Or you can use the O function I outlined earlier, like this:
O('someid').innerHTML = 'New contents'
Or you can make an element seem to disappear, like this:
O('someid').innerHTML = ''
Adding New Elements | 491

Don’t forget other useful CSS properties you can access from Java‐
Script, such as opacity  for setting the visibility of an object to
somewhere between visible and invisible, or width  and height  for
resizing an object. And, of course, using the position  property
with values of 'absolute' , 'static' , or 'relative' , you can even
locate an object anywhere in (or outside) the browser window that
you like.
Using Interrupts
JavaScript provides access to interrupts , a method by which you can ask the browser
to call your code after a set period of time, or even to keep calling it at specified inter‐
vals. This gives you a means of handling background tasks such as Ajax communica‐
tions, or even things like animating web elements.
To accomplish this, you have two types of interrupt: setTimeout  and setInterval ,
which have accompanying clearTimeout  and clearInterval  functions for turning
them off again.
Using setTimeout
When you call setTimeout , you pass it some JavaScript code  or the name of a func‐
tion, and the value in milliseconds representing how long to wait before the code
should be executed, like this:
setTimeout(dothis, 5000)
And your dothis  function might look like this:
function dothis()
{
  alert('This is your wakeup alert!');
}
In case you’re wondering, you cannot simply specify alert()  (with
brackets) as a function to be called by setTimeout , because the
function would be executed immediately. Only when you provide a
function name without argument brackets (for example, alert )
can you safely pass the function name so that its code will be exe‐
cuted only when the time-out occurs.
Passing a string
When you need to provide an argument to a function, you can also pass a string value
to the setTimeout  function, which will not be executed until the correct time, like
this:
492 | Chapter 20: Accessing CSS from JavaScript

setTimeout("alert('Hello!')", 5000)
In fact, you can provide as many lines of JavaScript code as you like, if you place a
semicolon after each statement, like this:
setTimeout("document.write('Starting'); alert('Hello!')", 5000)
Repeating time-outs
One technique some programmers use to provide repeating interrupts using the
function setTimeout  is to call the setTimeout  function  from the code called by it, as
with the following, which will initiate a never-ending loop of alert windows:
setTimeout(dothis, 5000)
function dothis()
{
  setTimeout(dothis, 5000)
  alert('I am annoying!')
}
Now the alert will pop up every five seconds.
Cancelling a Time-Out
Once a time-out has been set up, you can cancel it if you previously saved the value
returned from the initial call to setTimeout , like this:
handle = setTimeout(dothis, 5000)
Armed with the value in handle , you can now cancel the interrupt at any point up
until its due time, like this:
clearTimeout(handle)
When you do this, the interrupt is completely forgotten, and the code assigned to it
will not get executed.
Using setInterval
An easier way to set up regular interrupts is to use the setInterval  function. It works
in just the same way, except that having popped up after the interval you specify in
milliseconds, it will do so again after that interval again passes, and so on forever,
unless you cancel it.
Example 20-9  uses this function to display a simple clock in the browser, as shown in
Figure 20-4 .
Using Interrupts | 493

Example 20-9. A clock created using interrupts
<!DOCTYPE html>
<html>
  <head>
    <title>Using setInterval</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    The time is: <span id='time'>00:00:00</span><br>
    <script>
      setInterval("showtime(O('time'))", 1000)
      function showtime(object)
      {
        var date = new Date()
        object.innerHTML = date.toTimeString().substr(0,8)
      }
    </script>
  </body>
</html>
Figure 20-4. Maintaining the correct time with interrupts
Every time ShowTime  is called, it sets the object date  to the current date and time with
a call to Date :
var date = new Date()
Then the innerHTML  property of the object passed to showtime  (namely, object ) is set
to the current time in hours, minutes, and seconds, as determined by a call to the
function toTimeString . This returns a string such as 09:57:17 UTC+0530 , which is
then truncated to just the first eight characters with a call to the substr  function:
object.innerHTML = date.toTimeString().substr(0,8)
Using the function
To use this function, you first have to create an object whose innerHTML  property will
be used for displaying the time, like this HTML:
494 | Chapter 20: Accessing CSS from JavaScript

The time is: <span id='time'>00:00:00</span>
Then, from a <script>  section of code, a call is placed to the setInterval  function,
like this:
setInterval("showtime(O('time'))", 1000)
It then passes a string to setInterval , containing the following statement, which is
set to execute once a second (every 1,000 milliseconds):
showtime(O('time'))
In the rare situation where somebody has disabled JavaScript (which people some‐
times do for security reasons), your JavaScript will not run and the user will see the
original 00:00:00 .
Cancelling an interval
To stop a repeating interval, when you first set up the interval with a call to the func‐
tion setInterval , you must make a note of the interval’s handle, like this:
handle = setInterval("showtime(O('time'))", 1000)
Now you can stop the clock at any time by issuing the following call:
clearInterval(handle)
Y ou can even set up a timer to stop the clock after a certain amount of time, like this:
setTimeout("clearInterval(handle)", 10000)
This statement will issue an interrupt in 10 seconds that will clear the repeating inter‐
vals.
Using Interrupts for Animation
By combining a few CSS properties with a repeating interrupt, you can produce all
manner of animations and effects.
For example, the code in Example 20-10  moves a square shape across the top of a
browser, all the time ballooning in size, as shown in Figure 20-5 , before starting all
over again when LEFT  is reset to 0.
Example 20-10. A simple animation
<!DOCTYPE html>
<html>
  <head>
    <title>Simple Animation</title>
    <script src='OSC.js'></script>
    <style>
      #box {
Using Interrupts | 495

position  :absolute;
        background:orange;
        border    :1px solid red;
      }
    </style>
  </head>
  <body>
    <div id='box'></div>
    <script>
      SIZE = LEFT = 0
      setInterval(animate, 30)
      function animate()
      {
        SIZE += 10
        LEFT += 3
        if (SIZE == 200) SIZE = 0
        if (LEFT == 600) LEFT = 0
        S('box').width  = SIZE + 'px'
        S('box').height = SIZE + 'px'
        S('box').left   = LEFT + 'px'
      }
    </script>
  </body>
</html>
Figure 20-5. This object slides in from the left while changing size
In the <head>  section of the document, the box object is set to a background  color of
'orange'  with a border  value of '1px solid red' , and its position  property is set
to absolute  so that it is allowed to be moved around in the browser.
496 | Chapter 20: Accessing CSS from JavaScript

Then, in the animate  function, the global variables SIZE  and LEFT  are continuously
updated and then applied to the width , height , and left  style attributes of the box
object (with 'px'  added after each to specify that the values are in pixels), thus ani‐
mating it at a frequency of once every 30 milliseconds—giving a rate of 33.33 frames 
per second (1,000/30 milliseconds).
Questions
1.What are the O, S, and C functions provided to do?
2.Name two ways to modify a CSS attribute of an object.
3.Which properties provide the width and height available in a browser window?
4.How can you make something happen when the mouse passes both over and out
of an object?
5.Which JavaScript function creates new elements, and which appends them to the
DOM?
6.How can you make an element (a) invisible, and (b) collapse to zero dimensions?
7.Which function creates a single event at a future time?
8.Which function sets up repeating events at set intervals?
9.How can you release an element from its location in a web page to enable it to be
moved around?
10.What delay between events should you set (in milliseconds) to achieve an anima‐
tion rate of 50 frames per second?
See Chapter 20 Answers  in Appendix A  for the answers to these questions.
Questions | 497



CHAPTER 21
Introduction to jQuery
Powerful and flexible as JavaScript is, with a plethora of built-in functions, you still
need additional layers of code for simple things that cannot be achieved natively or
with CSS, such as animations, event handling, and Ajax.
What’s more, as a consequence of the various browser wars over the years, frustrating
and annoying browser incompatibilities have come and gone, rearing their heads at
different times on different platforms and programs.
As a result, ensuring your web pages look the same on all devices can sometimes be
achieved only through tedious JavaScript code that accounts for all the discrepancies
across the range of browsers and versions released over recent years. In a word—
nightmare.
As I write (in 2014), we seem to be in the midst of a quieter spell, because Microsoft’s
Internet Explorer has caught up with the standards in many (but not all) areas, Opera
has opted to use WebKit (the same technology used by Google) as the core of its
browser, and Apple has bowed out of the PC browser marketplace.
Nevertheless, legacy inconsistencies remain, and plenty of people use older browsers.
Plus there’s still the issue of needing to write a substantial amount of JavaScript when
you want to create anything more than basic special effects.
To fill these gaps, a number of libraries of functions to minimize the differences
between browsers have been developed, many of which also provide easy hooks into
the DOM (Document Object Model), and for Ajax, and event and animation han‐
dling. These include the likes of AngularJS , jQuery , MooTools , Prototype ,
script.aculo.us , and YUI (among many others).
499

Why jQuery?
There’s room to cover only one library in this book, however, so I have opted for the
most widely used, jQuery, which is now installed on over 60 percent of all websites,
according to http://w3techs.com , and (as far as I can tell from their graphs) is more
used than all its major competitors combined. Incidentally, if you ever want to see
how the various libraries stack up at any point, search for javascript  at
similartech.com .
With jQuery, not only do you get a very high level of cross-browser compatibility
(yes, even including Internet Explorer), you also have quick and easy access to HTML
and DOM manipulation, special functions to interact directly with CSS, the ability to
control events, powerful tools to create professional effects and animations, and func‐
tions for conducting Ajax communications with the web server. jQuery is also the
base for a wide range of plug-ins and other utilities too.
Y ou don’t need  to use jQuery, though, and some programming purists would never
touch a library, preferring to create their own bespoke collection of functions (and
there can be good reasons for this, such as not having to wait on others to correct
bugs you find, implementing your own security features, and so on). But jQuery has
definitely stood the test of time, and if you would like to take advantage of its gentle
learning curve, and be developing quality web pages as quickly as possible, this chap‐
ter will show how you can get started using it.
Including jQuery
There are two ways you can include jQuery in your web pages.  Y ou can go to the
jQuery website , choose the version you need, download it to your website, and serve
it up from there. Or, you can take advantage of a free content delivery network
(CDN) and simply link to the version you require.
jQuery is released under the terms of the MIT license, which places
almost no restrictions on what you can do. Y ou are free to use any
jQuery project in any other project (even commercial projects) as
long as the copyright header is left intact.
Choosing the Right Version
Before deciding whether to download and host jQuery  directly, or to use a CDN, you
also must pick a version of jQuery. In most cases this is straightforward because you’ll
simply opt for the latest release. However, if you are targeting particular browsers, or
if you are maintaining a legacy website that relies on a particular version of jQuery,
then the latest one may not be right for you.
500 | Chapter 21: Introduction to jQuery

Unlike most software, for which you simply download and install the newest avail‐
able, jQuery has evolved over time to take account of the changing dynamics in the
market of differing browser versions, with different features and bugs.
At the same time, improvements to jQuery have been made that might make newer
versions operate differently on sites that have been specially tailored to a particular
version (and the quirks surrounding it), at the time it was released.
Of course, each newer version is an improvement over the previous one, and is more
and more likely to cover all the bases. But where identical operation is critical for a
website, until you have fully tested a new version, it is often best to stick with an ear‐
lier one.
To IE or Not to IE
Additionally, as well as the 1.x series of jQuery, there’s now a 2.x series, which no-
longer supports versions of Internet Explorer lower than 9.  Both of these are running
in parallel development. If you are sure all your users will have IE 9 or higher (for
example, because you are writing a mobile web app), then you can choose the latest
2.x version to benefit from tighter, faster, and more-efficient code. But if any of your
users will be using older versions of IE, then you should use a 1.x release of jQuery.
Compressed or Editable
Y ou also must decide if you wish to use a version of jQuery that has been minified
(compressed) in size to minimize bandwidth and decrease loading time, or whether
you want to use an uncompressed version (perhaps because you want to make an edit
to it yourself—which you are fully entitled to do). Generally, a minified version is
best, but most web servers support gzip for on-the-fly compression and decompres‐
sion, so this is becoming less important (although minification does remove com‐
ments too).
Downloading
Every released version of jQuery is listed in both compressed and minified forms at
jquery.com/download .
All you need to do is choose the one you need, right-click the link displayed along‐
side, and save it to your hard disk. From there, you can upload it to your web server
and then include it within <script>  tags, like this (for the minified version of release
1.11.1):
<script src='http://myserver.com/jquery-1.11.1.min.js'></script>
Including jQuery | 501

If you have never used jQuery before (and have no special require‐
ments), then just download the latest minified version, or link to it
via a CDN, as described following.
Using a Content Delivery Network
Several CDNs support jQuery. If you use one of them, you can save yourself the has‐
sle of having to download new versions and then upload them to your server, by sim‐
ply linking directly to the URLs supplied by these networks.
Not only that, but they provide this service free of charge, and usually on high-
capacity backbones that are probably the fastest in the world. Additionally, CDNs
usually hold their content in a number of different geographic locations, and then
supply a file from the server closest to a surfer, ensuring the quickest possible deliv‐
ery.
Overall, if you don’t need to modify the jQuery source code (requiring you to host it
on your own web servers), and your users are certain to have a live Internet connec‐
tion, CDNs are probably the way to go. And it’s very easy. All you need to know is the
filename you wish to access and the root folder the CDN is using. For example, all
current and previous versions can be accessed though the CDN that jQuery uses, like
this:
<script src='http://code.jquery.com/jquery-1.11.1.min.js'></script>
The base directory is at http://code.jquery.com/  and you simply follow this with the
name of the file you need to include (in this case, jquery-1.11.1.min.js ).
Both Microsoft and Google offer jQuery on their networks, and so you can also
include it in either of the following ways:
<script src='http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.11.1.min.js'></script>
<script src='http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js'>
 </script>
In the case of the Microsoft CDN (aspnetcdn.com), you should begin the URL with
the base directory of ajax.aspnetcdn.com/ajax/jQuery/ , and then follow that with the
filename you require.
For Google, however, you must split the filename (for example, jquery-1.11.1.min.js )
into a folder and filename (like this: 1.11.1/jquery.min.js ). Then precede that with
ajax.googleapis.com/ajax/libs/jquery/ .
502 | Chapter 21: Introduction to jQuery

An added benefit of using a CDN is that most other websites also
do this, so that jQuery may well already be cached in the user’s
browser, and might not even require re-delivering. With 60 percent
or more of websites using jQuery, this can be a lot of valuable
bandwidth and time saved.
Always Using the Latest Version
Another advantage of CDNs is that you can choose  to always use the latest version of
jQuery, so that you can save a web page and forget all about ever having to update it
for a newer release.
To include the latest version (of release 1.x) from the jQuery or Google CDNs, use
one of the following forms of the <script>  tag:
<script src='http://code.jquery.com/jquery-latest.min.js'></script>
<script src='http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js'></script>
Be careful if you do this, though, because something on your web page could possibly
break with a future update, so be prepared to consider this possibility if any web
pages start to misbehave.
It’s worth knowing that both the jQuery and Google CDNs support
accessing the jQuery files by either HTTP or HTTPS, using
http://  or https://  prefixes. In the examples for this chapter
(available to download at lpmj.net), though, I have opted to down‐
load and serve up jQuery locally so that you can test all the exam‐
ple files, even if you are offline on a train or plane, for example.
Customizing jQuery
If it’s absolutely critical that you must keep the amount of data downloaded by a web
page to the minimum, then you may still be able to use jQuery by making a special
build of it that includes only the features your website will be using. Y ou won’t be able
to rely on a CDN to deliver it, though, but in this circumstance you probably weren’t
planning on using one anyway.
To create your own custom build of jQuery, visit projects.jga.me/jquery-builder  and
simply check the boxes you want and uncheck those that you don’t. The bespoke ver‐
sion of jQuery will then be loaded into a separate tab or window, from where you can
copy and paste it as required.
jQuery Syntax
The most striking thing about jQuery to people who are new to it is the $ symbol,
which acts as the jQuery factory method. It was chosen because the symbol is legal in
jQuery Syntax | 503

JavaScript, is short, and is different from customary variable, object, or function/
method names.
It takes the place of making a call to the jQuery  function (which you can also do if
you wish). The idea is to keep your code short and sweet, and to save on unnecessary
extra typing each time you access jQuery. It also immediately shows other developers
new to your code that jQuery (or a similar library) is in use.
A Simple Example
At its simplest, you access jQuery by typing a $ symbol, followed by a selector in
parentheses, and then a period and a method to apply to the selected element(s).
For example, to change the font family of all paragraphs to monospace, you could use
this statement:
$('p').css('font-family', 'monospace')
Or to add a border to a <code>  element, you could use this:
$('code').css('border', '1px solid #aaa')
Let’s look at that as part of a complete example (see Example 21-1 , where the jQuery
parts are highlighted in bold):
Example 21-1. A simple jQuery example
<!DOCTYPE html>
<html>
  <head>
    <title>First jQuery Example</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    The jQuery library uses either the <code>$()</code>
      or <code>jQuery()</code> function names.
    <script>
      $('code').css('border', '1px solid #aaa')
    </script>
  </body>
</html>
When you load this example into a browser, the result will be similar to Figure 21-1 .
Of course, this particular instruction simply replicates what you can do with normal
CSS, but the idea is to illustrate jQuery syntax, so I’m keeping things simple, for now.
504 | Chapter 21: Introduction to jQuery

Another way of issuing this command is by calling the jQuery
function (which works in the same way as $), like this:
jQuery('code').css('border', '1px solid #aaa')
Figure 21-1. Modifying elements with jQuery
Avoiding Library Conflict
If you use other libraries alongside jQuery, you may find that they define their own $
function. To resolve this issue, you can call the noConflict  method on the symbol,
which releases control so that the other library can take over, like this:
$.noConflict()
Once you do this, to access jQuery thereafter, you must call the jQuery  function. Or,
you can replace use of the $ symbol with an object name of your choice, like this:
jq = $.noConflict()
Now you can use the keyword jq, wherever you had previously used $.
To distinguish and keep track of jQuery objects separately from
standard element objects, some developers prefix a $ to the front of
any object created with jQuery (so that they end up looking like
PHP variables!).
Selectors
Now that you’ve seen how easy it is to include jQuery in a web page and access its
features, let’s move on to looking at its selectors, which (I’m sure you’ll be pleased to
learn) work in exactly the same way as CSS. In fact, it’s at the heart of how most of
jQuery operates.
All you have to do is think about how you would style one or more elements using
CSS, and then you can use the same selector(s) to apply jQuery operations on these
selected elements. This means you can make use of element selectors, ID selectors,
class selectors, and any combinations.
Selectors | 505

The css Method
To explain jQuery’s use of selectors, let’s first look at one of the more fundamental
jQuery methods, css, with which you can dynamically alter any CSS property. It takes
two arguments: the property name to be accessed, and a value to be applied, like this:
css('font-family', 'Arial')
As you will see in the following sections, you cannot use this method on its own,
because you must append it to a jQuery selector, which will select one or more ele‐
ments whose properties should be changed by the method. The following, which sets
the content of all <p> elements to display with full justification, is an example:
$('p').css('text-align', 'justify')
Y ou can also use the css method to return (rather than set) a computed value by sup‐
plying only a property name (and no second argument). In this case, the value of the
first element that matches the selector is returned. For example, the following will
return the text color of the element with the ID of elem , as an rgb method:
color = $('#elem').css('color')
Remember that the value returned is the computed  value. In other words, jQuery will
compute and return the value as used by the browser at the moment the method is
called, not the original value that may have been assigned to the property via a style
sheet or in any other way.
So, if the text color is blue (for example), the value assigned to the variable color  in
the preceding statement will be rgb(0, 0, 255) , even if the color was originally set
using the color name blue , or the hex strings #00f  or #0000ff . This computed value,
though, will always be in a form that can be assigned back to the element (or any
other element) via the second argument of the css method.
Be wary with any computed dimensions returned by this method
because, depending on the current box-sizing  setting (see Chap‐
ter 19 ), they may or may not necessarily be what you expect. When
you need to get or set widths and heights without consideration for
box-sizing , you should use the width  and height  methods (and
their siblings), as described in the section “Modifying Dimensions”
on page 535 .
The Element Selector
To select an element to  be manipulated by jQuery, just list its name within the paren‐
theses following the $ symbol (or jQuery  function name). For example, if you wish to
change the background color of all <blockquote>  elements, you could use a state‐
ment such as the following:
506 | Chapter 21: Introduction to jQuery

$('blockquote').css('background', 'lime')
The ID Selector
Y ou can also refer to elements by their IDs if you place a # character in front of the ID
name. So, to add a border to the element with the ID of advert  (for example), you
could use this:
$('#advert').css('border', '3px dashed red')
The Class Selector
And you can manipulate groups of elements according to the class they use. For
example, to underline all elements that use the class new, you could use this:
$('.new').css('text-decoration', 'underline')
Combining Selectors
Just as with CSS, you may combine selectors into a single jQuery selection using com‐
mas, as with the following example:
$('blockquote, #advert, .new').css('font-weight', 'bold')
Example 21-2  brings all these types of selectors together into a single example (with
the jQuery statements shown in bold), the result of which you can see in Figure 21-2 .
Example 21-2. Using jQuery with different  selectors
<!DOCTYPE html>
<html>
  <head>
    <title>Second jQuery Example</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <blockquote>Powerful and flexible as JavaScript is, with a plethora of
      built-in functions, it is still necessary to use additional code for
      simple things that cannot be achieved natively or with CSS, such as
      animations, event handling, and Ajax.</blockquote>
    <div id='advert'>This is an ad</div>
    <p>This is my <span class='new'>new</span> website</p>
    <script>
      $('blockquote').css('background', 'lime')
      $('#advert').css('border', '3px dashed red')
      $('.new').css('text-decoration', 'underline')
      $('blockquote, #advert, .new').css('font-weight', 'bold')
    </script>
  </body>
</html>
Selectors | 507

Figure 21-2. Manipulating multiple elements
Handling Events
If all jQuery could do was alter CSS styles, it wouldn’t be a great deal of help—but of
course it can do far more than that. So let’s further investigate by seeing how it han‐
dles events.
As you will recall, most events are triggered by user interaction: when a mouse passes
over an element, the mouse button is clicked, or a key is pressed. But there are also
other events that can be triggered, such as when a document completes loading.
With jQuery, it’s a simple matter to attach your own code to these events in a safe way
that doesn’t block other code from also gaining access to these events. For example,
here’s how to get jQuery to respond to an element being clicked:
$('#clickme').click(function()
{
  $('#result').html('You clicked the button!')
})
When the element with the ID of clickme  is clicked, the innerHTML  property of the
element with the ID of result  is updated using the jQuery html  function.
jQuery objects (created with either the $ or jQuery  methods) are
not the same as JavaScript objects created with getElementById . In
plain JavaScript, you can use a statement like object = docu
ment.getElementById('result')  followed by (for example)
object.innerHTML = 'something' . But in the preceding example,
$('#result').innerHTML  would not work, because innerHTML  is
not a property of a jQuery object. Hence the use of the jQuery
method html  to achieve the required result.
508 | Chapter 21: Introduction to jQuery

Example 21-3  fleshes out the idea (which you can see running in Figure 21-3 ).
Example 21-3. Processing an event
<!DOCTYPE html>
<html>
  <head>
    <title>jQuery Events</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <button id='clickme'>Click Me</button>
    <p id='result'>I am a paragraph</p>
    <script>
      $('#clickme').click(function()
      {
        $('#result').html('You clicked the button!')
      })
    </script>
  </body>
</html>
Figure 21-3. Processing a click event
When accessing an event with jQuery, omit the on prefix that you
would use in standard JavaScript. So, for example, the onmouseover
event name becomes the mouseover  function in jQuery, onclick
becomes click , and so on.
Waiting Until the Document Is Ready
Since jQuery is so closely related to the DOM in what it lets you achieve, more often
than not you will need to wait until a web page has loaded before manipulating parts
of it. Without jQuery, this can be achieved with the onload  event,  but there’s a more
efficient, cross-browser jQuery method called ready , which you can call to enable it
at the earliest possible moment, even sooner than onload . This means jQuery can get
Waiting Until the Document Is Ready | 509

working on a page that much more quickly, and un-user-friendly delays are mini‐
mized.
To make use of this feature, place your jQuery code within the following structure:
$('document').ready(function()
{
  // Your code goes here
})
Now the code will wait there until the document is ready, and only then will it be
called by the ready  method. In fact, there’s a shorter version you can use that takes
even less typing, as shown in Example 21-4 .
Example 21-4. The smallest jQuery ‘ready’ code encapsulation function
$(function()
{
  // Your code goes here
})
If you get used to encapsulating your jQuery statements in one of these two struc‐
tures, you won’t encounter the types of errors that can be generated by trying to
access the DOM too soon.
Alternatively, another approach is to always place your JavaScript at
the end of every HTML page, so that it is executed only after the
entire document has loaded. There is a secondary advantage too, in
that this ensures the web page contents gets priority with loading—
and so you may well see improvements in user experience.
The only time end-of-page scripts may not be a good idea is if a
document could appear to be ready when it isn’t, or if all external
style sheets have not yet loaded (which can really be identified only
by testing), causing users to think they can interact with it before
your script is ready. In such cases, implement the ready  function
and all will be well. In fact, if in doubt, place your script at the page
end and use the ready  function and you’ll get the best of both
worlds.
Event Functions and Properties
Y ou’ve just seen the ready  event method, but there are several dozen jQuery event
methods and associated properties you can access (far too many to detail here). How‐
ever, the following are some of the more commonly used and they’ll get you started
for most projects. For a comprehensive summary of all available events, though,
please check out api.jquery.com/category/events .
510 | Chapter 21: Introduction to jQuery

The blur and focus Events
The blur  event triggers when focus is removed from an element, causing it to blur,
and is a good partner for the focus  event. Both can be used to add a handler to the
event, or they will trigger the event if you omit any arguments from the method’s
parentheses.
In Example 21-5 , there are four input fields, and the first is given immediate focus
with a quick call to the focus  method, applying it to the element with the ID of
first . Then a pair of handlers are added to all input  elements. The focus  handler
sets their background to yellow when focus is given, and the blur  handler sets their
background to light gray when focus is removed (or blurred).
Example 21-5. Using the focus and blur events
<!DOCTYPE html>
<html>
  <head>
    <title>Events: blur</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <h2>Click in and out of these fields</h2>
    <input id='first'> <input> <input> <input>
    <script>
      $('#first').focus()
      $('input').focus(function() { $(this).css('background', '#ff0') } )
      $('input') .blur(function() { $(this).css('background', '#aaa') } )
    </script>
  </body>
</html>
Y ou are allowed to include whitespace characters between the clos‐
ing parenthesis of a method, and the period operator used to attach
another method to it (and even after the period too if you like), as
in the previous example where I have right-aligned the focus  and
blur  event names under each other, to help the rest of the state‐
ments also line up in columns.
In Figure 21-4 , you can see how this code gives any input fields that have ever had
focus a light gray background color. If one currently has focus, its background color is
set to yellow, while unvisited fields remain with a white background color.
Event Functions and Properties | 511

Figure 21-4. Attaching to blur and focus events
The this Keyword
This example also serves to illustrate the use of the this  keyword. When an event is
called, the element on which it was triggered is passed in the object this , which can
then be given to the $ method for processing. Or, since this  is a standard JavaScript
object (and not a jQuery object), it can be used as such. So, if you prefer, you could
replace this:
$(this).css('background', '#ff0')
with this:
this.style.background = '#ff0'
The click and dblclick Events
Y ou saw the click  event a little earlier, but there’s an event for handling double-clicks
too. To use either, attach the event’s method to a jQuery selection, and for its argu‐
ment place a jQuery method to invoke when the event triggers, like this:
$('.myclass')   .click( function() { $(this).slideUp() })
$('.myclass').dblclick( function() { $(this).hide()    })
Here I have opted to use in-line anonymous functions, but you can use named ones
instead if you like (but remember to supply only the name of the function without
parentheses, or it will be called at the wrong time). The this  object will pass through
as expected and be made available to the named function, like this:
$('.myclass').click(doslide)
function doslide()
{
  $(this).slideUp()
}
The slideUp  and hide  methods are detailed in the section,  “Special Effects” on page
521. For now, though, just try running Example 21-6 , and either click or double-click
512 | Chapter 21: Introduction to jQuery

the buttons to see how some disappear with an animation (using slideUp ), and some
just vanish (using hide ), as shown in Figure 21-5 .
Example 21-6. Attaching to the click and dblclick events
<!DOCTYPE html>
<html>
  <head>
    <title>Events: click & dblclick</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <h2>Click and double click the buttons</h2>
    <button class='myclass'>Button 1</button>
    <button class='myclass'>Button 2</button>
    <button class='myclass'>Button 3</button>
    <button class='myclass'>Button 4</button>
    <button class='myclass'>Button 5</button>
    <script>
      $('.myclass').click(    function() { $(this).slideUp() })
      $('.myclass').dblclick( function() { $(this).hide()    })
    </script>
  </body>
</html>
Figure 21-5. Button 3 has been clicked once and is sliding up
The keypress Event
From time to time, you need better control over user keyboard interaction, particu‐
larly when processing complex forms or when writing games. For cases such as these,
you can use the keypress  method,  which can be attached to anything that accepts
keyboard input, such as an input field, or even the document itself.
In Example 21-7 , the method has been attached to the document in order to intercept
all key presses, and the result of running it can be seen in Figure 21-6 .
Event Functions and Properties | 513

Example 21-7. Intercepting key presses
<!DOCTYPE html>
<html>
  <head>
    <title>Events: keypress</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <h2>Press some keys</h2>
    <div id='result'></div>
    <script>
      $(document).keypress(function(event)
      {
        key = String.fromCharCode(event.which)
        if (key >= 'a' && key <= 'z' ||
            key >= 'A' && key <= 'Z' ||
            key >= '0' && key <= '9')
        {
          $('#result').html('You pressed: ' + key)
          event.preventDefault()
        }
      })
    </script>
  </body>
</html>
Figure 21-6. Processing key presses from the keyboard
There are a few things of note in this example that you will need to bear in mind
when writing your own keyboard handlers. For example, because browsers return
differing values for this event, the which  property of the event  object is normalized
by jQuery to return the same character codes across all browsers. So this is where to
look for which key was pressed.
Being a character code, though, the value in which  is a number, which you can turn
into a single letter string by passing it through String.fromCharCode . Y ou don’t have
514 | Chapter 21: Introduction to jQuery

to do this because you can easily respond to ASCII values in your code. But this
method is useful when you need to work with characters.
When a key press is recognized, a simple statement to that effect is inserted into the
innerHTML  property of the div element with the ID of result .
This is a good example of where the document.write  function
should not be used, because the document will have already fully
loaded by the time the user presses a key. If document.write  were
called to display the information at this time, it would erase the
current document. So this is where writing into the HTML of an
element is the perfect, nondestructive means of supplying user
feedback, as explained in “ About document.write” on page 328 in
Chapter 13 .
Considerate Programming
When you are anticipating user input, you should decide which values you will
respond to, and then ignore all others, just in case another event handler needs access
to them. This is considerate practice for any other utilities (and the main browser
itself) that may also be running. For example, in the preceding example I have chosen
to accept only the characters a–z, A–Z and 0–9, ignoring all others.
There are two ways you can pass keyboard interrupts onto (or deny them from) other
handlers. First, do nothing, and when your code exits, other handlers will also see and
be able to react to the same key presses. This can cause confusion, though, if multiple
actions occur from a single key press.
Alternatively, when you don’t want the event to trigger any other handlers, you can
make a call to the preventDefault  method of event , which then keeps the event
from “bubbling” up to other handlers.
Be careful where you place your call to preventDefault  because if
it’s outside the part of code in which you process the key presses,
then it will prevent all other keyboard events from bubbling, and
you may lock the user out of the browser (or at least out of using
certain features).
The mousemove Event
Some of the most commonly intercepted events are for mouse handling.  I’ve already
covered mouse button clicks, but now let’s take a look at attaching to mouse move‐
ment events.
Event Functions and Properties | 515

It’s time, I think, for a slightly more interesting example, so in Example 21-8  I have
put together a rudimentary drawing program using jQuery in conjunction with an
HTML5 canvas. Although the canvas is not fully explained until Chapter 23 , don’t
worry because the code is very simple.
Example 21-8. Intercepting mouse movement and mouse key events
<!DOCTYPE html>
<html>
  <head>
    <title>Events: Mouse Handling</title>
    <script src='jquery-1.11.1.min.js'></script>
    <style>
      #pad {
        background:#def;
        border    :1px solid #aaa;
      }
    </style>
  </head>
  <body>
    <canvas id='pad' width='480' height='320'></canvas>
    <script>
      canvas  = $('#pad')[0]
      context = canvas.getContext("2d")
      pendown = false
      $('#pad').mousemove(function(event)
      {
        var xpos = event.pageX - canvas.offsetLeft
        var ypos = event.pageY - canvas.offsetTop
        if (pendown) context.lineTo(xpos, ypos)
        else         context.moveTo(xpos, ypos)
        context.stroke()
      })
      $('#pad').mousedown(function() { pendown = true  } )
      $('#pad')  .mouseup(function() { pendown = false } )
    </script>
  </body>
</html>
In Figure 21-7 , you can see how this very simple set of instructions can be used to
create line drawings (well, if you have artistic ability, that is :). Here’s how it works.
First, a canvas  object is created by referencing the first (or zeroth) element of the
jQuery selector, like this:
canvas = $('#pad')[0]
516 | Chapter 21: Introduction to jQuery

Figure 21-7. Capturing mouse movement and mouse key events
This is one way you can quickly take a jQuery object and extract a standard JavaScript
element object. Another would be to use the get method, like this:
canvas  = $('#pad').get(0)
The two are interchangeable with each other, but get has the edge because, without
any argument passed, it will return all the element node objects from a jQuery object
as an array.
Anyway, as you’ll learn in Chapter 23 , the canvas will be written to using a special
context  object, which is now created:
context = canvas.getContext("2d")
There’s one more thing to initialize, which is to create a Boolean variable called pen
down  to track the status of the mouse button (initially false  because the pen is up):
pendown = false
After this, the canvas (with the ID of pad) has its mousemove  event intercepted by the
anonymous function shown following, within which three sets of things happen:
$('#pad').mousemove(function(event)
{
  ...
})
First, the xpos  and ypos  local variables (local because of the var keywords) are
assigned values representing the position of the mouse within the canvas area.
Event Functions and Properties | 517

These values are taken from the jQuery properties pageX  and pageY , which refer to
the mouse pointer’s offset from the top lefthand corner of the containing document.
Therefore, since the canvas is itself offset slightly from that location, the canvas  offset
values (in offsetLeft  and offsetTop ) are subtracted from both pageX  and pageY :
var xpos = event.pageX - canvas.offsetLeft
var ypos = event.pageY - canvas.offsetTop
Now that we know where the mouse pointer is in relation to the canvas, the next pair
of lines test the value of pendown . If it is true , then the mouse button is being pressed,
and so a lineTo  call is made to draw a line to the current location. Otherwise, the pen
is up, and so moveTo  is called to simply update the current location:
if (pendown) context.lineTo(xpos, ypos)
else         context.moveTo(xpos, ypos)
Then, the stroke  method is called to apply whichever drawing command was just
made to the canvas. These five lines are all that is responsible for handling the draw‐
ing, but it’s still necessary to track the mouse button state, and so the final two lines of
code intercept the mousedown  and mouseup  events, setting pendown  to true  when the
mouse button is pressed, and false  when it’s released:
$('#pad').mousedown(function() { pendown = true  } )
$('#pad')  .mouseup(function() { pendown = false } )
In this example, you see the combination of three different event handlers working
together to create a simple utility, using both local variables for internal expressions,
and global variables where an object or the state of something must be made available
across multiple functions.
Other Mouse Events
The mouseenter  and mouseleave  events  trigger whenever the mouse passes into an
element or leaves it. No position values are supplied because you are simply assumed
to want to make a Boolean decision about what to do regarding these events.
In Example 21-9 , a pair of anonymous functions are attached to these events, altering
the HTML of an element accordingly, as shown in Figure 21-8 .
Example 21-9. Detecting the mouse entering and leaving an element
<!DOCTYPE html>
<html>
  <head>
    <title>Events: Further Mouse Handling</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <h2 id='test'>Pass the mouse over me</h2>
518 | Chapter 21: Introduction to jQuery

<script>
      $('#test').mouseenter(function() { $(this).html('Hey, stop tickling!') } )
      $('#test').mouseleave(function() { $(this).html('Where did you go?')   } )
    </script>
  </body>
</html>
Figure 21-8. Detecting when the mouse enters and leaves an element
When the mouse enters the bounds of the selected element, that element’s innerHTML
property is updated (with a call to html ). Then when the mouse leaves again, a further
update is made to the element’s HTML.
Alternative Mouse Methods
A number of other jQuery mouse event functions  are available to cover a wide range
of circumstances, all of which are detailed at api.jquery.com/category/events/mouse-
events .
For example, you can use the following alternative mouseover  and mouseout  methods
to achieve similar results:
$('#test').mouseover(function() { $(this).html('Cut it out!')         } )
$('#test') .mouseout(function() { $(this).html('Try it this time...') } )
Or you could use the hover  method to bind two handlers with a single function call,
like this:
$('#test').hover(function() { $(this).html('Cut it out!')         },
                 function() { $(this).html('Try it this time...') } )
If you are planning on creating mouseover  and mouseout  combined effects, clearly the
hover  method is the logical function to choose, but there’s also another way you can
achieve the same result, which is chaining (explained later on in the section “Method
chaining” on page 529 ), using code like this:
$('#test').mouseover(function() { $(this).html('Cut it out!')         } )
           .mouseout(function() { $(this).html('Try it this time...') } )
Here the period operator at the start of the second statement attaches it to the first, so
that it creates a chain of methods.
Event Functions and Properties | 519

The preceding examples show how to capture mouse click, mouse
movement, and keyboard events, and therefore they are mostly
suitable for desktop environments—which is what jQuery is pri‐
marily targeted at. However, there is a  version of jQuery for mobile
devices that provides all the touch-handling event control you
could wish for (and much more), available at jquerymobile.com .
The submit Event
When a form is submitted, you may often want to perform some error checking on
the data entered, before it gets submitted to the server. One way to do this is to inter‐
cept the submit  event of the form as in Example 21-10 . Figure 21-9  shows the result
of loading this document and then submitting the form with one or more fields left
empty:
Example 21-10. Intercepting the submit event of a form
<!DOCTYPE html>
<html>
  <head>
    <title>Events: submit</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <form id='form'>
      First name: <input id='fname' type='text' name='fname'><br>
      Last name:  <input id='lname' type='text' name='lname'><br>
      <input type='submit'>
    </form>
    <script>
      $('#form').submit(function()
      {
        if ($('#fname').val() == '' ||
            $('#lname').val() == '')
        {
          alert('Please enter both names')
          return false
        }
      })
    </script>
  </body>
</html>
520 | Chapter 21: Introduction to jQuery

Figure 21-9. Checking user input upon submission
The key parts of this example are where the event is attached to an anonymous func‐
tion, like this:
$('#form').submit(function()
And where the values of the two input fields are tested for being empty:
if ($('#fname').val() == '' ||
    $('#lname').val() == '')
Here the jQuery val method is used to retrieve the value in the value  property of
each field. This is neater than using $('#fname')[0]  (as in Example 21-8 ) to get
access to the DOM object, and then appending value  to it to read the field’s value,
like this: $('#fname')[0].value .
In this example, by returning the value false  if one or more fields is empty, the nor‐
mal submission process is cancelled. To enable the submission to proceed, you can
return true , or just not return anything.
Special Effects
jQuery really begins  to come into its own when processing special effects. Although
you can use CSS3 transitions, they are not so easy to manage dynamically from Java‐
Script, but with jQuery it really is as simple as selecting one or more elements and
then applying one or more effects to them.
The core effects available are hiding and showing, fading in and out, sliding, and ani‐
mations, and these can be used singly, together in synchronization, or in sequence.
They also support the use of  callbacks, which are functions or methods that get called
only once an operation has completed.
Special Effects  | 521

The following section lists some of the more useful jQuery effects, each of which sup‐
ports up to three arguments, as follows:
No Arguments
When no arguments are given, the method is called immediately without being
placed in the animation queue.
Duration
When a duration value is supplied, the effect will take place over the assigned time,
which can be a value in milliseconds, or the strings fast  or slow .
Easing
There are only two easing options in the jQuery library, swing  and linear . The
default is swing  and it gives a more natural effect than linear . For more easing
options, you can check out plug-ins like the jQuery UI easing options at jquer
yui.com/easing .
Callback
If you supply a callback function, it will be called after the effect method completes.
So, for example, you can call the hide  method in a variety of ways, such as these:
$('#object').hide()
$('#object').hide(1000)
$('#object').hide('fast')
$('#object').hide('linear')
$('#object').hide('slow', 'linear')
$('#object').hide(myfunction)
$('#object').hide(333, myfunction)
$('#object').hide(200, 'linear', function() { alert('Finished!') } )
As you’ll see in the section “Method chaining” on page 529, you can attach function
calls (that supply arguments) to each other and they will then be animated in turn,
like the following, which will hide and then reveal an element:
$('#object').hide(1000).show(1000)
Other less commonly used arguments are also supported by many of these methods,
and you can get full details on them (and all the other supported effects methods) by
visiting api.jquery.com/category/effects .
Hiding and Showing
Probably the simplest effect is to hide and show elements in response to user interac‐
tion. As shown in the previous section, you can provide no, or a variety of arguments
to the hide  and show  methods and, by default, when none are supplied, the result is
just like instantly hiding or revealing an element.
The way these two methods work when arguments are supplied is to modify the
width , height , and opacity  properties of an element simultaneously, until they reach
522 | Chapter 21: Introduction to jQuery

0 for hide , or reach their original values for show . When hiding, the display  property
of the element is set to none  when fully hidden, and after calling show , its previous
value is reassigned once the element is fully restored.
Example 21-11  lets you try hide  and show  for yourself (as shown in Figure 21-10 ).
Example 21-11. Hiding and showing an element
<!DOCTYPE html>
<html>
  <head>
    <title>Effects: hide & show</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <button id='hide'>Hide</button>
    <button id='show'>Show</button>
    <p id='text'>Click the Hide and Show buttons</p>
    <script>
      $('#hide').click(function() { $('#text').hide('slow', 'linear') })
      $('#show').click(function() { $('#text').show('slow', 'linear') })
    </script>
  </body>
</html>
Figure 21-10. The element is in the process of being revealed
The toggle Method
As an alternative to calling both the hide  and show  methods, you  can use the toggle
method instead, which enables you to replace the previous example with
Example 21-12 .
Example 21-12. Using the toggle method
<!DOCTYPE html>
<html>
  <head>
    <title>Effects: toggle</title>
Special Effects  | 523

<script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <button id='toggle'>Toggle</button>
    <p id='text'>Click the Toggle button</p>
    <script>
      $('#toggle').click(function() { $('#text').toggle('slow', 'linear') })
    </script>
  </body>
</html>
The toggle  method takes the same arguments as hide  and show  but keeps internal
track of the state of the element so that it knows whether to hide or show it.
There are four main jQuery methods that set either one state or
another, and which offer toggling versions to simplify coding. In
addition to toggle , there’s fadeToggle , slideToggle , and toggle
Class , all described in this chapter.
Fading In and Out
There are four methods for  managing fades: fadeIn , fadeOut , fadeToggle , and
fadeTo . Y ou should be getting  the idea of how jQuery works by now, and realize that
the first three are similar to show , hide , and toggle . The last one, though, is a little
different in that it lets you specify an opacity value to which an element (or elements)
should be faded, between 0 and 1.
Example 21-13  provides four buttons with which to try out each of these methods, as
shown in Figure 21-11 .
Example 21-13. The four fade methods
<!DOCTYPE html>
<html>
  <head>
    <title>Effects: Fading</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <button id='fadeout'>fadeOut</button>
    <button id='fadein'>fadeIn</button>
    <button id='fadetoggle'>fadeToggle</button>
    <button id='fadeto'>fadeTo</button>
    <p id='text'>Click the buttons above</p>
    <script>
      $('#fadeout')   .click(function() { $('#text').fadeOut(   'slow'     ) })
      $('#fadein')    .click(function() { $('#text').fadeIn(    'slow'     ) })
      $('#fadetoggle').click(function() { $('#text').fadeToggle('slow'     ) })
524 | Chapter 21: Introduction to jQuery

$('#fadeto')    .click(function() { $('#text').fadeTo(    'slow', 0.5) })
    </script>
  </body>
</html>
Figure 21-11. The text has been faded to 50 percent opacity
Sliding Elements Up and Down
Another way to make elements disappear and reappear is to alter their height over
time to make them appear to slide up and down. There are three methods available to
do this: slideDown , slideUp , and slideToggle . They work in a similar way to the
previous functions, as coded in Example 21-14 , and shown in Figure 21-12 .
Example 21-14. Using the slide methods
<!DOCTYPE html>
<html>
  <head>
    <title>Effects: Sliding</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <button id='slideup'>slideUp</button>
    <button id='slidedown'>slideDown</button>
    <button id='slidetoggle'>slideToggle</button>
    <div id='para' style='background:#def'>
      <h2>From A Tale of Two Cities - By Charles Dickens</h2>
      <p>It was the best of times, it was the worst of times, it was the age of
      wisdom, it was the age of foolishness, it was the epoch of belief, it was
      the epoch of incredulity, it was the season of Light, it was the season of
      Darkness, it was the spring of hope, it was the winter of despair, we had
      everything before us, we had nothing before us, we were all going direct to
      Heaven, we were all going direct the other way - in short, the period was so
      far like the present period, that some of its noisiest authorities insisted
      on its being received, for good or for evil, in the superlative degree of
      comparison only</p>
    </div>
    <script>
      $('#slideup')    .click(function() { $('#para').slideUp(    'slow') })
Special Effects  | 525

$('#slidedown')  .click(function() { $('#para').slideDown(  'slow') })
      $('#slidetoggle').click(function() { $('#para').slideToggle('slow') })
    </script>
  </body>
</html>
Figure 21-12. The paragraph is sliding up
These methods work well when you have menus and submenus that you want to
open up or close dynamically, according to the sections clicked by the user.
Animations
Now we can really start to have some fun by actually moving elements around in the
browser. To do this, though, because the default value of static  will not allow them
to move, you must remember to first give your elements’ position  properties, values
of relative , fixed , or absolute .
To animate an element, all you do is supply a list  of CSS properties (excluding colors)
to the animate  method.  Unlike the previous effects methods, animate requires this
list of properties first, and then you can supply any duration, easing, and callback
arguments you need.
So, for example, to animate a bouncing ball, you could use code such as
Example 21-15  (which displays like Figure 21-13 ).
526 | Chapter 21: Introduction to jQuery

Example 21-15. Creating a bouncing ball animation
<!DOCTYPE html>
<html>
  <head>
    <title>Effects: Animation</title>
    <script src='jquery-1.11.1.min.js'></script>
    <style>
      #ball {
        position  :relative;
      }
      #box {
        width     :640px;
        height    :480px;
        background:green;
        border    :1px solid #444;
      }
    </style>
  </head>
  <body>
    <div id='box'>
      <img id='ball' src='ball.png'>
    </div>
    <script>
      bounce()
      function bounce()
      {
        $('#ball')
          .animate( { left:'270px', top :'380px' }, 'slow', 'linear')
          .animate( { left:'540px', top :'190px' }, 'slow', 'linear')
          .animate( { left:'270px', top :'0px'   }, 'slow', 'linear')
          .animate( { left:'0px',   top :'190px' }, 'slow', 'linear')
      }
    </script>
  </body>
</html>
Special Effects  | 527

Figure 21-13. The ball is bouncing around in the browser
In the <style>  section of this example, the position  property  of the ball is set rela‐
tive to its container,  which is a <div>  element that has been given a border and green
background.
Then the <script>  section features a function called bounce , in which there are four
calls to animate  placed one after the other.
Notice how the names of the properties to animate are supplied without quotation
marks and are separated from the values to which they should be changed with
colons—in other words, in the form of associative arrays.
Y ou can also supply relative values in place of absolute ones by using the += and -=
operators.  So, for example, the following will animate the ball to the right and up by
50 pixels relative to its current position:
.animate( { left:' +=50px', top:' -=50px' }, 'slow', 'linear')
And you can even use the string values of hide , show , and toggle  to update a prop‐
erty, like this:
528 | Chapter 21: Introduction to jQuery

.animate( { height:' hide', width:' toggle' }, 'slow', 'linear')
If you wish to modify any hyphenated CSS properties and they’re
not being passed within quotation marks (as with height  and
width  in this example), you must convert their names to camelCase
first, by removing the hyphens and capitalizing the letter following.
For example, to animate the left-margin  property of an element,
you would supply the name of leftMargin . However, when supply‐
ing a hyphenated property name within a string (for example:
css('font-weight', 'bold') , you shouldn’t convert it to camel‐
Case.
Method chaining
Because of the way that method chaining works, when jQuery methods have been
given arguments, they will run sequentially. So each of these methods is called only
after the previous one has finished animating. Any methods you call without argu‐
ments, however, will run immediately and quickly, without animation.
When you load this example into a web browser, the animation is kicked off (so to
speak) with a single call to bounce , causing the ball to bounce off the bottom, right,
and top edges of its container, and then come to rest back at the middle of the left-
hand edge.
Using callbacks
As it stands, the preceding example stops after four animations, but you can use a
callback function to make the animation start over again every time it completes.
This is why I chose to place the animation in a named function.
Y ou see, now that the animation is in a function named bounce , it is only necessary to
add that name as a callback to the fourth animation in the group in order to make the
animation repeat forever, as shown in bold here:
.animate( { left:'0px', top :'190px' }, 'slow', 'linear' , bounce )
Using the animate  method,  you can animate many CSS properties with the notable
exception of colors. However, even color animation is possible with the addition of
the jQuery UI add-in, which adds the facility to create very eye-pleasing color-
changing effects (plus many more goodies). Please refer to jqueryui.com  for details.
Stopping Animations
There are several methods available for cutting off animations midway through, or
ending a chain of animations. For example, with clearQueue  you can empty all stored
animations that are queued up, with stop  you can immediately stop any animation
Special Effects  | 529

currently in progress, or the finish  method will stop the currently running anima‐
tion, and remove any that are queued.
So let’s turn the previous example into a sort of game by making the ball clickable,
such that when the click event triggers, the animation will cease. To do this, all that’s
required is to add the following single line of code underneath the bounce  function:
$('#ball').click(function() { $(this).finish() })
If you successfully manage to click the ball, the finish  method will stop the current
animation, empty the queue, and ignore any callbacks—in other words, the ball will
come to rest.
For more information on managing jQuery queues, check out api.jquery.com/queue ,
where you’ll also learn how to directly manipulate the contents of queues to get
exactly the effects you need.
Manipulating the DOM
Because  jQuery  is so tightly linked with the DOM, of necessity  the examples in this
chapter have already utilized some of its DOM-accessing methods, such as html  and
val. But let’s now look at all the DOM methods in detail to discover exactly what you
can get access to with jQuery, and how.
In Example 21-3 , you saw how to use the html  method  to change the innerHTML
property of an element. This method can be used either to set the HTML or retrieve it
from an HTML document. Example 21-16  (with the jQuery highlighted in bold)
shows how to retrieve the HTML content of an element (as shown in Figure 21-14 ).
Example 21-16. Displaying the HTML of an element using an alert window
<!DOCTYPE html>
<html>
  <head>
    <title>The DOM: html & text</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <h2>Example Document</h2>
    <p id='intro'>This is an example document</p>
    <script>
      alert( $('#intro').html() )
    </script>
  </body>
</html>
530 | Chapter 21: Introduction to jQuery

Figure 21-14. Retrieving and displaying the HTML of an element
When you omit any argument from a call to this method the result is to read rather
than set the HTML of the element.
The Difference  Between The text and html Methods
When you are working with XML documents, you cannot use the html  method
because it simply won’t work (it’s designed for use only with HTML). But you can use
the text  method to achieve a similar result (in XML or HTML documents), like this:
text = $('#intro').text()
The difference between the two is quite simply that html  treats the content as HTML
and text  treats it as text. So, for example, let’s assume you wish to assign the follow‐
ing string to an element:
<a href='http://google.com'>Visit Google</a>
If you assign it to an HTML element using the html  method, the DOM will be upda‐
ted with the new <a> element and the link will become clickable. But if you do so to
either an XML or HTML document using the text  method, then that string will first
be escaped into text (for example, by converting HTML characters such as < into the
&lt;  entity, and so on), and then inserted into the element—no element is added to
the DOM.
The val and attr Methods
There are a couple more methods for interacting with the content of elements. First,
you can set and get the value of an input element with the val method, as illustrated
in Example 21-10 , in which the first and last name fields are read. To set a value, sim‐
ply provide it as an argument to the method, like this:
$('#password').val('mypass123')
Manipulating the DOM | 531

With the attr  method,  you can get and set the attributes of elements, as shown in
Example 21-17 , in which a link to the Google website has been completely replaced
with one to Y ahoo!
Example 21-17. Modifying attributes with the attr method
<!DOCTYPE html>
<html>
  <head>
    <title>The DOM: attr</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <h2>Example Document</h2>
    <p><a id='link' href='http://google.com' title='Google'>Visit Google</a></p>
    <script>
      $('#link').text('Visit Yahoo!')
      $('#link').attr( { href :'http://yahoo.com', title:'Yahoo!' } )
      alert('The new HTML is:\n' + $('p').html())
    </script>
  </body>
</html>
The first jQuery statement uses the text  method to change the text inside the <a>
element, and the second one changes the href  and title  attribute values to match,
by supplying the data in the form of an associative array. The third statement displays
the changed element contents in an alert  window, by first retrieving it with the html
method, as shown in Figure 21-15 .
Figure 21-15. The link has now been completely modified
Y ou can also read the value of an attribute like this:
url = $('#link').attr('href')
532 | Chapter 21: Introduction to jQuery

Adding and Removing Elements
While it is possible to insert elements into the DOM using the html  method, this is
suitable only for creating child elements of a particular element. Therefore, jQuery
provides a number of methods for manipulating any part of the DOM.
These methods are append , prepend , after , before , remove , and empty , and  an
example of each is included in Example 21-18 .
Example 21-18. Adding and removing elements
<!DOCTYPE html>
<html>
  <head>
    <title>Modifying The DOM</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <h2>Example Document</h2>
    <a href='http://google.com' title='Google'>Visit Google</a>
    <code>
      This is a code section
    </code>
    <p>
      <button id='a'>Remove the image</button>
      <button id='b'>Empty the quote</button>
    </p>
    <img id='ball' src='ball.png'>
    <blockquote id='quote' style='border:1px dotted #444; height:20px;'>
      test
    </blockquote>
    <script>
      $('a').prepend('Link: ')
      $("[href^='http']").append(" <img src='link.png'>")
      $('code').before('<hr>').after('<hr>')
      $('#a').click(function() { $('#ball').remove() } )
      $('#b').click(function() { $('#quote').empty() } )
    </script>
  </body>
</html>
In Figure 21-16 , you can see the result of applying the prepend , append , before , and
after  methods to some elements.
Manipulating the DOM | 533

Figure 21-16. A document with a variety of different  elements
The prepend  method has been  used to insert the string Link:  before the inner text or
HTML of all <a> elements, like this:
$('a').prepend('Link: ')
Then an attribute selector is used to select all elements that have an href  attribute
starting with http . The string http  denotes links that are not relative (and therefore
are absolute), in which case an external link icon is appended to the end of the inner
text or HTML of all matching elements, like this:
$("[href^='http']").append(" <img src='link.png'>")
The ^= operator  is how only the start of the string is matched. If
just the = operator were used, only entire strings that matched
would be selected. CSS selectors are covered in detail in Chapter 18
and Chapter 19 .
Next, using chained methods, the before  and after  methods are employed to place
sibling elements either before or after another one. In this instance, I have chosen to
place an <hr>  element both before and after <code>  elements, like this:
$('code').before('<hr>').after('<hr>')
534 | Chapter 21: Introduction to jQuery

Then I added a little user-interaction with a couple of buttons. When clicked, using
the remove  method, the first button removes the <img>  element containing the ball,
like this:
$('#a').click(function() { $('#ball').remove() } )
The image is now no longer in the DOM, which you can verify if
you highlight the browser contents, right-click it, and use Inspect
Element in most major desktop browsers, or press F12 in Internet
Explorer.
Finally, the empty  method  is applied to the <blockquote>  element when the second
button is clicked, which simply empties out the element’s contents, but leaves the ele‐
ment in the DOM, like this:
$('#b').click(function() { $('#quote').empty() } )
Dynamically Applying Classes
Sometimes it can be convenient to change the class an element employs, or maybe
just add a class to an element or remove it from one. For example, suppose you have a
class called read  that you use to style blog posts that have been read. Using the add
Class  method, it’s a simple matter to add a class to that post, like this:
$('#post23').addClass('read')
Y ou can add more than one class at a time by separating them with spaces, like this:
$('#post23').addClass('read liked')
But what if a reader chooses to mark a post as unread again, perhaps to be reminded
to read it again later? In this case, all you need to do is use removeClass , like this:
$('#post23').removeClass('read')
All other classes that the post uses remain unaffected when you do this.
Where you are supporting the ability of a class to be continuously added or removed,
you might, however, find it simpler to use the toggleClass  method, like this:
$('#post23').toggleClass('read')
Now, if the post doesn’t use the class, it is added; otherwise, it is removed.
Modifying Dimensions
Working with dimensions is always a tricky web development task because different
browsers tend to utilize slightly differing values. One of jQuery’s big strengths,
Dynamically Applying Classes | 535

though, is that it does a great job of normalizing these types of values, so that your
pages will look how you intend them to appear in all major browsers.
There are three types of dimensions: element width and height, inner width and
height, and outer width and height. Let’s look at these in turn.
The width and height Methods
Both the width  and height  methods can get the width or height of the first element
that matches a selector, or set the width or height of all matching elements. For exam‐
ple, to get the width of an element with the ID of elem , you could use this statement:
width = $('#elem').width()
The value returned to the variable width  is a numeric value, which is different than
returning the CSS value from a call to the css method,  such as the following, which
would return (for example) 230px , rather than just the number 230.
width = $('#elem').css('width')
Y ou can also obtain the width of either the current window or the document, like this:
width = $(window).width()
width = $(document).width()
When you pass the window  or document  objects to jQuery, you can‐
not fetch their width or height with the css method. Instead you
must use the width  or height  methods.
The value returned is independent of the box-sizing  setting (see Chapter 19 ). If you
need to take box-sizing  into account, use the css method with an argument of
width  instead, like this (but remember to remove the px that will be added after the
numeric part if you intend to work with the values returned):
width = $('#elem').css('width')
Setting values is just as easy. For example, to set all elements that use the class box to
100 × 100 pixels, you could use this statement:
$('.box').width(100).height(100)
Example 21-19  combines these actions into a single program that displays as
Figure 21-17 .
Example 21-19. Getting and setting element dimensions
<!DOCTYPE html>
<html>
536 | Chapter 21: Introduction to jQuery

<head>
    <title>Dimensions</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <p>
      <button id='getdoc'>Get document width</button>
      <button id='getwin'>Get window width</button>
      <button id='getdiv'>Get div width</button>
      <button id='setdiv'>Set div width to 150 pixels</button>
    </p>
    <div id='result' style='width:300px; height:50px; background:#def;'></div>
    <script>
      $('#getdoc').click(function()
      {
        $('#result').html('Document width: ' + $(document).width())
      } )
      $('#getwin').click(function()
      {
        $('#result').html('Window width: ' + $(window).width())
      } )
      $('#getdiv').click(function()
      {
        $('#result').html('Div width: ' + $('#result').width())
      } )
      $('#setdiv').click(function()
      {
        $('#result').width(150)
        $('#result').html('Div width: ' + $('#result').width())
      } )
    </script>
  </body>
</html>
Figure 21-17. Getting and setting element dimensions
Modifying Dimensions | 537

At the start of the body, there are four buttons: three for reporting the widths of the
document, window, and a <div>  element that appears just below the buttons, and one
to set the div’s width to a new value. In the script section, there are four jQuery state‐
ments, of which the first three simply fetch the widths of the objects given, and then
report these values by writing into the HTML of the div.
The final statement has two parts: the first reduces the width of the <div>  element to
150 pixels, and then the second displays the new width value within the div, by fetch‐
ing it using the width  method, to ensure the computed value is displayed.
When the page has been zoomed (either in or out) by the user, this
event is not noted in any major browser, in any way that JavaScript
can reliably detect. Therefore, jQuery cannot take zooming into
account when it applies or returns dimensional values. So it is
therefore possible to get unexpected results in this circumstance.
The innerWidth and innerHeight Methods
It’s often necessary to also take borders, padding, and other properties into account
when working with dimensions, and therefore you can use the innerWidth  and inner
Height  methods to return the width and height of the first element that matches the
selector, including  the padding but not including  any border.
For example, the following returns the innerWidth  of the element with an ID of elem
including padding:
iwidth = $('#elem').innerWidth()
The outerWidth and OuterHeight Methods
To return the dimensions of an element including both  padding and border, you can
call the outerWidth  and outerHeight  methods, like this:
owidth = $('#elem').outerWidth()
If you wish to also include any margin in the returned value, you can pass the value of
true  when you call either of these methods, like this:
owidth = $('#elem').outerWidth(true)
The values returned for any of the inner...  or outer...  methods
are not necessarily integers and may be fractional in some cases.
User page zooming is not detected by these methods, and you can‐
not use these methods on window  or document  objects—for these,
use the width  or height  methods instead.
538 | Chapter 21: Introduction to jQuery

DOM Traversal
If you refer back  to the section on the Document  Object Model (DOM) in Chap‐
ter 13 , you’ll recall that all web pages are constructed in much the same way as exten‐
ded families. There are parent and child objects, siblings, grandparents and
grandchildren, and even element relationships that could be referred to as cousins,
aunts, and so forth. For example, in the following snippet, the <li>  elements are chil‐
dren of the <ul>  element which, in turn, is parent to the <li>  elements:
<ul>
  <li>Item 1</li>
  <li>Item 2</li>
  <li>Item 3</li>
</ul>
And, like families, there are multiple ways you can refer to HTML elements, such as
absolutely, starting at the window level and moving on down, also known as travers‐
ing the DOM. Or you can use the relationship between one element and another to
refer to elements. Really it’s a matter of what makes sense to your particular project.
For example, if you want a web page to be as self-contained as possible so that you
have a better chance of cutting and pasting elements into other web documents, it
makes a lot of sense to refer to elements near each other by relative addressing. What‐
ever you choose, though, jQuery offers a wide range of functions to help you accu‐
rately address elements.
Parent Elements
To refer to an element’s direct parent, you use the parent  method, like this:
my_parent = $('#elem').parent()
Whatever type of element elem  may be, the my_parent  object now contains a jQuery
object that refers to its parent element. In fact, since selectors can refer to multiple
elements, this call actually returns an object that refers to a list of parent elements
(although the list can have only one item), one for each matching element.
Since a parent may have many children, you might wonder whether more elements
can be returned by this method than there are parents. Take the preceding snippet
with three <li>  elements. In this case, will three parent elements be returned (because
three matches will be made), even though there is just a single <ul>  parent?
my_parent = $('li').parent()
The answer is no, because jQuery is smart enough to recognize all duplicates and fil‐
ter them out. To verify this, if you ask for the number of elements returned like this,
the result will be 1:
alert($('li').parent().length)
DOM Traversal | 539

Let’s now make something happen when the selector matches, such as changing the
font-weight  property of the parent element in the previous snippet to bold , like this:
$('li').parent().css('font-weight', 'bold')
Using a filter
Optionally, a selector can be passed to parent , to filter out which of the parents the
desired changes should apply to. To illustrate, Example 21-20  has three small lists and
a couple of jQuery statements.
Example 21-20. Accessing parent elements
<!DOCTYPE html>
<html>
  <head>
    <title>DOM Traversal: Parent</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <ul>
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
    </ul>
    <ul class='memo'>
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
    </ul>
    <ul>
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
    </ul>
    <script>
      $('li').parent()       .css('font-weight',     'bold')
      $('li').parent('.memo').css('list-style-type', 'circle')
    </script>
  </body>
</html>
The three lists are all the same, except that the middle one’s <ul>  element uses a class
of memo . In the script section, the first statement applies a value of bold  to the font-
weight  property of all parents of <li>  elements. In this instance, it causes all the <ul>
elements to display in bold.
The second statement is similar, but also passes the class name memo  to the parent
method, so that only that parent will be selected. Then the css method is called to set
540 | Chapter 21: Introduction to jQuery

the list-style-type  property of the selected list to circle . Figure 21-18  shows
these two statements in effect.
Figure 21-18. Accessing parent elements with and without filters
Selecting all ancestor elements
We’ve just seen how to select direct parents of elements, but you can also select ances‐
tors, all the way back to the <html>  root element by using the parents  method. But
why might you want to do this? Well, how about wanting to access the first <div>
element up the ancestry chain in order to style it according to something dynamic
that has gone on further down the chain?
This type of selection may be slightly more advanced than you can think of a reason
for right now, but you’ll be pleased it’s there when you need it, and here’s how you
might proceed:
$('#elem').parents('div').css('background', 'yellow')
Actually, that may not be exactly what you want, because it will select all <div>  ele‐
ments in the ancestry chain, and there may be others further up that you don’t want
to style. So, for this type of eventuality, you can further filter the selection by using the
parentsUntil  method instead.
The parentsUntil  method traverses up the ancestry chain in the same way as
parents , but stops at the first element that matches the selection filter (in this case, it’s
a <div>  element), so you can use it in the same way as the preceding statement, cer‐
tain in the knowledge that you will select only exactly the element you want:
$('#elem').parentsUntil('div').css('background', 'yellow')
To illustrate the difference between these two methods, take a look at Example 21-21 ,
which contains two sets of nested elements, both of which are within one parent
DOM Traversal | 541

<div>  element. Then, in the script section, there is one example each of the parents
and parentsUntil  methods being called.
Example 21-21. Using the parents and parentsUntil methods
<!DOCTYPE html>
<html>
  <head>
    <title>DOM Traversal: Parents</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <div>
      <div>
        <section>
          <blockquote>
            <ul>
              <li>Item 1</li>
              <li id='elem'>Item 2</li>
              <li>Item 3</li>
            </ul>
          </blockquote>
        </section>
      </div>
      <div>
        <section>
          <blockquote>
            <ul>
              <li>Item 1</li>
              <li>Item 2</li>
              <li>Item 3</li>
            </ul>
          </blockquote>
        </section>
      </div>
    </div>
    <script>
      $('#elem').parents('div')     .css('background',      'yellow')
      $('#elem').parentsUntil('div').css('text-decoration', 'underline')
    </script>
  </body>
</html>
If you take a look  at Figure 21-19 , you’ll see that the first  jQuery statement has set the
background color of all the contents to yellow. This is because the ancestry tree has
been traversed all the way up to the <html>  element using the parents  method, and
both <div>  elements encountered on the way up the tree have been selected (the one
containing the list with the <li>  element—highlighted in bold—with the ID of elem ,
and its parent <div> , which contains both sets of nested elements).
542 | Chapter 21: Introduction to jQuery

Figure 21-19. Comparing the parents and parentsUntil methods
However, the second statement uses parentsUntil  so that the selection stops at the
first <div>  element encountered. This means that when the underline styling is
applied, it is applied only to the closest parent <div>  that contains the <li>  element
with the ID of elem . The outer <div>  is not reached, and because it doesn’t get styled,
the second list doesn’t display underlined.
Child Elements
To access the children of an element, you use the children  method, like this:
my_children = $('#elem').children()
Just like the parent  method, this goes only one level and returns a list of none, one,
or more matching selections. Y ou can also pass a filter argument to it to select
between the children, like this:
li_children = $('#elem').children('li')
Here only children that are <li>  elements will be selected.
To delve deeper down the generations, you need to  use the find  method, which is the
inverse of parents , like this:
li_descendants = $('#elem').find('li')
However, unlike parents , you must  provide a filter selector to the find  method, but if
you need to select all descendants, you can use the universal selector, like this:
all_descendants = $('#elem').find('*')
Sibling Elements
When it comes to selecting siblings, there’s an even wider range of methods available,
starting with siblings .
DOM Traversal | 543

The siblings  method will return all the matching elements that are children of the
same parent, except  for the element used for selecting. So, taking the example of the
following snippet, if you look up the siblings of the <li>  element with the ID of two,
it will return only the first and third <li>  elements.
<ul>
  <li>Item 1</li>
  <li id='two'>Item 2</li>
  <li>Item 3</li>
</ul>
Here is such a statement that will cause the sibling elements to be bold:
$('#two').siblings().css('font-weight', 'bold')
Y ou can also use a filter in the siblings  method to further narrow down the siblings
returned. For example, to select only those siblings that use the class new, you might
use a statement such as this:
$('#two').siblings('.new').css('font-weight', 'bold')
Example 21-22  (liberally whitespaced to line up the attributes in columns) displays an
unordered list of seven items, of which four of them use the class new, and the second
item also has the ID of two:
Example 21-22. Selecting and filtering  sibling elements
<!DOCTYPE html>
<html>
  <head>
    <title>DOM Traversal: Siblings</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <ul>
      <li          class='new'>Item 1</li>
      <li id='two' class='new'>Item 2</li>
      <li                     >Item 3</li>
      <li          class='new'>Item 4</li>
      <li          class='new'>Item 5</li>
      <li                     >Item 6</li>
      <li                     >Item 7</li>
    </ul>
    <script>
      $('#two').siblings('.new').css('font-weight', 'bold')
    </script>
  </body>
</html>
When loaded into a browser, the result of issuing the jQuery statement is
Figure 21-20 , in which only Item 1, Item 4, and Item 5 have been bold, even though
544 | Chapter 21: Introduction to jQuery

Item 2 also uses the class new (because the method is called on that element, and so it
is excluded from the selection).
Figure 21-20. Selecting sibling elements
Since the siblings  method omits the element on which it is called
(which I will refer to as the callee ), it cannot be used to select from
all children of a parent element. However, to achieve that with the
preceding example, you could use a statement such as the follow‐
ing, which will, for example, return all siblings (including the
callee) that use the class new:
$('#two').parent().children('.new').css('font-
weight', 'bold')
Or you can add the andSelf  method to the selection to achieve the
same result, like this:
$('#two').siblings('.new').andSelf().css('font-
weight', 'bold')
Selecting the Next and Previous Elements
When you need finer control over the selection of siblings, you can further narrow
down the elements returned using the next  and prev  methods,  and their extended
versions . For example, to refer to the element immediately following a selector, you
can use a statement such as this (which sets the matched element(s) to display in
bold):
$('#new').next().css('font-weight', 'bold')
In the case of the following liberally whitespaced snippet, for example, the third item
has the ID new, and therefore the fourth item is returned:
<ul>
  <li         >Item 1</li>
  <li         >Item 2</li>
  <li id='new'>Item 3</li>
DOM Traversal | 545

<li         >Item 4</li>
  <li         >Item 5</li>
</ul>
So far, so simple. But what if you would like to reference all the siblings following a
particular element? Well, you can do that with nextAll  method,  like this (which in
the preceding snippet would style the last two items):
$('#new').nextAll().css('font-weight', 'bold')
When calling nextAll , you can also supply a filter to select from the elements that are
matched, such as the following, which will style only the following siblings that use
the class info : (in this snippet, however, there are no elements that use that class, so
the statement will do nothing):
$('#new').nextAll('.info').css('font-weight', 'bold')
Or, consider the case of this snippet, in which one item has the ID new and another
has the ID old.
<ul>
  <li         >Item 1</li>
  <li id='new'>Item 2</li>
  <li         >Item 3</li>
  <li id='old'>Item 4</li>
  <li         >Item 5</li>
</ul>
Now it’s possible to select only those siblings following the one with the ID of new, up
to (but not including) the one with the ID of old, like this (in which just the third
item will be styled):
$('#new').nextUntil('#old').css('font-weight', 'bold')
If no argument is supplied to nextUntil , it behaves exactly like nextAll , returning all
following siblings. Y ou can also supply a second argument to nextUntil  to act as a
filter for selecting from the elements that are matched by it, like this:
$('#new').nextUntil('#old', '.info').css('font-weight', 'bold')
In this statement, only those elements that use the class info  will be styled, which in
the case of the preceding snippet is none of them, so no action will be taken.
Y ou can do exactly the same working backward through groups of siblings by using
the prev , prevAll , and prevUntil  methods.
Traversing jQuery Selections
As well as traversing throughout the DOM, once you have returned a set of elements
as a jQuery selection, you can also traverse those elements, choosing which ones to
act on.
546 | Chapter 21: Introduction to jQuery

For example, to style just the first element returned by a selection, you can use the
first  method, like this (to set the first list item in the first unordered list to display
underlined):
$('ul>li').first().css('text-decoration', 'underline')
Or you can choose to style only the last item by using the last  method, like this:
$('ul>li').last().css('font-style', 'italic')
Or, to access an element by index (starting from 0), you can use  the eq method, like
this (which styles the second item in the list due to starting at 0):
$('ul>li').eq(1).css('font-weight', 'bold')
Y ou can also apply a filter to a selection using the filtert  method, like this (which
changes the background color of every other element starting at the first, element 0):
$('ul>li').filter(':even').css('background', 'cyan')
Remember that when indexing into jQuery selections, the first ele‐
ment is the zeroth. So, for example, when you use the selec‐
tor :even  in this manner, elements 1, 3, 5, and so on will be
selected (not 2, 4, 6...).
To exclude one or more elements you can apply the not method, like this (where ele‐
ments that don’t  use the ID new are styled in blue):
$('ul>li').not('#new').css('color', 'blue')
And you can also select an element depending on what descendants it has. To select
only elements that have descendant <ol>  elements, for example, you could use this
statement, to place a line through those that match:
$('ul>li').has('ol').css('text-decoration', 'line-through')
Example 21-23  brings all these together to style an unordered list, one of whose ele‐
ments also contains an ordered list:
Example 21-23. Traversing a jQuery selection
<!DOCTYPE html>
<html>
  <head>
    <title>Selection Traversal</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <ul>
      <li>Item 1</li>
      <li>Item 2</li>
DOM Traversal | 547

<li id='new'>Item 3</li>
      <li>Item 4
        <ol type='a'>
          <li>Item 4a</li>
          <li>Item 4b</li>
        </ol></li>
      <li>Item 5</li>
    </ul>
    <script>
      $('ul>li').first()        .css('text-decoration', 'underline')
      $('ul>li').last()         .css('font-style',      'italic')
      $('ul>li').eq(1)          .css('font-weight',     'bold')
      $('ul>li').filter(':even').css('background',      'cyan')
      $('ul>li').not('#new')    .css('color',           'blue')
      $('ul>li').has('ol')      .css('text-decoration', 'line-through')
    </script>
  </body>
</html>
As you will see from studying Figure 21-21 , every element in each list has been styled
by one or more of the jQuery statements.
Figure 21-21. Uniquely addressing elements in a jQuery selection
The is Method
There is also a way you can query a jQuery selector to return a Boolean value for use
in plain JavaScript, which is the is method.  Unlike other jQuery filtering methods,
this function doesn’t create a new jQuery object that can then have other methods
appended to it, or that can then be further filtered.
Instead it returns just true  or false , making the method most suitable for using in
conditional statements. Example 21-24  uses the is method attached to a call to
parent  in an event handler for a set of buttons. When any button is clicked, the han‐
dler is called, and the is method is able to return a value of true  or false , when
asked whether the parent element is a <div> , as shown in Figure 21-22 .
548 | Chapter 21: Introduction to jQuery

Example 21-24. Reporting the parent element with is
<!DOCTYPE html>
<html>
  <head>
    <title>Using is</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <div><button>Button in a div</button></div>
    <div><button>Button in a div</button></div>
    <span><button>Button in a span</button></span>
    <div><button>Button in a div</button></div>
    <span><button>Button in a span</button></span>
    <p id='info'></p>
    <script>
      $('button').click(function()
      {
        var elem = ''
        if ($(this).parent().is('div')) elem = 'div'
        else                            elem = 'span'
        $('#info').html('You clicked a ' + elem)
      })
    </script>
  </body>
</html>
Figure 21-22. Using the is method to report the parent element
Using jQuery Without Selectors
There  are also a couple of jQuery methods that are for use with standard JavaScript
objects, and which make handling them a lot simpler. These are $.each , and $.map ,
which are similar but have subtle differences.
Using jQuery Without Selectors | 549

The $.each Method
Using $.each , you can iterate through arrays or array-like objects by simply attaching
a function to be called for each iteration. Example 21-25  shows an array of pet names
and types (called pets ), from which another array (called guineapigs ) needs to be
extracted, containing only the names of the guinea pigs.
Example 21-25. Calling the each method
<!DOCTYPE html>
<html>
  <head>
    <title>Using each</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body>
    <div id='info'></div>
    <script>
      pets =
      {
        Scratchy : 'Guinea Pig',
        Squeeky  : 'Guinea Pig',
        Fluffy   : 'Rabbit',
        Thumper  : 'Rabbit',
        Snoopy   : 'Dog',
        Tiddles  : 'Cat'
      }
      guineapigs = []
      $.each(pets, function(name, type)
      {
        if (type == 'Guinea Pig') guineapigs.push(name)
      })
      $('#info').html('The guinea pig names are: ' + guineapigs.join(' & '))
    </script>
  </body>
</html>
To do this, the $.each  method is passed the array, along with an anonymous function
to process it. The function takes two arguments, the index into the array (called
name ), and the contents of each element (called type ).
The value in type is then tested to see if it is Guinea Pig , and if so, the value in name
is pushed onto the guineapigs  array. Upon completion, the contents of guineapigs  is
displayed by writing into the <div>  element with the ID of info . To separate the
items in the array, the JavaScript join  method  is used with the & symbol as a
550 | Chapter 21: Introduction to jQuery

separator.  The result of loading this example into a browser is simply to display the
text “The guinea pig names are: Scratchy & Squeeky. ”
The $.map Method
Another way to achieve this is with the $.map  method, which  returns all the values
that your function returns in an array, saving you from having to create an array, and
then push matches onto it—as we had to in the preceding example.
Instead you can create and populate the array at the same time, by assigning the array
returned by $.map  to it, like this (the end result being the same but with less code):
guineapigs = $.map(pets, function(type, name)
{
  if (type == 'Guinea Pig') return name
})
Watch out when you change between using the $.each  and $.map
methods, because $.each  passes arguments to the function in the
order index , value , but map uses the order value , index . This is why
the two arguments are swapped in the preceding $.map  example.
Using Ajax
In Chapter 17 , I showed in detail how to implement Ajax communications between
JavaScript in a browser, and PHP running on a web server. I also provided some
handy and compact functions you can call to simplify the process.
But if you have jQuery loaded, you can use its Ajax functionality instead if you prefer
—it works in a very similar way, in that you choose whether to make a Post or a Get
request, and then take it from there.
Using the Post Method
Example 21-26  is the direct jQuery equivalent to Example 17-2  (which loads the
Amazon Mobile website into a <div>  element), but since all the Ajax-handling code is
tidied away in the jQuery library file, it’s much shorter—using just a single call to the
$.post  method, passing it the following three items:
•The URL of a PHP program on the server to access.
•The data to pass to that URL.
•An anonymous function to process the returned data.
Using Ajax | 551

Example 21-26. Sending a Post Ajax request
<!DOCTYPE html>
<html> <!-- jqueryajaxpost.htm -->
  <head>
    <title>jQuery Ajax Post</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body style='text-align:center'>
    <h1>Loading a web page into a DIV</h1>
    <div id='info'>This sentence will be replaced</div>
    <script>
      $.post('urlpost.php', { url : 'amazon.com/gp/aw' }, function(data)
      {
        $('#info').html(data)
      } )
    </script>
  </body>
</html>
The urlpost.php  program remains unchanged from Example 17-3 , because this exam‐
ple and Example 17-2  are interchangeable.
Using the Get Method
Communicating with Ajax by using the Get method is just as easy, requiring only the
following two arguments—so Example 21-27  is therefore the jQuery equivalent to
Example 17-4 :
•The URL of a PHP program on the server to access (including a query string
containing the data to pass to it)
•An anonymous function to process the returned data
Example 21-27. Sending a Get Ajax request
<!DOCTYPE html>
<html> <!-- jqueryajaxget.htm -->
  <head>
    <title>jQuery Ajax Get</title>
    <script src='jquery-1.11.1.min.js'></script>
  </head>
  <body style='text-align:center'>
    <h1>Loading a web page into a DIV</h1>
    <div id='info'>This sentence will be replaced</div>
    <script>
      $.get('urlget.php?url=amazon.com/gp/aw', function(data)
      {
552 | Chapter 21: Introduction to jQuery

$('#info').html(data)
      } )
    </script>
  </body>
</html>
The urlget.php  program remains unchanged from Example 17-5 , because this exam‐
ple and Example 17-4  are interchangeable.
Remember that the security restrictions of Ajax require that the
communication takes place with the same server that supplied the
main web document. Y ou must also use a web server for Ajax com‐
munication, not a local file system. These examples are therefore
best tested using a production or development server, as described
in Chapter 2 .
Plug-Ins
There’s room in this chapter to cover only the core jQuery library, and while that’s
more than enough for a beginner to be getting on with, the time will come when
you’ll find you need even more features and functionality. Thankfully, other jQuery
projects can help you there, because a range of official and third-party plug-ins are
now available to provide just about any features you can imagine.
The jQuery User Interface
First, there’s the jQuery User Interface (known as jQuery UI), which takes off directly
where jQuery leaves off. With it you can add dragging and dropping, resizing, and
sorting methods to your web pages, as well as more animations and effects, animated
color transitions, more easing effects, and a bunch of widgets to create menus and
other features such as accordions, buttons, pickers, progress bars, sliders, spinners,
tabs, tool tips, and much more.
If you want to see some demos before deciding whether to download, check out
jqueryui.com/demos .
The whole package is under 400 KB zipped and is freely downloadable and usable
with almost no restrictions (just the very generous MIT license), from jqueryui.com .
Other Plug-Ins
Y ou can also add a wide variety of free, ready-made plug-ins to jQuery from numer‐
ous developers, all brought together at plugins.jquery.com .
Some of the plug-ins include extensive form handling and verification, slideshows,
user responsiveness, image manipulation, even more animations, and much more.
Plug-Ins | 553

jQuery Mobile
If you are developing for mobile  browsers, you will also want to take a look at jQuery
mobile, which is more of a framework than a library, offering sophisticated, touch-
optimized ways to navigate the wide range of different types of mobile hard and soft‐
ware, to provide the best possible user experience.
The jQuery Mobile download is fully customizable and can be tailored exactly to your
requirements, as shown in Figure 21-23 , where the ThemeRoller app is being used.
Figure 21-23. Creating a mobile theme with the ThemeRoller  app
Y ou’ll find jQuery mobile especially useful if you are writing web apps, and can find
out more and download it from jquerymobile.com .
Y ou’ve come a long way in this chapter, learning material that sometimes takes up
entire books. I hope you’ve found everything clear, though, because jQuery is very
easy to learn and use. Please take a moment now to peruse Appendix E , which lists all
the main jQuery objects, events, and methods, and should serve as a handy reference.
If you need any other information, please check out jquery.com .
For the remaining chapters, we’ll turn our gaze to all the new goodies available in
HTML5, and then bring everything we’ve learned together into a mini social net‐
working project.
554 | Chapter 21: Introduction to jQuery

Questions
1.What is the symbol commonly used as the factory method for creating jQuery
objects, and what is the alternative method name?
2.How would you link to the minified release 1.11.1 of jQuery from the Google
CDN?
3.What types of argument does the jQuery factory method accept?
4.With which jQuery method can you get or set a CSS property value?
5.What statement would you use to attach a method to the click event of an ele‐
ment with the ID of elem , to make it slowly hide?
6.What element property must you modify in order to allow it to be animated, and
what are the acceptable values?
7.How can you cause several methods to run at once (or sequentially, in the case of
animations)?
8.How can you retrieve an element node object from a jQuery selection object?
9.What statement would set the sibling element immediately preceding one with
the ID of news  to display in bold?
10.With which method can you make a jQuery Ajax Get request?
See Chapter 21 Answers  in Appendix A  for the answers to these questions.
Questions | 555



CHAPTER 22
Introduction to HTML5
HTML5 represents a substantial leap forward in web design, layout,  and usability. It
provides a simple way to manipulate graphics in a web browser without resorting to
plug-ins such as Flash, offers methods to insert audio and video into web pages (again
without plug-ins), and irons out several annoying inconsistencies that crept into
HTML during its evolution.
In addition, HTML5 includes numerous other enhancements such as geolocation
handling, web workers to manage background tasks, improved form handling, access
to bundles of local storage (far in excess of the limited capabilities of cookies), and
even the facility to turn web pages into web applications for mobile browsers.
What’s curious about HTML5, though, is that it has been an ongoing evolution, in
which browsers have adopted different features at different times. Fortunately, all the
biggest and most popular HTML5 additions are finally  supported by all major brows‐
ers (those with more than 1 percent or so of the market, such as Chrome, Internet
Explorer, Firefox, Safari, and Opera, and the Android and iOS browsers).
But with HTML5 having been officially submitted to the W3C in only early 2013,
there remain a number of features outstanding in several browsers, which I outline
later in the book so you will be prepared when they are adopted.
Nevertheless, we are now fully into the second big surge toward dynamic web interac‐
tivity (the first being the adoption of what became known as Web 2.0). I would hesi‐
tate to call it Web 3.0, though, because the term HTML5  says it all to most people, and
in my view it could be considered a later version of Web 2.0 (maybe something like
Web 2.7).
Actually, I think it will be very interesting to see what Web 3.0 will turn out to be. If I
were to hazard a prediction, though, I would say it will result from the application of
artificial intelligence (AI) in the form of much more capable versions of software such
557

as Apple’s Siri, Microsoft’s Cortana, OK Google, and IBM’s Watson, combined with
wearable technology that uses visual and voice input—like Google Glass and the Gal‐
axy Gear watch—rather than keyboards. I look forward to covering these things in
future editions of this book.
But for now, having written about what’s to come in HTML5 for some years, and now
that so many parts of the specification are usable on virtually all devices and brows‐
ers, I’m pleased to finally be able to bring it into this edition of the book. So let me
take you on an overview of what’s available to you in HTML5 right now.
The Canvas
Originally introduced by Apple for the WebKit rendering engine (which had itself
originated in the KDE HTML layout engine) for its Safari browser (and now also
implemented in iOS, Android, Kindle, Chrome, BlackBerry, Opera, and Tizen), the
canvas  element enables us to draw graphics in a web page without having to rely on a
plug-in such as Java or Flash.  After being standardized, the canvas was adopted by all
other browsers and is now a mainstay of modern web development.
Like other HTML elements, a canvas is simply an element within a web page with
defined dimensions, and within which you can use JavaScript to draw graphics. Y ou
create a canvas by using the <canvas>  tag, to which you must also assign an ID so that
JavaScript will know which canvas it is accessing (as you can have more than one can‐
vas on a page).
In Example 22-1  I’ve created a <canvas>  element, with the ID mycanvas , that contains
some text that is displayed only in browsers that don’t support the canvas. Beneath
this there is a section of JavaScript, which draws the Japanese flag on the canvas (as
shown in Figure 22-1 ).
Example 22-1. Using the HTML5 canvas element
<!DOCTYPE html>
<html>
  <head>
    <title>The HTML5 Canvas</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <canvas id='mycanvas' width='320' height='240'>
      This is a canvas element given the ID <i>mycanvas</i>
      This text is only visible in non-HTML5 browsers
    </canvas>
    <script>
      canvas            = O('mycanvas')
      context           = canvas.getContext('2d')
558 | Chapter 22: Introduction to HTML5

context.fillStyle = 'red'
      S(canvas).border  = '1px solid black'
      context.beginPath()
      context.moveTo(160, 120)
      context.arc(160, 120, 70, 0, Math.PI * 2, false)
      context.closePath()
      context.fill()
    </script>
  </body>
</html>
Figure 22-1. Drawing the Japanese flag using an HTML5 canvas
At this point, it’s not necessary to detail exactly what is going on, as I explain that in
the following chapter, but you should already see how using the canvas is not hard,
but does require learning a few new JavaScript functions. Note that this example
draws on the OSC.js  set of functions from the previous chapter to help keep the code
neat and compact.
Geolocation
Using geolocation , your browser can return information to a web server about your
location. This information can come from a GPS chip in the computer or mobile
device you’re using, from your IP address, or from analysis of nearby Wi-Fi hotspots.
For security purposes, the user is always in control and can refuse to provide this
information on a one-off basis, or can enable settings to either permanently block or
allow access to this data from one or all websites.
There are numerous uses for this technology, including giving you turn-by-turn navi‐
gation; providing local maps; notifying you of nearby restaurants, Wi-Fi hotspots, or
Geolocation | 559

other places; letting you know which friends are near you; directing you to the near‐
est gas station; and more.
Example 22-2  will display a Google map of the user’s location, as long as the browser
supports geolocation and the user grants access to his location (as shown in
Figure 22-2 ). Otherwise, it will display an error.
Example 22-2. Displaying the map at a user’s location
<!DOCTYPE html>
<html>
  <head>
    <title>Geolocation Example</title>
    <script src='OSC.js'></script>
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
  </head>
  <body>
    <div id='status'></div>
    <div id='map'></div>
    <script>
      if (typeof navigator.geolocation == 'undefined')
         alert("Geolocation not supported.")
      else
        navigator.geolocation.getCurrentPosition(granted, denied)
      function granted(position)
      {
        O('status').innerHTML = 'Permission Granted'
        S('map').border       = '1px solid black'
        S('map').width        = '640px'
        S('map').height       = '320px'
        var lat   = position.coords.latitude
        var long  = position.coords.longitude
        var gmap  = O('map')
        var gopts =
        {
          center: new google.maps.LatLng(lat, long),
          zoom: 9, mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        var map = new google.maps.Map(gmap, gopts)
      }
      function denied(error)
      {
        var message
        switch(error.code)
        {
          case 1: message = 'Permission Denied'; break;
560 | Chapter 22: Introduction to HTML5

case 2: message = 'Position Unavailable'; break;
          case 3: message = 'Operation Timed Out'; break;
          case 4: message = 'Unknown Error'; break;
        }
        O('status').innerHTML = message
      }
    </script>
  </body>
</html>
Figure 22-2. The user’s location has been used to display a map
Again, here is not the place to describe how this all works, as I will detail that in
Chapter 25 . For now, though, this example serves to show you how easy managing
geolocation can be, especially given that much of the code is dedicated to handling
errors and calling up the Google map, so the core geolocation code you need is
actually minimal.
Audio and Video
Another great addition to HTML5 is support for in-browser audio and video. While
playing these types of media can be a little complicated due to the variety of encoding
types and licenses, the <audio>  and <video>  elements provide the flexibility you need
to display the types of media you have available.
Audio and Video | 561

In Example 22-3 , the same video file has been encoded in different formats to ensure
that all major browsers are accounted for. Browsers will simply select the first type
they recognize and play it, as shown in Figure 22-3 .
Example 22-3. Playing a video with HTML5
<!DOCTYPE html>
<html>
  <head>
    <title>HTML5 Video</title>
  </head>
  <body>
    <video width='560' height='320' controls>
      <source src='movie.mp4'  type='video/mp4'>
      <source src='movie.webm' type='video/webm'>
      <source src='movie.ogv'  type='video/ogg'>
    </video>
  </body>
</html>
Figure 22-3. Displaying video using HTML5
Inserting audio into a web page is just as easy, as you will discover in Chapter 24 .
Forms
As you already saw in Chapter 12 , HTML5 forms are in the process of being
enhanced, but support across all browsers remains patchy. What you can safely use
562 | Chapter 22: Introduction to HTML5

today has been detailed in Chapter 12 , and future editions of this book will include
other aspects of forms as they become adopted across the board. In the meantime,
you can keep up-to-date with the latest developments on HTML5 forms at http://
tinyurl.com/h5forms .
Local Storage
With local storage, your ability to save data on a  local device is substantially increased
from the meager space provided by cookies. This opens up the possibility of your
using web apps to work on documents offline and then syncing them with the web
server only when an Internet connection is available. It also raises the prospect of
storing small databases locally for access with WebSQL, perhaps for keeping a copy of
your music collection’s details, or all your personal statistics as part of a diet or weight
loss plan, for example. In Chapter 25 , I show you how to make the most of this new
facility in your web projects.
Web Workers
It has been possible to run interrupt-driven applications in the background using
JavaScript for many years, but it is a clumsy and inefficient process. It makes much
more sense to let the underlying browser technology run background tasks on your
behalf, which it can do far more quickly than you can by continuously interrupting
the browser to check how things are going.
Instead, with web workers you set everything up and pass your code to the web
browser, which then runs it. When anything significant occurs, your code simply has
to notify the browser, which then reports back to your main code. In the meantime,
your web page can be doing nothing or a number of other tasks, and can forget about
the background task until it makes itself known.
In Chapter 25 , I demonstrate how you can use web workers to create a simple clock
and to calculate prime numbers.
Web Applications
More and more these days, web pages are beginning to resemble apps, and with
HTML5 they can become web apps very easily. All you have to do is tell the web
browser about the resources used in your application, and it will download them to
where they can be run and accessed locally, offline, and without any Internet connec‐
tion if necessary.
Chapter 25  shows how you can do this to turn the clock example in the web workers
section into a web app.
Local Storage | 563

Microdata
Also in Chapter 25  I show how you  can mark up your code with microdata  to make it
totally understandable to any browser or other technology that needs to access it.
Microdata is sure to become more and more important to search engine optimization
too, so it’s important that you begin to incorporate it or at least understand what
information it can provide about your websites.
Summary
As you can see, there’s quite a lot to HTML5, and it’s all goodies that many people
waited a long time for—but they’re finally here. Starting with the canvas, the follow‐
ing few chapters will explain these features to you in glorious detail, so you can be up
and running with them, and enhancing your websites, in no time.
Questions
1.What new HTML5 element enables drawing of graphics in web pages?
2.What programming language is required to access many of the advanced
HTML5 features?
3.Which tags would you use to incorporate audio and video in a web page?
4.What feature is new in HTML5 and offers greater capability than cookies?
5.Which HTML5 technology supports running background JavaScript tasks?
See Chapter 22 Answers  in Appendix A  for the answers to these questions.
564 | Chapter 22: Introduction to HTML5

CHAPTER 23
The HTML5 Canvas
Although the collective term given to the new web technologies is HTML5 , they are
not all simply HTML tags and properties. Such is the case with the canvas element.
Y es, you create a canvas by using the <canvas>  tag, and maybe supply a width and
height, and can modify it a little with CSS, but to actually write to (or read from) a
canvas, you must use JavaScript.
Thankfully, the JavaScript you need to learn is minimal and very easy to implement,
plus I’ve already provided you with a set of three ready-made functions in Chapter 21
(in the file OSC.js ) to make accessing objects such as the canvas even more straight‐
forward. So let’s dive right in and start using the new <canvas>  tag.
Creating and Accessing a Canvas
In the previous chapter, I showed you how  to draw a simple circle to display the Japa‐
nese flag, as in Example 23-1 . Let’s now look at what exactly is going on.
Example 23-1. Displaying the Japanese flag by using a canvas
<!DOCTYPE html>
<html>
  <head>
    <title>The HTML5 Canvas</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <canvas id='mycanvas' width='320' height='240'>
      This is a canvas element given the ID <i>mycanvas</i>
      This text is only visible in non-HTML5 browsers
    </canvas>
565

<script>
      canvas            = O('mycanvas')
      context           = canvas.getContext('2d')
      context.fillStyle = 'red'
      S(canvas).border  = '1px solid black'
      context.beginPath()
      context.moveTo(160, 120)
      context.arc(160, 120, 70, 0, Math.PI * 2, false)
      context.closePath()
      context.fill()
    </script>
  </body>
</html>
First, the <!DOCTYPE html>  declaration is issued to tell the browser that the document
will use HTML5. After this, a title is displayed and the three functions in the OSC.js
file are loaded in.
In the body of the document, a canvas  element is defined, given an ID of mycanvas ,
and given a width and height of 320 by 240 pixels.
This is followed by a section of JavaScript that styles and draws on the canvas. We
begin by creating a canvas  objec t by calling the O function on the canvas  element. As
you will recall, this calls the document.getElementById  function, and is therefore a
much shorter way of referencing the element.
This is all stuff you’ve seen before, but next comes something new:
context = canvas.getContext('2d')
This command calls the getContext  method of the new canvas  object  just created,
requesting two-dimensional access to the canvas by passing the value '2d' .
As you might guess, there are plans for a three-dimensional context
available for the canvas (probably based on the OpenGL ES API),
which will support the argument '3d' . But for now, if you want to
display 3D on a canvas, you’ll need to do the math yourself and
“fake” it in 2D. Or you could investigate WebGL (which is based on
OpenGL ES). There’s no room to cover it here, but you can find a
great tutorial at http://learningwebgl.com .
Armed with this context in the object context , we prime the subsequent drawing
commands by setting the fillStyle  property of context to the value 'red' :
context.fillStyle = 'red'
Then the S function is called to set the border property of the canvas to a 1-pixel,
solid black line to outline the flag image:
566 | Chapter 23: The HTML5 Canvas

S(canvas).border = '1px solid black'
With everything prepared, a path is opened on the context and the drawing position
is moved to the location 160,120:
context.beginPath()
context.moveTo(160, 120)
After that, an arc is drawn centered on that coordinate, with a radius of 70 pixels,
beginning at an angle of 0 degrees (which is the righthand edge of the circle as you
look at it), and continuing all the way around the circle in radians as determined by a
value of 2 × π:
context.arc(160, 120, 70, 0, Math.PI * 2, false)
The final value of false  indicates a clockwise direction for drawing the arc; a value of
true  would indicate that the drawing should occur in a counterclockwise direction.
Finally, we close and fill the path, using the preselected value in the fillStyle  prop‐
erty that we set to 'red'  a few lines earlier:
context.closePath()
context.fill()
The result of loading this document into a web browser looks like Figure 22-1  in the
previous chapter.
The toDataURL Function
When you have created an image in a canvas, you will sometimes want to make a
copy of it, perhaps to repeat elsewhere on a web page, to save to local storage, or to
upload to a web server. This is particularly handy since users cannot use drag and
drop to save a canvas image.
To illustrate how you do this, in Example 23-2  I have added a few lines of code to the
previous example (highlighted in bold). These create a new <img>  element with the
ID 'myimage' , give it a solid black border, and then copy the canvas image into the
<img>  element (see Figure 23-1 ).
Example 23-2. Copying a canvas image
<!DOCTYPE html>
<html>
  <head>
    <title>The HTML5 Canvas</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <canvas id='mycanvas' width='320' height='240'>
      This is a canvas element given the ID <i>mycanvas</i>
Creating and Accessing a Canvas | 567

This text is only visible in non-HTML5 browsers
    </canvas>
    <img id='myimage'>
    <script>
      canvas            = O('mycanvas')
      context           = canvas.getContext('2d')
      context.fillStyle = 'red'
      S(canvas).border  = '1px solid black'
      context.beginPath()
      context.moveTo(160, 120)
      context.arc(160, 120, 70, 0, Math.PI * 2, false)
      context.closePath()
      context.fill()
      S('myimage').border = '1px solid black'
      O('myimage').src    = canvas.toDataURL()
    </script>
  </body>
</html>
Figure 23-1. The image on the right is copied from the lefthand  canvas
If you try this code for yourself, you will notice that while you cannot drag and drop
the lefthand canvas image, you can do so with the righthand picture, which you could
also save to local storage or upload to a web server using the right JavaScript (and
PHP on the server end).
568 | Chapter 23: The HTML5 Canvas

Specifying an Image Type
When creating an image from a canvas, you can specify the type of image you want
out of .jpg and .png. The default is .png ('image/png' ), but should you prefer .jpg, you
can alter the call to toDataURL . At the same time, you can also specify the amount of
compression to use between 0 (for lowest quality) and 1 (for highest quality). The fol‐
lowing uses a compression value of 0.4, and should generate a reasonably good-
looking image at a fairly low file size:
O('myimage').src = canvas.toDataURL('image/jpeg', 0.4)
Y ou should remember that the toDataURL  method applies to a
canvas  object, not to any context created from that object.
Now that you know how to create canvas images and then copy or otherwise use
them, it’s time to look at the drawing commands available, starting with rectangles.
The fillRect  Method
There are two different methods you can call for drawing rectangles, the first of
which is fillRect . To use it, you simply supply the top-left coordinates of your rec‐
tangle, followed by the width and height in pixels, like this:
context.fillRect(20, 20, 600, 200)
By default, the rectangle will be filled with black, but you can use any other color you
like by first issuing a command such as the following, where the argument can be any
acceptable CSS color name or value:
context.fillStyle = 'blue'
The clearRect Method
Y ou can also draw a rectangle in which  all its color values (red, green, blue, and alpha
transparency) have been set to 0, like the following, which uses the same order of
coordinates, and width and height arguments:
context.clearRect(40, 40, 560, 160)
Once the clearRect  method  is applied, the new clear rectangle will strip all color
from the area it covers, leaving only any underlying CSS color that has been applied
to the canvas  element.
Creating and Accessing a Canvas | 569

The strokeRect Method
When you want only an outlined rectangle, you can use a command such as the fol‐
lowing, which will use the default of black or the currently selected stroke color:
context.strokeRect(60, 60, 520, 120)
To change the color used, you can first issue a command such as the following, sup‐
plying any valid CSS color argument:
context.strokeStyle = 'green'
Combining These Commands
In Example 23-3 , the preceding rectangle-drawing commands have been combined to
display the image shown in Figure 23-2 .
Example 23-3. Drawing several rectangles
<!DOCTYPE html>
<html>
  <head>
    <title>Drawing Rectangles</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <canvas id='mycanvas' width='640' height='240'></canvas>
    <script>
      canvas               = O('mycanvas')
      context              = canvas.getContext('2d')
      S(canvas).background = 'lightblue'
      context.fillStyle    = 'blue'
      context.strokeStyle  = 'green'
      context.fillRect(  20, 20, 600, 200)
      context.clearRect( 40, 40, 560, 160)
      context.strokeRect(60, 60, 520, 120)
    </script>
  </body>
</html>
570 | Chapter 23: The HTML5 Canvas

Figure 23-2. Drawing concentric rectangles
Later in this chapter, you’ll see how you can further modify output by changing
stroke types and widths, but first let’s turn to modifying fills by applying gradients.
The createLinearGradient Method
There are a couple of ways  to apply a gradient to a fill, but the simplest is with the
createLinearGradient  method.  Y ou specify start and end x and y coordinates rela‐
tive to the canvas (not the object being filled). This allows for greater subtlety. For
example, you can specify that a gradient begin at the far left and end at the far right of
a canvas, but apply it only within the area defined in a fill command, as shown in
Example 23-4 .
Example 23-4. Applying a gradient fill
gradient = context.createLinearGradient(0, 80, 640,80)
gradient.addColorStop(0, 'white')
gradient.addColorStop(1, 'black')
context.fillStyle = gradient
context.fillRect(80, 80, 480,80)
For brevity and clarity in this and many of the following examples,
only salient lines of code are shown. Complete examples with the
surrounding HTML, setup, and other sections  of code are available
to freely download from the companion website at http://lpmj.net .
In this example, we create a gradient fill object named gradient  by making a call to
the createLinearGradient  method of the context  object. The start position of 0,80
Creating and Accessing a Canvas | 571

is halfway down the lefthand canvas edge, while the end of 640,80 is halfway down
the right-hand edge.
Then a couple of color stops are provided such that the very first color of the gradient
is white, and the final color is black. The gradient will then transition smoothly
between these colors across the canvas from left to right.
With the gradient  object now ready, it is applied to the fillStyle  property of the
context  object, so that the final fillRect  call can use it. In this call, the fill is applied
only in a central rectangular area of the canvas, so, although the gradient goes from
the far left to the far right of the canvas, the portion of it shown is only from 80 pixels
in and down from the top-left corner, to a width of 480 and depth of 80 pixels. The
result (when added to the previous example code) looks like Figure 23-3 .
Figure 23-3. The central rectangle has a horizontal gradient fill
By specifying different start and end coordinates for a gradient, you can make it slant
in any direction, as demonstrated with Example 23-5  and shown in Figure 23-4 .
Example 23-5. A variety of gradients at different  angles and colors
gradient = context.createLinearGradient(0, 0, 160, 0)
gradient.addColorStop(0, 'white')
gradient.addColorStop(1, 'black')
context.fillStyle = gradient
context.fillRect(20, 20, 135, 200)
gradient = context.createLinearGradient(0, 0, 0, 240)
gradient.addColorStop(0, 'yellow')
gradient.addColorStop(1, 'red')
context.fillStyle = gradient
context.fillRect(175, 20, 135, 200)
572 | Chapter 23: The HTML5 Canvas

gradient = context.createLinearGradient(320, 0, 480, 240)
gradient.addColorStop(0, 'green')
gradient.addColorStop(1, 'purple')
context.fillStyle = gradient
context.fillRect(330, 20, 135, 200)
gradient = context.createLinearGradient(480, 240, 640, 0)
gradient.addColorStop(0, 'orange')
gradient.addColorStop(1, 'magenta')
context.fillStyle = gradient
context.fillRect(485, 20, 135, 200)
Figure 23-4. A range of different  linear gradients
In this example, I chose to place the gradients directly on top of the areas to be filled
in order to more clearly show the maximum variation in color from start to end.
To create your gradient, determine the direction in which you want it to flow and
then locate two points to represent the start and end. No matter what values you sup‐
ply for these points, the gradient will smoothly transition in the direction given, even
if the points are outside the fill area.
The addColorStop Method in Detail
Y ou can use as many color stops in a gradient as you like, not just the two start and
end colors used so far in these examples. This makes it possible to clearly describe
almost any type of gradient effect you can imagine. To do this, you must specify the
percent of the gradient that each color should take up, by allocating a floating-point
start position along the gradient range between 0 and 1. Y ou do not enter a color’s
Creating and Accessing a Canvas | 573

end position, as it is deduced from the start position of the next color stop, or the
gradient end if there isn’t another color.
In the preceding examples, only the two start and end values were chosen, but to cre‐
ate a rainbow effect, you could set up your color stops as shown in Example 23-6  (and
displayed in Figure 23-5 ).
Example 23-6. Adding multiple color stops
gradient.addColorStop(0.00, 'red')
gradient.addColorStop(0.14, 'orange')
gradient.addColorStop(0.28, 'yellow')
gradient.addColorStop(0.42, 'green')
gradient.addColorStop(0.56, 'blue')
gradient.addColorStop(0.70, 'indigo')
gradient.addColorStop(0.84, 'violet')
Figure 23-5. A rainbow effect  with seven stop colors
In Example 23-6 , all the colors are spaced roughly equidistantly (with each color
given 14 percent of the gradient, and the final one 16), but you don’t have to stick to
that; you can squish several colors near each other, while spacing others out. It’s
entirely up to you as to how many colors you use and where in the gradient they start
and end.
The createRadialGradient Method
Y ou aren’t restricted to only linear gradients in HTML; you can create radial gradients
on a canvas too. It’s a little more complex than with a linear gradient, but not much
more so.
574 | Chapter 23: The HTML5 Canvas

What you need to do is pass the center location as a pair of x and y coordinates, along
with a radius in pixels. These are used as the start of the gradient and outer circum‐
ference, respectively. Then you also pass another set of coordinates and a radius to
specify the end of the gradient.
So, for example, to create a gradient that simply starts at the center of a circle and
then expands out, you could issue a command such as the one in Example 23-7  (and
displayed in Figure 23-6 ).
Example 23-7. Creating a radial gradient
gradient = context.createRadialGradient (320, 120, 0, 320, 120, 320)
Figure 23-6. A centered radial gradient
Or you can be fancy and move the location of the start and end of a radial gradient, as
in Example 23-8  (displayed in Figure 23-7 ), which starts centered on location 0,120
with a radius of 0 pixels, and ends centered at 480,120 with a radius of 480 pixels.
Example 23-8. Stretching a radial gradient
gradient = context.createRadialGradient(0, 120, 0, 480, 120, 480)
Creating and Accessing a Canvas | 575

Figure 23-7. A stretched radial gradient
By manipulating the figures supplied to this method, you can cre‐
ate a wide range of weird and wonderful effects—try it for yourself
with the supplied examples.
Using Patterns for Fills
In a similar manner to gradient fills, you can also apply an image as a fill pattern. This
can be an image anywhere in the current document, or even one created from a can‐
vas via the toDataURL  method (explained earlier in this chapter).
Example 23-9  loads a 100×100-pixel image (the yin-yang symbol) into the new image
object image , and then the onload  event of the object has a function attached to it that
creates a repeating pattern for the fillStyle  property of the context. This is then
used to fill a 600×200-pixel area within the canvas, as shown in Figure 23-8 .
Example 23-9. Using an image for a pattern fill
image     = new Image()
image.src = 'image.png'
image.onload = function()
{
  pattern           = context.createPattern(image, 'repeat')
  context.fillStyle = pattern
  context.fillRect(20, 20, 600, 200)
}
576 | Chapter 23: The HTML5 Canvas

Figure 23-8. Tiling an image by using it as a pattern fill
We create the pattern by using the createPattern  method, which also supports non‐
repeating patterns, or ones that just repeat in the x- or y-axes. We achieve this by
passing one of the following values to it as the second argument after the image to
use:
repeat
Repeat the image both vertically and horizontally.
repeat-x
Repeat the image horizontally.
repeat-y
Repeat the image vertically.
no-repeat
Do not repeat the image.
The fill pattern is based on the entire canvas area, so where the fill command is set to
apply only to a smaller area within the canvas, the images appear cut off at the top
and left.
If the onload  event had not been used in this example and, instead,
the code was simply executed as soon as encountered, the image
might not have already loaded in time, and may not be displayed.
Attaching to this event ensures that the image is available for use in
the canvas, because the event triggers only upon successful loading
of an image.
Creating and Accessing a Canvas | 577

Writing Text to the Canvas
As you would expect from a set of graphics features, writing to the canvas with text is
fully supported with a variety of font, alignment, and fill methods. But why would
you want to write text to the canvas when there’s already such good support for web
fonts in CSS these days?
Well, suppose you wish to display a graph or table with graphical elements. Y ou’ll
surely also want to label parts of it. What’s more, using the available commands, you
can produce much more than simply a colored font. So let’s start by assuming you’ve
been tasked to create a header for a website on basket weaving, called WickerpediA
(actually there’s already one of these, but let’s go ahead anyway).
To start with, you need to select a suitable  font and size it appropriately, perhaps as in
Example 23-10 , in which a font  style of bold, a size of 140 pixels, and a typeface of
Times have been selected. Also, the textBaseline  property has been set to top so that
the strokeText  method can pass coordinates of 0,0 for the top-left origin of the text,
placing it at the top left of the canvas. Figure 23-9  shows what this looks like.
Example 23-10. Writing text to the canvas
context.font         = 'bold 140px Times'
context.textBaseline = 'top'
context.strokeText('WickerpediA', 0, 0)
Figure 23-9. The text has been written to the canvas
The strokeText Method
To write text to the canvas, you send the text string and a pair of coordinates to the
strokeText  method, like this:
context.strokeText('WickerpediA', 0, 0)
The x and y coordinates supplied will be used as a relative reference by the textBase
Line  and textAlign  properties.
578 | Chapter 23: The HTML5 Canvas

This method—using line drawing—is only one way of drawing text to the canvas. So,
in addition to all the following properties that affect text, line-drawing properties
such as lineWidth  (detailed later in this chapter) will also affect how text displays.
The textBaseLine Property
The textBaseLine  property can be given any of the following values:
top
Aligns to the top of the text
middle
Aligns to the middle of the text
alphabetic
Aligns to the alphabetic baseline of the text
bottom
Aligns to the bottom of the font
The font Property
The font  style can be any of bold , italic , or normal  (the default), or a combination
of italic bold , and the size values can be specified in em, ex, px, %, in, cm, mm, pt, or
pc measures, just as with CSS. The font should be one available to the current
browser, which generally means one of Helvetica , Impact , Courier , Times , or Arial ,
or you can choose the default Serif  or Sans-serif  font of the user’s system. How‐
ever, if you know that a particular font is available to the browser, you can use it.
If you want to use a font such as Times New Roman , which incorpo‐
rates spaces in its name, you should change the relevant line to
something like this, in which the outer quotes are different from
the ones surrounding the font name:
context.font = 'bold 140px "Times New Roman"'
The textAlign Property
As well as choosing how to align your text vertically, you can specify horizontal align‐
ment by giving the textAlign  property one of the following values:
start
Aligns the text to the left if the document direction is left to right; otherwise, right.
This is the default setting.
end
Aligns the text to the right if the document direction is left to right; otherwise, left.
Writing Text to the Canvas | 579

left
Aligns the text to the left.
right
Aligns the text to the right.
center
Centers the text.
Y ou use the property like this:
context.textAlign = 'center'
In the case of the current example, you need the text left-aligned so that it butts up
neatly to the edge of the canvas, so the textAlign  property is not used, and therefore
the default left alignment occurs.
The fillText  Method
Y ou can also choose to use a fill property to fill in canvas  text, which can be any of a
solid color, a linear or radial gradient, or a pattern fill. So let’s use a pattern fill for
your heading, based on the texture of a wicker basket, as in Example 23-11 , the result
of which is shown in Figure 23-10 .
Example 23-11. Filling in the text with a pattern
image     = new Image()
image.src = 'wicker.jpg'
image.onload = function()
{
  pattern           = context.createPattern(image, 'repeat')
  context.fillStyle = pattern
  context.fillText(  'WickerpediA', 0, 0)
  context.strokeText('WickerpediA', 0, 0)
}
Figure 23-10. The text now has a pattern fill
580 | Chapter 23: The HTML5 Canvas

For good measure, I also kept the strokeText  call in this example to ensure a black
outline to the text; without it, there wasn’t enough definition at the edges.
A wide variety of other fill types or patterns can also be used here, and the simplicity
of the canvas makes it easy to experiment. What’s more: if you wish, once you have
the heading just right, you can also choose to save a copy by issuing a call toDataURL ,
as detailed earlier in the chapter. Then you can use the image as a logo for uploading
to other sites, for example.
The measureText Method
When working with canvas text, you may sometimes need to know how much space
it will occupy so that you can best position it. Y ou can achieve this with the measure
Text  method, as follows (assuming all the various text properties have already been
defined at this point):
metrics = context.measureText('WickerpediA')
width   = metrics.width
Since the height of the text in pixels is equal to the font size in points when the font is
defined, the metrics  object doesn’t provide a height metric.
Drawing Lines
The canvas provides a plethora of line-drawing functions to cater to almost every
need, including choices of lines, line caps and joins, and paths and curves of all types.
But let’s start with a property I touched on in the previous section on writing text to
the canvas.
The lineWidth Property
All the canvas methods that draw using lines make use of lineWidth  and a number of
other line properties. Using it is as simple as specifying a line width in pixels, like this,
which sets the width to 3 pixels:
context.lineWidth = 3
The lineCap and lineJoin Properties
When lines you draw come to an end and they are more than a pixel wide, you can
choose how this line cap  (as it is called) should appear by using the lineCap  property,
which can have the values butt , round , or square . For example:
context.lineCap = 'round'
Drawing Lines | 581

Also, when you are joining lines together that are wider than a single pixel, it is
important to specify exactly how they should meet. Y ou achieve this with the line
Join  property, which can have values of round , bevel , or miter , like this:
context.lineJoin = 'bevel'
Example 23-12  (shown here in full since it’s a little more complicated) applies all three
values of each property used in combination, creating the informative result shown in
Figure 23-11 . The beginPath , closePath , moveTo , and lineTo  methods used by this
example are explained next.
Example 23-12. Displaying combinations of line caps and joins
<!DOCTYPE html>
<html>
  <head>
    <title>Drawing Lines</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <canvas id='mycanvas' width='535' height='360'></canvas>
    <script>
      canvas               = O('mycanvas')
      context              = canvas.getContext('2d')
      S(canvas).background = 'lightblue'
      context.fillStyle    = 'red'
      context.font         = 'bold 13pt Courier'
      context.strokeStyle  = 'blue'
      context.textBaseline = 'top'
      context.textAlign    = 'center'
      context.lineWidth    = 20
      caps                 = ['  butt', ' round', 'square']
      joins                = [' round', ' bevel', ' miter']
      for (j = 0 ; j < 3 ; ++j)
      {
        for (k = 0 ; k < 3 ; ++k)
        {
          context.lineCap  = caps[j]
          context.lineJoin = joins[k]
          context.fillText(' cap:' + caps[j],  88 + j * 180, 45 + k * 120)
          context.fillText('join:' + joins[k], 88 + j * 180, 65 + k * 120)
          context.beginPath()
          context.moveTo( 20 + j * 180, 100 + k * 120)
          context.lineTo( 20 + j * 180,  20 + k * 120)
          context.lineTo(155 + j * 180,  20 + k * 120)
          context.lineTo(155 + j * 180, 100 + k * 120)
          context.stroke()
582 | Chapter 23: The HTML5 Canvas

context.closePath()
        }
      }
    </script>
  </body>
</html>
This code sets up a few properties and then nests a pair of loops: one for the line caps
and one for the joins. Inside the central loop, the current values for the lineCap  and
lineJoin  properties are first set, and then displayed in the canvas with the fillText
method.
Using these settings, the code then draws nine shapes with a 20-pixel-wide line, each
of which has a different combination of line cap and join settings, as shown in
Figure 23-11 .
Figure 23-11. All the combinations of line caps and joins
As you can see, butted line caps are short, square ones are longer, and the round ones
are somewhere between the two. At the same time, rounded line joins are curved,
beveled ones are cut across the corner, and mitered ones have sharp corners. Line
joins also apply to joins at angles other than 90 degrees.
Drawing Lines | 583

The miterLimit Property
If you find that your mitered joins get  cut off too short, you can extend them by using
the miterLimit  property, like this:
context.miterLimit = 15
The default value is 10, so you can reduce the miter limit too. If miterLimit  is not set
to a sufficiently large enough value for a miter, then sharply mitered joins will simply
bevel instead. So, if you are having trouble with your pointed miters, simply increase
the value you supply for miterLimit  until the miter displays.
Using Paths
The previous example made use of two methods to set up paths for the line-drawing
methods to follow. The beginPath  method sets the start of a path, and closePath  sets
the end. Inside each path, you can then use various methods for moving the location
of drawing, and creating lines, curves, and other shapes. So let’s examine the relevant
section from Example 23-12 , simplified to create just a single instance of the pattern:
context.beginPath()
context.moveTo(20, 100)
context.lineTo(20,  20)
context.lineTo(155, 20)
context.lineTo(155,100)
context.stroke()
context.closePath()
In this code snippet, a path is started in the first line, and then the drawing location is
moved to a position 20 pixels across and 100 down from the top-left corner of the
canvas, using a call to the moveTo  method. 
This is followed by three calls to lineTo , which then draw three lines, first upward to
the location 20,20, then to the right to 155,20, and then down again to 155,100. Once
this path has been set out, the stroke  method is called to lay it down, and finally the
path is closed because it’s no longer needed.
It is essential to close paths as soon as you finish with them; other‐
wise, you can get some very unexpected results when using multi‐
ple paths.
The moveTo and LineTo Methods
The moveTo  and LineTo  methods  both take simple x and y coordinates as their argu‐
ments, with the difference being that MoveTo  picks up an imaginary pen from the cur‐
584 | Chapter 23: The HTML5 Canvas

rent location and then moves it to a new one, while LineTo  draws a line from the
current location of the imaginary pen to the new one specified. Or, at least, a line will
be drawn if the stroke  method is called, but not otherwise. So let’s just say that
LineTo  creates a potential  drawn line, but it could equally be part of the outline for a
fill area, for example.
The stroke Method
The stroke  method has the job of actually drawing all the lines created so far in a
path onto the canvas. If it is issued from inside an unclosed path, this has the effect of
immediately drawing everything up to the most recent imaginary pen location.
However, if you close a path and then issue a call to stroke , it has the effect of also
joining a path from the current location back to the start location, which in this
example would turn the shapes into rectangles (which we don’t want because we need
to see the line caps as well as joins).
This joining effect on closing a path is required (as you will see a
little later) so that paths are properly closed before any fill  meth‐
ods are used on them; otherwise, they might overflow the bounds
of the path.
The rect Method
Should it have been necessary to create four-sided rectangles instead of the three-
sided shapes in the preceding example (and you didn’t wish to close the path yet),
another lineTo  call could have been issued to join everything up, like this (highligh‐
ted in bold):
context.beginPath()
context.moveTo(20, 100)
context.lineTo(20, 20)
context.lineTo(155, 20)
context.lineTo(155, 100)
context.lineTo(20, 100)
context.closePath()
But there’s a much simpler way to draw outlined rectangles, which is with the rect
method, like this:
rect(20, 20, 155, 100)
In just a single call, this command takes two pairs of x and y coordinates and draws a
rectangle with its top-left corner at location 20,20, and bottom-right corner at
155,100.
Using Paths | 585

Filling Areas
Using paths, you can create complicated areas that can also be filled in with solid, gra‐
dient, or pattern fills. In Example 23-13 , some basic trigonometry is used to create a
complex star pattern. I won’t detail how the math works because that’s not important
to the example (although if you want to play with the code, try changing the values
assigned to points , and the scale1  and scale2  variables, for different effects).
All you really need to look at, however, are the lines highlighted in bold, in which a
path is started, a pair of lineTo  calls defines the shape, the path is closed, and then
the stroke  and fill  methods are used to draw the shape outline in orange and fill it
in with yellow (as shown in Figure 23-12 ).
Example 23-13. Filling in a complex path
<!DOCTYPE html>
<html>
  <head>
    <title>Drawing Lines</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <canvas id='mycanvas' width='320' height='320'></canvas>
    <script>
      canvas               = O('mycanvas')
      context              = canvas.getContext('2d')
      S(canvas).background = 'lightblue'
      context.strokeStyle  = 'orange'
      context.fillStyle    = 'yellow'
      orig   = 160
      points = 21
      dist   = Math.PI / points * 2
      scale1 = 150
      scale2 = 80
      context.beginPath()
      for (j = 0 ; j < points ; ++j)
      {
        x = Math.sin(j * dist)
        y = Math.cos(j * dist)
        context.lineTo(orig + x * scale1, orig + y * scale1)
        context.lineTo(orig + x * scale2, orig + y * scale2)
      }
      context.closePath()
      context.stroke()
      context.fill()
586 | Chapter 23: The HTML5 Canvas

</script>
  </body>
</html>
Figure 23-12. Drawing and filling  in a complex path
With paths, it’s possible to create as complex an object as you like,
either using formulae or loops (as in this example), or simply with
a long string of moveTo  and/or LineTo  or other calls.
The clip Method
Sometimes when you are building a path, you may want to ignore sections of the can‐
vas (perhaps if you are drawing partly “behind” another object, and wish only the
visible part to display. Y ou can achieve this using the clip  method, which creates a
boundary outside of which stroke , fill , or other methods will not have any effect.
To illustrate this, Example 23-14  creates an effect similar to window blinds by moving
the imaginary pen pointer to the lefthand edge, then drawing a lineTo  over to the
righthand edge, another down by 30 pixels, and then another back to the lefthand
edge, and so on. This creates a sort of snaking pattern in which a series of 30-pixel-
deep, horizontal bars are drawn on the canvas, as shown in Figure 23-13 .
The clip Method | 587

Example 23-14. Creating a clip area
context.beginPath()
for (j = 0 ; j < 10 ; ++j)
{
  context.moveTo(20,  j * 48)
  context.lineTo(620, j * 48)
  context.lineTo(620, j * 48 + 30)
  context.lineTo(20,  j * 48 + 30)
}
context.stroke()
context.closePath()
Figure 23-13. A path of horizontal bars
To turn this example into a clipped area of the canvas, you simply need to replace the
call to stroke  (highlighted in bold in the example) with one to clip , like this:
context.clip()
588 | Chapter 23: The HTML5 Canvas

Now the outline of the bars won’t be seen, but the clipping area will be in place. To
illustrate this, Example 23-15  makes this method substitution and then adds to the
previous example by drawing a simple picture on the canvas, of green grass below a
blue sky containing a shining sun (modified from Example 23-12 ), with the changes
highlighted in bold, and as shown in Figure 23-14 .
Example 23-15. Drawing within the clipped area’s bounds
context.fillStyle = 'white'
context.strokeRect(20, 20, 600, 440)  // Black border
context.fillRect(  20, 20, 600, 440)  // White background
context.beginPath()
for (j = 0 ; j < 10 ; ++j)
{
  context.moveTo(20,  j * 48)
  context.lineTo(620, j * 48)
  context.lineTo(620, j * 48 + 30)
  context.lineTo(20,  j * 48 + 30)
}
context.clip()
context.closePath()
context.fillStyle   = 'blue'          // Blue sky
context.fillRect(20, 20,  600, 320)
context.fillStyle   = 'green'         // Green grass
context.fillRect(20, 320, 600, 140)
context.strokeStyle = 'orange'
context.fillStyle   = 'yellow'
orig   = 170
points = 21
dist   = Math.PI / points * 2
scale1 = 130
scale2 = 80
context.beginPath()
for (j = 0 ; j < points ; ++j)
{
  x = Math.sin(j * dist)
  y = Math.cos(j * dist)
  context.lineTo(orig + x * scale1, orig + y * scale1)
  context.lineTo(orig + x * scale2, orig + y * scale2)
}
context.closePath()
context.stroke()                      // Sun outline
context.fill()                        // Sun fill
The clip Method | 589

Figure 23-14. Drawing occurs only within the allowed clipped area
OK, we’re not going to win any competitions here, but you can see how powerful clip‐
ping can be when used effectively.
The isPointInPath Method
Sometimes you need to know whether a particular point lies in a path you’ve con‐
structed.  However, you will probably want to use this function only if you’re quite
proficient with JavaScript and writing a fairly complex program—and will generally
call it as part of a conditional if statement, like this:
if (context.isPointInPath(23, 87))
{
  // Do something here
}
If the location specified lies along any of the points in the path, the method returns
the value true , so the contents of the if statement are executed. Otherwise, the value
false  is returned, and the contents of the if don’t get executed.
590 | Chapter 23: The HTML5 Canvas

A perfect use for the isPointInPath  method is for creating games
using the canvas in which you wish to check for a missile hitting a
target, a ball hitting a wall or bat, or similar boundary conditions.
Working with Curves
In addition to straight paths, you can create an almost infinite variety of curved paths,
with a selection of different methods, ranging from simple arcs and circles to complex
quadratic and Bézier curves.
Actually, you don’t need to use paths to create many lines, rectangles, and curves,
because you can draw them directly by simply calling their methods. But using paths
gives you more precise control, so I tend to almost always draw on the canvas within
defined paths, as with the following examples.
The arc Method
The arc method requires you to pass it the x and y location of the center of the arc,
and the radius in pixels. As well as these values, you need to pass a pair of radian off‐
sets and an optional direction, like this:
context.arc(55, 85, 45, 0, Math.PI / 2, false)
Since the default direction is clockwise (a value of false ), this can be omitted, or
changed to true  to draw the arc in a counterclockwise direction.
Example 23-16  creates three sets of four arcs, the first two of which draw in a clock‐
wise direction, and the third of which draws counterclockwise. Additionally, the first
set of four arcs has its paths closed before the stroke  method is called, so the start
and end points are joined up, whereas the other two sets of arcs are drawn before the
path is closed, so they are not joined up.
Example 23-16. Drawing a variety of arcs
context.strokeStyle = 'blue'
arcs =
[
  Math.PI,
  Math.PI * 2,
  Math.PI / 2,
  Math.PI / 180 * 59
]
for (j = 0 ; j < 4 ; ++j)
{
  context.beginPath()
Working with Curves | 591

context.arc(80 + j * 160, 80, 70, 0, arcs[j])
  context.closePath()
  context.stroke()
}
context.strokeStyle = 'red'
for (j = 0 ; j < 4 ; ++j)
{
  context.beginPath()
  context.arc(80 + j * 160, 240, 70, 0, arcs[j])
  context.stroke()
  context.closePath()
}
context.strokeStyle = 'green'
for (j = 0 ; j < 4 ; ++j)
{
  context.beginPath()
  context.arc(80 + j * 160, 400, 70, 0, arcs[j], true)
  context.stroke()
  context.closePath()
}
To create shorter code, I drew all the arcs using loops, so that the length of each arc is
stored in the array arcs . These values are in radians, and since a radian is equivalent
to 180 ÷ π (π being the ratio of a circle’s circumference to its diameter, or approxi‐
mately 3.1415927), they evaluate as follows:
Math.PI
Equivalent to 180 degrees
Math.PI * 2
Equivalent to 360 degrees
Math.PI / 2
Equivalent to 90 degrees
Math.PI / 180 * 59
Equivalent to 59 degrees
Figure 23-15  shows the three rows of arcs and illustrates both the use of the direction
argument true  in the final set, and the importance of carefully choosing where you
close paths depending on whether you want to draw a line connecting the start and
end points.
592 | Chapter 23: The HTML5 Canvas

Figure 23-15. A variety of arc types
If you prefer to work with degrees instead of radians, you could
create a new Math  library function, like this:
Math.degreesToRadians = function(degrees)
{
  return degrees * Math.PI / 180
}
And then replace the array-creating code, starting at the second
line of Example 23-16 , with the following:
arcs =
[
  Math.degreesToRadians(180),
  Math.degreesToRadians(360),
  Math.degreesToRadians(90),
  Math.degreesToRadians(59)
]
Working with Curves | 593

The arcTo Method
Rather than creating a whole arc at once, you can choose to arc from the current loca‐
tion in the path to another one, like the following call to arcTo  (which simply
requires two pairs of x and y coordinates and a radius):
context.arcTo(100, 100, 200, 200, 100)
The locations you pass to the method represent the points where imaginary tangent
lines touch the circumference of the arc at its start and end points.
To illustrate how this works, Example 23-17  draws eight different arcs with radii from
0 up to 280 pixels. Each time around the loop, a new path is created with a start point
at location 20,20. Then an arc is drawn using imaginary tangent lines from that loca‐
tion to position 240,20, and from there to location 460,20. In this instance, it defines a
pair of tangents at 90 degrees to each other, in a V shape.
Example 23-17. Drawing eight arcs of different  radii
for (j = 0 ; j <= 280 ; j += 40)
{
  context.beginPath()
  context.moveTo(20, 20)
  context.arcTo(240, 240, 460, 20, j)
  context.lineTo(460, 20)
  context.stroke()
  context.closePath()
}
The arcTo  method draws only up to the point at which the arc touches the second
imaginary tangent. So, after each call to arcTo , the lineTo  method creates the
remainder of the line from wherever arcTo  left off to location 460,20. Then the result
is drawn to the canvas with a call to stroke , and the path is closed.
As you can see in Figure 23-16 , when arcTo  is called with a radius value of 0, it cre‐
ates a sharp join. In this case, it’s a right angle (but if the two imaginary tangents are
at other angles to each other, then the join will be at that angle). Then, as the radius
increases in size, you can see the arcs getting larger and larger.
594 | Chapter 23: The HTML5 Canvas

Figure 23-16. Drawing arcs of different  radii
Essentially, what you can best use arcTo  for is to curve from one section of drawing to
another, following an arc based on the previous and subsequent positions, as if they
were tangential to the arc to be created. If this sounds complicated, don’t worry: you’ll
soon get the hang of it and find it’s actually a handy and logical way to draw arcs.
The quadraticCurveTo Method
Useful as arcs are, they are only one type of curve and can be limiting for more-
complex designs. But have no fear: there are still more ways to draw curves, such as
the quadraticCurveTo  method.  Using this method, you can place an imaginary
attractor near (or far from) a curve to pull it in that direction, in a similar way to the
path of an object in space being pulled by the gravity of the planets and stars it passes.
Unlike with gravity, though, the farther away the attractor is, the more  it pulls!
In Example 23-18 , there are six calls to this method, creating the path for a fluffy
cloud, which is then filled in white. Figure 23-17  illustrates how the angles of the
dashed line outside the cloud represent the attractor points applied to each curve.
Example 23-18. Drawing a cloud with quadratic curves
context.beginPath()
context.moveTo(180, 60)
context.quadraticCurveTo(240,   0, 300,  60)
context.quadraticCurveTo(460,  30, 420, 100)
context.quadraticCurveTo(480, 210, 340, 170)
context.quadraticCurveTo(240, 240, 200, 170)
context.quadraticCurveTo(100, 200, 140, 130)
context.quadraticCurveTo( 40,  40, 180,  60)
context.fillStyle = 'white'
Working with Curves | 595

context.fill()
context.closePath()
Figure 23-17. Drawing with quadratic curves
Incidentally, to achieve the dotted line around the cloud in this
image, I used the stroke  method  in conjunction with the setLine
Dash  method, which takes a list representing the dash and space
lengths. In this instance, I used setLineDash([2, 3]) , but you can
create dash lines as complicated as you like, such as setLine
Dash([1, 2, 1, 3, 5, 1, 2, 4]) . However, I haven’t docu‐
mented this feature because it’s been implemented only in IE,
Opera, and Chrome so far. Fingers crossed that it’ll be added to the
other browsers soon, though, as it will be a great enhancement for
creating contours and boundaries for mapping purposes, for
example.
The bezierCurveTo Method
If you still don’t find quadratic curves flexible  enough for your needs, how about hav‐
ing access to two attractors for each curve? Using this method, you can do just that, as
in Example 23-19 , where a curve is created between location 24,20 and 240,220, but
with invisible attractors off the canvas (in this case) at locations 720,480 and
–240,–240. Figure 23-18  shows how this curve gets warped.
Example 23-19. Creating a Bézier curve with two attractors
context.beginPath()
context.moveTo(240, 20)
context.bezierCurveTo(720, 480, -240, -240, 240, 220)
596 | Chapter 23: The HTML5 Canvas

context.stroke()
context.closePath()
Figure 23-18. A Bézier curve with two attractors
Attractors do not need to be at opposite sides of a canvas, because you can place them
anywhere, and when they are near each other, they will exert a combined pull (rather
than opposing pulls, as in the preceding example). Using these various types of curve
methods, it’s possible for you to draw every type of curve you could ever need.
Manipulating Images
Not only can you draw and write on the canvas with graphical methods, but you can
also place images on or extract them from a canvas.  And you’re not limited to simple
copy and paste commands, because you can stretch and distort images when reading
or writing them, and also have full control over compositing and shadow effects.
The drawImage Method
Using the drawImage  method, you can take an image object that was loaded from a
website, uploaded to a server, or even extracted from a canvas, and draw it onto a
canvas. The method supports a wide variety of arguments, many of which are
optional, but at its simplest you call drawImage  as follows, in which just the image and
a pair of x and y coordinates are passed:
context.drawImage(myimage, 20, 20)
This command draws the image contained in the myimage  object onto the canvas with
the context of context , with its top-left corner at location 20,20.
Manipulating Images | 597

To ensure that an image has been loaded before you use it, best
practice is to enclose your image-handling code within a function
that is triggered only upon image load, like this:
myimage     = new Image()
myimage.src = 'image.gif'
myimage.onload = function()
{
  context.drawImage(myimage, 20, 20)
}
Resizing an Image
If you need to resize an image when it is placed on the canvas, you add a second pair
of arguments to the call representing the width and height you require, like this
(highlighted in bold):
context.drawImage(myimage, 140,  20, 220, 220)
context.drawImage(myimage, 380,  20,  80, 220)
Here the image is placed at two locations: the first is at 140,20, where the image is
enlarged (from a 100-pixel square to a 220-pixel square), while the second goes to
location 380,20 with the image being squashed horizontally and expanded vertically,
to a width and height of 80×220 pixels.
Selecting an Image Area
Y ou’re not stuck having to use an entire image; it’s also possible to choose an area
within an image when using drawImage . This can be handy, for example, if you wish
to place all the graphical images you intend to use in a single image file, and then just
grab the sections of the image that you need. This is a trick developers often use to
speed up page loading and decrease server hits.
It’s a little trickier to do this, though, because rather than add more arguments at the
end of the list for this method, when extracting a portion of an image, you must place
those arguments first.
So, for example, to place an image at location 20,140, you might issue this command:
context.drawImage(myimage, 20, 140)
And to give it a width and height of 100×100 pixels, you would modify the call like
this (highlighted in bold):
context.drawImage(myimage, 20, 140, 100, 100)
But to grab (or crop) just a 40×40-pixel subsection (for example), with its top-left
corner at location 30,30 of the image, you would call the method like this (with the
new arguments in bold):
598 | Chapter 23: The HTML5 Canvas

context.drawImage(myimage, 30, 30, 40, 40,  20, 140)
And to resize the grabbed portion to 100 pixels square, you would use the following:
context.drawImage(myimage, 30, 30, 40, 40 , 20, 140, 100, 100)
I find this very confusing and cannot think of a logical reason for
why this method works this way. But, since it does, I’m afraid
there’s nothing you can do other than force yourself to remember
which arguments go where under which conditions.
Example 23-20  uses a variety of calls to the drawImage  method to obtain the result
shown in Figure 23-19 . To make things clearer, I have spaced out the arguments so
that values in each column provide the same information.
Example 23-20. Various ways of drawing an image on the canvas
myimage     = new Image()
myimage.src = 'image.png'
myimage.onload = function()
{
  context.drawImage(myimage,                  20,  20          )
  context.drawImage(myimage,                 140,  20, 220, 220)
  context.drawImage(myimage,                 380,  20,  80, 220)
  context.drawImage(myimage, 30, 30, 40, 40,  20, 140, 100, 100)
}
Figure 23-19. Drawing images to a canvas with resizing and cropping
Manipulating Images | 599

Copying from a Canvas
Y ou can also use a canvas as a source image for drawing to the same (or another) can‐
vas. Just supply the canvas object name in place of an image object, and use all the
remaining arguments in the same way as you would with an image.
At this point, I would have loved to show  you how to use a <video>
element (explained in the following chapter) as an image source for
drawing on the canvas. But sadly, Internet Explorer doesn’t yet sup‐
port this functionality, so it’s still too early to recommend the excit‐
ing features you can create this way—such as live video
manipulation, colorization, embossing, and much more. However,
if you’re curious, you can learn more about how you can combine
video with the canvas at http://html5doctor.com/video-canvas-
magic .
Adding Shadows
When you draw an image (or image section) or, indeed, anything else on the canvas,
you can also specify a shadow that should be placed under it by setting one or more
of the following properties:
shadowOffsetX
The horizontal offset in pixels by which the shadow should be shifted to the right (or
to the left if the value is negative).
shadowOffsetY
The vertical offset in pixels by which the shadow should be shifted down (or up if the
value is negative).
shadowBlur
The number of pixels over which to blur the shadow’s outline.
shadowColor
The base color to use for the shadow. If a blur is in use, this color will blend with the
background in the blurred area.
These properties can apply to text and lines as well as solid images, as in
Example 23-21 , in which some text, an image, and an object created using a path all
have shadows added to them. In Figure 23-20 , you can see the shadows intelligently
flow around the visible portions of images, not just their rectangular boundaries.
Example 23-21. Applying shadows when drawing on the canvas
myimage     = new Image()
myimage.src = 'apple.png'
600 | Chapter 23: The HTML5 Canvas

orig   = 95
points = 21
dist   = Math.PI / points * 2
scale1 = 75
scale2 = 50
myimage.onload = function()
{
  context.beginPath()
  for (j = 0 ; j < points ; ++j)
  {
    x = Math.sin(j * dist)
    y = Math.cos(j * dist)
    context.lineTo(orig + x * scale1, orig + y * scale1)
    context.lineTo(orig + x * scale2, orig + y * scale2)
  }
  context.closePath()
  context.shadowOffsetX = 5
  context.shadowOffsetY = 5
  context.shadowBlur    = 6
  context.shadowColor   = '#444'
  context.fillStyle     = 'red'
  context.stroke()
  context.fill()
  context.shadowOffsetX = 2
  context.shadowOffsetY = 2
  context.shadowBlur    = 3
  context.shadowColor   = 'yellow'
  context.font          = 'bold 36pt Times'
  context.textBaseline  = 'top'
  context.fillStyle     = 'green'
  context.fillText('Sale now on!', 200, 5)
  context.shadowOffsetX = 3
  context.shadowOffsetY = 3
  context.shadowBlur    = 5
  context.shadowColor   = 'black'
  context.drawImage(myimage, 245, 45)
}
Manipulating Images | 601

Figure 23-20. Shadows under different  types of drawing objects
Editing at the Pixel Level
Not only does the HTML5 canvas provide you with a powerful range of drawing
methods, but it also lets you get your hands dirty and work under the hood directly at
the pixel level with a trio of powerful methods.
The getImageData Method
With the getImageData  method, you can grab a portion (or all) of a canvas so that
you can alter the retrieved data in any way you like, and then save it back or else‐
where in the canvas (or to another canvas).
To illustrate how this works, Example 23-22  first loads in a ready-made image and
draws it onto a canvas. Then the canvas data is read back into an object called idata ,
where  all the colors are averaged together to change each pixel to grayscale, and then
tweaked a little to shift each color toward sepia, as shown in Figure 23-21 .
Example 23-22. Manipulating image data
myimage     = new Image()
myimage.src = 'photo.jpg'
myimage.onload = function()
{
  context.drawImage(myimage, 0, 0)
  idata = context.getImageData(0, 0, myimage.width, myimage.height)
  for (y = 0 ; y < myimage.height ; ++y)
  {
    pos = y * myimage.width * 4
602 | Chapter 23: The HTML5 Canvas

for (x = 0 ; x < myimage.width ; ++x)
    {
      average =
      (
        idata.data[pos]     +
        idata.data[pos + 1] +
        idata.data[pos + 2]
      ) / 3
      idata.data[pos]     = average + 50
      idata.data[pos + 1] = average
      idata.data[pos + 2] = average - 50
      pos += 4;
    }
  }
  context.putImageData(idata, 320, 0)
}
Figure 23-21. Converting an image to sepia (only a minor difference  will be seen when
this figure  is viewed in grayscale)
The data Array
This image manipulation works thanks to the data  array, which is a property of the
idata  object returned by the call to getImageData . This method returns an array
containing all the picture pixel data in its component parts of red, green, blue, and
alpha transparency. Therefore, four items of data are used to store each colored pixel.
All the data is stored sequentially in the data array, such that the value for red is fol‐
lowed by that for blue, then green, and then alpha; then, the next item in the array is
the red value for the following pixel, and so on, like the following (for the pixel at
location 0,0):
idata.data[0] // Red level
idata.data[1] // Green level
Editing at the Pixel Level | 603

idata.data[2] // Blue level
idata.data[3] // Alpha level
Location 1,0 then follows, like this:
idata.data[4] // Red level
idata.data[5] // Green level
idata.data[6] // Blue level
idata.data[7] // Alpha level
In this image, everything continues in the same fashion until the rightmost pixel of
the image in row 0 (which is the 320th pixel, at location 319,0) is reached. At that
point, the value 319 is multiplied by 4 (the number of items of data in each pixel) to
arrive at the following array elements, which contain this pixel’s data:
idata.data[1276] // Red level
idata.data[1277] // Green level
idata.data[1278] // Blue level
idata.data[1279] // Alpha level
Then the data pointer moves all the way back to the first column of the image, but
this time of row 1, at location 0,1 which (because each row in this image is 320 pixels
wide), is at an offset of (0 × 4) + (1 × 320 × 4), or 1,280:
idata.data[1280] // Red level
idata.data[1281] // Green level
idata.data[1282] // Blue level
idata.data[1283] // Alpha level
So, if the image data is stored in idata , the image width in w, and the pixel location to
access in x and y, the key formulae to use when directly accessing image data are:
red   = idata.data[x * 4 + y * w * 4    ]
green = idata.data[x * 4 + y * w * 4 + 1]
blue  = idata.data[x * 4 + y * w * 4 + 2]
alpha = idata.data[x * 4 + y * w * 4 + 3]
Using this knowledge, we create the  sepia effect in Figure 23-12  by taking just the red,
blue, and green components of each pixel and averaging them, like this (where pos is
a variable pointer to the location in the array of the current pixel):
average =
(
  idata.data[pos]     +
  idata.data[pos + 1] +
  idata.data[pos + 2]
) / 3
With average  now containing the average color value (which we attain by adding all
the pixel values and dividing by 3), this value is written back to all colors of the pixel,
but with the red boosted by a value of 50, and the blue reduced by the same amount:
604 | Chapter 23: The HTML5 Canvas

idata.data[pos]     = average + 50
idata.data[pos + 1] = average
idata.data[pos + 2] = average - 50
The result is to increase the red and reduce the blue level of each pixel (of what would
otherwise now become a monochrome image, if only the average value were written
back to these colors), giving it a sepia cast.
If you’re interested in performing more advanced image manipula‐
tions, you may wish to refer to Halfpap  or HTML5 Rocks , which
both cover using convolution on an HTML5 canvas in detail.
The putImageData Method
When you’ve modified the image data array to your requirements, all you need to do
to write it to the canvas is call the putImageData  method,  passing it the idata  object
and the coordinates of the top-left corner at which it should appear—as in the previ‐
ous example, and as follows, which (in this case) places the modified copy of the
image to the right of the original:
context.putImageData(idata, 320, 0)
If you wish to modify only part of a canvas, you don’t have to grab
the entire canvas; just fetch a section containing the area in which
you are interested. And neither do you have to write back image
data to the location from where you got it; image data can be writ‐
ten to any part of a canvas.
The createImageData Method
Y ou don’t have to create an object directly from a canvas; you can also create a new
one with blank data by calling the createImageData  method. The following example
creates an object with a width of 320 and height of 240 pixels:
idata = createImageData(320, 240)
Alternatively, you can create a new object from an existing object, like this:
newimagedataobject = createImageData(imagedata)
It’s then up to you what you do with these objects to add pixel data to them or other‐
wise modify them, how you paste them onto the canvas or create other objects from
them, and so on.
Editing at the Pixel Level | 605

Advanced Graphical Effects
Among the more advanced features available on the  HTML5 canvas are  the ability to
assign various compositing and transparency effects, as well as to apply powerful
transformations such as scaling, stretching, and rotating.
The globalCompositeOperation Property
There are 12 different methods available to fine-tune the way you place an object on
the canvas, taking into account existing and future objects. These are called composit‐
ing options, and they are applied like this:
context.globalCompositeOperationProperty = 'source-over'
The compositing types are as follows:
source-over
The default. The source image is copied over the destination image.
source-in
Only parts of the source image that will appear within the destination are shown, and
the destination image is removed. Any alpha transparency in the source image causes
the destination under it to be removed.
source-out
Only parts of the source image that do not appear within the destination are shown,
and the destination image is removed. Any alpha transparency in the source image
causes the destination under it to be removed.
source-atop
The source image is displayed where it overlays the destination. The destination
image is displayed where the destination image is opaque and the source image is
transparent. Other regions are transparent.
destination-over
The source image is drawn under the destination image.
destination-in
The destination image displays where the source and destination image overlap, but
not in any areas of source image transparency. The source image does not display.
destination-out
Only those parts of the destination outside of the source image’s nontransparent sec‐
tions are shown. The source image does not display.
606 | Chapter 23: The HTML5 Canvas

destination-atop
The source image displays where the destination is not displayed. Where the destina‐
tion and source overlap, the destination image is displayed. Any transparency in the
source image prevents that area of the destination image being shown.
lighter
The sum of the source and destination is applied such that where they do not overlap,
they display as normal; where they do overlap, the sum of both images is shown but
lightened.
darker
The sum of the source and destination is applied such that where they do not overlap,
they display as normal; where they do overlap, the sum of both images is shown but
darkened.
copy
The source image is copied over the destination. Any transparent area of the source
causes any destination that it overlaps to not display.
xor
Where the source and destination images do not overlap, they display as normal.
Where they do overlap, their color  values are exclusive-or ed.
Example 23-23  illustrates the effect of all of these compositing types by creating 12
different canvases, each with two objects (a filled circle and the yin-yang image) offset
from each other but overlapping.
Example 23-23. Using all 12 types of compositing effects
image     = new Image()
image.src = 'image.png'
image.onload = function()
{
  types =
  [
    'source-over',     'source-in',        'source-out',
    'source-atop',     'destination-over', 'destination-in',
    'destination-out', 'destination-atop', 'lighter',
    'darker',          'copy',             'xor'
  ]
  for (j = 0 ; j < 12 ; ++j)
  {
    canvas               = O('c' + (j + 1))
    context              = canvas.getContext('2d')
    S(canvas).background = 'lightblue'
    context.fillStyle    = 'red'
Advanced Graphical Effects  | 607

context.arc(50, 50, 50, 0, Math.PI * 2, false)
    context.fill()
    context.globalCompositeOperation = types[j]
    context.drawImage(image, 20, 20, 100, 100)
  }
}
As with some others in this chapter, this example (downloadable
from the companion website) includes some HTML and/or CSS to
enhance the display, which isn’t shown here because it’s not essen‐
tial to the program’s operation.
This program uses a for loop to iterate through each compositing type, as stored in
the array types . Each time around the loop, a new context is created on the next of
the 12 canvas elements already created in some earlier HTML (not shown), with the
IDs of c1 through c12.
In each canvas, a 100-pixel-diameter red circle is first placed at the top left, and then
the compositing type is selected and the yin-yang image is placed over the circle but
offset to the right and down by 20 pixels. Figure 23-22  shows the results of each type
in action. As you can see, it’s possible to achieve a wide variety of effects.
Figure 23-22. The 12 compositing effects  in action
608 | Chapter 23: The HTML5 Canvas

The globalAlpha Property
When drawing on the canvas, you can specify the amount of transparency to apply
using the globalAlpha  property,  which supports values from 0 (fully transparent) to
1 (fully opaque). The following command sets the alpha to a value of 0.9, such that
future draw operations will be 90 percent opaque (or 10 percent transparent):
context.globalAlpha = 0.9
This property can be used with all other properties, including the compositing
options.
Transformations
The canvas supports four functions for applying transformations to elements when
drawing them to the HTML5 canvas: scale , rotate , translate , and transform .
They can be used alone, or together to produce even more interesting effects.
The scale Method
Y ou can scale future drawing operations by first calling  the scale  method, supplying
horizontal and vertical scaling factors, which can be negative, zero, or positive values.
In Example 23-24  the yin-yang image is drawn to the canvas at its original size of
100×100 pixels. Then scaling of 3 times horizontally and 2 times vertically is applied,
and the drawImage  function is called again to place the stretched image next to the
original. Finally, scaling is reapplied with values of 0.33  and 0.5 to restore everything
back to normal, and the image is once more drawn, this time below the original.
Figure 23-23  shows the result.
Example 23-24. Scaling up and down in size
context.drawImage(myimage, 0, 0)
context.scale(3, 2)
context.drawImage(myimage, 40, 0)
context.scale(.33, .5)
context.drawImage(myimage, 0, 100)
Transformations | 609

Figure 23-23. Scaling an image up and then down again
If you look carefully, you may notice that the copy image under the original is a little
bit fuzzy due to the scaling up and then down.
If you use negative values for one or more scaling parameters, you
can reverse an element in either the horizontal or vertical direction
(or both), at the same time as (or instead of) scaling. For example,
the following flips the context to create a mirror image:
context.scale(-1, 1)
The save and restore Methods
If you need to use several scaling operations on different drawing elements, not only
can you introduce fuzziness into the results, but it can be very time-consuming to cal‐
culate that a three-times upward scaling requires a 0.33  value to scale back down
again (and a two-times upscale requires a value of 0.5 to reverse).
For this reason, you can call save  to save the current context before issuing a scale
call, and later return scaling back to normal by issuing a restore  call. Check out the
following, which can replace the code in Example 23-24 :
context.drawImage(myimage, 0, 0)
context.save()
context.scale(3, 2)
context.drawImage(myimage, 40, 0)
context.restore()
context.drawImage(myimage, 0, 100)
The save  and restore  methods are very powerful because they don’t just apply to
image scaling. In fact, they apply across all the following properties, and can therefore
be used at any time to save the current properties, and then restore them later: fill
610 | Chapter 23: The HTML5 Canvas

Style , font , globalAlpha , globalCompositeOperation , lineCap , lineJoin , line
Width , miterLimit , shadowBlur , shadowColor , shadowOffsetX , shadowOffsetY ,
strokeStyle , textAlign , and textBaseline . The properties of the following meth‐
ods are also managed by save  and restore : scale , rotate , translate , and trans
form .
The rotate Method
Using the rotate  method, you can choose the angle at which to apply an object (or
any of the drawing methods) to the canvas, specified in radians, which are the same
as 180 / π, or about 57 degrees, each.
Rotation takes place around the canvas origin, which, by default, is its top-left corner
(but as you’ll see shortly, this can be changed). Example 23-25  displays the yin-yang
image four times, rotating each consecutive image by Math.PI  / 25 radians.
Example 23-25. Rotating an image
for (j = 0 ; j < 4 ; ++j)
{
  context.drawImage(myimage, 20 + j * 120 , 20)
  context.rotate(Math.PI / 25)
}
As you can see in Figure 23-24 , the result may not be quite what you expect, because
the image hasn’t been rotated about itself. Rather, the rotations have taken place
around the canvas origin at location 0,0. What’s more, each new rotation has com‐
pounded the previous one. However, to correct for these things, you can always use
the translate  method  in conjunction with the save  and restore  methods.
Radians are a sensible unit of measurement because there are π × 2
radians in a complete circle. So π radians is a half circle, π ÷ 2 radi‐
ans is a quarter circle, and π ÷ 2 × 3 (or π × 1.5) radians is three-
quarters of a circle, and so on. To save having to remember the
value of π, you can always refer to the value in Math.PI .
Transformations | 611

Figure 23-24. An image at four different  rotations
The translate Method
To change the origin of a rotation, you can call the translate  method  to shift it to
somewhere else, which can be anywhere inside (or outside) the canvas or, more usu‐
ally, somewhere within the destination location of the object (usually its center).
Example 23-26  performs this translation prior to each call to rotate , now resulting in
the effect that was probably intended. Additionally, the save  and restore  methods
are called before and after each operation to ensure that each rotation is applied inde‐
pendently, not compounded on the previous one.
Example 23-26. Rotating objects in place
w = myimage.width
h = myimage.height
for (j = 0 ; j < 4 ; ++j)
{
  context.save()
  context.translate(20 + w / 2 + j * (w + 20), 20 + h / 2)
  context.rotate(Math.PI / 5 * j)
  context.drawImage(myimage, -(w / 2), -(h / 2))
  context.restore()
}
In this example, before each rotation the context is saved and the origin is translated
to a point exactly in the center of where each image will be drawn. We then issue the
rotation and draw the image up and to the left of the new origin by supplying nega‐
612 | Chapter 23: The HTML5 Canvas

tive values, such that its center matches the origin point. The result of this is shown in
Figure 23-25 .
Figure 23-25. Rotating images in place
To recap: when you wish to rotate or transform (described next) an object in place,
you should perform the following actions:
1.Save the context.
2.Translate the canvas origin to the center of where the object is to be placed.
3.Issue the rotation or transformation instruction.
4.Draw the object with any drawing method supported, using a negative destina‐
tion location point half the object’s width to the left, and half its height upward.
5.Restore the context to revert the origin.
The transform Method
When you’ve exhausted all the other canvas features  and still can’t  manipulate objects
in just the way you need, it’s time to turn to the transform  method. With it, you can
apply a transformation matrix to the objects you draw to the canvas, giving you a
multitude of possibilities, and powerful features that can combine scaling and rotat‐
ing in a single instruction.
The transformation matrix used by this method is a 3×3 matrix of nine values, but
only six of these are supplied externally to the transform  method. So, rather than
explain how this matrix multiplication works, I only need to explain the effects of its
six arguments, which, in order, are as follows:
1.Horizontal scale
2.Horizontal skew
3.Vertical skew
Transformations | 613

4.Vertical scale
5.Horizontal translate
6.Vertical translate
Y ou can apply these values in many ways—for example, by emulating the scale
method from Example 23-24  by replacing this call:
context.scale(3, 2)
with the following:
context.transform( 3, 0, 0, 2, 0, 0)
Or, in the same way, you can replace this call from Example 23-26 :
context.translate(20 + w / 2 + j * (w + 20), 20 + h / 2)
with the following:
context.transform(1, 0, 0, 1, 20 + w / 2 + j * (w + 20) , 20 + h / 2 )
Note how the horizontal and vertical scaling arguments are given
values of 1 to ensure a 1:1 result, while the skew values are 0 to pre‐
vent the result from being skewed.
Y ou could even combine the previous two lines of code to get a translation and scale
at the same time, like this:
context.transform( 3, 0, 0, 2, 20 + w / 2 + j * (w + 20) , 20 + h / 2 )
As you look at the skew arguments, as you might expect they result in an element
being skewed in the direction specified—for example, creating a rhombus from a
square.
For example, Example 23-27  draws the yin-yang image on the canvas, followed by a
skewed copy created with the transform  method. The skew value can be any nega‐
tive, zero, or positive amount, but I chose a horizontal value of 1, which has skewed
the bottom of the image by one image width to the right, and pulled everything else
along with it proportionally (see Figure 23-26 ).
Example 23-27. Creating an original and skewed image
context.drawImage(myimage, 20, 20)
context.transform(1, 0, 1, 1, 0, 0)
context.drawImage(myimage, 140, 20)
614 | Chapter 23: The HTML5 Canvas

Figure 23-26. Horizontally skewing an object to the right
Y ou can even rotate an object with transform  by supplying one
negative and one opposite positive skew value. But beware: when
you do this, you’ll modify the size of an element, and will therefore
also need to adjust the scale arguments at the same time. Plus,
you’ll also need to remember to translate the origin. Thus, I recom‐
mend sticking with the rotate  method  for this until you are fully
experienced with using transform .
The setTransform Method
As an alternative to using the save  and restore  methods, you can set an absolute
transform, which has the effect of resetting the transformation matrix and then
applying the supplied values. Use the setTransform  method just like transform , as in
this example (which applies a horizontal positive skew with the value 1):
context.setTransform(1, 0, 1, 1, 0, 0)
To learn more about transformation matrixes, see the comprehen‐
sive Wikipedia article .
Summary
As of this writing, the HTML5 standard is still not 100 percent applied across all
major browsers but, thankfully, most of the canvas functionality is. And even though
there’s more to come, such as 3D contexts, the HTML5 canvas already represents a
tremendous new asset for web developers to continue making bigger, better, and
more-professional and compelling websites. In the following chapter, we’ll take a look
at two other major new enhancements to HTML: in-browser, plug-in-free audio and
video.
Summary | 615

Questions
1.How do you create a canvas element in HTML?
2.How do you give JavaScript access to a canvas element?
3.How do you start and finish the creation of a canvas path?
4.What method can you use to extract data from a canvas into an image?
5.How can you create gradient fills of more than two colors?
6.How can you adjust the width of lines when drawing?
7.Which method would you use to specify a section of a camera such that future
drawing takes place only within that area?
8.How can you draw a complex curve with two imaginary attractors?
9.How many items of data per pixel are returned by the getImageData  method?
10.Which two parameters to the transform  method apply to scaling operations?
See Chapter 23 Answers  in Appendix A  for the answers to these questions.
616 | Chapter 23: The HTML5 Canvas

CHAPTER 24
HTML5 Audio and Video
One of the biggest  driving forces behind the  growth of the Internet has been the insa‐
tiable demand from users for ever more multimedia in the form of audio and video.
Initially, bandwidth was so precious that there was no such thing as live streaming,
and it could take minutes or even hours to download an audio track, let alone a video.
The high cost of bandwidth and limited availability of fast modems drove the devel‐
opment of faster and more efficient compression algorithms, such as MP3 audio and
MPEG video, but even then the only way to download files in any reasonable length
of time was to drastically reduce their quality.
One of my earlier Internet projects, back in 1997, was the UK’s first online radio sta‐
tion licensed by the music authorities. Actually, it was more of a podcast (before the
term was coined) because we made a daily half-hour show and then compressed it
down to 8-bit, 11KHz mono using an algorithm originally developed for telephony,
and it sounded like phone quality, or worse. Still, we quickly gained thousands of lis‐
teners who would download the show and then listen to it as they surfed to the sites
discussed in it by means of a pop-up browser window containing a plug-in.
Thankfully for us, and everyone publishing multimedia, it soon became possible to
offer greater audio and video quality, but still only by asking the user to download
and install a plug-in player. Flash became the most popular of these players, after
beating rivals such as RealAudio, but it gained a bad reputation as the cause of many a
browser crash, and constantly required upgrading when new versions were released.
So it was generally agreed that the way ahead was to come up with some web stand‐
ards for supporting multimedia directly within the browser.  Of course, browser
developers such as Microsoft and Google had differing visions of what these stand‐
ards should look like, but after the dust had settled, they had agreed on a subset of file
617

types that all browsers should play natively, and these were introduced into the
HTML5 specification.
Finally, it is possible (as long as you encode your audio and video in a few different
formats) to upload multimedia to a web server, place a couple of HTML tags in a web
page, and have the media play on any major desktop browser, smartphone, or tablet
device, without the user having to download a plug-in or make any other changes.
There are still a lot of older browsers out there, so Flash remains
important for supporting them. In this chapter, I show you how to
add code to use Flash as a backup to HTML5 audio and video, to
cover as many hardware and software combinations as possible.
About Codecs
The term codec  stands for en coder/decoder.  It describes the functionality provided by
software that encodes and decodes media such as audio and video. In HTML5 there
are a number of different sets of codecs available, depending on the browser used.
Following are the codecs supported by the HTML5 <audio>  tag (and also when audio
is attached to HTML5 video):
AAC
This audio codec, which stands for Advanced Audio Encoding, is used by Apple’s
iTunes store, and is a proprietary patented technology supported by Apple, Google,
and Microsoft. It generally uses the .aac file extension. Its mime type is audio/aac .
MP3
This audio codec, which stands for MPEG Audio Layer 3, has been available for
many years. While the term is often (incorrectly) used to refer to any type of digital
audio, it is a proprietary patented technology that is supported by Apple, Google,
Mozilla Firefox, and Microsoft. The file extension it uses is .mp3 . Its mime type is
audio/mpeg .
PCM
This audio codec, which stands for Pulse Coded Modulation, stores the full data as
encoded by an analog-to-digital converter, and is the format used for storing data on
audio CDs. Because it does not use compression, it is called a lossless  codec and its
files are generally many times larger than AAC or MP3 files. It is supported by Apple,
Mozilla Firefox, and Opera. Usually this type of file has the extension .wav . Its mime
type is audio/wav , but you may also see audio/wave .
Vorbis
Sometimes referred to as Ogg Vorbis—because it generally uses the .ogg file extension
—this audio codec is unencumbered by patents and free of royalty payments. It is
618 | Chapter 24: HTML5 Audio and Video

supported by Google Chrome, Mozilla Firefox, and Opera. Its mime type is audio/
ogg, or sometimes audio/oga .
The following list summarizes the major operating systems and browsers, along with
the audio types their latest versions support:
•Apple iOS : AAC, MP3, PCM
•Apple Safari : AAC, MP3, PCM
•Google Android : 2.3+ AAC, MP3, Vorbis
•Google Chrome : AAC, MP3, Vorbis
•Microsoft  Internet Explorer : AAC, MP3
•Mozilla Firefox : MP3, PCM, Vorbis
•Opera : PCM, Vorbis
The outcome of these different levels of codec support is that you always need at least
two versions of each audio file to ensure it will play on all platforms. One of these
should be Vorbis to support Opera, but for the second you have a choice of either
AAC or MP3.
The <audio> Element
To cater to all platforms, you need to record or convert your content using multiple
codecs and then list them all within <audio>  and </audio>  tags, as in Example 24-1 .
The nested <source>  tags then contain the various media you wish to offer to a
browser. Because the controls  attribute is supplied, the result looks like Figure 24-1 .
Example 24-1. Embedding three different  types of audio files
<audio controls>
  <source src='audio.m4a' type='audio/aac'>
  <source src='audio.mp3' type='audio/mp3'>
  <source src='audio.ogg' type='audio/ogg'>
</audio>
The <audio> Element | 619

Figure 24-1. Playing an audio file
In this example I included three different audio types, because that’s perfectly accepta‐
ble, and can be a good idea if you wish to ensure that each browser can locate its pre‐
ferred format rather than just one it knows how to handle. However, the example will
still play on all platforms if one or the other (but not both) of the MP3 or the AAC
files is dropped.
The <audio>  element and its partner <source>  tag support several attributes:
autoplay
Causes the audio to start playing as soon as it is ready
controls
Causes the control panel to be displayed
loop
Sets the audio to play over and over
preload
Causes the audio to begin loading even before the user selects Play
src
Specifies the source location of an audio file
type
Specifies the codec used in creating the audio
If you don’t supply the controls  attribute to the <audio>  tag, and don’t use the auto
play  attribute either, the sound will not play and there won’t be a Play button for the
user to click to start playback. This would leave you no option other than to offer this
functionality in JavaScript, as in Example 24-2  (with the additional code required
highlighted in bold), which provides the ability to play and pause the audio,  as shown
in Figure 24-2 .
620 | Chapter 24: HTML5 Audio and Video

Example 24-2. Playing audio using JavaScript
<!DOCTYPE html>
<html>
  <head>
    <title>Playing Audio with JavaScript</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <audio id='myaudio' >
      <source src='audio.m4a' type='audio/aac'>
      <source src='audio.mp3' type='audio/mp3'>
      <source src='audio.ogg' type='audio/ogg'>
    </audio>
    <button onclick='playaudio()'>Play Audio</button>
    <button onclick='pauseaudio()'>Pause Audio</button>
    <script>
      function playaudio()
      {
        O('myaudio').play()
      }
      function pauseaudio()
      {
        O('myaudio').pause()
      }
    </script>
  </body>
</html>
Figure 24-2. HTML5 audio can be controlled with JavaScript
This works by calling the play  or pause  methods of the myaudio  element when the
buttons are clicked.
Supporting Non-HTML5 Browsers
It will probably be necessary to support older browsers for the foreseeable future by
providing a fallback to Flash. Example 24-3  shows how you can do this using a Flash
plug-in saved as audioplayer.swf  (available, along with all the examples, in the free
Supporting Non-HTML5 Browsers | 621

download at the http://lpmj.net  companion website). The code to add is highlighted
in bold.
Example 24-3. Providing a Flash fallback for non-HTML5 browsers
<audio controls>
  <object type="application/x-shockwave-flash"
    data="audioplayer.swf" width="300" height="30">
    <param name="FlashVars"
      value="mp3=audio.mp3&showstop=1&showvolume=1">
  </object>
  <source src='audio.m4a' type='audio/aac'>
  <source src='audio.mp3' type='audio/mp3'>
  <source src='audio.ogg' type='audio/ogg'>
</audio>
Here we take advantage of the fact that on non-HTML5 browsers, anything inside the
<audio>  tag (other than the <source>  elements, which are ignored) will be acted on
by the browser. Therefore, by placing an <object>  element there that calls up a Flash
player, we ensure that any non-HTML5 browsers will at least have a chance of playing
the audio, as long as they have Flash installed, as shown in Figure 24-3 .
Figure 24-3. The Flash audio player has been loaded
The particular audio player used in this example, audioplayer.swf , takes the following
arguments and values to the FlashVars  attribute of the <param>  element:
mp3
The URL of an MP3 audio file.
showstop
If 1, shows the Stop button; otherwise, it is not displayed.
showvolume
If 1, shows the volume bar; otherwise, it is not displayed.
622 | Chapter 24: HTML5 Audio and Video

As with many elements, you can easily resize the object to (for example) 300×30 pix‐
els by providing these values to its width  and height  attributes.
The <video> Element
Playing video in HTML5 is quite similar to audio; you just use the <video>  tag and
provide <source>  elements  for the media you are offering. Example 24-4  shows how
you do this with three different video  codec types, as displayed in Figure 24-4 .
Example 24-4. Playing HTML5 video
<video width='560' height='320' controls>
  <source src='movie.mp4'  type='video/mp4'>
  <source src='movie.webm' type='video/webm'>
  <source src='movie.ogv'  type='video/ogg'>
</video>
Figure 24-4. Playing HTML5 video
The Video Codecs
As with audio, there are a number of video codecs available, with differing support
across multiple browsers. These codecs come in different containers, as follows:
The <video> Element | 623

MP4
A license-encumbered, multimedia container format standard specified as a part of
MPEG-4, supported by Apple, Microsoft, and, to a lesser extent Google, since it has
its own WebM container format. Its mime type is video/mp4 .
OGG
A free, open container format maintained by the Xiph.Org Foundation. The creators
of the OGG format state that it is unrestricted by software patents and is designed to
provide for efficient streaming and manipulation of high-quality digital multimedia.
Its mime type is video/ogg , or sometimes video/ogv .
WebM
An audio-video format designed to provide a royalty-free, open video compression
format for use with HTML5 video. The project’s development is sponsored by Goo‐
gle. There are two versions: VP8 and the newer VP9. Its mime type is video/webm .
These may then contain one of the following video codecs:
H.264
A patented, proprietary video codec for which playback is free for the end user, but
which may incur royalty fees for all parts of the encoding and transmission process.
At the time of writing, all of Apple, Google, Mozilla Firefox, and Microsoft Internet
Explorer support this codec, while Opera (the remaining major browser) doesn’t.
Theora
This is a video codec unencumbered by patents, and free of royalty payments at all
levels of encoding, transmission, and playback. This codec is supported by Google
Chrome, Mozilla Firefox, and Opera.
VP8
This video codec is similar to Theora but is owned by Google, which has published it
as open source, making it royalty free. It is supported by Google Chrome, Mozilla
Firefox, and Opera.
VP9
As VP8 but more powerful, using half the bitrate.
The following list details the major operating systems and browsers, along with the
video types their latest versions support:
•Apple iOS : MP4/H.264
•Apple Safari : MP4/H.264
•Google Android : MP4, OGG, WebM/H.264, Theora, VP8
•Google Chrome : MP4, OGG, WebM/H.264, Theora, VP8, VP9
•Internet Explorer : MP4/H.264
•Mozilla Firefox : MP4, OGG, WebM/H.264, Theora, VP8, VP9
624 | Chapter 24: HTML5 Audio and Video

•Opera : OGG, WebM/Theora, VP8
Looking at this list, it’s clear that MP4/H.264 is almost unanimously supported,
except for the Opera browser. So if you’re prepared to ignore the 1 percent or so of
users this comprises (and hope that Opera will soon have to adopt the format any‐
way), you need to supply your video using only one file type: MP4/H.264. But for
maximum viewing, you really ought to encode in OGG/Theora or OGG/VP8 as well
(but not VP9, as it’s not yet been adopted by Opera).
Therefore, the movie.webm  file in Example 24-4  isn’t strictly needed, but shows how
you can add all the different file types you like, to give browsers the opportunity to
play back the formats they prefer.
The <video>  element and accompanying <source>  tag support  the following
attributes:
autoplay
Causes the video to start playing as soon as it is ready
controls
Causes the control panel to be displayed
height
Specifies the height at which to display the video
loop
Sets the video to play over and over
muted
Mutes the audio output
poster
Lets you choose an image to display where the video will play
preload
Causes the video to begin loading before the user selects Play
src
Specifies the source location of a video file
type
Specifies the codec used in creating the video
width
Specifies the width at which to display the video
The <video> Element | 625

If you wish to control video playback from JavaScript, you can do so using code such 
as that in Example 24-5  (with the additional code required highlighted in bold), and
shown in Figure 24-5 .
Example 24-5. Controlling video playback from JavaScript
<!DOCTYPE html>
<html>
  <head>
    <title>Playing Video with JavaScript</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <video id='myvideo'  width='560' height='320'>
      <source src='movie.mp4'  type='video/mp4'>
      <source src='movie.webm' type='video/webm'>
      <source src='movie.ogv'  type='video/ogg'>
    </video><br>
    <button onclick='playvideo()'>Play Video</button>
    <button onclick='pausevideo()'>Pause Video</button>
    <script>
      function playvideo()
      {
        O('myvideo').play()
      }
      function pausevideo()
      {
        O('myvideo').pause()
      }
    </script>
  </body>
</html>
626 | Chapter 24: HTML5 Audio and Video

Figure 24-5. JavaScript is being used to control the video
This code is just like controlling audio from JavaScript. Simply call the play  and/or
pause  methods of the myvideo  object to play and pause the video.
Supporting Older Browsers
Also as with audio, older  versions of browsers will still be in general use for a while to
come, so it makes sense to offer a Flash video fallback to people with non-HTML5
browsers. Example 24-6  shows you how to do this (highlighted in bold) using the
flowplayer.swf  file (available in the free download at http://lpmj.net ), and Figure 24-6
shows how it displays in a browser that doesn’t support HTML5 video.
Example 24-6. Providing Flash as a fallback video player
<video width='560' height='320' controls>
  <object width='560' height='320'
    type='application/x-shockwave-flash'
    data='flowplayer.swf'>
    <param name='movie' value='flowplayer.swf'>
    <param name='flashvars'
      value='config={"clip": {
        "url": "http://tinyurl.com/html5video-mp4",
        "autoPlay":false, "autoBuffering":true}}'>
    </object>
  <source src='movie.mp4'  type='video/mp4'>
The <video> Element | 627

<source src='movie.webm' type='video/webm'>
  <source src='movie.ogv'  type='video/ogg'>
</video>
Figure 24-6. Flash provides a handy fallback for non-HTML5 browsers
This Flash video player is particular about security, so it won’t play videos from a local
file system, only from a web server, so I have supplied a file on the Web (at
tinyurl.com/html5video-mp4 ) for this example to play.
Here are the argument s to supply to the flashvars  attribute of the <param>  element:
url
A URL on a web server of a .mp4  file to play.
autoPlay
If true , plays automatically; otherwise, waits for the Play button to be clicked.
autoBuffering
If true , in order to minimize buffering later on with slow connections, before it starts
playing, the video will be preloaded sufficiently for the available bandwidth.
For more information on the Flash flowplayer  program (and an
HTML5 version), check out http://flowplayer.org .
628 | Chapter 24: HTML5 Audio and Video

Summary
Using the information in this chapter, you will be able to embed any audio and video
on almost all browsers and platforms without worrying about whether users may or
may not be able to play it.
In the following chapter, I’ll demonstrate the use of a number of other HTML5 fea‐
tures, including geolocation and local storage.
Questions
1.Which two HTML element tags are used to insert audio and video into an
HTML5 document?
2.Which two audio codecs should you use to guarantee maximum playability on all
platforms?
3.Which methods can you call to play and pause HTML5 media playback?
4.How can you support media playback in a non-HTML5 browser?
5.Which two video codecs should you use to guarantee maximum playability on all
platforms?
See Chapter 24 Answers  in Appendix A  for the answers to these questions.
Summary | 629



CHAPTER 25
Other HTML5 Features
In this final chapter on HTML5, I explain how to use geolocation, local storage, and
web workers; show you how to allow web apps to run offline; and demonstrate the
use of in-browser dragging and dropping.
Strictly speaking, most of these features (like much of HTML5) aren’t really exten‐
sions to HTML, because you access them with JavaScript rather than with HTML
markup. They are simply technologies that are being embraced by browser develop‐
ers, and have been given the handy umbrella name of HTML5.
This means, though, that you need to have fully understood the JavaScript tutorial in
this book in order to use them properly. That said, once you get the hang of them,
you’ll wonder how you ever did without these powerful new features.
Geolocation and the GPS Service
The GPS (Global Positioning Satellite)  service  consists  of multiple satellites orbiting
the earth whose positions are very precisely known. When a GPS-enabled device
tunes into them, the different times at which signals from these various satellites
arrive enable the device to quite accurately know where it is; because the speed of
light (and therefore radio waves) is a known constant, the time it takes a signal to get
from a satellite to a GPS device indicates the satellite’s distance.
By noting the different times at which signals arrive from different satellites, which
are in precisely known orbital locations at any one time, a simple triangulation calcu‐
lation gives the device its position relative to the satellites within a few meters or less.
Many mobile devices, such as phones and tablets, have GPS chips and can provide
this information. But some don’t, others have them tuned off, and others may be used
indoors where they are shielded from the GPS satellites and therefore cannot receive
631

any signals. In these cases, additional techniques may be used to attempt to determine
your location.
Other Location Methods
If your device has mobile phone hardware but not GPS, it may attempt to triangulate
its location by checking the timing of signals received from the various communica‐
tion towers with which it can communicate (and whose positions are very precisely
known). If there are a few towers, this can get almost as close to your location as GPS.
But where there’s only a single tower, the signal strength can be used to determine a
rough radius around the tower, and the circle it creates represents the area in which
you are likely to be located. This could place you anywhere within a mile or two of
your actual location, down to within a few tens of meters.
Failing that, there may be known Wi-Fi access points whose positions are known
within range of your device, and since all access points have a unique identifying
address called a MAC (Media Access Control)  address, a reasonably good approxima‐
tion of location can be obtained, perhaps to within a street or two. This is the type of
information that Google Street View vehicles have been collecting.
And if that fails, the IP (Internet Protocol)  address used by your device can be queried
and used as a rough indicator of your location. Often, though, this provides only the
location of a major switch belonging to your Internet provider, which could be doz‐
ens or even hundreds of miles away. But at the very least, your IP address can (usu‐
ally) narrow down the country and sometimes the region you are in.
IP addresses are commonly used by media companies for restrict‐
ing playback of their content by territory. However, it’s a simple
matter to set up proxy servers that use a forwarding IP address (in
the territory that is blocking outside access) to fetch and pass con‐
tent through the blockade directly to a “foreign” browser. Proxy
servers are also often employed to disguise a user’s real IP address
or bypass censorship restrictions, and can be shared across many
users on a Wi-Fi hotspot (for example). Therefore, if you locate
someone by IP address, you can’t be completely sure that you have
identified the right location, or even country, and should treat this
information as only a best guess.
Geolocation and HTML5
In Chapter 22 , I briefly introduced HTML5 geolocation. Now it’s time to look at it in
depth, starting with the example I gave you before, shown again in Example 25-1 .
632 | Chapter 25: Other HTML5 Features

Example 25-1. Displaying a map of your current location
<!DOCTYPE html>
<html>
  <head>
    <title>Geolocation Example</title>
    <script src='OSC.js'></script>
    <script src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
  </head>
  <body>
    <div id='status'></div>
    <div id='map'></div>
    <script>
      if (typeof navigator.geolocation == 'undefined')
         alert("Geolocation not supported.")
      else
        navigator.geolocation.getCurrentPosition(granted, denied)
      function granted(position)
      {
        O('status').innerHTML = 'Permission Granted'
        S('map').border       = '1px solid black'
        S('map').width        = '640px'
        S('map').height       = '320px'
        var lat   = position.coords.latitude
        var long  = position.coords.longitude
        var gmap  = O('map')
        var gopts =
        {
          center: new google.maps.LatLng(lat, long),
          zoom: 9, mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        var map = new google.maps.Map(gmap, gopts)
      }
      function denied(error)
      {
        var message
        switch(error.code)
        {
          case 1: message = 'Permission Denied'; break;
          case 2: message = 'Position Unavailable'; break;
          case 3: message = 'Operation Timed Out'; break;
          case 4: message = 'Unknown Error'; break;
        }
        O('status').innerHTML = message
      }
    </script>
Geolocation and HTML5 | 633

</body>
</html>
Let’s walk through this code and see how it works, starting with the <head>  section,
which displays a title; loads in the OSC.js  file containing the O, S, and C functions I
provided to make accessing HTML elements from JavaScript easier; and then also
pulls in the JavaScript code for the Google Maps service, which is drawn on later in
the program.
After this, two <div>  elements are created—one for displaying the connection status,
and the other for the map:
<div id='status'></div>
<div id='map'></div>
The remainder of the document is JavaScript, which immediately starts by interrogat‐
ing the navigator.geolocation  property. If the value returned is undefined , then
geolocation is not supported by the browser and an error alert window is popped up.
Otherwise, the getCurrentPosition  method of the property is called, passing it the
names of two functions: granted  and denied  (remember that by passing function
names, we pass the actual function code, not the result of calling the function, which
would be the case if the function names had brackets attached):
navigator.geolocation.getCurrentPosition(granted, denied)
These functions appear later in the script and are for handling the two possibilities of
permission to provide the user’s location data: granted  or denied . The granted  func‐
tion comes first and is entered only if the data can be accessed.
In this function, the innerHTML  property of the div element with the ID of status  is
set to the string Permission Granted  to indicate success during the delay while the
map is being fetched. Then the map div has some CSS styles applied to give it a border
and set its dimensions:
O('status').innerHTML = 'Permission Granted'
S('map').border       = '1px solid black'
S('map').width        = '640px'
S('map').height       = '320px'
Next, the variables lat and long  are given the values returned by the geolocation rou‐
tines in the browser, and the object gmap  is created to access the map div element:
var lat  = position.coords.latitude
var long = position.coords.longitude
var gmap = O('map')
After this, the object gopts  is populated with the values in lat and long , the zoom
level is set (in this case to 9), and the ROADMAP  map type is selected:
634 | Chapter 25: Other HTML5 Features

var gopts =
{
  center: new google.maps.LatLng(lat, long),
  zoom: 9, mapTypeId: google.maps.MapTypeId.ROADMAP
}
Last, in this function, we create a new map object  by passing gmap  and gopts  to the
Map method of the google.maps  object (the code for which you will recall was loaded
in just after the OSC.js  file).
var map = new google.maps.Map(gmap, gopts)
If permission is granted to access the user’s location, the result looks like Figure 25-1 .
Figure 25-1. An interactive map of the user’s location is displayed
If permission is denied or there is another issue, an error message is the only thing
displayed, as output to the innerHTML  property of the status  div by the denied  func‐
tion, according to the problem encountered:
switch(error.code)
{
  case 1: message = 'Permission Denied'; break;
  case 2: message = 'Position Unavailable'; break;
  case 3: message = 'Operation Timed Out'; break;
  case 4: message = 'Unknown Error'; break;
}
O('status').innerHTML = message
Geolocation and HTML5 | 635

The Google map will be fully interactive and zoomable by the user, who can also
change the map type to satellite imagery.
Y ou can set a different zoom level or imagery type by providing different values to the
gopts  object. For example, a value of 1 for zoom  will zoom out the furthest, and 20
will zoom in the most. A value of SATELLITE  for the google.maps.MapTypeId  prop‐
erty will switch to satellite imagery, or HYBRID  will combine map and satellite data.
The sensor=false  setting from the tail of the URL where the script
is loaded in (near the start of the document), should be set to true
if you know that the user’s device has a GPS sensor; otherwise,
leave it as it is. If you simply want to display a Google map for a
specific location, and not access the user’s location data, you can
use the core code in the granted  function, replacing the lat and
long  (and other) values with ones of your choosing. Also, if you
would prefer to use Bing maps instead of Google, refer to http://
tinyurl.com/bingmapsapi , or the following long URL: http://micro
soft.com/web/post/using-the-bing-maps-api .
Local Storage
Cookies  are an essential part of the modern Internet because they enable websites to
save on each user’s machine small snippets of information that can be used for track‐
ing purposes. Now this isn’t as ominous as it sounds, because most of the tracking
going on helps web surfers by saving usernames and passwords, keeping them logged
into a social network such as Twitter or Facebook, and more.
Cookies can also locally save your preferences for the way you access a website (rather
than having those settings stored on the website’s server) or can be used to keep track
of a shopping cart as you build up an order on an ecommerce website.
But yes, they can also be used more aggressively to track the websites you frequent
and gain a picture of your interests to try to target advertising more effectively. That’s
why the European Union now requires all websites within its borders to alert you to
this, and let you disable cookies if you so choose.
But, as a web developer, think how useful it can be keeping data on user’s devices,
especially if you have a small budget for computer servers and disk space. For exam‐
ple, you could create in-browser web apps and services for editing word processing
documents, spreadsheets, and graphic images, saving all this data offsite on users’
computers and keeping your server purchasing budget as low as possible.
From the user’s point of view, think about how much faster a document can be loaded
up locally than from across the Web, especially on a slow connection. Plus, there’s
more security if you know that a website is not storing copies of your documents. Of
636 | Chapter 25: Other HTML5 Features

course, you can never guarantee that a website or web app is totally secure, and
should never work on highly sensitive documents using software (or hardware) that
can go online. But for minimally private documents such as family photographs, you
might feel more comfortable using a web app that saves locally than one that saves
files to an external server.
Using Local Storage
The biggest problem with using cookies for local storage is that you can save a maxi‐
mum of 4KB of data in each. Cookies also have to be passed back and forth on every
page reload. And, unless your server  uses SSL (Secure Sockets Layer)  encryption, each
time a cookie is transmitted, it travels in the clear.
But with HTML5, you have access to a much larger local storage space (typically
between 5MB and 10MB per domain depending on the browser) that remains over
page loads, and between website visits (and even after powering a computer down
and back up again). Also, the local storage data is not sent to the server on each page
load.
Y ou handle local storage data in key/value pairs. The key is the name assigned for ref‐
erencing the data, and the value can hold any type of data, but it is saved as a string.
All data is unique to the current domain, and for security reasons any local storage
created by websites with different domains is separate from the current local storage,
and is not accessible by any domain other than the one that stored the data.
The localStorage Object
Y ou gain access to local storage by means of the localStorage  object. To test whether
this object is available, you query its type to check whether or not it has been defined,
like this:
if (typeof localStorage == 'undefined')
{
  // Local storage is not available, tell the user and quit.
  // Or maybe offer to save data on the web server instead?
}
How you handle the lack of local storage being available will depend on what you
intend to use it for, so the code you place inside the if statement will be up to you.
Once you’ve ascertained that local storage is available, you can start making use of it
with the setItem  and getItem  methods of the localStorage  object, like this:
localStorage.setItem('username', 'ceastwood')
localStorage.setItem('password', 'makemyday')
To later retrieve this data, pass the keys to the getItem  method, like this:
Local Storage | 637

username = localStorage.getItem('username')
password = localStorage.getItem('password')
Unlike saving and reading cookies, you can call these methods at any time you like,
not simply before any headers have been sent by the web server. The saved values will
remain in local storage until erased in the following manner:
localStorage.removeItem('username')
localStorage.removeItem('password')
Or, you can totally wipe the local storage for the current domain by calling the clear
method, like this:
localStorage.clear()
Example 25-2  combines the preceding examples into a single document that displays
the current values of the two keys in a pop-up alert message, which initially will be
null . Then the keys and values are saved to local storage, retrieved, and redisplayed,
this time having assigned values. Finally, the keys are removed and then an attempt at
retrieving these values is again made, but the returned values are once again null .
Figure 25-2  shows the second of these three alert messages.
Example 25-2. Getting, setting, and removing local storage data
if (typeof localStorage == 'undefined')
{
  alert("Local storage is not available")
}
else
{
  username = localStorage.getItem('username')
  password = localStorage.getItem('password')
  alert("The current values of 'username' and 'password' are\n\n" +
    username + " / " + password + "\n\nClick OK to assign values")
  localStorage.setItem('username', 'ceastwood')
  localStorage.setItem('password', 'makemyday')
  username = localStorage.getItem('username')
  password = localStorage.getItem('password')
  alert("The current values of 'username' and 'password' are\n\n" +
    username + " / " + password + "\n\nClick OK to clear values")
  localStorage.removeItem('username')
  localStorage.removeItem('password')
  username = localStorage.getItem('username')
  password = localStorage.getItem('password')
  alert("The current values of 'username' and 'password' are\n\n" +
    username + " / " + password)
}
638 | Chapter 25: Other HTML5 Features

Figure 25-2. Two keys and their values are read from local storage
Y ou are not restricted to just storing usernames and passwords;
you can include virtually any and all data, and as many key/value
pairs as you like, up to the available storage limit for your domain.
Web Workers
With web workers , you can create sections of JavaScript code that will run in the back‐
ground, without having to set up and monitor interrupts. Instead, whenever it has
something to report, your background process communicates with the main Java‐
Script through the use of an event.
This means the JavaScript interpreter gets to decide how to allocate time slices most
efficiently, and your code only needs to worry about communicating with the back‐
ground task whenever there’s information to convey.
Example 25-3  shows how you can set up web workers to compute a repetitive task in
the background—in this instance, calculating prime numbers.
Example 25-3. Setting up and communicating with a web worker
<!DOCTYPE html>
<html>
  <head>
    <title>Web Workers</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    Current highest prime number:
Web Workers | 639

<span id='result'>0</span>
    <script>
      if (!!window.Worker)
      {
        var worker = new Worker('worker.js')
        worker.onmessage = function (event)
        {
          O('result').innerHTML = event.data;
        }
      }
      else
      {
        alert("Web workers not supported")
      }
    </script>
  </body>
</html>
This example first creates a <span>  element with the ID of result  in which output
from the web worker will be placed. Then, in the <script>  section, window.Worker  is
tested via a !! pair of not operators. This has the effect of returning a Boolean value
of true  if the Worker  method exists, and false  otherwise. If it is not true , a message
is displayed in the else  section, alerting us that web workers are not available.
Otherwise, a new worker  object is created by calling Worker , passing it the filename
worker.js  (shown shortly). Then the onmessage  event of the new worker  object is
attached to an anonymous function that places any message passed to it by worker.js
into the innerHTML  property of the previously created <span>  element.
The web worker itself is saved in the file worker.js , in Example 25-4 .
Example 25-4. The worker.js web worker
var n = 1
search: while (true)
{
  n += 1
  for (var i = 2; i <= Math.sqrt(n); i += 1)
  {
    if (n % i == 0) continue search
  }
  postMessage(n)
}
640 | Chapter 25: Other HTML5 Features

This file assigns the value 1 to the variable n. It then loops continuously, incrementing
n and checking it for primality by a brute-force method of testing all values from 1 to
the square root of n to see if they divide exactly into n, with no remainder. Should a
factor be found, the continue  command stops the brute-force attack immediately
because the number is not prime, and starts processing at the next higher value of n.
But if all possible factors are tested and none result in a zero remainder, then n must
be prime, so its value is passed to postMessage , which sends a message back to the
onmessage  event of the object that set up this web worker.
The result looks like the following:
Current highest prime number: 30477191
To stop a web worker from running, issue a call to the terminate  method of the
worker  object, like this:
worker.terminate()
If you wish to stop this particular example from running, you can
enter the following into your browser’s address bar:
javascript:worker.terminate()
Also note that due to the way Chrome handles security, you cannot
use web workers on a file system, only from a web server (or run‐
ning the files from localhost  on a development server such as
Zend Server, detailed in Chapter 2 ).
Offline  Web Applications
By providing the right information  to a browser, you can tell  it how to download all
the components of a web page to enable it to be loaded and run offline. The main file
you need is a manifest file with the file  extension .appcache . To illustrate a simple web
app, I chose to create a clock, so the manifest file is given the filename clock.appcache
and looks like Example 25-5 .
Example 25-5. The clock.appcache file
CACHE MANIFEST
clock.html
OSC.js
clock.css
clock.js
The first line in this file declares it to be a manifest file. The lines following list the
files the browser needs to download and store, starting with Example 25-6 , the
Offline  Web Applications | 641

clock.html  file, and followed by the OSC.js  file, which is the same one used by many
examples in this book.
Example 25-6. The clock.html file
<!DOCTYPE html>
<html manifest='clock.appcache'>
  <head>
    <title>Offline Web Apps</title>
    <script src='OSC.js'></script>
    <script src='clock.js'></script>
    <link rel='stylesheet' href='clock.css'>
  </head>
  <body>
    <p>The time is: <output id='clock'></output></p>
  </body>
</html>
This file declares that it has a manifest file available from within the <html>  tag:
<html manifest='clock.appcache'>
To support offline web apps, you will need to add the MIME type
text/cache-manifest  for the file extension .appcache  to your
server, in order for it to send the manifest file using the correct
type. There’s a neat shortcut you can use for this, which is to create
a file called .htaccess  in the same folder as the files to be made avail‐
able offline, with the following contents:
AddType text/cache-manifest .appcache
The files OSC.js , clock.js , and clock.css  are then imported and used by the document.
The JavaScript in clock.js  is listed in Example 25-7 .
Example 25-7. The clock.js file
setInterval(function()
{
  O('clock').innerHTML = new Date()
}, 1000)
This is a very simple anonymous function attached to an interval that repeats once a
second to save the current date and time into the innerHTML  property of the <output>
element that has the ID of clock .
The final file is the clock.css  file (see Example 25-8 ), which simply applies bold styling
to the <output>  element.
642 | Chapter 25: Other HTML5 Features

Example 25-8. The clock.css file
output { font-weight:bold; }
As long as the clock.appcache  file lists them all, these four files ( clock.html , OSC.js ,
clock.css , and clock.js ) together make up a working offline web application, which will
be downloaded and made available locally by any web browser that understands off‐
line web apps. When run, the output looks like this:
The time is: Thu Jul 19 2018 15:24:26 GMT+0000 (GMT Standard Time)
For details on the offline web application specifications, you can
check out the official website at http://tinyurl.com/offlinewebapps .
Drag and Drop
Y ou can easily support dragging and dropping  of objects on a web page by setting up
event handlers for the ondragstart , ondragover , and ondrop  events, as in
Example 25-9 .
Example 25-9. Dragging and dropping objects
<!DOCTYPE HTML>
<html>
  <head>
    <title>Drag and Drop</title>
    <script src='OSC.js'></script>
    <style>
      #dest {
        background:lightblue;
        border    :1px solid #444;
        width     :320px;
        height    :100px;
        padding   :10px;
      }
    </style>
  </head>
  <body>
    <div id='dest' ondrop='drop(event)' ondragover='allow(event)'></div><br>
    Drag the image below into the above element<br><br>
    <img id='source1' src='image1.png' draggable='true' ondragstart='drag(event)'>
    <img id='source2' src='image2.png' draggable='true' ondragstart='drag(event)'>
    <img id='source3' src='image3.png' draggable='true' ondragstart='drag(event)'>
    <script>
Drag and Drop | 643

function allow(event)
      {
        event.preventDefault()
      }
      function drag(event)
      {
        event.dataTransfer.setData('image/png', event.target.id)
      }
      function drop(event)
      {
        event.preventDefault()
        var data=event.dataTransfer.getData('image/png')
        event.target.appendChild(O(data))
      }
    </script>
  </body>
</html>
After setting up the HTML, title, and loading in the OSC.js  file, this document styles
the div element with the ID of dest , giving it a background color, border, set dimen‐
sions, and padding.
Then, in the <body>  section, the div element is created, and its ondrop  and ondrag
over  events have the event handler functions drop  and allow  attached to them. After
this there’s some text, and then three images are displayed with their draggable  prop‐
erties set to true , and the function drag  is attached to the ondragstart  event of each.
In the <script>  section, the allow  event handler function simply prevents the default
action for dragging (which is to disallow it), while the drag  event handler function
calls the setData  method of the dataTransfer  object of the event, passing it the
MIME type image/png  and the target.id  of the event (which is the object being
dragged). The dataTransfer  object holds the data that is being dragged during a
drag-and-drop operation.
Finally, the drop  event handler function also intercepts its default action so that drop‐
ping is allowed, and then it fetches the contents of the object being dragged from the
dataTransfer  object, passing it the MIME type of the object. Then the dropped data
is appended to the target (which is the dest  div) using its appendChild  method.
If you try this example for yourself, you’ll be able to drag and drop the images into
the div element, where they will stay, as shown in Figure 25-3 .
644 | Chapter 25: Other HTML5 Features

Figure 25-3. Two images have been dragged and dropped
Other events you can attach to include ondragenter  for when a drag operation enters
an element, ondragleave  for when one leaves an element, and ondragend  for when a
dragging operation ends, which you can use (for example) to modify the cursor dur‐
ing these operations.
Cross-Document Messaging
Y ou’ve already seen messaging in use a little earlier, in the web worker section. I didn’t
go into any details, however, as it wasn’t the core topic being discussed, and the mes‐
sage was being posted only to the same document anyway. But for obvious security
reasons, cross-document messaging does need to be applied with caution, so you
need to fully understand its workings if you plan to use it.
Before HTML5, browser developers disallowed cross-site scripting, but as well as
blocking potential attack sites, this prevented communication between legitimate
pages. Document interaction of any kind generally had to occur through Ajax and a
third-party web server, which was cumbersome and fiddly to build and maintain.
But web messaging now allows scripts to interact across these boundaries by using
some sensible security restraints to prevent malicious hacking attempts. It is achieved
through use of the postMessage  method, allowing plain-text messages to be sent
from one domain to another.
This requires that JavaScript first obtain the Window  object of the receiving document,
letting messages post to a variety of other windows, frames, or iframes directly related
to the sender’s document. The received message event has the following attributes:
Cross-Document Messaging | 645

data
The incoming message
origin
The origin of the sender document, including the scheme, hostname, and port
source
The source window of the sender document
The code to send messages is just a single instruction, in which you pass the message
to be sent and the domain to which it applies, as in Example 25-10 .
Example 25-10. Sending web messages to an iframe
<!DOCTYPE HTML>
<html>
  <head>
    <title>Web Messaging (a)</title>
    <script src='OSC.js'></script>
  </head>
  <body>
    <iframe id='frame' src='example25-11.html' width='360' height='75'></iframe>
    <script>
      count = 1
      setInterval(function()
      {
        O('frame').contentWindow.postMessage('Message ' + count++, '*')
      }, 1000)
    </script>
  </body>
</html>
Here the usual use is made of the OSC.js  file to pull in the O function, and then an
iframe element with the ID of frame  is created, which loads in Example 25-11 . Then,
within the <script>  section, the variable count  is initialized to 1 and a repeating
interval is set up to occur every second to post the string 'Message '  (using the post
Message  method) along with the current value of count , which is then incremented.
The postMessage  call is attached to the contentWindow  property of the iframe object,
not the iframe object itself. This is important because web messaging requires posts to
be made to a window, not to an object within a window.
Example 25-11. Receiving messages from another document
<!DOCTYPE HTML>
<html>
  <head>
646 | Chapter 25: Other HTML5 Features

<title>Web Messaging (b)</title>
    <style>
      #output {
        font-family:"Courier New";
        white-space:pre;
      }
    </style>
    <script src='OSC.js'></script>
  </head>
  <body>
    <div id='output'>Received messages will display here</div>
    <script>
      window.onmessage = function(event)
      {
        O('output').innerHTML =
          '<b>Origin:</b> ' + event.origin + '<br>' +
          '<b>Source:</b> ' + event.source + '<br>' +
          '<b>Data:</b>   ' + event.data
      }
    </script>
  </body>
</html>
This example sets up a little styling to make output clearer, and then creates a div
element with the ID output , in which the contents of received messages will be
placed. In the <script>  section, there’s a single anonymous function attached to the
onmessage  event of the window. In this function, the event.origin , event.source ,
and event.data  property values are then displayed, as shown in Figure 25-4 .
Figure 25-4. The iframe has so far received 17 messages
Web messaging works only across domains, so you cannot test it by loading files in
from a file system; you must use a web server. As you can see from Figure 25-4 , the
origin is http://localhost  because these examples are running on a local development
server. The source is the Window  object, and the current message value is Message 17 .
At the moment, Example 25-10  is not at all secure because the domain value passed to
postMessage  is the wildcard *:
Cross-Document Messaging | 647

O('frame').contentWindow.postMessage('Message ' + count++, '*')
To direct messages only to documents originating from a particular domain, you can
change this parameter. In the current case, a value of http://localhost  would
ensure that only documents loaded from the local server will be sent any messages:
O('frame').contentWindow.postMessage('Message ' + count++, 'http://localhost' )
Likewise, as it stands, the listener program displays any and all messages it receives.
This is also not a very secure state of affairs, because malicious documents also
present in the browser can attempt to send messages that unwary listener code in
other documents might otherwise access. Therefore, you can restrict the messages
your listeners react to by using an if statement, like this:
window.onmessage = function(event)
{
  if (event.origin) == 'http://localhost')
  {
    O('output').innerHTML =
      '<b>Origin:</b> ' + event.origin + '<br>' +
      '<b>Source:</b> ' + event.source + '<br>' +
      '<b>Data:</b>   ' + event.data
  }
}
If you always use the proper domain for the site you are working
with, your web messaging communications will be more secure.
However, be aware that since messages are sent in the clear, there
may be insecurities in some browsers or browser plug-ins that
might make this kind of communication insecure. One way to
boost your security, then, is to create your own obfuscation or
encryption scheme for all your web messages, and also consider
introducing your own two-way communication protocols to verify
each message as being authentic.
Normally, you won’t alert the user to the origin  or source  values, and will simply
make use of them for security checking. These examples, however, display those val‐
ues to help you experiment with web messaging and see what is going on. As well as
iframes, documents in pop-up windows and other tabs may also talk to each other
using this method.
Microdata
Microdata  is a subset  of HTML designed to  provide metadata to a document in order
to make it have meaning to software, just as it has meaning to a reader of the docu‐
ment. Microdata makes available the following new tag attributes: itemscope , item
type , itemid , itemref , and itemprop . Using these, you can clearly define the
648 | Chapter 25: Other HTML5 Features

properties of an item such as a book, providing a range of information that a com‐
puter can use to understand, for example, its authors, publishers, contents, and so on.
Or, more frequently these days, microdata is important for search engines and social
networking sites. Example 25-12  creates a short bio for George Washington as if it
were a profile on a social networking site, with microdata added to the various ele‐
ments (shown highlighted in bold). The result looks like Figure 25-5 , which will look
the same with or without microdata, because it is never visible to the user.
Example 25-12. Adding microdata to HTML
<!DOCTYPE html>
<html>
  <head>
    <title>Microdata</title>
  </head>
  <body>
    <section itemscope itemtype='http://schema.org/Person' >
      <img itemprop='image'  src='gw.jpg' alt='George Washington'
        align='left' style='margin-right:10px'>
      <h2 itemprop='name' >George Washington</h2>
      <p>I am the first <span itemprop='jobTitle' >US President</span>.
      My website is: <a itemprop='url'
        href='http://georgewashington.si.edu'>georgewashington.si.edu</a>.
      My address is:</p>
      <address itemscope itemtype='http://schema.org/PostalAddress'
        itemprop='address'>
        <span itemprop='streetAddress' >1600 Pennsylvania Avenue</span>,<br>
        <span itemprop='addressLocality' >Washington</span>,<br>
        <span itemprop='addressRegion' >DC</span>,<br>
        <span itemprop='postalCode' >20500</span>,<br>
        <span itemprop='addressCountry' >United States</span>.
      </address>
    </section>
  </body>
</html>
Microdata | 649

Figure 25-5. This document contains microdata, which is not visible
Browsers don’t yet really do anything with microdata, but it’s still very worth getting
to know it. Using the right microdata gives lots of information to search engines like
Google or Bing, and may help to promote clearly annotated pages in the rankings as
compared to sites that don’t implement microdata.
However, at some point, browsers may also find a use for this information, and you’ll
be able to determine whether or not they support microdata by checking whether the
getItems  method exists, like this:
if (!!document.getItems)
{
  // Microdata is supported
}
else
{
  // Microdata is not supported
}
The !! pair of not operators is a shorthand way of returning a Boolean value repre‐
senting the existence (or lack thereof) of the getItems  method. If it exists, then true
is returned and microdata is supported; otherwise, false  is returned.
Currently, only the  Mozilla Firefox and Opera browsers support accessing microdata,
but the other browsers are sure to follow soon. When they do, you’ll be able to extract
this data in the following manner, in which (after the page has loaded) the data  object
is retrieved from a call to getItems , and the value for the key 'jobTitle'  (just as an
example) is retrieved by accessing the data  object’s properties  object, and then
fetching the latter object’s textContent  property:
window.onload = function()
{
  if (!!document.getItems)
650 | Chapter 25: Other HTML5 Features

{
    data = document.getItems('http://schema.org/Person')[0]
    alert(data.properties['jobTitle'][0].textContent)
  }
}
Browsers that support this feature will display as Figure 25-6 , but other browsers will
not trigger the pop-up window.
Figure 25-6. Displaying the value for the ‘jobTitle’ microdata key
Google has stated that it definitely uses microdata when it finds it, and that microdata
is also the preferred snippet format for Google+, so it’s well worth starting to add it to
your HTML where applicable. For a complete breakdown of the myriad of microdata
properties available, check out http://schema.org , which is also the reference for the
microdata schemes as declared in the itemType  properties.
Other HTML5 Tags
A number of other new HTML5 tags that have not yet been implemented in many
browsers, and therefore I won’t cover them (particularly since their specs could
change). But, for the sake of completeness, these tags are <article> , <aside> ,
<details> , <figcaption> , <figure> , <footer> , <header> , <hgroup> , <keygen> ,
<mark> , <menuitem> , <meter> , <nav> , <output> , <progress> , <rp> , <rt> , <ruby> ,
<section> , <summary> , <time> , and <wbr> . Y ou can get more information on these
and all other HTML5 tags at http://tinyurl.com/h5markup  (check out the elements
sporting a NEW icon).
Other HTML5 Tags | 651

Summary
This concludes your introduction to HTML5. Y ou now have a number of powerful
new features with which to make even more dynamic and compelling websites. In the
final chapter, I’ll show you how you can bring all the different technologies in this
book together to create a mini–social networking site.
Questions
1.What method do you call to request geolocation data from a web browser?
2.How can you determine whether or not a browser supports local storage?
3.What method can you call to erase all local storage data for the current domain?
4.What is the best way for web workers to communicate with a main program?
5.How can your code inform a web browser that the document can be run offline
as a local web app?
6.To support drag-and-drop operations, how can you prevent the default action of
disallowing drag-and-drop for these events?
7.How can you make cross-document messaging more secure?
8.What is the purpose of microdata?
See Chapter 25 Answers  in Appendix A  for the answers to these questions.
652 | Chapter 25: Other HTML5 Features

CHAPTER 26
Bringing It All Together
Now that you’ve reached the end of your journey into learning the hows, whys, and
wherefores of dynamic web programming, I want to leave you with a real example
that you can sink your teeth into. In fact, it’s a collection of examples, because I’ve put
together a simple social networking project comprising all the main features you’ d
expect from such a site.
Across the various files, there are examples of MySQL table creation and database
access, CSS style sheets, file inclusion, session control, DOM access, Ajax calls, event
and error handling, file uploading, image manipulation, the HTML5 canvas, and a
whole lot more.
Each example file is complete and self-contained, yet works with all the others to
build a fully working social networking site, even including a style sheet you can
modify to completely change the look and feel of the project. Being small and light,
the end product is particularly usable on mobile platforms such as a smartphone or
tablet, but will run equally well on a full-size desktop computer.
I leave it up to you to take any pieces of code you think you can use and expand on
them for your own purposes. Perhaps you may even wish to build on these files to
create a social networking site of your own.
Designing a Social Networking Site
Before writing any code, I sat down and came up with several things that I decided
were essential to such a site. These included the following:
•A sign-up process
•A login form
653

•A logout facility
•Session control
•User profiles with uploaded thumbnails
•A member directory
•Adding members as friends
•Public and private messaging between members
•How to style the project
I decided to name the project Robin’s Nest , but you have to modify only one line of
code (in functions.php ) to change this to a name of your choice.
On the Website
All the examples in this chapter can be found on the companion website located at
http://lpmj.net . Y ou can also download the examples from there to your computer by
clicking the Download Examples link. This will download an archive file called exam‐
ples.zip , which you should extract to a suitable location on your computer.
Of particular interest to this chapter, within the zip file you’ll find there’s a folder
called robinsnest , in which all the following examples have been saved with the correct
filenames required by this sample application. So you can easily copy them all to your
web development folder to try them out.
functions.php
Let’s jump right into the  project, starting with Example 26-1 , functions.php , the
include file of the main functions. This file contains a little more than just the func‐
tions, though, because I have added the database login details here instead of using
yet another separate file. So the first half-dozen lines of code define the host, database
name, username, and password of the database to use.
It doesn’t matter what you call the database, as long as it already exists (see Chapter 8
for instructions on how to create a new database). Also make sure to correctly assign
a MySQL username and password to $dbuser  and $dbpass . With correct values, the
subsequent two lines will open a connection to MySQL and select the database. The
last of the initial instructions sets the name of the social networking site by assigning
the value Robin's Nest  to the variable $appname . If you want to change the name,
this is the place to do so.
The Functions
The project uses five main functions:
654 | Chapter 26: Bringing It All Together

createTable
Checks whether a table already exists and, if not, creates it
queryMysql
Issues a query to MySQL, outputting an error message if it fails
destroySession
Destroys a PHP session and clears its data to log users out
sanitizeString
Removes potentially malicious code or tags from user input
showProfile
Displays a user’s image and “about me” message if he has one
All of these should be obvious in their action to you by now, with the possible excep‐
tion of showProfile , which looks for an image of the name user.jpg  (where user is the
username of the current user), and if it finds it, displays it. It also displays any “about
me” text the user may have saved.
I have ensured that error handling is in place for all the functions that need it, so that
they can catch any typographical or other errors you may introduce, and generate
error messages. However, if you use any of this code on a production server, you will
probably want to provide your own error-handling routines to make the code more
user-friendly.
So type Example 26-1  and save it as functions.php  (or download it from the compan‐
ion website), and you’ll be ready to move on to the next section.
Example 26-1. functions.php
<?php
  $dbhost  = 'localhost';    // Unlikely to require changing
  $dbname  = 'robinsnest';   // Modify these...
  $dbuser  = 'robinsnest';   // ...variables according
  $dbpass  = 'rnpassword';   // ...to your installation
  $appname = "Robin's Nest"; // ...and preference
  $connection = new mysqli($dbhost, $dbuser, $dbpass, $dbname);
  if ($connection->connect_error) die($connection->connect_error);
  function createTable($name, $query)
  {
    queryMysql("CREATE TABLE IF NOT EXISTS $name($query)");
    echo "Table '$name' created or already exists.<br>";
  }
  function queryMysql($query)
  {
    global $connection;
functions.php | 655

$result = $connection->query($query);
    if (!$result) die($connection->error);
    return $result;
  }
  function destroySession()
  {
    $_SESSION=array();
    if (session_id() != "" || isset($_COOKIE[session_name()]))
      setcookie(session_name(), '', time()-2592000, '/');
    session_destroy();
  }
  function sanitizeString($var)
  {
    global $connection;
    $var = strip_tags($var);
    $var = htmlentities($var);
    $var = stripslashes($var);
    return $connection->real_escape_string($var);
  }
  function showProfile($user)
  {
    if (file_exists("$user.jpg"))
      echo "<img src='$user.jpg' style='float:left;'>";
    $result = queryMysql("SELECT * FROM profiles WHERE user='$user'");
    if ($result->num_rows)
    {
      $row = $result->fetch_array(MYSQLI_ASSOC);
      echo stripslashes($row['text']) . "<br style='clear:left;'><br>";
    }
  }
?>
If you read a previous edition of this book, in which these examples
used the old mysql  extension, you should note that in order to ref‐
erence the MySQL database using mysqli , you must apply the
global  keyword in the queryMysql  and sanitizeString  functions,
to allow them to use the value in $connection .
header.php
For uniformity, each  page of the project needs to have access to the same set of fea‐
tures. Therefore, I placed these things in Example 26-2 , header.php . This is the file
656 | Chapter 26: Bringing It All Together

that is actually included by the other files and it includes functions.php . This means
that only a single require_once  is needed in each file.
header.php  starts by calling the function session_start . As you’ll recall from Chap‐
ter 12 , this sets up a session that will remember certain values we want stored across
different PHP files.
With the session started, the program then checks whether the session variable user
is currently assigned a value. If so, a user has logged in and the variable $loggedin  is
set to TRUE .
After the main setup code in which a style sheet is loaded, a canvas element is created
for the logo, and a div is also created. The file javascript.js  (see Example 26-14 , later
on) is loaded to pull in the O, S, and C functions; these would normally be in the
OSC.js  file, but to keep the number of files down I’ve added them to the JavaScript
used to create the logo.
Using the value of $loggedin , an if block displays one of two sets of menus. The
non-logged-in set simply offers options of Home, Sign up, and Log in, whereas the
logged-in version offers full access to the project’s features. Additionally, if a user is
logged in, his or her username is appended in brackets to the page title and placed
after the main heading. We can freely refer to $user  wherever we want to put in the
name, because if the user is not logged in, that variable is empty and will have no
effect on the output.
The styling applied to this file is in the file styles.css  (Example 26-13 , detailed at the
end of this chapter) and includes creating a wide heading with a colored background,
and turning the links in the lists to rounded buttons.
Example 26-2. header.php
<?php
  session_start();
  echo "<!DOCTYPE html>\n<html><head>";
  require_once 'functions.php';
  $userstr = ' (Guest)';
  if (isset($_SESSION['user']))
  {
    $user     = $_SESSION['user'];
    $loggedin = TRUE;
    $userstr  = " ($user)";
  }
  else $loggedin = FALSE;
header.php | 657

echo "<title>$appname$userstr</title><link rel='stylesheet' " .
       "href='styles.css' type='text/css'>"                     .
       "</head><body><center><canvas id='logo' width='624' "    .
       "height='96'>$appname</canvas></center>"                 .
       "<div class='appname'>$appname$userstr</div>"            .
       "<script src='javascript.js'></script>";
  if ($loggedin)
    echo "<br ><ul class='menu'>" .
         "<li><a href='members.php?view=$user'>Home</a></li>" .
         "<li><a href='members.php'>Members</a></li>"         .
         "<li><a href='friends.php'>Friends</a></li>"         .
         "<li><a href='messages.php'>Messages</a></li>"       .
         "<li><a href='profile.php'>Edit Profile</a></li>"    .
         "<li><a href='logout.php'>Log out</a></li></ul><br>";
  else
    echo ("<br><ul class='menu'>" .
          "<li><a href='index.php'>Home</a></li>"                .
          "<li><a href='signup.php'>Sign up</a></li>"            .
          "<li><a href='login.php'>Log in</a></li></ul><br>"     .
          "<span class='info'>&#8658; You must be logged in to " .
          "view this page.</span><br><br>");
?>
Using the <br>  tag, as in the preceding example, is a quick and
dirty way of creating spacing in page layout. In this instance it
works well, but generally you will probably want to use CSS mar‐
gins to fine-tune the spacing around elements.
setup.php
With the pair of  included files written, it’s now time  to set up the  MySQL tables they
will use. We do this with Example 26-3 , setup.php , which you should type and load
into your browser before calling up any other files; otherwise, you’ll get numerous
MySQL errors.
The tables created are short and sweet, and have the following names and columns:
•members : username user  (indexed), password pass
•messages : ID id (indexed), author auth  (indexed), recipient recip , message type
pm, message message
•friends : username user  (indexed), friend’s username friend
•profiles : username user  (indexed), “about me” text
Because the function createTable  first checks whether a table already exists, this
program can be safely called multiple times without generating any errors.
658 | Chapter 26: Bringing It All Together

It is very likely that you will need to add many more columns to these tables if you
choose to expand on this project. If so, you may need to issue a MySQL DROP TABLE
command before re-creating a table.
Example 26-3. setup.php
<!DOCTYPE html>
<html>
  <head>
    <title>Setting up database</title>
  </head>
  <body>
    <h3>Setting up...</h3>
<?php
  require_once 'functions.php';
  createTable('members',
              'user VARCHAR(16),
              pass VARCHAR(16),
              INDEX(user(6))');
  createTable('messages',
              'id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
              auth VARCHAR(16),
              recip VARCHAR(16),
              pm CHAR(1),
              time INT UNSIGNED,
              message VARCHAR(4096),
              INDEX(auth(6)),
              INDEX(recip(6))');
  createTable('friends',
              'user VARCHAR(16),
              friend VARCHAR(16),
              INDEX(user(6)),
              INDEX(friend(6))');
  createTable('profiles',
              'user VARCHAR(16),
              text VARCHAR(4096),
              INDEX(user(6))');
?>
    <br>...done.
  </body>
</html>
setup.php | 659

For this example to work, you must first ensure that you have
already created the database specified in the variable $dbname  in
Example 26-1 , and also have granted access to it by the user given
the name in $dbuser , with the password in $dbpass .
index.php
This file is a  trivial file  but necessary nonetheless to give the project a home page. All
it does is display a simple welcome message. In a finished application, this would be
where you sell the virtues of your site to encourage sign-ups.
Incidentally, seeing as all the MySQL tables have been created and the include files
saved, you can now load Example 26-4 , index.php , into your browser to get your first
peek at the new application. It should look like Figure 26-1 .
Example 26-4. index.php
<?php
  require_once 'header.php';
  echo "<br><span class='main'>Welcome to $appname,";
  if ($loggedin) echo " $user, you are logged in.";
  else           echo ' please sign up and/or log in to join in.';
?>
    </span><br><br>
  </body>
</html>
660 | Chapter 26: Bringing It All Together

Figure 26-1. The main page of the site
signup.php
Now we need a module to enable  users to join the new network, and that’s
Example 26-5 , signup.php . This is a slightly longer program, but you’ve seen all its
parts before.
Let’s start by looking at the end block of HTML. This is a simple form that allows a
username and password to be entered. But note the use of the empty span  given the
id of 'info' . This will be the destination of the Ajax call in this program that checks
whether a desired username is available. See Chapter 18  for a complete description of
how this works.
Checking for Username Availability
Now go back to the program start and you’ll see a block of JavaScript that starts with
the function checkUser . This is called by the JavaScript onBlur  event when focus is
removed from the username field of the form. First it sets the contents of the span I
mentioned (with the id of info ) to an empty string, which clears it in case it previ‐
ously had a value.
signup.php | 661

Next a request is made to the program checkuser.php , which reports whether the user‐
name user  is available. The returned result of the Ajax call, a friendly message, is then
placed in the info  span.
After the JavaScript section comes some PHP code that you should recognize from
the Chapter 16  discussion of form validation. This section also uses the sanitize
String  function to remove potentially malicious characters before looking up the
username in the database and, if it’s not already taken, inserting the new username
$user  and password $pass .
Logging In
Upon successfully signing up, the user is then prompted to log in. A more fluid
response at this point might be to automatically log in a newly created user, but, as I
don’t want to overly complicate the code, I have kept the sign-up and login modules
separate from each other. Y ou can easily implement this if you want to, however.
This file uses the CSS class fieldname  to arrange the form fields, aligning them neatly
under each other in columns. When loaded into a browser (and in conjunction with
checkuser.php , shown later), this program will look like Figure 26-2 , where you can
see that the Ajax call has identified that the username Robin  is available. If you would
like the password field to show only asterisks, change its type from text  to password .
Example 26-5. signup.php
<?php
  require_once 'header.php';
  echo <<<_END
    <script>
      function checkUser(user)
      {
        if (user.value == '')
        {
          O('info').innerHTML = ''
          return
        }
        params  = "user=" + user.value
        request = new ajaxRequest()
        request.open("POST", "checkuser.php", true)
        request.setRequestHeader("Content-type",
          "application/x-www-form-urlencoded")
        request.setRequestHeader("Content-length", params.length)
        request.setRequestHeader("Connection", "close")
        request.onreadystatechange = function()
        {
662 | Chapter 26: Bringing It All Together

if (this.readyState == 4)
            if (this.status == 200)
              if (this.responseText != null)
                O('info').innerHTML = this.responseText
        }
        request.send(params)
      }
      function ajaxRequest()
      {
        try { var request = new XMLHttpRequest() }
        catch(e1) {
          try { request = new ActiveXObject("Msxml2.XMLHTTP") }
          catch(e2) {
            try { request = new ActiveXObject("Microsoft.XMLHTTP") }
            catch(e3) {
              request = false
        } } }
        return request
      }
    </script>
    <div class='main'><h3>Please enter your details to sign up</h3>
_END;
  $error = $user = $pass = "";
  if (isset($_SESSION['user'])) destroySession();
  if (isset($_POST['user']))
  {
    $user = sanitizeString($_POST['user']);
    $pass = sanitizeString($_POST['pass']);
    if ($user == "" || $pass == "")
      $error = "Not all fields were entered<br><br>";
    else
    {
      $result = queryMysql("SELECT * FROM members WHERE user='$user'");
      if ($result->num_rows)
        $error = "That username already exists<br><br>";
      else
      {
        queryMysql("INSERT INTO members VALUES('$user', '$pass')");
        die("<h4>Account created</h4>Please Log in.<br><br>");
      }
    }
  }
  echo <<<_END
    <form method='post' action='signup.php'>$error
    <span class='fieldname'>Username</span>
    <input type='text' maxlength='16' name='user' value='$user'
signup.php | 663

onBlur='checkUser(this)'><span id='info'></span><br>
    <span class='fieldname'>Password</span>
    <input type='text' maxlength='16' name='pass'
      value='$pass'><br>
_END;
?>
    <span class='fieldname'>&nbsp;</span>
    <input type='submit' value='Sign up'>
    </form></div><br>
  </body>
</html>
Figure 26-2. The sign-up page
On a production server, I wouldn’t recommend storing user pass‐
words in the clear as I’ve done here (for reasons of space and sim‐
plicity). Instead, you should salt them and store them as one-way
hash strings. See Chapter 13  for more details on how to do this.
664 | Chapter 26: Bringing It All Together

checkuser.php
To go with signup.php , here’s Example 26-6 , checkuser.php , which looks up a username
in the database and returns a string indicating whether it has already been taken.
Because it relies on the functions sanitizeString  and queryMysql , the program first
includes the file functions.php .
Then, if the $_POST  variable user  has a value, the function looks it up in the database
and, depending on whether it exists as a username, outputs either “Sorry, this user‐
name is taken” or “This username is available. ” Just checking the function
mysql_num_rows  against the result is sufficient for this, as it will return 0 for not
found, or 1 if it is found.
The HTML entities &#x2718;  and &#x2714;  are also used to preface the string with
either a cross or a checkmark.
Example 26-6. checkuser.php
<?php
  require_once 'functions.php';
  if (isset($_POST['user']))
  {
    $user   = sanitizeString($_POST['user']);
    $result = queryMysql("SELECT * FROM members WHERE user='$user'");
    if ($result->num_rows)
      echo  "<span class='taken'>&nbsp;&#x2718; " .
            "This username is taken</span>";
    else
      echo "<span class='available'>&nbsp;&#x2714; " .
           "This username is available</span>";
  }
?>
login.php
With users now able to sign up to the site, Example 26-7 , login.php , provides the code
needed to let them log in. Like the sign-up page, it features a simple HTML form and
some basic error checking, as well as using sanitizeString  before querying the
MySQL database.
The main thing to note here is that, upon successful verification of the username and
password, the session variables user  and pass  are given the username and password
values. As long as the current session remains active, these variables will be accessible
by all the programs in the project, allowing them to automatically provide access to
logged-in users.
checkuser.php | 665

Y ou may be interested in the use of the die function upon successfully logging in.
This is there because it combines an echo  and an exit  command in one, thus saving a
line of code. For styling, this (and most of the files) applies the class main  to indent
the content from the left-hand edge.
When you call this program up in your browser, it should look like Figure 26-3 . Note
how the input type of password  has been used here to mask the password with aster‐
isks to prevent it from being viewed by anyone looking over the user’s shoulder.
Example 26-7. login.php
 <?php
  require_once 'header.php';
  echo "<div class='main'><h3>Please enter your details to log in</h3>";
  $error = $user = $pass = "";
  if (isset($_POST['user']))
  {
    $user = sanitizeString($_POST['user']);
    $pass = sanitizeString($_POST['pass']);
    if ($user == "" || $pass == "")
        $error = "Not all fields were entered<br>";
    else
    {
      $result = queryMySQL("SELECT user,pass FROM members
        WHERE user='$user' AND pass='$pass'");
      if ($result->num_rows == 0)
      {
        $error = "<span class='error'>Username/Password
                  invalid</span><br><br>";
      }
      else
      {
        $_SESSION['user'] = $user;
        $_SESSION['pass'] = $pass;
        die("You are now logged in. Please <a href='members.php?view=$user'>" .
            "click here</a> to continue.<br><br>");
      }
    }
  }
  echo <<<_END
    <form method='post' action='login.php'>$error
    <span class='fieldname'>Username</span><input type='text'
      maxlength='16' name='user' value='$user'><br>
    <span class='fieldname'>Password</span><input type='password'
      maxlength='16' name='pass' value='$pass'>
_END;
666 | Chapter 26: Bringing It All Together

?>
    <br>
    <span class='fieldname'>&nbsp;</span>
    <input type='submit' value='Login'>
    </form><br></div>
  </body>
</html>
Figure 26-3. The login page
profile.php
One of  the  first  things that new users may want to do  after signing up and logging
in is to create a profile, which can be done via Example 26-8 , profile.php . I think you’ll
find some interesting code here, such as routines to upload, resize, and sharpen
images.
Let’s start by looking at the main HTML at the end of the code. This is like the forms
you’ve just seen, but this time it has the parameter enctype='multipart/form-data' .
This allows us to send more than one type of data at a time, enabling the posting of
profile.php  | 667

an image as well as some text. There’s also an input type of file , which creates a
Browse button that a user can press to select a file to be uploaded.
When the form is submitted, the code at the start of the program is executed. The
first thing it does is ensure that a user is logged in before allowing program execution
to proceed. Only then is the page heading displayed.
Adding the “About Me” Text
Then the Post variable text  is checked to see whether some text was posted to the
program. If so, it is sanitized and all long whitespace sequences (including returns
and line feeds) are replaced with a single space. This function incorporates a double
security check, ensuring that the user actually exists in the database and that no
attempted hacking can succeed before inserting this text into the database, where it
will become the user’s “about me” details.
If no text was posted, the database is queried to see whether any text already exists in
order to prepopulate the textarea  for the user to edit it.
Adding a Profile  Image
Next we move on to the section where the $_FILES  system  variable is checked to see
whether an image has been uploaded. If so, a string variable called $saveto  is created,
based on the user’s username followed by the extension .jpg. For example, user Jill will
cause $saveto  to have the value Jill.jpg . This is the file where the uploaded image will
be saved for use in the user’s profile.
Following this, the uploaded image type is examined and is accepted only if it is a
jpeg, png, or gif image. Upon success, the variable $src  is populated with the uploaded
image using one of the imagecreatefrom  functions according to the image type
uploaded. The image is now in a raw format that PHP can process. If the image is not
of an allowed type, the flag $typeok  is set to FALSE , preventing the final section of
image upload code from being processed.
Processing the Image
First, we store the image’s dimensions in $w and $h using the  following statement,
which is a quick way of assigning values from an array to separate variables:
list($w, $h) = getimagesize($saveto);
Then, using the value of $max  (which is set to 100), we calculate new dimensions that
will result in a new image of the same ratio, but with no dimension greater than 100
pixels. This results in giving the variables $tw and $th the new values needed. If you
want smaller or larger thumbnails, simply change the value of $max  accordingly.
668 | Chapter 26: Bringing It All Together

Next, the function imagecreatetruecolor  is called to create a new, blank canvas $tw
wide and $th high in $tmp . Then imagecopyresampled  is called to resample the image
from $src , to the new $tmp . Sometimes resampling images can result in a slightly
blurred copy, so the next piece of code uses the imageconvolution  function to
sharpen the image up a bit.
Finally, the image is saved as a jpeg file in the location defined by the variable
$saveto , after which we remove both the original and the resized image canvases
from memory using the imagedestroy  function, returning the memory that was
used.
Displaying the Current Profile
Last but not least, so that the user can see what the current profile looks like before
editing it, the showProfile  function from functions.php  is called prior to outputting
the form HTML. If no profile exists yet, nothing will be displayed.
When a profile image is displayed, CSS is applied to it to provide a border, shadow,
and a margin to its right—to separate the profile text from the image. The result of
loading Example 26-8  into a browser is shown in Figure 26-4 , where you can see that
the textarea  has been prepopulated with the “about me” text.
Example 26-8. profile.php
<?php
  require_once 'header.php';
  if (!$loggedin) die();
  echo "<div class='main'><h3>Your Profile</h3>";
  $result = queryMysql("SELECT * FROM profiles WHERE user='$user'");
  if (isset($_POST['text']))
  {
    $text = sanitizeString($_POST['text']);
    $text = preg_replace('/\s\s+/', ' ', $text);
    if ($result->num_rows)
         queryMysql("UPDATE profiles SET text='$text' where user='$user'");
    else queryMysql("INSERT INTO profiles VALUES('$user', '$text')");
  }
  else
  {
    if ($result->num_rows)
    {
      $row  = $result->fetch_array(MYSQLI_ASSOC);
      $text = stripslashes($row['text']);
profile.php  | 669

}
    else $text = "";
  }
  $text = stripslashes(preg_replace('/\s\s+/', ' ', $text));
  if (isset($_FILES['image']['name']))
  {
    $saveto = "$user.jpg";
    move_uploaded_file($_FILES['image']['tmp_name'], $saveto);
    $typeok = TRUE;
    switch($_FILES['image']['type'])
    {
      case "image/gif":   $src = imagecreatefromgif($saveto); break;
      case "image/jpeg":  // Both regular and progressive jpegs
      case "image/pjpeg": $src = imagecreatefromjpeg($saveto); break;
      case "image/png":   $src = imagecreatefrompng($saveto); break;
      default:            $typeok = FALSE; break;
    }
    if ($typeok)
    {
      list($w, $h) = getimagesize($saveto);
      $max = 100;
      $tw  = $w;
      $th  = $h;
      if ($w > $h && $max < $w)
      {
        $th = $max / $w * $h;
        $tw = $max;
      }
      elseif ($h > $w && $max < $h)
      {
        $tw = $max / $h * $w;
        $th = $max;
      }
      elseif ($max < $w)
      {
        $tw = $th = $max;
      }
      $tmp = imagecreatetruecolor($tw, $th);
      imagecopyresampled($tmp, $src, 0, 0, 0, 0, $tw, $th, $w, $h);
      imageconvolution($tmp, array(array(-1, -1, -1),
        array(-1, 16, -1), array(-1, -1, -1)), 8, 0);
      imagejpeg($tmp, $saveto);
      imagedestroy($tmp);
      imagedestroy($src);
    }
670 | Chapter 26: Bringing It All Together

}
  showProfile($user);
  echo <<<_END
    <form method='post' action='profile.php' enctype='multipart/form-data'>
    <h3>Enter or edit your details and/or upload an image</h3>
    <textarea name='text' cols='50' rows='3'>$text</textarea><br>
_END;
?>
    Image: <input type='file' name='image' size='14'>
    <input type='submit' value='Save Profile'>
    </form></div><br>
  </body>
</html>
Figure 26-4. Editing a user profile
profile.php  | 671

members.php
Using Example 26-9 , members.php , your  users  will be able  to find other  members
and choose to add them as friends (or drop them if they are already friends). This
program has two modes. The first lists all members and their relationships to you,
and the second shows a user’s profile.
Viewing a User’s Profile
The code for the latter mode comes first, where a test is made for the Get variable
view . If it exists, a user wants to view someone’s profile, so the program does that
using the showProfile  function, along with providing a couple of links to the user’s
friends and messages.
Adding and Dropping Friends
After that, the two Get variables, add and remove , are tested.  If one or the other has a
value, it will be the username of a user to either add or drop as a friend. We achieve
this by looking up the user in the MySQL friends  table and either inserting a friend
username or removing it from the table.
And, of course, every posted variable is first passed through sanitizeString  to
ensure that it is safe to use with MySQL.
Listing All Members
The final section of code issues a SQL query to list  all usernames. The code places the
number returned in the variable $num  before outputting the page heading.
A for loop then iterates through each and every member, fetching their details and
then looking them up in the friends  table to see if they are either being followed by
or a follower of the user. If someone is both a follower and a followee, she is classed as
a mutual friend.
The variable $t1 is nonzero when the user is following another member, and $t2 is
nonzero when another member is following the user. Depending on these values, text
is displayed after each username, showing the relationship (if any) to the current user.
Icons are also displayed to show the relationships. A double pointing arrow means
that the users are mutual friends. A left-pointing arrow indicates the user is following
another member. And a right-pointing arrow indicates that another member is fol‐
lowing the user.
Finally, depending on whether the user is following another member, a link is pro‐
vided to either add or drop that member as a friend.
672 | Chapter 26: Bringing It All Together

When you call Example 26-9  up in a browser, it will look like Figure 26-5 . See how
the user is invited to “follow” a nonfollowing member, but if the member is already
following the user, a “recip” link to reciprocate the friendship is offered. In the case of
a user already following another member, the user can select “drop” to end the follow‐
ing.
Example 26-9. members.php
<?php
  require_once 'header.php';
  if (!$loggedin) die();
  echo "<div class='main'>";
  if (isset($_GET['view']))
  {
    $view = sanitizeString($_GET['view']);
    if ($view == $user) $name = "Your";
    else                $name = "$view's";
    echo "<h3>$name Profile</h3>";
    showProfile($view);
    echo "<a class='button' href='messages.php?view=$view'>" .
         "View $name messages</a><br><br>";
    die("</div></body></html>");
  }
  if (isset($_GET['add']))
  {
    $add = sanitizeString($_GET['add']);
    $result = queryMysql("SELECT * FROM friends WHERE user='$add'
      AND friend='$user'");
    if (!$result->num_rows)
      queryMysql("INSERT INTO friends VALUES ('$add', '$user')");
  }
  elseif (isset($_GET['remove']))
  {
    $remove = sanitizeString($_GET['remove']);
    queryMysql("DELETE FROM friends WHERE user='$remove' AND friend='$user'");
  }
  $result = queryMysql("SELECT user FROM members ORDER BY user");
  $num    = $result->num_rows;
  echo "<h3>Other Members</h3><ul>";
  for ($j = 0 ; $j < $num ; ++$j)
  {
members.php | 673

$row = $result->fetch_array(MYSQLI_ASSOC);
    if ($row['user'] == $user) continue;
    echo "<li><a href='members.php?view=" .
      $row['user'] . "'>" . $row['user'] . "</a>";
    $follow = "follow";
    $result1 = queryMysql("SELECT * FROM friends WHERE
      user='" . $row['user'] . "' AND friend='$user'");
    $t1      = $result1->num_rows;
    $result1 = queryMysql("SELECT * FROM friends WHERE
      user='$user' AND friend='" . $row['user'] . "'");
    $t2      = $result1->num_rows;
    if (($t1 + $t2) > 1) echo " &harr; is a mutual friend";
    elseif ($t1)         echo " &larr; you are following";
    elseif ($t2)       { echo " &rarr; is following you";
      $follow = "recip"; }
    if (!$t1) echo " [<a href='members.php?add="    .
      $row['user'] . "'>$follow</a>]";
    else      echo " [<a href='members.php?remove=" .
      $row['user'] . "'>drop</a>]";
  }
?>
    </ul></div>
  </body>
</html>
674 | Chapter 26: Bringing It All Together

Figure 26-5. Using the members module
On a production server, there could be thousands or even hun‐
dreds of thousands of users, so you would probably substantially
modify this program to include searching the “about me” text, sup‐
port paging of the output a screen at a time, and so on.
friends.php
The module that shows  a user’s friends and followers is Example 26-10 , friends.php .
This interrogates the friends  table just like the members.php  program, but only for a
single user. It then shows all of that user’s mutual friends and followers along with the
people he is following.
All the followers are saved into an array called $followers , and all the people being
followed are placed in an array called $following . Then a neat piece of code is used
to extract all those who are both following and followed by the user, like this:
$mutual = array_intersect($followers, $following);
friends.php | 675

The array_intersect  function extracts all members common to both arrays and
returns a new array containing only those people. This array is then stored in
$mutual . Now it’s possible to use the array_diff  function for each of the $followers
and $following  arrays to keep only those people who are not mutual friends, like
this:
$followers = array_diff($followers, $mutual);
$following = array_diff($following, $mutual);
This results in the array $mutual  containing only mutual friends, $followers  con‐
taining only followers (and no mutual friends), and $following  containing only peo‐
ple being followed (and no mutual friends).
Now that we’re armed with these arrays, it’s a simple matter to separately display each
category of members, as can be seen in Figure 26-6 . The PHP sizeof  function
returns the number of elements in an array; here I use it just to trigger code when the
size is nonzero (that is, friends of that type exist). Note how, by using the variables
$name1 , $name2 , and $name3  in the relevant places, the code can tell when you’re look‐
ing at your own friends list, using the words Your  and You are , instead of simply dis‐
playing the username. The commented line can be uncommented if you wish to
display the user’s profile information on this screen.
Example 26-10. friends.php
<?php
  require_once 'header.php';
  if (!$loggedin) die();
  if (isset($_GET['view'])) $view = sanitizeString($_GET['view']);
  else                      $view = $user;
  if ($view == $user)
  {
    $name1 = $name2 = "Your";
    $name3 =          "You are";
  }
  else
  {
    $name1 = "<a href='members.php?view=$view'>$view</a>'s";
    $name2 = "$view's";
    $name3 = "$view is";
  }
  echo "<div class='main'>";
  // Uncomment this line if you wish the user's profile to show here
  // showProfile($view);
676 | Chapter 26: Bringing It All Together

$followers = array();
  $following = array();
  $result = queryMysql("SELECT * FROM friends WHERE user='$view'");
  $num    = $result->num_rows;
  for ($j = 0 ; $j < $num ; ++$j)
  {
    $row           = $result->fetch_array(MYSQLI_ASSOC);
    $followers[$j] = $row['friend'];
  }
  $result = queryMysql("SELECT * FROM friends WHERE friend='$view'");
  $num    = $result->num_rows;
  for ($j = 0 ; $j < $num ; ++$j)
  {
      $row           = $result->fetch_array(MYSQLI_ASSOC);
      $following[$j] = $row['user'];
  }
  $mutual    = array_intersect($followers, $following);
  $followers = array_diff($followers, $mutual);
  $following = array_diff($following, $mutual);
  $friends   = FALSE;
  if (sizeof($mutual))
  {
    echo "<span class='subhead'>$name2 mutual friends</span><ul>";
    foreach($mutual as $friend)
      echo "<li><a href='members.php?view=$friend'>$friend</a>";
    echo "</ul>";
    $friends = TRUE;
  }
  if (sizeof($followers))
  {
    echo "<span class='subhead'>$name2 followers</span><ul>";
    foreach($followers as $friend)
      echo "<li><a href='members.php?view=$friend'>$friend</a>";
    echo "</ul>";
    $friends = TRUE;
  }
  if (sizeof($following))
  {
    echo "<span class='subhead'>$name3 following</span><ul>";
    foreach($following as $friend)
      echo "<li><a href='members.php?view=$friend'>$friend</a>";
    echo "</ul>";
    $friends = TRUE;
  }
friends.php | 677

if (!$friends) echo "<br>You don't have any friends yet.<br><br>";
  echo "<a class='button' href='messages.php?view=$view'>" .
       "View $name2 messages</a>";
?>
    </div><br>
  </body>
</html>
Figure 26-6. Displaying a user’s friends and followers
messages.php
The last of the main modules is Example 26-11 , messages.php . The program starts by
checking whether a message has been posted in variable text . If so, it is inserted into
the messages  table. At the same time, the value of pm is also stored. This indicates
678 | Chapter 26: Bringing It All Together

whether a message is private or public. A 0 represents a public message, and 1 is pri‐
vate.
Next, the user’s profile and a form for entering a message are displayed, along with
radio buttons to choose between a private or public message. After this, all the mes‐
sages are shown, depending on whether they are private or public. If they are public,
all users can see them, but private messages are visible only to the sender and recipi‐
ent. This is all handled by a couple of queries to the MySQL database. Additionally,
when a message is private, it is introduced by the word whispered  and shown in italic.
Finally, the program displays a couple of links to refresh the messages (in case
another user has posted one in the meantime) and to view the user’s friends. The trick
using the variables $name1  and $name2  is again used so that when you view your own
profile, the word Your  is displayed instead of the username.
Y ou can see the result of viewing this program with a browser in Figure 26-7 . Note
how users viewing their own messages are provided with links to erase any they don’t
want.
Example 26-11. messages.php
<?php
  require_once 'header.php';
  if (!$loggedin) die();
  if (isset($_GET['view'])) $view = sanitizeString($_GET['view']);
  else                      $view = $user;
  if (isset($_POST['text']))
  {
    $text = sanitizeString($_POST['text']);
    if ($text != "")
    {
      $pm   = substr(sanitizeString($_POST['pm']),0,1);
      $time = time();
      queryMysql("INSERT INTO messages VALUES(NULL, '$user',
        '$view', '$pm', $time, '$text')");
    }
  }
  if ($view != "")
  {
    if ($view == $user) $name1 = $name2 = "Your";
    else
    {
      $name1 = "<a href='members.php?view=$view'>$view</a>'s";
      $name2 = "$view's";
messages.php | 679

}
    echo "<div class='main'><h3>$name1 Messages</h3>";
    showProfile($view);
    echo <<<_END
      <form method='post' action='messages.php?view=$view'>
      Type here to leave a message:<br>
      <textarea name='text' cols='40' rows='3'></textarea><br>
      Public<input type='radio' name='pm' value='0' checked='checked'>
      Private<input type='radio' name='pm' value='1'>
      <input type='submit' value='Post Message'></form><br>
_END;
    if (isset($_GET['erase']))
    {
      $erase = sanitizeString($_GET['erase']);
      queryMysql("DELETE FROM messages WHERE id=$erase AND recip='$user'");
    }
    $query  = "SELECT * FROM messages WHERE recip='$view' ORDER BY time DESC";
    $result = queryMysql($query);
    $num    = $result->num_rows;
    for ($j = 0 ; $j < $num ; ++$j)
    {
      $row = $result->fetch_array(MYSQLI_ASSOC);
      if ($row['pm'] == 0 || $row['auth'] == $user || $row['recip'] == $user)
      {
        echo date('M jS \'y g:ia:', $row['time']);
        echo " <a href='messages.php?view=" . $row['auth'] . "'>" .
          $row['auth']. "</a> ";
        if ($row['pm'] == 0)
          echo "wrote: &quot;" . $row['message'] . "&quot; ";
        else
          echo "whispered: <span class='whisper'>&quot;" .
            $row['message'] . "&quot;</span> ";
        if ($row['recip'] == $user)
          echo "[<a href='messages.php?view=$view" .
            "&erase=" . $row['id'] . "'>erase</a>]";
        echo "<br>";
      }
    }
  }
  if (!$num) echo "<br><span class='info'>No messages yet</span><br><br>";
  echo "<br><a class='button' href='messages.php?view=$view'>Refresh messages</a>";
680 | Chapter 26: Bringing It All Together

?>
    </div><br>
  </body>
</html>
Figure 26-7. The messaging module
logout.php
The final ingredient  in our social networking recipe is Example 26-12 , logout.php , the
logout page that closes a session and deletes any associated data and cookies. The
result of calling up this program is shown in Figure 26-8 , where the user is now asked
to click a link that will take her to the un-logged-in home page and remove the
logged-in links from the top of the screen. Of course, you could write a JavaScript or
PHP redirect to do this (probably a good idea if you wish to keep logout looking
clean).
logout.php | 681

Example 26-12. logout.php
<?php
  require_once 'header.php';
  if (isset($_SESSION['user']))
  {
    destroySession();
    echo "<div class='main'>You have been logged out. Please " .
         "<a href='index.php'>click here</a> to refresh the screen.";
  }
  else echo "<div class='main'><br>" .
            "You cannot log out because you are not logged in";
?>
    <br><br></div>
  </body>
</html>
Figure 26-8. The logout page
styles.css
The style sheet used for this project is shown in Example 26-13 . There are a number
of sets of declarations, as follows:
*
Sets the default font family and size for the project using the universal selector.
682 | Chapter 26: Bringing It All Together

body
Sets the width of the project window, centers it horizontally, specifies a background
color, and gives it a border.
html
Sets the background color of the HTML section.
img
Gives all images a border, shadow, and a righthand margin.
li a  and .button
Remove underlines from hyperlinks in all <a> tags that are within a <li>  element,
and all elements employing the button  class.
li a:hover  and .button:hover
Sets the color in which <li>  elements and the button  class should display text when
hovered over.
.appname
Sets the properties for the heading (which uses the appname  class), including center‐
ing, background and text colors, the font family and size, and the padding.
.fieldname
Sets the width of elements using the fieldname  class by first floating them.
.main
This class applies an indent to elements that use it.
.info
This class is used for displaying important information. It sets a background and
foreground text color, applies a border and padding, and indents elements that
employ it.
.menu li  and .button
These declarations ensure that all <li>  elements and the button  class display inline,
have padding applied, and include a border, a background and foreground text color,
a right margin, rounded borders, and a shadow—resulting in a button effect.
.subhead
Emphasizes sections of text.
.taken , .available , .error , and .whisper
These declarations set the colors and font styles to be used for displaying different
types of information.
#logo
These rules style the logo text as a fallback in case a non-HTML5 browser is in use
and the canvas logo doesn’t get created.
styles.css | 683

Example 26-13. styles.css
* {
  font-family:verdana,sans-serif;
  font-size  :14pt;
}
body {
  width     :700px;
  margin    :20px auto;
  background:#f8f8f8;
  border    :1px solid #888;
}
html {
  background:#fff
}
img {
  border            :1px solid black;
  margin-right      :15px;
  -moz-box-shadow   :2px 2px 2px #888;
  -webkit-box-shadow:2px 2px 2px #888;
  box-shadow        :2px 2px 2px #888;
}
li a, .button {
  text-decoration:none;
}
li a:hover, .button:hover {
  color:green;
}
.appname {
  text-align :center;
  background :#eb8;
  color      :#40d;
  font-family:helvetica;
  font-size  :20pt;
  padding    :4px;
}
.fieldname {
  float:left;
  width:120px;
}
.main {
  margin-left:40px;
}
684 | Chapter 26: Bringing It All Together

.info {
  background :lightgreen;
  color      :blue;
  border     :1px solid green;
  padding    :5px 10px;
  margin-left:40px;
}
.menu li, .button {
  display           :inline;
  padding           :4px 6px;
  border            :1px solid #777;
  background        :#ddd;
  color             :#d04;
  margin-right      :8px;
  border-radius     :5px;
  -moz-box-shadow   :2px 2px 2px #888;
  -webkit-box-shadow:2px 2px 2px #888;
  box-shadow        :2px 2px 2px #888;
}
.subhead {
  font-weight:bold;
}
.taken, .error {
  color:red;
}
.available {
  color:green;
}
.whisper {
  font-style:italic;
  color     :#006600;
}
#logo {
  font-family:Georgia;
  font-weight:bold;
  font-style :italic;
  font-size  :97px;
}
javascript.js
Finally, there’s the JavaScript file (see Example 26-14 ), which  contains the O, S, and C
functions used throughout this book, along with some code to draw the logo for the
site using an HTML5 canvas, as explained in Chapter 23 .
javascript.js | 685

Example 26-14. javascript.js
canvas               = O('logo')
context              = canvas.getContext('2d')
context.font         = 'bold italic 97px Georgia'
context.textBaseline = 'top'
image                = new Image()
image.src            = 'robin.gif'
image.onload = function()
{
  gradient = context.createLinearGradient(0, 0, 0, 89)
  gradient.addColorStop(0.00, '#faa')
  gradient.addColorStop(0.66, '#f00')
  context.fillStyle = gradient
  context.fillText(  "R  bin's Nest", 0, 0)
  context.strokeText("R  bin's Nest", 0, 0)
  context.drawImage(image, 64, 32)
}
function O(obj)
{
  if (typeof obj == 'object') return obj
  else return document.getElementById(obj)
}
function S(obj)
{
  return O(obj).style
}
function C(name)
{
  var elements = document.getElementsByTagName('*')
  var objects  = []
  for (var i = 0 ; i < elements.length ; ++i)
    if (elements[i].className == name)
      objects.push(elements[i])
  return objects
}
And that, as they say, is that. If you write anything based on this code or any other
examples in this book, or have gained in any other way from it, then I am glad to have
been of help and thank you for reading this book.
But before you go and try out your newly learned skills on the Web at large, please
browse through the appendixes that follow, as there’s a lot of additional information
there you should find useful.
686 | Chapter 0: Bringing It All Together

APPENDIX A
Solutions to the Chapter Questions
Chapter 1  Answers
1. A web server (such as Apache), a server-side scripting language (PHP), a database
(MySQL), and a client-side scripting language (JavaScript).
2. HyperText Markup Language: the web page itself, including text and markup tags.
3. Like nearly all database engines, MySQL accepts commands in Structured Query
Language (SQL). SQL is the way that every user (including a PHP program) com‐
municates with MySQL.
4. PHP runs on the server, whereas JavaScript runs on the client. PHP can communi‐
cate with the database to store and retrieve data, but it can’t alter the user’s web
page quickly and dynamically. JavaScript has the opposite benefits and drawbacks.
5. Cascading Style Sheets: styling and layout rules applied to the elements in an
HTML document.
6. Probably the most interesting new elements in HTML5 are <audio> , <video> , and
<canvas> , although there are many others such as <article> , <summary> ,
<footer> , and more.
7. Some of these technologies are controlled by companies that accept bug reports
and fix the errors like any software company. But open source software also
depends on a community, so your bug report may be handled by any user who
understands the code well enough. Y ou may someday fix bugs in an open source
tool yourself.
687

Chapter 2  Answers
1. W AMP stands for Windows, Apache, MySQL, and PHP . M in MAMP stands for
Mac  instead of Windows; and the L in LAMP stands for Linux . They all refer to a
complete solution for hosting dynamic web pages.
2. Both 127.0.0.1 and http://localhost  are ways of referring to the local computer.
When a W AMP or MAMP is properly configured, you can type either into a
browser’s address bar to call up the default page on the local server.
3. FTP stands for File Transfer Protocol. An FTP program is used to transfer files back
and forth between a client and a server.
4. It is necessary to FTP files to a remote server in order to update it, which can sub‐
stantially increase development time if this action is carried out many times in a
session.
5. Dedicated program editors are smart and can highlight problems in your code
before you even run it.
Chapter 3  Answers
1. The tag used to start PHP interpreting code is <?php...?> , which can be shortened
to <?...?>  but is not recommended practice.
2. Y ou can use // for a single-line comment or / *...*/  to span multiple lines.
3. All PHP statements must end with a semicolon ( ;).
4. With the exception of constants, all PHP variables must begin with $.
5. Variables hold a value that can be a string, a number, or other data.
6.$variable = 1  is an assignment statement, whereas $variable == 1  is a compari‐
son operator. Use $variable = 1  to set the value of $variable . Use $variable ==
1 to find out later in the program whether $variable  equals 1. If you mistakenly
use $variable = 1  where you meant to do a comparison, it will do two things you
probably don’t want: set $variable  to 1 and return a true  value all the time, no
matter what its previous value was.
7. A hyphen is reserved for the subtraction operators. A construct like $current-
user  would be harder to interpret if hyphens were also allowed in variable names
and, in any case, would lead programs to be ambiguous.
8. Variable names are case-sensitive. $This_Variable  is not the same as $this_vari
able .
688 | Appendix A: Solutions to the Chapter Questions

9. Y ou cannot use spaces in variable names, as this would confuse the PHP parser.
Instead, try using the _ (underscore).
10. To convert one variable type to another, reference it and PHP will automatically
convert it for you.
11. There is no difference between ++$j  and $j++  unless the value of $j is being tested,
assigned to another variable, or passed as a parameter to a function. In such cases,
++$j  increments $j before the test or other operation is performed, whereas $j++
performs the operation and then increments $j.
12. Generally, the operators && and and are interchangeable except where precedence
is important, in which case && has a high precedence, while and has a low one.
13. Y ou can use multiple lines within quotations marks or the <<<_END..._END;  con‐
struct to create a multiline echo  or assignment. The closing tag must begin at the
start of a line, and end with a semicolon followed by a new line.
14. Y ou cannot redefine constants because, by definition, once defined they retain
their value until the program terminates.
15. Y ou can use \' or \" to escape either a single or double quote.
16. The echo  and print  commands are similar in that they are both constructs, except
that print  behaves like a PHP function and takes a single argument, while echo
can take multiple arguments.
17. The purpose of functions is to separate discrete sections of code into their own,
self-contained sections that can be referenced by a single function name.
18. Y ou can make a variable accessible to all parts of a PHP program by declaring it as
global .
19. If you generate data within a function, you can convey the data to the rest of the
program by returning a value or modifying a global variable.
20. When you combine a string with a number, the result is another string.
Chapter 4  Answers
1. In PHP , TRUE  represents the value 1, and FALSE  represents NULL , which can be
thought of as “nothing” and is output as the empty string.
2. The simplest forms of expressions are literals (such as numbers and strings) and
variables, which simply evaluate to themselves.
3. The difference between unary, binary, and ternary operators is the number of
operands each requires (one, two, and three, respectively).
Solutions to the Chapter Questions | 689

4. The best way to force your own operator precedence is to place parentheses
around subexpressions to which you wish to give high precedence.
5. Operator associativity  refers to the direction of processing (left to right, or right to
left).
6. Y ou use the identity operator when you wish to bypass PHP’s automatic operand
type changing (also called type casting ).
7. The three conditional statement types are if, switch , and the ?: operator.
8. To skip the current iteration of a loop and move on to the next one, use a continue
statement.
9. Loops using for statements are more powerful than while  loops, because they sup‐
port two additional parameters to control the loop handling.
10. Most conditional expressions in if and while  statements are literal (or Boolean)
and therefore trigger execution when they evaluate to TRUE . Numeric expressions
trigger execution when they evaluate to a nonzero value. String expressions trigger
execution when they evaluate to a nonempty string. A NULL  value is evaluated as
false and therefore does not trigger execution.
Chapter 5  Answers
1. Using functions avoids the need to copy or rewrite similar code sections many
times over by combining sets of statements so that they can be called by a simple
name.
2. By default, a function can return a single value. But by utilizing arrays, references,
and global variables, any number of values can be returned.
3. When you reference a variable by name, such as by assigning its value to another
variable or by passing its value to a function, its value is copied. The original does
not change when the copy is changed. But if you reference a variable, only a
pointer (or reference) to its value is used, so that a single value is referenced by
more than one name. Changing the value of the reference will change the original
as well.
4. Scope  refers to which parts of a program can access a variable. For example, a vari‐
able of global scope can be accessed by all parts of a PHP program.
5. To incorporate one file within another, you can use the include  or require  direc‐
tives, or their safer variants, include_once  and require_once .
6. A function is a set of statements referenced by a name that can receive and return
values. An object may contain zero or many functions (which are then called
690 | Appendix A: Solutions to the Chapter Questions

methods) as well as variables (which are called properties), all combined in a single
unit.
7. To create a new object in PHP , use the new keyword like this:
$object = new Class;
8. To create a subclass, use the extends  keyword with syntax such as this:
class Subclass extends Parentclass ...
9. To call a piece of initializing code when an object is created, create a constructor
method called __construct  within the class and place your code there.
10. Explicitly declaring properties within a class is unnecessary, as they will be implic‐
itly declared upon first use. But it is considered good practice as it helps with code
readability and debugging, and is especially useful to other people who may have
to maintain your code.
Chapter 6  Answers
1. A numeric array can be indexed numerically using numbers or numeric variables.
An associative array uses alphanumeric identifiers to index elements.
2. The main benefit of the array  keyword is that it enables you to assign several val‐
ues at a time to an array without repeating the array name.
3. Both the each  function and the foreach...as  loop construct return elements from
an array; both start at the beginning and increment a pointer to make sure the next
element is returned each time; and both return FALSE  when the end of the array is
reached. The difference is that the each  function returns just a single element, so it
is usually wrapped in a loop. The foreach...as  construct is already a loop, execut‐
ing repeatedly until the array is exhausted or you explicitly break out of the loop.
4. To create a multidimensional array, you need to assign additional arrays to ele‐
ments of the main array.
5. Y ou can use the count  function to count the number of elements in an array.
6. The purpose of the explode  function is to extract sections from a string that are
separated by an identifier, such as extracting words separated by spaces within a
sentence.
7. To reset PHP’s internal pointer into an array back to the first element, call the
reset  function.
Chapter 7  Answers
1. The conversion specifier you would use to display a floating-point number is %f.
Solutions to the Chapter Questions | 691

2. To take the input string "Happy Birthday"  and output the string "**Happy" ,
you could use a printf  statement such as this:
printf("%'*7.5s", "Happy Birthday");
3. To send the output from printf  to a variable instead of to a browser, you would
use sprintf  instead.
4. To create a Unix timestamp for 7:11 a.m. on May 2nd, 2016, you could use the
following command:
$timestamp = mktime(7, 11, 0, 5, 2, 2016);
5. Y ou would use the w+ file access mode with fopen  to open a file in write and read
mode, with the file truncated and the file pointer at the start.
6. The PHP command for deleting the file file.txt  is as follows:
unlink('file.txt');
7. The PHP function file_get_contents  is used to read in an entire file in one go. It
will also read them from across the Internet if provided with a URL.
8. The PHP superglobal associative array $_FILES  contains the details about uploa‐
ded files.
9. The PHP exec  function enables the running of system commands.
10. In HTML5, you can use either the XHTML style of tag (such as <hr / >) or the
standard HTML4 style (such as <hr> ). It’s entirely up to you or your company’s
coding style.
Chapter 8  Answers
1. The semicolon is used by MySQL to separate or end commands. If you forget to
enter it, MySQL will issue a prompt and wait for you to enter it. (In the answers in
this section, I’ve left off the semicolon, because it looks strange in the text. But it
must terminate every statement.)
2. To see the available databases, type SHOW databases . To see tables within a data‐
base that you are using, type SHOW tables . (These commands are case-insensitive.)
3. To create this new user, use the GRANT  command like this:
GRANT PRIVILEGES ON newdatabase.* TO 'newuser'@'localhost'
  IDENTIFIED BY 'newpassword';
4. To view the structure of a table, type DESCRIBE tablename .
692 | Appendix A: Solutions to the Chapter Questions

5. The purpose of a MySQL index is to substantially decrease database access times
by maintaining indexes of one or more key columns, which can then be quickly
searched to locate rows within a table.
6. A FULLTEXT  index enables natural-language queries to find keywords, wherever
they are in the FULLTEXT  column(s), in much the same way as using a search
engine.
7. A stopword is a word that is so common that it is considered not worth including
in a FULLTEXT  index or using in searches. However, it does participate in a search
when it is part of a larger string bounded by double quotes.
8.SELECT DISTINCT  essentially affects only the display, choosing a single row and
eliminating all the duplicates. GROUP BY  does not eliminate rows, but combines all
the rows that have the same value in the column. Therefore, GROUP BY  is useful for
performing an operation such as COUNT  on groups of rows. SELECT  DISTINCT  is not
useful for that purpose.
9. To return only those rows containing the word Langhorne  somewhere in the
column author  of the table classics , use a command such as this:
SELECT * FROM classics WHERE author LIKE "%Langhorne%";
10. When you’re joining two tables together, they must share at least one common col‐
umn such as an ID number or, as in the case of the classics  and customers  tables,
the isbn column.
Chapter 9  Answers
1. The term relationship  refers to the connection between two pieces of data that have
some association, such as a book and its author, or a book and the customer who
bought the book. A relational database such as MySQL specializes in storing and
retrieving such relations.
2. The process of removing duplicate data and optimizing tables is called normaliza‐
tion.
3. The three rules of First Normal Form are as follows:
•There should be no repeating columns containing the same kind of data.
•All columns should contain a single value.
•There should be a primary key to uniquely identify each row.
4. To satisfy Second Normal Form, columns whose data repeats across multiple rows
should be removed to their own tables.
Solutions to the Chapter Questions | 693

5. In a one-to-many relationship, the primary key from the table on the “one” side
must be added as a separate column (a foreign key) to the table on the “many” side.
6. To create a database with  a many-to-many relationship, you create an intermedi‐
ary table containing keys from two other tables. The other tables can then refer‐
ence each other via the third.
7. To initiate a MySQL transaction, use either the BEGIN  or the START TRANSACTION
command. To terminate a transaction and cancel all actions, issue a ROLLBACK
command. To terminate a transaction and commit all actions, issue a COMMIT  com‐
mand.
8. To examine how a query will work in detail, you can use the EXPLAIN  command.
9. To back up the database publications  to a file called publications.sql , you would
use a command such as:
mysqldump -u user -ppassword  publications > publications.sql
Chapter 10  Answers
1. To connect to a MySQL database with mysqli , call the mysqli  method, passing the
hostname, username, password, and database. A connection object will be
returned on success.
2. To submit a query to MySQL using mysqli , ensure you have first created a connec‐
tion object to a database, and call its query  method, passing the query string.
3. When a mysqli  error occurs, the error  property of the connection object contains
the error message. If the error was in connecting to the database, then the con
nect_error  property will contain the error message.
4. To determine the number of rows returned by a mysqli  query, use the num_rows
property of the result object.
5. To retrieve a specific row from a set of mysqli  results, call the data_seek  method
of the result object, passing it the row number (starting from 0); then call the
fetch_array  or other retrieval method to obtain the required data.
6. To escape special characters in strings, you can call the real_escape_string
method of a mysqli  connection object, passing it the string to be escaped.
7. If you neglect to properly close objects created with mysqli  methods, your pro‐
grams carry the risk of running out of memory, especially on high-traffic websites.
If there’s a program flow logic error in your code, it also ensures you won’t acci‐
dentally access old results.
694 | Appendix A: Solutions to the Chapter Questions

Chapter 11  Answers
1. The associative arrays used to pass submitted form data to PHP are $_GET  for the
GET method and $_POST  for the POST  method.
2. The register_globals  setting was the default in versions of PHP prior to 4.2.0. It
was not a good idea, because it automatically assigned submitted form-field data to
PHP variables, thus opening up a security hole for potential hackers who could
attempt to break into PHP code by initializing variables to values of their choice.
3. The difference between a text box and a text area is that although they both accept
text for form input, a text box is a single line, whereas a text area can be multiple
lines and include word wrapping.
4. To offer three mutually exclusive choices in a web form, you should use radio but‐
tons, because checkboxes allow multiple selections.
5. Submit a group of selections from a web form using a single field name by using
an array name with square brackets such as choices[] , instead of a regular field
name. Each value is then placed into the array, whose length will be the number of
elements submitted.
6. To submit a form field without the user seeing it, place it in a hidden field using
the attribute type="hidden" .
7. Y ou can encapsulate a form element and supporting text or graphics, making the
entire unit selectable with a mouse click, by using the <label>  and </label>  tags.
8. To convert HTML into a format that can be displayed but will not be interpreted as
HTML by a browser, use the PHP htmlentities  function.
9. Y ou can help users complete fields with data they may have submitted elsewhere by
using the autocomplete  attribute, which prompts the user with possible values.
10. To ensure that a form is not submitted with missing data, you can apply the
required  attribute to essential inputs.
Chapter 12  Answers
1. Cookies should be transferred before a web page’s HTML, because they are sent as
part of the headers.
2. To store a cookie on a web browser, use the set_cookie  function.
3. To destroy a cookie, reissue it with set_cookie , but set its expiration date in the
past.
4. Using HTTP authentication, the username and password are stored in
$_SERVER['PHP_AUTH_USER']  and $_SERVER['PHP_AUTH_PW'] .
Solutions to the Chapter Questions | 695

5. The hash  function is a powerful security measure, because it is a one-way function
that converts a string to a 32-character hexadecimal number that cannot be con‐
verted back, and is therefore almost uncrackable.
6. When a string is salted, extra characters (known only by the programmer) are
added to it before hash  conversion. This makes it nearly impossible for a brute-
force dictionary attack to succeed.
7. A PHP session is a group of variables unique to the current user.
8. To initiate a PHP session, use the session_start  function.
9. Session hijacking is where a hacker somehow discovers an existing session ID and
attempts to take it over.
10. Session fixation is the attempt to force your own session ID onto a server rather
than letting it create its own.
Chapter 13  Answers
1. To enclose JavaScript code, you use <script>  and </script>  tags.
2. By default, JavaScript code will output to the part of the document in which it
resides. If it’s in the head, it will output to the head; if in the body, it outputs to the
body.
3. Y ou can include JavaScript code from other sources in your documents by either
copying and pasting them or, more commonly, including them as part of a
<script src='filename.js'>  tag.
4. The equivalent of the echo  and print  commands used in PHP is the JavaScript
document.write  function (or method).
5. To create a comment in JavaScript, preface it with // for a single-line comment or
surround it with /* and */ for a multiline comment.
6. The JavaScript string concatenation operator is the + symbol.
7. Within a JavaScript function, you can define a variable that has local scope by pre‐
ceding it with the var keyword upon first assignment.
8. To display the URL assigned to the link ID thislink  in all main browsers, you
can use the two following commands:
document.write(document.getElementById('thislink').href)
document.write(thislink.href)
9. The commands to change to the previous page in the browser’s history array
are:
696 | Appendix A: Solutions to the Chapter Questions

history.back()
history.go(-1)
10. To replace the current document with the main page at the oreilly.com  website,
you could use the following command:
document.location.href = 'http://oreilly.com'
Chapter 14  Answers
1. The most noticeable difference between Boolean values in PHP and JavaScript is
that PHP recognizes the keywords TRUE , true , FALSE , and false , whereas only
true  and false  are supported in JavaScript. Additionally, in PHP , TRUE  has a value
of 1, and FALSE  is NULL ; in JavaScript they are represented by true  and false ,
which can be returned as string values.
2. Unlike PHP , no character is used (such as $) to define a JavaScript variable name.
JavaScript variable names can start with and contain uppercase and lowercase let‐
ters as well as underscores; names can also include digits, but not as the first char‐
acter.
3. The difference between unary, binary, and ternary operators is the number of
operands each requires (one, two, and three, respectively).
4. The best way to force your own operator precedence is to surround the parts of an
expression to be evaluated first with parentheses.
5. Y ou use the identity operator when you wish to bypass JavaScript’s automatic
operand type changing.
6. The simplest forms of expressions are literals (such as numbers and strings) and
variables, which simply evaluate to themselves.
7. The three conditional statement types are if, switch , and the ?: operator.
8. Most conditional expressions in if and while  statements are literal or Boolean and
therefore trigger execution when they evaluate to TRUE . Numeric expressions trig‐
ger execution when they evaluate to a nonzero value. String expressions trigger
execution when they evaluate to a nonempty string. A NULL  value is evaluated as
false and therefore does not trigger execution.
9. Loops using for statements are more powerful than while  loops, because they sup‐
port two additional parameters to control loop handling.
10. The with  statement takes an object as its parameter. Using it, you specify an object
once; then for each statement within the with  block, that object is assumed.
Solutions to the Chapter Questions | 697

Chapter 15  Answers
1. JavaScript functions and variable name are case-sensitive. The variables Count ,
count , and COUNT  are all different.
2. To write a function that accepts and processes an unlimited number of parameters,
access parameters through the arguments  array, which is a member of all func‐
tions.
3. One way to return multiple values from a function is to place them all inside an
array and return the array.
4. When defining a class, use the this  keyword to refer to the current object.
5. The methods of a class do not have to be defined within a class definition. If a
method is defined outside the constructor, the method name must be assigned to
the this  object within the class definition.
6. New objects are created via the new keyword.
7. Y ou can make a property or method available to all objects in a class without repli‐
cating the property or method within the object by using the prototype  keyword
to create a single instance, which is then passed by reference to all the objects in a
class.
8. To create a multidimensional array, place subarrays inside the main array.
9. The syntax you would use to create an associative array is key : value , within
curly braces, as in the following:
assocarray =
{
  "forename" : "Paul",
  "surname"  : "McCartney",
  "group"    : "The Beatles"
}
10. A statement to sort an array of numbers into descending numerical order
would look like this:
numbers.sort(function(a, b){ return b – a })
Chapter 16  Answers
1. Y ou can send a form for validation prior to submitting it by adding the JavaScript
onsubmit  attribute to the <form>  tag. Make sure that your function returns true  if
the form is to be submitted, and false  otherwise.
2. To match a string against a regular expression in JavaScript, use the test  method.
698 | Appendix A: Solutions to the Chapter Questions

3. Regular expressions to match characters not in a word could be any of /[^\w]/ , /
[\W]/ , /[^a-zA-Z0-9_]/ , and so on.
4. A regular expression to match either of the words fox or fix could be /f[oi]x/ .
5. A regular expression to match any single word followed by any nonword character
could be /\w+\W/g .
6. A JavaScript function using regular expressions to test whether the word fox
exists in the string "The quick brown fox"  could be as follows:
document.write(/fox/.test("The quick brown fox"))
7. A PHP function using a regular expression to replace all occurrences of the
word the in "The cow jumps over the moon"  with the word my could be as
follows:
$s=preg_replace("/the/i", "my", "The cow jumps over the moon");
8. The HTML attribute used to pre-complete form fields with a value is value , which
is placed within an <input>  tag and takes the form value="value".
Chapter 17  Answers
1. It’s necessary to write a function for creating new XMLHttpRequest  objects, because
Microsoft browsers use two different methods of creating them, while all other
major browsers use a third. By writing a function to test the browser in use, you
can ensure that code will work on all major browsers.
2. The purpose of the try...catch  construct is to set an error trap for the code
inside the try statement. If the code causes an error, the catch  section will be exe‐
cuted instead of a general error being issued.
3. An XMLHttpRequest  object has six properties and six methods (see Tables 17-1 and
17-2).
4. Y ou can tell that an Ajax call has completed when the readyState  property of an
object has a value of 4.
5. When an Ajax call successfully completes, the object’s status  will have a value of
200.
6. The responseText  property of an XMLHttpRequest  object contains the value
returned by a successful Ajax call.
7. The responseXML  property of an XMLHttpRequest  object contains a DOM tree cre‐
ated from the XML returned by a successful Ajax call.
Solutions to the Chapter Questions | 699

8. To specify a callback function to handle Ajax responses, assign the function name
to the XMLHttpRequest  object’s onreadystatechange  property. Y ou can also use an
unnamed, inline function.
9. To initiate an Ajax request, an XMLHTTPRequest  object’s send  method is called.
10. The main differences between an Ajax GET and POST  request are that GET requests
append the data to the URL and not as a parameter of the send  method, and POST
requests pass the data as a parameter of the send  method and require the correct
form headers to be sent first.
Chapter 18  Answers
1. To import one style sheet into another, you use the @import  directive, like this:
@import url('styles.css');
2. To import a style sheet into a document, you can use the HTML <link>  tag:
<link rel='stylesheet' type='text/css' href='styles.css'>
3. To directly embed a style into an element, use the style  attribute, like this:
<div style='color:blue;'>
4. The difference between a CSS ID and a CSS class is that an ID is applied to only a
single element, whereas a class can be applied to many elements.
5. In a CSS declaration, ID names are prefixed with a # character (e.g., #myid ), and
class names with a . character (e.g., .myclass ).
6. In CSS, the semicolon is used as a separator between declarations.
7. To add a comment to a style sheet, you enclose it between /* and */ opening and
closing comment markers.
8. In CSS, you can match any element using the * universal selector.
9. To select a group of different elements and/or element types in CSS, you place a
comma between each element, ID, or class.
10. Given a pair of CSS declarations with equal precedence, to make one have
greater precedence over the other, you append the !important  declaration to
it, like this:
p { color:#ff0000 !important; }
700 | Appendix A: Solutions to the Chapter Questions

Chapter 19  Answers
1. The CSS3 operators ^=, $=, and *= match the start, end, or any portion of a string,
respectively.
2. The property you use to specify the size of a background image is background-
size , like this:
background-size:800px 600px;
3. Y ou can specify the radius of a border using the border-radius  property:
border-radius:20px;
4. To flow text over multiple columns, you use the column-count , column-gap ,
and column-rule  properties or their browser-specific variants, like this:
column-count:3;
     column-gap  :1em;
     column-rule :1px solid black;
5. The four functions with which you can specify CSS colors are hsl, hsla , rgb,
and rgba ; for example:
color:rgba(0%,60%,40%,0.4);
6. To create a gray text shadow under some text, offset diagonally to the bottom
right by 5 pixels, with a blurring of 3 pixels, you would use this declaration:
text-shadow:5px 5px 3px #888;
7. Y ou can indicate that text is truncated with an ellipsis by using this declaration:
text-overflow:ellipsis;
8. Y ou include a Google Web Font in a web page by first selecting it from http://
google.com/fonts . Then assuming, for example, you chose Lobster, include it in
a <link>  tag, like this:
<link href='http://fonts.googleapis.com/css?family=Lobster'
        rel='stylesheet' type='text/css'>
and also refer to the font in a CSS declaration such as this:
h1 { font-family:'Lobster', arial, serif; }
9. The CSS declaration you would you use to rotate an object by 90 degrees is:
transform:rotate(90deg);
10. To set up a transition on an object so that when any of its properties are
changed the change will transition immediately in a linear fashion over the
course of half a second, you would use this declaration:
Solutions to the Chapter Questions | 701

transition:all .5s linear;
Chapter 20  Answers
1. The O function returns an object by its ID, the S function returns the style  prop‐
erty of an object, and the C function returns an array of all objects that access a
given class.
2. Y ou can modify a CSS attribute of an object using the setAttribute  function,
like this:
myobject.setAttribute('font-size', '16pt')
Y ou can also (usually) modify an attribute directly (using slightly modified
property names where required), like this:
myobject.fontSize = '16pt'
3. The properties that provide the width and height available in a browser window
are window.innerHeight  and window.innerWidth .
4. To make something happen when the mouse passes over and out of an object,
attach to the onmouseover  and onmouseout  events.
5. To create a new element, use code such as this:
elem = document.createElement('span')
To add the new element to the DOM, use code such as this:
document.body.appendChild(elem)
6. To make an element invisible, set its visibility  property to hidden  (or visible
to restore it again). To collapse an element’s dimensions to zero, set its display
property to none  (the value block  is one way to restore it).
7. To set a single event at a future time, call the setTimeout  function, passing it the
code or function name to execute and the time delay in milliseconds.
8. To set up repeating events at regular intervals, use the setInterval  function, pass‐
ing it the code or function name to execute and the time delay between repeats in
milliseconds.
9. To release an element from its location in a web page to enable it to be moved
around, set its position  property to relative , absolute , or fixed . To restore it to
its original place, set the property to static .
10. To achieve an animation rate of 50 frames per second, you should set a delay
between interrupts of 20 milliseconds. To calculate this value, divide 1,000 milli‐
seconds by the desired frame rate.
702 | Appendix A: Solutions to the Chapter Questions

Chapter 21  Answers
1. The symbol commonly used as the factory method for creating jQuery objects is $.
Alternatively, you can use the method name jQuery .
2. To link to minified release 1.11.1 of jQuery from the Google CDN, you could
use HTML such as this:
<script src='http://ajax.googleapis.com/ajax/libs/jquery/
1.11.1/jquery.min.js'></script>
3. The jQuery $ factory method accepts CSS selectors in order to build a jQuery
object of matching elements.
4. To get a CSS property value, use the css method, supplying just a property name.
To set the property’s value, supply a property name and a value to the method.
5. To attach a method to the element elem ’s click event to make it slowly hide,
you could use code such as the following:
$('#elem').click(function() { $(this).hide('slow') } )
6. In order to be able to animate an element, you must assign a value of fixed , rela
tive , or absolute  to its position  property.
7. Methods can be run at once (or sequentially if animations) by chaining them
together with periods, like this:
$('#elem').css('color', 'blue').css('background',
'yellow').slideUp('slow')
8. To retrieve an element object from a jQuery selection object, you can index it with
square brackets, like this $('#elem')[0] , or use the get method, like this: $
('#elem').get(0) .
9. To display the sibling element immediately preceding one with the ID of news
in bold, you could use this statement:
$('#news').prev().css('font-weight', 'bold')
10. Y ou can make a jQuery Ajax Get request using the $.get  method, like this:
$.get('http://server.com/ajax.php?do=this', function(data) {
alert('The server said: ' + data) } )
Chapter 22  Answers
1. The new HTML5 element for drawing graphics in a web browser is the canvas ele‐
ment, created using the <canvas>  tag.
Solutions to the Chapter Questions | 703

2. Y ou need to use JavaScript to access many of the new HTML5 technologies such as
the canvas and geolocation.
3. To incorporate audio or video in a web page, you use the <audio>  or <video>  tags.
4. In HTML5, local storage offers far greater access to local user space than cookies,
which are limited in the amount of data they can hold.
5. In HTML5, you can set up web workers to carry on background tasks for you.
These workers are simply sections of JavaScript code.
Chapter 23  Answers
1. To create a canvas element in HTML, use a <canvas>  tag and specify an ID
that JavaScript can use to access it, like this:
<canvas id='mycanvas'>
2. To give JavaScript access to a canvas element, ensure the element has been
given an ID such as mycanvas , and then use the document.getElementdById
function (or the O function from the OSC.js  file supplied on the companion
website) to return an object to the element. Finally, call getContext  on the
object to retrieve a 2D context to the canvas, like this:
canvas  = document.getElementById('mycanvas')
context = canvas.getContext('2d')
3. To start a canvas path, issue the beginPath  method on the context. After creat‐
ing a path, you close it by issuing closePath  on the context, like this:
context.beginPath()
  // Path creation commands go here
context.closePath()
4. Y ou can extract the data from a canvas using the toDataURL  method, which
can then be assigned to the src property of an image object, like this:
image.src = canvas.toDataURL()
5. To create a gradient fill (either radial or linear) with more than two colors,
specify all the colors required as stop colors assigned to a gradient object you
have already created, and assign them each a starting point as a percent value
of the complete gradient (between 0 and 1), like this:
gradient.addColorStop(0,    'green')
gradient.addColorStop(0.3,  'red')
gradient.addColorStop(0,79, 'orange')
gradient.addColorStop(1,    'brown')
704 | Appendix A: Solutions to the Chapter Questions

6. To adjust the width of drawn lines, assign a value to the lineWidth  property of
the context, like this:
context.lineWidth = 5
7. To ensure that future drawing takes place only within a certain area, you can create
a path and then call the clip  method.
8. A complex curve with two imaginary attractors is called a Bézier curve. To create
one, call the bezierCurveTo  method, supplying two pairs of x and y coordinates
for the attractors, followed by another pair for the end point of the curve. A curve
is then created from the current drawing location to the destination.
9. The getImageData  method returns an array containing the specified pixel data,
with the elements consecutively containing the red, green, blue, and alpha pixel
values, so four items of data are returned per pixel.
10. The transform  method takes six arguments (or parameters), which are in order:
horizontal scale, horizontal skew, vertical skew, vertical scale, horizontal translate,
and vertical translate. Therefore, the arguments that apply to scaling are numbers 1
and 4 in the list.
Chapter 24  Answers
1. To insert audio and video into an HTML5 document, use the <audio>  and <video>
tags.
2. To guarantee maximum audio playability on all platforms, you should use the
OGG codec plus either the ACC or MP3 codec.
3. To play and pause HTML5 media playback, you can call the play  and pause  meth‐
ods of an audio or video element.
4. To support media playback in a non-HTML5 browser, you can embed a Flash
audio or video player inside any audio or video element, which will be activated if
HTML5 media playing is not supported.
5. To guarantee maximum video playability on all platforms, you should use the
MP4/H.264 codec, and the OGG/Theora or VP8 codec to support the Opera
browser.
Chapter 25  Answers
1. To request geolocation data from a web browser, you call the following
method, passing the names of two functions you have written for handling
access or denial to the data:
navigator.geolocation.getCurrentPosition(granted, denied)
Solutions to the Chapter Questions | 705

2. To determine whether or not a browser supports local storage, test the typeof
property of the localStorage  object, like this:
if (typeof localStorage == 'undefined')
  // Local storage is not available}
3. To erase all local storage data for the current domain, you can call the localStor
age.clear  method.
4. Web workers communicate with a main program most easily using the postMes
sage  method to send information, and by attaching to the web worker object’s
onmessage  event to retrieve it.
5. To inform a web browser that the document can be run offline as a local web
app, create a file to use as a manifest; in that file, list the files required by the
application, and then link to the file in the <html>  tag, like this:
<html manifest='filename.appcache'>
6. Y ou can prevent the default action of disallowing drag-and-drop for the events that
handle these operations, by issuing a call to the event object’s preventDefault
method in your ondragover  and ondrop  event handlers.
7. To make cross-document messaging more secure, you should always supply a
domain identifier when posting messages, and check for that identifier when
receiving them, like this for posting:
postMessage(message, 'http://mydomain.com')
And this for receiving:
if (event.origin) != 'http://mydomain.com') // Disallow
Y ou can also encrypt or obscure communications to discourage injection or
eavesdropping.
8. The purpose of microdata is to make information more easily understandable by
computer programs, such as search engines.
706 | Appendix A: Solutions to the Chapter Questions

APPENDIX B
Online Resources
This appendix lists useful websites where you can get the material used in this book,
or other resources that  will enhance your web programs.
PHP Resource Sites
•http://codewalkers.com
•http://developer.yahoo.com/php/
•http://easyphp.org
•http://forums.devshed.com
•http://free-php.net
•http://hotscripts.com/category/php/
•http://htmlgoodies.com/beyond/php/
•http://php.net
•http://php.resourceindex.com
•http://php-editors.com
•http://phpbuilder.com
•http://phpfreaks.com
•http://phpunit.de
•http://w3schools.com/php/
•http://zend.com
707

MySQL Resource Sites
•http://launchpad.net/mysql
•http://mysql.com
•http://php.net/mysql
•http://planetmysql.org
•http://oracle.com/us/sun
•http://w3schools.com/PHP/php_mysql_intro.asp
JavaScript Resource Sites
•http://developer.mozilla.org/en/JavaScript
•http://dynamicdrive.com
•http://javascript.about.com
•http://javascript.internet.com
•http://javascript.com
•http://javascriptkit.com
•http://w3schools.com/JS
•http://webreference.com/js
CSS Resource Sites
•http://freehtmlvalidator.com
•http://cssbasics.com
•http://dustindiaz.com/css-shorthand
•http://quirksmode.org/css/quirksmode.html
•http://css-discuss.incutio.com/wiki/Print_Stylesheets
HTML5 Resource Sites
•http://htmlvalidator.com
•http://caniuse.com
•http://html5test.com
708 | Appendix B: Online Resources

•http://html5readiness.com
•http://html5demos.com
•http://html5-demos.appspot.com
•http://modernizr.com
•http://html5doctor.com
AJAX Resource Sites
•http://ajax.asp.net
•http://ajaxian.com
•http://ajaxmatters.com
•http://developer.mozilla.org/en/AJAX
•http://dojotoolkit.org
•http://jquery.com
•http://mochikit.com
•http://mootools.net
•http://openjs.com
•http://prototypejs.org
•http://sourceforge.net/projects/clean-ajax
•http://w3schools.com/Ajax
Miscellaneous Resource Sites
•http://onlinewebcheck.com
•http://apachefriends.org
•http://easyphp.org
•http://eclipse.org
•http://editra.org
•http://fireftp.mozdev.org
•http://sourceforge.net/projects/glossword
•http://mamp.info/en
•http://programmingforums.org
Online Resources | 709

•http://putty.org
O’Reilly Resource Sites
•http://onlamp.com
•http://onlamp.com/php
•http://onlamp.com/onlamp/general/mysql.csp
•http://oreilly.com/ajax
•http://oreilly.com/javascript
•http://oreilly.com/mysql
•http://oreilly.com/php
•http://oreillynet.com/javascript
710 | Appendix B: Online Resources

APPENDIX C
MySQL’s FULLTEXT Stopwords
This appendix contains the more than 500 stopwords  referred to in the section “Creat‐
ing a FULLTEXT index” on page 191  in Chapter 8 . Stopwords are words that are con‐
sidered so common as to not be worth searching for, or storing, in a FULLTEXT  index.
Theoretically, ignoring these words makes little difference to the results of most FULL
TEXT  searches, but makes MySQL databases considerably smaller and more efficient.
The words are shown here in lowercase but apply to uppercase and mixed-case ver‐
sions, too:
A
a’s, able, about , above , according , accordingly , across , actually , after , afterwards , again ,
against , ain’t, all, allow , allows , almost , alone , along , already , also, although , always ,
am, among , amongst , an, and, another , any, anybody , anyhow , anyone , anything , any‐
way, anyways , anywhere , apart , appear , appreciate , appropriate , are, aren’t , around , as,
aside , ask, asking , associated , at, available , away , awfully
B
be, became , because , become , becomes , becoming , been , before , beforehand , behind ,
being , believe , below , beside , besides , best, better , between , beyond , both , brief , but, by
C
c’mon , c’s, came , can, can’t , cannot , cant, cause , causes , certain , certainly , changes ,
clearly , co, com, come , comes , concerning , consequently , consider , considering , contain ,
containing , contains , corresponding , could , couldn’t , course , currently
D
definitely , described , despite , did, didn’t , different , do, does, doesn’t , doing , don’t , done ,
down , downwards , during
711

E
each , edu, eg, eight , either , else, elsewhere , enough , entirely , especially , et, etc, even , ever,
every , everybody , everyone , everything , everywhere , ex, exactly , example , except
F
far, few, fifth, first, five, followed , following , follows , for, former , formerly , forth , four,
from , further , furthermore
G
get, gets, getting , given , gives , go, goes, going , gone , got, gotten , greetings
H
had, hadn’t , happens , hardly , has, hasn’t , have , haven’t , having , he, he’s, hello , help,
hence , her, here, here’s , hereafter , hereby , herein , hereupon , hers, herself , hi, him, himself ,
his, hither , hopefully , how, howbeit , however
I
i’ d, i’ll, i’m, i’ve, ie, if, ignored , immediate , in, inasmuch , inc, indeed , indicate , indicated ,
indicates , inner , insofar , instead , into, inward , is, isn’t, it, it’ d, it’ll, it’s, its, itself
J
just
K
keep , keeps , kept, know , knows , known
L
last, lately , later , latter , latterly , least , less, lest, let, let’s, like, liked , likely , little , look, look‐
ing, looks , ltd
M
mainly , many , may, maybe , me, mean , meanwhile , merely , might , more , moreover ,
most , mostly , much , must , my, myself
N
name , namely , nd, near , nearly , necessary , need , needs , neither , never , nevertheless ,
new, next , nine, no, nobody , non, none , noone , nor, normally , not, nothing , novel , now,
nowhere
O
obviously , of, off, often , oh, ok, okay , old, on, once , one, ones , only, onto , or, other , oth‐
ers, otherwise , ought , our, ours, ourselves , out, outside , over, overall , own
P
particular , particularly , per, perhaps , placed , please , plus, possible , presumably , proba‐
bly, provides
Q
que, quite , qv
712 | Appendix C: MySQL’s FULLTEXT Stopwords

R
rather , rd, re, really , reasonably , regarding , regardless , regards , relatively , respectively ,
right
S
said, same , saw, say, saying , says, second , secondly , see, seeing , seem , seemed , seeming ,
seems , seen, self, selves , sensible , sent, serious , seriously , seven , several , shall , she, should ,
shouldn’t , since , six, so, some , somebody , somehow , someone , something , sometime ,
sometimes , somewhat , somewhere , soon , sorry , specified , specify , specifying , still, sub,
such , sup, sure
T
t’s, take, taken , tell, tends , th, than , thank , thanks , thanx , that, that’s , thats , the, their ,
theirs , them , themselves , then , thence , there , there’s , thereafter , thereby , therefore ,
therein , theres , thereupon , these , they, they’ d , they’ll , they’re , they’ve , think , third , this,
thorough , thoroughly , those , though , three , through , throughout , thru, thus, to, together ,
too, took, toward , towards , tried , tries, truly , try, trying , twice , two
U
un, under , unfortunately , unless , unlikely , until , unto , up, upon , us, use, used , useful ,
uses, using , usually
V
value , various , very, via, viz, vs
W
want , wants , was, wasn’t , way, we, we’ d, we’ll , we’re , we’ve , welcome , well, went , were ,
weren’t , what , what’s , whatever , when , whence , whenever , where , where’s , whereafter ,
whereas , whereby , wherein , whereupon , wherever , whether , which , while , whither , who,
who’s , whoever , whole , whom , whose , why, will, willing , wish , with , within , without ,
won’t , wonder , would , would , wouldn’t
Y
yes, yet, you, you’ d , you’ll , you’re , you’ve , your , yours , yourself , yourselves
Z
zero
MySQL’s FULLTEXT Stopwords | 713



APPENDIX D
MySQL Functions
Having functions built into MySQL substantially reduces the speed of performing
complex queries, as well as their complexity. If you wish to learn more about the
available functions, you can visit the following URLs:
•String functions: tinyurl.com/phpstringfuncs
•Date and time: tinyurl.com/phpdateandtime
But, for easy reference, here are some of the most commonly used MySQL functions.
String Functions
CONCAT(str1, str2, ...)
Returns the result of concatenating str1 , str2 , and any other parameters (or
NULL  if any argument is NULL ). If any of the arguments are binary, then the result
is a binary string; otherwise, the result is a nonbinary string. The code returns
the string "MySQL" :
SELECT CONCAT('My', 'S', 'QL');
CONCAT_WS( separator , str1, str2, ...)
This works in the same way as CONCAT  except it inserts a separator between the
items being concatenated. If the separator is NULL , the result will be NULL , but
NULL  values can be used as other arguments, which will then be skipped. This
code returns the string "Truman,Harry,S" :
SELECT CONCAT_WS(',', 'Truman', 'Harry', 'S');
715

LEFT(str, len)
Returns the leftmost len characters from the string str (or NULL  if any argument
is NULL ). The following code returns the string "Chris" :
SELECT LEFT('Christopher Columbus', '5');
RIGHT(str, len)
Returns the rightmost len characters from the string str (or NULL  if any argu‐
ment is NULL ). This code returns the string "Columbus" :
SELECT RIGHT('Christopher Columbus', '8');
MID(str, pos, len)
Returns up to len characters from the string str starting at position pos. If len is
omitted, then all characters up to the end of the string are returned. Y ou may use
a negative value for pos, in which case it represents the character pos places from
the end of the string. The first position in the string is 1. This code returns the
string "stop" :
SELECT MID('Christopher Columbus', '5', '4');
LENGTH(str)
Returns the length in bytes of the string str. Note that multibyte characters
count as multiple bytes. If you need to know the actual number of characters in a
string, use the CHAR_LENGTH  function. This code returns the value 15:
SELECT LENGTH('Mark Zuckerberg');
LPAD(str, len, padstr)
Returns the string str padded to a length of len characters by prepending the
string with padstr  characters. If str is longer than len, the string returned will
be truncated to len characters. The example code returns these strings:
 January
February
   March
   April
     May
Notice how all the strings have been padded to be eight characters long:
SELECT LPAD('January', '8', ' ');
SELECT LPAD('February', '8', ' ');
SELECT LPAD('March', '8', ' ');
SELECT LPAD('April', '8', ' ');
SELECT LPAD('May', '8', ' ');
RPAD
This is the same as the LPAD  function except that the padding takes place on the
right of the returned string. This code returns the string "Hi!!!" :
716 | Appendix D: MySQL Functions

SELECT RPAD('Hi', '5', '!');
LOCATE(substr, str, pos)
Returns the position of the first occurrence of substr  in the string str. If the
parameter pos is passed, the search begins at position pos. If substr  is not found
in str, a value of 0 is returned. This code returns the values 5 and 11, because the
first function call returns the first encounter of the word unit, while the second
one only starts to search at the seventh character, and so returns the second
instance:
SELECT LOCATE('unit', 'Community unit');
SELECT LOCATE('unit', 'Community unit' 7);
LOWER(str)
This is the inverse of UPPER . Returns the string str with all the characters
changed to lowercase. This code returns the string "queen elizabeth ii" :
SELECT LOWER('Queen Elizabeth II');
UPPER(str)
This is the inverse of LOWER . It returns the string str with all the characters
changed to uppercase. This code returns the string "I CAN'T HELP SHOUTING" :
SELECT UPPER("I can't help shouting");
QUOTE(str)
Returns a quoted string that can be used as a properly escaped value in a SQL
statement. The returned string is enclosed in single quotes with all instances of
single quotes, backslashes, the ASCII NUL character, and Control-Z preceded by a
backslash. If the argument str is NULL , the return value is the word NULL  without
enclosing quotes. The example code returns the following string:
'I\'m hungry'
Note how the " symbol has been replaced with \'.
SELECT QUOTE("I'm hungry");
REPEAT(str, count)
Returns a string comprising count  copies of the string str. If count  is less than 1,
an empty string is returned. If either parameter is NULL , then NULL  is returned.
This code returns the strings "Ho Ho Ho"  and "Merry Christmas" :
SELECT REPEAT('Ho ', 3), 'Merry Christmas';
REPLACE( str, from, to)
Returns the string str with all occurrences of the string from  replaced with the
string to. The search and replace is case-sensitive when searching for from . This
code returns the string "Cheeseburger and Soda" :
MySQL Functions | 717

SELECT REPLACE('Cheeseburger and Fries', 'Fries', 'Soda');
TRIM([specifier remove  FROM]  str)
Returns the string str with all prefixes or suffixes removed. The specifier  can
be one of BOTH , LEADING , or TRAILING . If no specifier  is supplied, then BOTH  is
assumed. The remove  string is optional and, if omitted, spaces are removed. This
code returns the strings "No Padding"  and "Hello__" :
SELECT TRIM('   No Padding   ');
SELECT TRIM(LEADING '_' FROM '__Hello__');
LTRIM(str) and RTRIM( str)
The function RTRIM  returns the string str with any leading spaces removed,
while the function RTRIM  performs the same action on the string’s tail. This code
returns the strings "No Padding"  and "No Padding" :
SELECT LTRIM('   No Padding   ');
SELECT RTRIM('   No Padding   ');
Date Functions
Dates are an important part of most databases.  Whenever financial transactions take
place, the date has to be recorded, expiry dates of credit cards need to be noted for
repeat billing purposes, and so on. So, as you might expect, MySQL comes with a
wide variety of functions to make handling dates a breeze.
CURDATE()
Returns the current date in YYYY-MM-DD or YYYMMDD format, depending
on whether the function is used in a numeric or string context. On the date May
2, 2018, the following code returns the values 2018-05-02  and 20180502:
SELECT CURDATE();
SELECT CURDATE() + 0;
DATE(expr)
Extracts the date part of the date or a DATETIME  expression expr . This code
returns the value 1961-05-02 :
SELECT DATE('1961-05-02 14:56:23');
DATE_ADD( date, INTERVAL  expr unit )
Returns the result of adding the expression expr  using units unit  to the date .
The date  argument is the starting date or DATETIME  value, and expr  may start
with a - symbol for negative intervals. Table D-1  shows the interval types sup‐
ported and the expected expr  values. Note the examples in this table that show
where it is necessary to surround the expr  value with quotes for MySQL to cor‐
718 | Appendix D: MySQL Functions

rectly interpret them. If you are ever in doubt, adding the quotes will always
work.
Table D-1. Expected expr values
Type Expected expr value Example
MICROSECOND MICROSECONDS 111111
SECOND SECONDS 11
MINUTE MINUTES 11
HOUR HOURS 11
DAY DAYS 11
WEEK WEEKS 11
MONTH MONTHS 11
QUARTER QUARTERS 1
YEAR YEARS 11
SECOND_MICROSECOND 'SECONDS.MICROSECONDS' 11.22
MINUTE_MICROSECOND 'MINUTES.MICROSECONDS' 11.22
MINUTE_SECOND 'MINUTES:SECONDS' '11:22'
HOUR_MICROSECOND 'HOURS.MICROSECONDS' 11.22
HOUR_SECOND 'HOURS:MINUTES:SECONDS' '11:22:33'
HOUR_MINUTE 'HOURS:MINUTES' '11:22'
DAY_MICROSECOND 'DAYS.MICROSECONDS' 11.22
DAY_SECOND 'DAYS HOURS:MINUTES:SECONDS' '11 22:33:44'
DAY_MINUTE 'DAYS HOURS:MINUTES' '11 22:33'
DAY_HOUR 'DAYS HOURS' '11 22'
YEAR_MONTH 'YEARS-MONTHS' '11-2'
Y ou can also use the DATE_SUB  function to subtract date intervals. However, it’s
not actually necessary for you to use the DATE_ADD  or DATE_SUB  functions, as you
can use date arithmetic directly in MySQL. This code:
SELECT DATE_ADD('1975-01-01', INTERVAL 77 DAY);
SELECT DATE_SUB('1982-07-04', INTERVAL '3-11' YEAR_MONTH);
SELECT '2018-12-31 23:59:59' + INTERVAL 1 SECOND;
SELECT '2000-01-01' - INTERVAL 1 SECOND;
returns the following values:
1975-03-19
1978-08-04
2019-01-01 00:00:00
1999-12-31 23:59:59
MySQL Functions | 719

Notice how the last two commands use date arithmetic directly without recourse
to functions.
DATE_FORMAT( date, format)
This returns the date  value formatted according to the format  string. Table D-2
shows the specifiers that can be used in the format  string. Note that the % charac‐
ter is required before each specifier, as shown. This code returns the given date
and time as Friday May 4th 2018 03:02 AM :
SELECT DATE_FORMAT('2018-05-04 03:02:01', '%W %M %D %Y %h:%i %p');
Table D-2. DATE_FORMAT specifiers
Specifier Description
%a Abbreviated weekday name (Sun–Sat)
%b Abbreviated month name (Jan–Dec)
%c Month, numeric (0–12)
%D Day of the month with English suffix  (0th, 1st, 2nd, 3rd, ...)
%d Day of the month, numeric (00–31)
%e Day of the month, numeric (0–31)
%f Microseconds (000000–999999)
%H Hour (00–23)
%h Hour (01–12)
%I Hour (01–12)
%i Minutes, numeric (00–59)
%j Day of year (001–366)
%k Hour (0–23)
%l Hour (1–12)
%M Month name (January–December)
%m Month, numeric (00–12)
%p AM or PM
%r Time, 12–hour (hh:mm:ss followed by AM or PM)
%S Seconds (00–59)
%s Seconds (00–59)
%T Time, 24-hour (hh:mm:ss)
%U Week (00–53), where Sunday is the first  day of the week
%u Week (00–53), where Monday is the first  day of the week
%V Week (01–53), where Sunday is the first  day of the week; used with %X
%v Week (01–53), where Monday is the first  day of the week; used with %x
%W Weekday name (Sunday–Saturday)
720 | Appendix D: MySQL Functions

Specifier Description
%w Day of the week (0=Sunday–6=Saturday)
%X Year for the week where Sunday is the first  day of the week, numeric, four digits; used with %V
%x Year for the week, where Monday is the first  day of the week, numeric, four digits; used with %v
%Y Year, numeric, four digits
%y Year, numeric, two digits
%% A literal % character
DAY(date)
Returns the day of the month for date , in the range 1 to 31 or 0 for dates that
have a zero day part such as 0000-00-00 or 2018-00-00. Y ou can also use the
function DAYOFMONTH  to return the same value. This code returns the value 3:
SELECT DAY('2018-02-03');
DAYNAME( date)
Returns the name of the weekday for the date . This code returns the string "Sat
urday" :
SELECT DAYNAME('2018-02-03');
DAYOFWEEK( date)
Returns the weekday index for date  between 1 for Sunday through 7 for Satur‐
day. This code returns the value 7:
SELECT DAYOFWEEK('2018-02-03');
DAYOFYEAR( date)
Returns the day of the year for date  in the range 1 to 366. This code returns the
value 34:
SELECT DAYOFYEAR('2018-02-03');
LAST_DAY( date)
Returns the last day of the month for the given DATETIME  value date . If the argu‐
ment is invalid, it returns NULL . This code:
SELECT LAST_DAY('2018-02-03');
SELECT LAST_DAY('2018-03-11');
SELECT LAST_DAY('2018-04-26');
returns the following values:
2018-02-28
2018-03-31
2018-04-30
As you’ d expect, it correctly returns the 28th day of February, the 31st of March,
and the 30th of April 2011.
MySQL Functions | 721

MAKEDATE( year, dayofyear )
Returns a date given year  and dayofyear  values. If dayofyear  is 0, the result is
NULL . This code returns the date 2016-10-01 :
SELECT MAKEDATE(2018,274);
MONTH(date)
Returns the month for date  in the range 1 through 12 for January through
December. Dates that have a zero month part, such as 0000-00-00 or 2016-00-00,
return 0. This code returns the value 7:
SELECT MONTH('2018-07-11');
MONTHNAME( date)
Returns the full name of the month for date . This code returns the string "July" :
SELECT MONTHNAME('2018-07-11');
SYSDATE()
Returns the current date and time as a value in either YYY-MM-DD HH:MM:SS
or YYYMMDDHHMMSS format, depending on whether the function is used in
a string or numeric context. The function NOW works in a similar manner, except
that it returns the time and date only at the start of the current statement,
whereas SYSDATE  returns the time and date at the exact moment the function
itself is called. On December 19, 2018, at 19:11:13, this code returns the values
2018-12-19 19:11:13  and 20181219191113 .
SELECT SYSDATE();
SELECT SYSDATE() + 0;
YEAR(date)
Returns the year for date  in the range 1000 to 9999, or 0 for the zero date. This
code returns the year 1999 .
SELECT YEAR('1999-08-07');
WEEK(date  [, mode])
Returns the week number for date . If passed the optional mode  parameter, the
week number returned will be modified according to Table D-3 . Y ou can also use
the function WEEKOFYEAR , which is equivalent to using the WEEK  function with a
mode  of 3. This code returns the week number 14.
SELECT WEEK('2018-04-04', 1);
Table D-3. The modes supported by the WEEK function
Mode First day of week Range Where week 1 is the first  week...
0 Sunday 0–53 with a Sunday in this year
1 Monday 0–53 with more than three days this year
722 | Appendix D: MySQL Functions

Mode First day of week Range Where week 1 is the first  week...
2 Sunday 1–53 with a Sunday in this year
3 Monday 1–53 with more than three days this year
4 Sunday 0–53 with more than three days this year
5 Monday 0–53 with a Monday in this year
6 Sunday 1–53 with more than three days this year
7 Monday 1–53 with a Monday in this year
WEEKDAY( date)
Returns the weekday index for date  where 0=Monday through 6=Sunday. This
code returns the value 2.
SELECT WEEKDAY('2018-04-04');
Time Functions
Sometimes  you need to work with the time, rather than the date, and MySQL pro‐
vides plenty of functions for you to do so.
CURTIME()
Returns the current time as a value in the format HH:MM:SS or
HHMMSS.uuuuuu, depending on whether the function is used in a string or
numeric context. The value is expressed using the current time zone. When the
current time is 11:56:23, this code returns the values 11:56:23  and
115623.000000 .
SELECT CURTIME();
SELECT CURTIME() + 0;
HOUR(time)
Returns the hour for time . This code returns the value 11.
SELECT HOUR('11:56:23');
MINUTE(time)
Returns the minute for time . This code returns the value 56.
SELECT MINUTE('11:56:23');
SECOND(time)
Returns the second for time . This code returns the value 23.
SELECT SECOND('11:56:23');
MAKETIME( hour, minute, second)
Returns a time value calculated from the hour , minute , and second  arguments.
This code returns the time 11:56:23 .
MySQL Functions | 723

SELECT MAKETIME(11, 56, 23);
TIMEDIFF( expr1, expr2)
Returns the difference between expr1  and expr2  (expr1  – expr2 ) as a time value.
Both expr1  and expr2  must be TIME  or DATETIME  expressions of the same type.
This code returns the value 01:37:38 .
SELECT TIMEDIFF('2000-01-01 01:02:03', '1999-12-31 23:24:25');
UNIX_TIMESTAMP([ date])
If called without the optional date  argument, this function returns the number of
seconds since 1970-01-01 00:00:00 UTC as an unsigned integer. If the date
parameter is passed, then the value returned is the number of seconds since the
1970 start date until the given date. This command will not return the same value
for everyone because the date given to it is interpreted as a local time (given in
the user’s time zone). This code will return the value 946684800  (the number of
seconds up to the start of the new millennium) followed by a TIMESTAMP  repre‐
senting the current Unix time at the moment you run it.
SELECT UNIX_TIMESTAMP('2000-01-01');
SELECT UNIX_TIMESTAMP();
FROM_UNIXTIME( unix_timestamp  [, format])
Returns the unix_timestamp  parameter as either a string in YYY-MM-DD
HH:MM:SS or YYYMMDDHHMMSS.uuuuuu format, depending on whether
the function is used in a string or numeric context. If the optional format  param‐
eter is provided, the result is formatted according to the specifiers in Table D-2 .
The precise value returned will depend on the user’s local time. This code returns
the strings "2000-01-01 00:00:00"  and "Saturday January 1st 2000 12:00
AM".
SELECT FROM_UNIXTIME(946684800);
SELECT FROM_UNIXTIME(946684800, '%W %M %D %Y %h:%i %p');
724 | Appendix D: MySQL Functions

APPENDIX E
jQuery Selectors, Objects, and Methods
Chapter 21  gives you a good grounding in using the jQuery JavaScript Library. To
help get you started with using jQuery to the best effect, here’s a comprehensive list of
the selectors, objects, and methods it uses, a number of which there wasn’t room to
introduce in this book, but you are ready for them, because you should now know
enough to be able to use them correctly.
Please bear in mind, though, that sometimes new features are added, bugs are fixed,
and other features can become deprecated or removed. So you can keep up-to-date
with the latest developments, information on deprecated or removed features (not
detailed here), and newer releases of jQuery, at jquery.com  and api.jquery.com .
jQuery Selectors
('*')
Selects all elements.
('element')
Selects all element s with the given tag name.
('#id')
Selects a single element with the given id attribute.
('.class')
Selects all elements with the given class .
('selector1, selector2, selectorN')
Selects the combined results of all the specified selectors .
('ancestor descendant')
Selects all elements that are descendant s of a given ancestor .
725

('prev + next')
Selects all next elements matching next  that are immediately preceded by a sibling
prev .
('prev ~ siblings')
Selects all sibling elements that follow after the prev  element, have the same parent,
and match the filtering siblings  selector.
('parent > child')
Selects all direct child elements specified by child  of elements specified by parent .
[name]
Selects elements that have the specified attribute name , with any value.
[name|='value']
Selects elements that have the specified attribute name  with a value  either equal to a
given string or starting with that string followed by a hyphen ( -).
[name*='value']
Selects elements that have the specified attribute name  with a value  containing a
given substring.
[name~='value']
Selects elements that have the specified attribute name  with a value  containing a
given word, delimited by spaces.
[name$='value']
Selects elements that have the specified attribute name  with a value  ending exactly
with a given string. The comparison is case-sensitive.
[name='value']
Selects elements that have the specified attribute name  with a value  exactly equal to a
certain value.
[name!='value']
Selects elements that either don’t have the specified attribute name , or do have the
specified attribute but not with a certain value .
[name^='value']
Selects elements that have the specified attribute name  with a value  beginning exactly
with a given string.
[name='value'][name2='value2']
Matches elements that match all of the specified attribute filters.
:animated
Selects all elements that are in the progress of an animation at the time the selector is
run.
726 | Appendix E: jQuery Selectors, Objects, and Methods

:button
Selects all button elements and elements of type button .
:checkbox
Selects all elements of type checkbox .
:checked
Matches all elements that are checked  or selected .
:contains( text)
Selects all elements that contain the specified text .
:disabled
Selects all elements that are disabled.
:empty
Selects all elements that have no children (including text nodes).
:enabled
Selects all elements that are enabled.
:eq(n)
Selects the element at index n within the matched set.
:even
Selects even elements, zero-indexed. See also odd.
:file
Selects all elements of type file.
:first-child
Selects all elements that are the first child of their parent.
:first-of-type
Selects all elements that are the first among siblings of the same element name.
:first
Selects the first matched element.
:gt(index)
Selects all elements at an index greater than index  within the matched set.
:has(selector )
Selects elements that contain at least one element that matches the specified selec
tor.
:image
Selects all elements of type image.
jQuery Selectors, Objects, and Methods | 727

:header
Selects all elements that are headers, like h1, h2, h3, and so on.
:hidden
Selects all elements that are hidden.
:input
Selects all inpu t, textarea , select , and button  elements.
:lang(language )
Selects all elements of the specified language .
:last-child
Selects all elements that are the last child of their parent.
:last-of-type
Selects all elements that are the last among siblings of the same element name.
:last
Selects the last matched element.
:lt(index)
Selects all elements at an index less than index  within the matched set.
:not(selector )
Selects all elements that do not match the given selector .
:nth-child( n)
Selects all elements that are the nth child of their parent.
:nth-last-child( n)
Selects all elements that are the nth child of their parent, counting from the last
element to the first.
:nth-last-of-type( n)
Selects all elements that are the nth child of their parent, counting from the last ele‐
ment to the first.
:nth-of-type( n)
Selects all elements that are the nth child of their parent in relation to siblings with
the same element name.
:odd
Selects odd elements, zero-indexed. See also: even .
:only-child
Selects all elements that are the only child of their parent.
728 | Appendix E: jQuery Selectors, Objects, and Methods

:only-of-type
Selects all elements that have no siblings with the same element name.
:parent
Selects all elements that have at least one child node (either an element or text).
:password
Selects all elements of type password .
:radio
Selects all elements of type radio .
:reset
Selects all elements of type reset .
:root
Selects the element that is the root of the document.
:selected
Selects all elements that are selected.
:submit
Selects all elements of type submit .
:target
Selects the target element indicated by the fragment identifier of the document’s URI.
:text
Selects all elements of type text .
:visible
Selects all elements that are visible.
jQuery Objects
event.currentTarget
The current DOM element within the event-bubbling phase.
event.data
An optional object of data passed to an event method when the current executing
handler is bound.
event.delegateTarget
The element where the currently called jQuery event handler was attached.
event.metaKey
Indicates whether the META key was pressed when the event fired.
jQuery Selectors, Objects, and Methods | 729

event.namespace
The namespace specified when the event was triggered.
event.pageX
The mouse position relative to the left edge of the document.
event.pageY
The mouse position relative to the top edge of the document.
event.relatedTarget
The other DOM element involved in the event, if any.
event.result
The last value returned by an event handler that was triggered by this event, unless
the value was undefined.
event.target
The DOM element that initiated the event.
event.timeStamp
The difference in milliseconds between the time the browser created the event and
January 1, 1970.
event.type
Describes the nature of the event.
event.which
For key or mouse events, this property indicates the specific key or button that was
pressed.
jquery
A string containing the jQuery version number.
length
The number of elements in the jQuery object.
jQuery.cssHooks
Hooks directly into jQuery to override how particular CSS properties are retrieved or
set, normalize CSS property naming, or create custom properties.
jQuery.fx.interval
The rate (in milliseconds) at which animations fire.
jQuery.fx.off
Globally disables all animations.
730 | Appendix E: jQuery Selectors, Objects, and Methods

jQuery Methods
$
Returns a collection  of matched elements either found in the DOM based on passed
argument(s) or created by passing an HTML string.
add
Adds elements to the set of matched elements.
addBack
Adds the previous set of elements on the stack to the current set, optionally filtered
by a selector.
addClass
Adds the specified class(es) to each of the set of matched elements.
after
Inserts content, specified by the parameter, after each element in the set of matched
elements.
ajaxComplete
Registers a handler to be called when Ajax requests complete.
ajaxError
Registers a handler to be called when Ajax requests complete with an error.
ajaxSend
Attaches a function to be executed before an Ajax request is sent.
ajaxStart
Registers a handler to be called when the first Ajax request begins.
ajaxStop
Registers a handler to be called when all Ajax requests have completed.
ajaxSuccess
Attaches a function to be executed whenever an Ajax request completes successfully.
animate
Performs a custom animation of a set of CSS properties.
append
Inserts content, specified by the parameter, to the end of each element in the set of
matched elements.
appendTo
Inserts every element in the set of matched elements to the end of the target.
jQuery Selectors, Objects, and Methods | 731

attr
Gets the value of an attribute for the first element in the set of matched elements or
sets one or more attributes for every matched element.
before
Inserts content, specified by the parameter, before each element in the set of matched
elements.
bind
Attaches a handler to an event for the elements.
blur
Binds an event handler to the blur  JavaScript event, or triggers that event on an ele‐
ment.
change
Binds an event handler to the change  JavaScript event, or triggers that event on an
element.
children
Gets the children of each element in the set of matched elements, optionally filtered
by a selector.
clearQueue
Removes from the queue all items that have not yet been run.
click
Binds an event handler to the click  JavaScript event, or triggers that event on an ele‐
ment.
clone
Creates a deep copy of the set of matched elements.
closest
For each element in the set, gets the first element that matches the selector by testing
the element itself and traversing up through its ancestors in the DOM tree.
contents
Gets the children of each element in the set of matched elements, including text and
comment nodes.
css
Gets the value of a style property for the first element in the set of matched elements
or sets one or more CSS properties for every matched element.
data
Stores arbitrary data associated with the matched elements or returns the value at the
named data store for the first element in the set of matched elements.
732 | Appendix E: jQuery Selectors, Objects, and Methods

dblclick
Binds an event handler to the dblclick  JavaScript event, or triggers that event on an
element.
callbacks.add
Adds a callback or a collection of callbacks to a callback list.
callbacks.disable
Disables a callback list from doing anything more.
callbacks.disabled
Determines if the callback list has been disabled.
callbacks.empty
Removes all of the callbacks from a list.
callbacks.fire
Calls all of the callbacks with the given arguments.
callbacks.fired
Determines if the callbacks have already been called at least once.
callbacks.fireWith
Calls all callbacks in a list with the given context and arguments.
callbacks.has
Determines whether a supplied callback is in a list.
callbacks.lock
Locks a callback list in its current state.
callbacks.locked
Determines if the callback list has been locked.
callbacks.remove
Removes a callback or a collection of callbacks from a callback list.
deferred.always
Adds handlers to be called when the Deferred  object is either resolved or rejected.
deferred.done
Adds handlers to be called when the Deferred  object is resolved.
deferred.fail
Adds handlers to be called when the Deferred  object is rejected.
deferred.notify
Calls progressCallbacks  on a Deferred  object with the given arguments.
jQuery Selectors, Objects, and Methods | 733

deferred.notifyWith
Calls the progressCallbacks  on a Deferred  object with the given context and argu‐
ments.
deferred.progress
Adds handlers to be called when the Deferred  object generates progress notifica‐
tions.
deferred.promise
Returns a Deferred ’s Promise  object.
deferred.reject
Rejects a Deferred  object and calls any failCallbacks  with the given arguments.
deferred.rejectWith
Rejects a Deferred  object and calls any failCallbacks  with the given context and
arguments.
deferred.resolve
Resolves a Deferred  object and calls any doneCallbacks  with the given arguments.
deferred.resolveWith
Resolves a Deferred  object and calls any doneCallbacks  with the given context and
arguments.
deferred.state
Determines the current state of a Deferred  object.
deferred.then
Adds handlers to be called when the Deferred  object is resolved, rejected, or still in
progress.
delay
Sets a timer to delay execution of subsequent items in the queue.
delegate
Attaches a handler to one or more events for all elements that match the selector, now
or in the future, based on a specific set of root elements.
dequeue
Executes the next function on the queue for the matched elements.
detach
Removes the set of matched elements from the DOM.
each
Iterates over a jQuery object, executing a function for each matched element.
734 | Appendix E: jQuery Selectors, Objects, and Methods

empty
Removes all child nodes of the set of matched elements from the DOM.
end
Ends the most recent filtering operation in the current chain and returns the set of
matched elements to its previous state.
eq
Reduces the set of matched elements to the one at the specified index.
event.isDefaultPrevented
Returns whether preventDefault  was ever called on this event object.
event.isImmediatePropagationStopped
Returns whether stopImmediatePropagation  was ever called on this event object.
event.isPropagationStopped
Returns whether stopPropagation  was ever called on this event object.
event.preventDefault
If this method is called, the default action of the event will not be triggered.
event.stopImmediatePropagation
Keeps the rest of the handlers from being executed and prevents the event from bub‐
bling up the DOM tree.
event.stopPropagation
Prevents the event from bubbling up the DOM tree, preventing any parent handlers
from being notified of the event.
fadeIn
Displays the matched elements by fading them to opaque.
fadeOut
Hides the matched elements by fading them to transparent.
fadeTo
Adjusts the opacity of the matched elements.
fadeToggle
Displays or hides the matched elements by animating their opacity.
filter
Reduces the set of matched elements to those that match the selector or pass the
function’s test.
find
Gets the descendants of each element in the current set of matched elements, filtered
by a selector, jQuery object, or element.
jQuery Selectors, Objects, and Methods | 735

finish
Stops the currently running animation, removes all queued animations, and com‐
pletes all animations for the matched elements.
first
Reduces the set of matched elements to the first in the set.
focus
Binds an event handler to the focus  JavaScript event, or triggers that event on an ele‐
ment. Selects element if it is currently focused.
focusin
Binds an event handler to the focusin  event.
get
Retrieves the DOM elements matched by the jQuery object.
has
Reduces the set of matched elements to those that have a descendant that matches the
selector or DOM element.
hasClass
Determines whether any matched elements are assigned the given class.
height
Gets the current computed height for the first element in the set of matched elements
or sets the height of every matched element.
hide
Hides the matched elements.
hover
Binds one or two handlers to the matched elements, to be executed when the mouse
pointer enters and leaves the elements.
html
Gets the HTML contents of the first element in the set of matched elements or sets
the HTML contents of every matched element.
index
Searches for a given element from among the matched elements.
innerHeight
Gets the current computed height for the first element in the set of matched ele‐
ments, including padding but not border.
736 | Appendix E: jQuery Selectors, Objects, and Methods

innerWidth
Gets the current computed inner width (including padding but not border) for the
first element in the set of matched elements or sets the inner width of every matched
element.
insertAfter
Inserts every element in the set of matched elements after the target.
insertBefore
Inserts every element in the set of matched elements before the target.
is
Checks the current matched set of elements against a selector, element, or jQuery
object and returns true  if at least one of these elements matches the given arguments.
jQuery
Returns a collection of matched elements either found in the DOM based on passed
argument(s) or created by passing an HTML string.
jQuery.ajax
Performs an asynchronous HTTP (Ajax) request.
jQuery.ajaxPrefilter
Handles custom Ajax options or modifies existing options before each request is sent
and before they are processed by ajax .
jQuery.ajaxSetup
Sets default values for future Ajax requests. Its use is not recommended.
jQuery.ajaxTransport
Creates an object that handles the actual transmission of Ajax data.
jQuery.Callbacks
A multipurpose callback list object that provides a powerful way to manage callback
lists.
jQuery.contains
Checks to see if a DOM element is a descendant of another DOM element.
jQuery.cssHooks
Hooks directly into jQuery to override how particular CSS properties are retrieved or
set, normalize CSS property naming, or create custom properties.
jQuery.data
Stores arbitrary data associated with the specified element and/or returns the value
that was set.
jQuery Selectors, Objects, and Methods | 737

jQuery.Deferred
A constructor function that returns a chainable utility object with methods to register
multiple callbacks into callback queues, invoke callback queues, and relay the success
or failure state of any synchronous or asynchronous function.
jQuery.dequeue
Executes the next function on the queue for the matched element.
jQuery.each
A generic iterator function, which can be used to seamlessly iterate over both objects
and arrays. Arrays and array-like objects with a length property (such as a function’s
arguments object) are iterated by numeric index, from 0 to length -1. Other objects
are iterated via their named properties.
jQuery.error
Takes a string and throws an exception containing it.
jQuery.extend
Merges the contents of two or more objects together into the first object.
jQuery.fn.extend
Merges the contents of an object onto the jQuery prototype to provide new jQuery
instance methods.
jQuery.get
Loads data from the server using an HTTP Get request.
jQuery.getJSON
Loads JSON-encoded data from the server using a Get HTTP request.
jQuery.getScript
Loads a JavaScript file from the server using a Get HTTP request, and then executes
it.
jQuery.globalEval
Executes some JavaScript code globally.
jQuery.grep
Finds the elements of an array that satisfy a filter function. The original array is not
affected.
jQuery.hasData
Determines whether an element has jQuery data associated with it.
jQuery.holdReady
Holds or releases the execution of jQuery’s ready  event.
738 | Appendix E: jQuery Selectors, Objects, and Methods

jQuery.inArray
Searches for a specified value within an array and returns its index (or -1 if not
found).
jQuery.isArray
Determines whether the argument is an array.
jQuery.isEmptyObject
Checks to see if an object is empty (contains no enumerable properties).
jQuery.isFunction
Determines if the argument passed is a JavaScript function object.
jQuery.isNumeric
Determines whether its argument is a number.
jQuery.isPlainObject
Checks to see if an object is a plain object (created using {} or new Object ).
jQuery.isWindow
Determines whether the argument is a window.
jQuery.isXMLDoc
Checks to see if a DOM node is within an XML document (or is an XML document).
jQuery.makeArray
Converts an array-like object into a true JavaScript array.
jQuery.map
Translates all items in an array or object to a new array of items.
jQuery.merge
Merges the contents of two arrays together into the first array.
jQuery.noConflict
Relinquishes jQuery’s control of the $ variable name.
jQuery.noop
An empty function.
jQuery.now
Returns a number representing the current time.
jQuery.param
Creates a serialized representation of an array or object, suitable for use in a URL
query string or Ajax request.
jQuery.parseHTML
Parses a string into an array of DOM nodes.
jQuery Selectors, Objects, and Methods | 739

jQuery.parseJSON
Takes a well-formed JSON string and returns the resulting JavaScript object.
jQuery.parseXML
Parses a string into an XML document.
jQuery.post
Loads data from the server using an HTTP POST request.
jQuery.queue
Shows or manipulates the queue of functions to be executed on the matched element.
jQuery.removeData
Removes a previously stored piece of data.
jQuery.trim
Removes the whitespace from the beginning and end of a string.
jQuery.type
Determines the internal JavaScript class of an object.
jQuery.unique
Sorts an array of DOM elements, in place, with the duplicates removed. This works
only on arrays of DOM elements, not strings or numbers.
jQuery.when
Provides a way to execute callback functions based on one or more objects, usually
Deferred  objects that represent asynchronous events.
keydown
Binds an event handler to the keydown  JavaScript event, or triggers that event on an
element.
keypress
Binds an event handler to the keypress  JavaScript event, or triggers that event on an
element.
keyup
Binds an event handler to the keyup  JavaScript event, or triggers that event on an ele‐
ment.
last
Reduces the set of matched elements to the final one in the set.
load
Loads data from the server and places the returned HTML into the matched element.
740 | Appendix E: jQuery Selectors, Objects, and Methods

map
Passes each element in the current matched set through a function, producing a new
jQuery object containing the return values.
mousedown
Binds an event handler to the mousedown  JavaScript event, or triggers that event on an
element.
mouseenter
Binds an event handler to be fired when the mouse enters an element, or triggers that
handler on an element.
mouseleave
Binds an event handler to be fired when the mouse leaves an element, or triggers that
handler on an element.
mousemove
Binds an event handler to the mousemove  JavaScript event, or triggers that event on an
element.
mouseout
Binds an event handler to the mouseout  JavaScript event, or triggers that event on an
element.
mouseover
Binds an event handler to the mouseover  JavaScript event, or triggers that event on an
element.
mouseup
Binds an event handler to the mouseup  JavaScript event, or triggers that event on an
element.
next
Gets the immediately following sibling of each element in the set of matched ele‐
ments. If a selector is provided, it retrieves the next sibling only if it matches that
selector.
nextAll
Gets all following siblings of each element in the set of matched elements, optionally
filtered by a selector.
nextUntil
Gets all following siblings of each element up to but not including the element
matched by the selector, DOM node, or jQuery object passed.
off
Removes an event handler.
jQuery Selectors, Objects, and Methods | 741

offset
Gets the current coordinates of the first element, or sets the coordinates of every ele‐
ment, in the set of matched elements, relative to the document.
offsetParent
Gets the closest ancestor element that is positioned.
on
Attaches an event handler function for one or more events to the selected elements.
one
Attaches a handler to an event for the elements. The handler is executed at most once
per element per event type.
outerHeight
Gets the current computed height for the first element in the set of matched ele‐
ments, including padding, border, and optionally margin. Returns a number (without
px) representation of the value or null  if called on an empty set of elements.
outerWidth
Gets the current computed width for the first element in the set of matched elements,
including padding and border.
parent
Gets the parent of each element in the current set of matched elements, optionally
filtered by a selector.
parents
Gets the ancestors of each element in the current set of matched elements, optionally
filtered by a selector.
parentsUntil
Gets the ancestors of each element in the current set of matched elements, up to but
not including the element matched by the selector, DOM node, or jQuery object.
position
Gets the current coordinates of the first element in the set of matched elements, rela‐
tive to the offset parent.
prepend
Inserts content, specified by the parameter, to the beginning of each element in the
set of matched elements.
prependTo
Inserts every element in the set of matched elements to the beginning of the target.
prev
Gets the immediately preceding sibling of each element in the set of matched ele‐
ments, optionally filtered by a selector.
742 | Appendix E: jQuery Selectors, Objects, and Methods

prevAll
Gets all preceding siblings of each element in the set of matched elements, optionally
filtered by a selector.
prevUntil
Gets all preceding siblings of each element up to but not including the element
matched by the selector, DOM node, or jQuery object.
promise
Returns a Promise  object to observe when all actions of a certain type bound to the
collection, queued or not, have finished.
prop
Gets the value of a property for the first element in the set of matched elements or
sets one or more properties for every matched element.
pushStack
Adds a collection of DOM elements onto the jQuery stack.
queue
Shows or manipulates the queue of functions to be executed on the matched ele‐
ments.
ready
Specifies a function to execute when the DOM is fully loaded.
remove
Removes the set of matched elements from the DOM.
removeAttr
Removes an attribute from each element in the set of matched elements.
removeClass
Removes a single class, multiple classes, or all classes from each element in the set of
matched elements.
removeData
Removes a previously stored piece of data.
removeProp
Removes a property for the set of matched elements.
replaceAll
Replaces each target element with the set of matched elements.
replaceWith
Replaces each element in the set of matched elements with the provided new content
and returns the set of elements that was removed.
jQuery Selectors, Objects, and Methods | 743

resize
Binds an event handler to the resize  JavaScript event, or triggers that event on an
element.
scroll
Binds an event handler to the scroll  JavaScript event, or trigger that event on an ele‐
ment.
scrollLeft
Gets the current horizontal position of the scroll bar for the first element in the set of
matched elements or sets the horizontal position of the scroll bar for every matched
element.
scrollTop
Gets the current vertical position of the scroll bar for the first element in the set of
matched elements or sets the vertical position of the scroll bar for every matched ele‐
ment.
select
Binds an event handler to the select  JavaScript event, or triggers that event on an
element.
serialize
Encodes a set of form elements as a string for submission.
serializeArray
Encodes a set of form elements as an array of names and values.
show
Displays the matched elements.
siblings
Gets the siblings of each element in the set of matched elements, optionally filtered
by a selector.
slice
Reduces the set of matched elements to a subset specified by a range of indices.
slideDown
Displays the matched elements with a sliding motion.
slideToggle
Displays or hides the matched elements with a sliding motion.
slideUp
Hides the matched elements with a sliding motion.
stop
Stops the currently running animation on the matched elements.
744 | Appendix E: jQuery Selectors, Objects, and Methods

submit
Binds an event handler to the submit  JavaScript event, or triggers that event on an
element.
text
Gets the combined text contents of each element in the set of matched elements,
including their descendants, or sets the text contents of the matched elements.
toArray
Retrieves all the elements contained in the jQuery set, as an array.
toggle
Displays or hides the matched elements.
toggleClass
Adds or removes one or more classes from each element in the set of matched ele‐
ments, depending on either the class’s presence or the value of the switch argument.
trigger
Executes all handlers and behaviors attached to the matched elements for the given
event type.
triggerHandler
Executes all handlers attached to an element for an event.
unbind
Removes a previously attached event handler from the elements.
undelegate
Removes a handler from the event for all elements that match the current selector,
based upon a specific set of root elements.
unwrap
Removes the parents of the set of matched elements from the DOM, leaving the
matched elements in their place.
val
Gets the current value of the first element in the set of matched elements or sets the
value of every matched element.
width
Gets the current computed width for the first element in the set of matched elements
or sets the width of every matched element.
wrap
Wraps an HTML structure around each element in the set of matched elements.
jQuery Selectors, Objects, and Methods | 745

wrapAll
Wraps an HTML structure around all elements in the set of matched elements.
wrapInner
Wraps an HTML structure around the content of each element in the set of matched
elements.
746 | Appendix E: jQuery Selectors, Objects, and Methods

Index
Symbols
! (Not) logical operator
in JavaScript, 319, 334, 336
in PHP, 47, 68, 73, 89
!= (inequality) operator
in JavaScript, 319, 334
in PHP, 46, 68, 68, 71
!== (not identical) operator
in JavaScript, 319, 334
in PHP, 68, 71
" (quotation marks, double)
enclosing multiple-line commands in PHP,
50
enclosing strings in JavaScript, 316
enclosing strings in PHP, 40, 49
escaping in JavaScript, 320
in PHP heredocs, 51
# (pound sign), prefacing CSS IDs, 415
$ (dollar sign)
$_ in PHP superglobal variable names, 61
end-of-line matching in regular expressions,
383
in JavaScript variables names, 316
preceding variables in PHP, 39, 113
$() function
accessing jQuery, 504
$() function (JavaScript), 327
$= (attribute selector) operator in CSS, 452
$this variable (PHP), 113
$_FILES array (PHP), 156, 157
$_GET and $_POST arrays (PHP), 134, 243
$_POST array (PHP)
security concerns, 277
% (modulus) operatorin JavaScript, 318, 334
in PHP, 45, 68
% (percent sign)
before MySQL keywords, 195
prefacing printf conversion specifiers, 139,
142
%= (modulus and assignment) operator
in JavaScript, 318, 334
in PHP, 45, 68
& (ampersand), prefacing PHP variables, 100
& (And) bitwise operator
in JavaScript, 334
in PHP, 68
&& (And) logical operator
in JavaScript, 319, 334, 336
in PHP, 47, 68
&= (bitwise AND and assignment) operator
in Javascript, 334
in PHP, 68
' (quotation marks, single)
escaping in JavaScript, 320
in JavaScript strings, 316
in PHP heredocs, 51
in PHP strings, 40, 49
( ) (parentheses)
call operator in JavaScript, 334
casting operators in PHP, 69, 91
grouping in regular expressions, 379
in functions, 96
nesting sub-expressions in PHP to force
order of evaluation, 70
operator precedence and, 67
precedence in PHP, 68
* (asterisk)
747

parameter in MySQL commands, 192
regular expression metacharacter, 378
wildcard or universal selector in CSS, 424,
444
* (multiplication) operator
in JavaScript, 318, 334
in PHP, 45, 67, 68
*= (attribute selector) operator in CSS, 453
*= (multiplication and assignment) operator
in JavaScript, 318
in PHP, 68
+ (addition) operator
in JavaScript, 318, 334
in PHP, 45, 67, 68
+ (plus sign)
regular expression metacharacter, 378, 382
unary operator in JavaScript, 334
+ (string concatenation) operator in JavaScript,
320
++ (increment) operator
in JavaScript, 318, 320, 334
in PHP, 45, 48, 68
+= (addition and assignment) operator
in JavaScript, 318, 320, 334
in jQuery, 528
in PHP, 45, 68
, (comma)
comma operator in JavaScript, 334
within for loop parameters in PHP, 88
- (hyphen), indicating a range in regular
expressions, 380
- (minus sign)
unary operator in JavaScript, 334
unary operator in PHP, 68
- (subtraction) operator
in JavaScript, 318, 334
in PHP, 45, 67, 68
-- (decrement) operator
in JavaScript, 318, 320, 334
in PHP, 45, 48, 68
-= (subtraction and assignment) operator
in JavaScript, 318, 320, 334
in jQuery, 528
in PHP, 45, 68
-> (object) operator in PHP, 113, 235
. (concatenation) operator in PHP, 49, 68
. (dot)
in regular expressions, 378
matching with regular expressions, 379member operator in JavaScript, 324, 334
prefacing CSS class statements, 416
.= (concatenation assignment) operator (PHP),
45, 49, 68
/ (division) operator
in JavaScript, 318, 334
in PHP, 45, 67, 68
/ (slash)
/* */ in CSS comments, 417
/* and */ enclosing multiline comments in
JavaScript, 315
/* and */ enclosing multiline comments in
PHP, 38
// indicating single-line comments in PHP,
38
//, denoting JavaScript comments, 312, 315
enclosing regular expressions, 378, 381
/= (division and assignment) operator, 318
in JavaScript, 334
in PHP, 45, 68
3D transformations, 473
tutorial on, 474
: (colon)
in case commands wihin PHP switch state‐
ments, 81
in CSS pseudo-classes and pseudo-elements,
442
replacing first curly brace in PHP switch
statements, 81
:: (double colon) scope resolution operator
(PHP), 114
using with self keyword, 115
; (semicolon)
ending commands in MySQL, 171
ending JavaScript statements, 315
in PHP code
<<<_END ... _END; heredoc construct,
52
PHP syntax, 39
separating CSS statements, 416, 416
separating expressions in JavaScript for
loop, 346
separating for loop parameters in PHP, 87
< (less than) operator
in JavaScript, 319, 334, 336
in PHP, 46, 68, 72
<!-- and --> HTML comment tags, 311
<< (bitwise left shift) operator
in JavaScript, 334
748 | Index

in PHP, 68
<<< (heredoc) operator in PHP, 51
<<= (bitwise left shift and assignment) operator
in JavaScript, 334
in PHP, 68
<= (less than or equal to) operator
in JavaScript, 319, 334, 336
in PHP, 46, 68, 72
<> (not equal) operator (PHP), 68
= (assignment) operator, 318
in JavaScript, 318, 334
not confusing with == operator, 335
in PHP, 45, 68, 70, 70
== (equality) operator
in JavaScript, 319, 334
not confusing with = operator, 335
in PHP, 46, 48, 68, 70
=== (identity) operator
in JavaScript, 319, 334, 335
in PHP, 68, 71
=> operator (PHP), assigning value to array
index, 126
> (greater than) operator
in JavaScript, 319, 334, 336
in PHP, 46, 68, 72
>= (greater than or equal to) operator
in JavaScript, 319, 334, 336
in PHP, 46, 68, 72
>> (bitwise right shift) operator
in JavaScript, 334
in PHP, 68
>>= (bitwise right shift and assignment) opera‐
tor
in JavaScript, 334
in PHP, 68
>>> (zero-fill right shift) bitwise operator in
JavaScript, 334
>>>= (zero-fill right shift and assignment) bit‐
wise operator in JavaScript, 334
? : (ternary) operator
in JavaScript, 334, 344
in PHP, 68
replacing if and else statements in PHP, 82
@ (error control) operator in PHP, 69
[ ] (square brackets)
accessing array elements, 130, 317, 364
enclosing character classes in regular
expressions, 380
in PHP function definitions, 98precedence in JavaScript, 334
\ (backslash)
escaping characters in JavaScript, 320
escaping characters in PHP strings, 50
escaping in regular expressions, 379
escaping quotation marks in JavaScript
strings, 316
escaping regular expression metacharacters,
379
\n (newline) escape character, 50
\\ escape character, 50, 320
^ (bitwise xor) operator
in JavaScript, 334
in PHP, 68
^ (caret)
beginning-of-line matching in regular
expressions, 383
negating character classes in regular expres‐
sions, 380, 382
^= (attribute selector) operator in CSS, 534
beginning-of-string matching in CSS3, 452
^= (bitwise XOR and assignment) operator
in JavaScript, 334
in PHP, 68
_ (underscore), in JavaScript variable names,
316
{ } (curly braces)
enclosing statements in JavaScript func‐
tions, 352
in CSS rules, 416
in do...while loops in PHP, 86
in for loops in PHP, 87
in if statements in PHP, 75
in if...else statements in PHP, 76
in if...elseif...else statement in PHP, 78
in JavaScript if statements, 341
in while loops in PHP, 84
replacing in switch statements in PHP, 81
| (Or) bitwise operator
in JavaScript, 334
in PHP, 68
|= (bitwise OR and assignment) operator
in JavaScript, 334
in PHP, 68
|| (Or) logical operator
in JavaScript, 319, 336
in PHP, 47, 68
~ (bitwise NOT) operator in JavaScript, 334
~= operator, matching attributes, 424
Index | 749

A
AAC (audio) codec, 618
absolute positioning of elements, 440
active pseudo-class (CSS), 443
ActiveX, 395
addClass method (jQuery), 535
addition operator (+)
in JavaScript, 318
in PHP, 45, 68
after method (jQuery), 533, 534
Ajax, xxiii , 5
about, 395
checking for username availability on email
account, 12-14
defined, 9
GET request, 403-406
sending XML requests, 406-410
using frameworks for, 411
using in jQuery, 551
sending a GET request, 552
sending a POST request, 551
using XMLHttpRequest, 396
alert function (JavaScript), 328
alignment (text), 436
Alpha value (transparency), 465
ALTER command (MySQL), 181
adding indexes to a table, 187
FULLTEXT index definition in ALTER
TABLE, 191
removing a column, 185
renaming a column, 185
renaming a table, 183
using with MODIFY keyword, 184
ancestor elements, 541
And (&&) logical operator
in JavaScript, 319, 334, 336
in PHP, 47, 68, 72
And (&) bitwise operator (JavaScript), 334
and (low-precedence) logical operator (PHP),
47, 68, 73
AND logical operator in MySQL WHERE quer‐
ies, 204
andSelf method (jQuery), 545
animate method (jQuery), 526, 529
animation, using interrrupts, 495
animations
creating in jQuery, 526
bouncing ball animation, 526
method chaining, 529stopping animations, 529
using callbacks, 529
anonymous functions, 368
Apache web server, 11
in W AMPs, MAMPs, and LAMPs, 16
APIs, new, in HTML5, 10
.appcache file extension, 641
append method (jQuery), 533
arc method, context object, 567, 591
arcTo method, context object, 594
arguments array (JavaScript functions), 352,
353
arithmetic operators
in JavaScript, 318
in PHP, 45, 68
Array keyword (JavaScript), 362
array keyword (PHP), 126
arrays
in JavaScript, 317, 361-368
associative, 362
multidimensional, 363
numeric arrays, 361
using array methods, 364-368
in PHP, 42, 123-136
assignment using array keyword, 126
associative, 125
foreach ... as loop, 127
multidimensional, 129
numerically indexed, 123
returned from MySQL query, 239
two-dimensional arrays, 43
using array functions, 132-136
JavaScript functions returning, 355
PHP functions returning, 100
AS keyword (MySQL), 203
assignment
array element values in JavaScript, 361
multiline string assignment in PHP, 50
multiple-assignment statement in PHP, 70
setting variable type by, in JavaScript, 321
shorthand assignment of properties in CSS,
444
string variables in JavaScript, 316
assignment operators
in JavaScript, 318, 334
in PHP, 45, 48, 68
associative arrays
in JavaScript, 362
in PHP, 125, 240
750 | Index

multidimensional, 129
walking through, using foreach, 127
associativity (operator), 69, 334
attr method (jQuery), 532
attribute selectors (CSS), 451
matching parts of strings, 452
$= operator, 452
*= operator, 453
^= operator, 452
attribute seletors (CSS), 423, 426
attributes, HTML elements, 423
microdata attributes, 648
modifying using attr method, 532
audio and video (HTML5), 617-629
<audio> element, 619
codecs, 618
codecs supported by <audio> tag, 618
controlling audio playback using JavaScript,
620
controlling video playback from JavaScript,
626
providing Flash fallback audio player for
non-HTML5 browsers, 621
providing Flash fallback video player for
non-HTML5 browsers, 627
video codecs, 623
<video> element, 623
<audio> element (HTML5), 10, 561, 619
attributes supported, 620
codecs suppoted, 618
<cke:object> element that calls up Flash
player, 622
<source> tags nested in, 619
authentication (HTTP), 290-298
autocomplete attribute, 282
autofocus attribute, 282
AUTO_INCREMENT data type (MySQL), 181,
211, 252
B
\b (backspace) escape character, 320
background property (CSS), 443
background-clip property (CSS)
elements using border-box, padding box,
and content-box values, 454
supported values, 454
using, 454
background-color property (CSS), 437
background-origin property (CSS), 456elements using border-box, padding box,
and content-box values, 456
supported values, 454
background-size property (CSS), 456
using auto value, 457
backgrounds, multiple (CSS3), 457-458
backing up MySQL databases, 227
creating a backup file, 229
planning backups, 232
restoring from a backup file, 231
using mysqldump, 227
before method (jQuery), 533, 534
BEGIN statement (MySQL), 224
beginPath method, context object, 567, 584
Berners-Lee, Tim, 1
bezierCurveTo method, context object, 596
BINARY data type (MySQL), 178
Binary Large OBject (see BLOB data types)
binary operators, 67
in JavaScript, 334
bitwise operators
in JavaScript, 334
in PHP, 68
BLOB data types (MySQL), 179
Boolean expressions
in JavaScript, 331
in PHP, 64
Boolean mode, MATCH ... AGAINST con‐
struct, 198
Boolean operators, 336
Boolean values, 63
returned by relational operators in PHP, 70
border-color property (CSS), 459
border-radius property (CSS), 459-462
border-width property (CSS), 447
borders, applying using CSS, 447, 459-462
bounce function (jQuery), 528, 529
stopping the animation, 530
box model (CSS), 445-450
adjusting padding, 448
applying borders, 447
box-sizing property, 453
object contents, 450
setting margins, 445
box-shadow property (CSS), 462
<br> element, 11, 64
break commands
breaking out of loops in JavaScript, 346
breaking out of loops in PHP, 88
Index | 751

in default statement for PHP switch state‐
ments, 81
in JavaSript switch statements, 343
in PHP switch statements, 81
browsers, 1
accessing JavaScript error messages, 313
audio types supported, 619
background property names, 457
border radius properties, 462
box shadows, 463
browser/server request/response dialog with
cookies, 288
canvas element support, 558, 615
creating XMLHttpRequest object, 396
cross-browser Ajax function, 396
CSS rules for, browser-specific prefixes, 439
disabling cookies, 288
DOM (Document Object Model) and, 326
Flash fallback for non-HTML5 browsers,
621
Flash fallback video player for non-HTML5
browsers, 627
Flash support for older browsers, 618
fonts, 469
for development, 29
forEach method and, 365
HTML5 support, 557
incompatibilities and libraries to bridge
them, 499
JavaScript in, 8
JavaScript-style CSS property names, 482
JavaScritp enabled/disabled, 311
local storage, 637
major browsers recommended for installa‐
tion, 15
microdata support, 650
multimedia, supporting directly in, 617
multiple-column layout, 465
older and non-standard, not supporting
scripting, 311
opacity property in CSS3, 467
static HTML altenatives to JavaScript, 310
transformations, support for, 472
user agent string, 304
user styles for, 418
video types supported, 624
window properties in JavaScript, 484
bumpyCaps or bumpyCase, 352
<button> tags, autofocus attribute, 282C
callbacks
defined, 521
using in jQuery animations, 529
camelCase, 352
canvas
canvas (HTML5), 10
about, 558
clip method, 587
combining video with, 600
creating and accessing, 565-578
curves, using to draw paths, 591-597
determining if a point is in a path, 590
drawing lines, 581-584
drawing logo (social networking site), 685
editing at pixel level, 602-605
filling areas, 586
graphical effects, advanced, 606-609
images, manipulating, 597-602
paths, using for drawing, 584-586
transformations, 609-615
using the <canvas> element, 558
using with jQuery for drawing program,
516-518
writing text to, 578-581
canvas object, 516
creating, 566
getContext method, 566
carriage returns
\r character in JavaScript, 320
\r character in PHP, 50
Cascading Style Sheets (see CSS)
case commands
in JavaScript switch statements, 343
in PHP switch statements, 80
case conditions not met, 81
cast types (PHP), 91
casting
explicit casting in JavaScript with type-
changing functions, 348
implicit and explicit casting in PHP, 90
operators in PHP, 69
CDNs (content delivery networks), supporting
jQuery, 502
centimeters (CSS measurement), 431
CGI (Common Gateway Interface), 5
CHANGE keyword (MySQL), 185
CHAR data type (MySQL), 177
752 | Index

character classes in regular expressions, 380,
382
example of, 381
negation of, 380
charAt method (JavaScript), 354
checkboxes, 271
checkdate function (PHP), 146
checkuser.php (social networking site), 665
child selectors (CSS), 421
children method (jQuery), 543
class attribute (HTML), 415
class selectors (CSS), 423, 426
classes, 106
dynamically applying to element using
jQuery, 535
in CSS, 415
accessing from JavaScript, 481
jQuery class selector, 507
number in a selector, 427
pseudo-classes, 442, 451
in JavaScript
declaring, 356
declaring using prototype keyword, 358
in PHP
declaring, 107
static properties and methods, 117
clearInterval function (JavaScript), 495
clearQueue method (jQuery), 529
clearRect method, context object, 569
clearTimeout function (JavaScript), 493
clients, 2
clip area, creating in HTML5 canvas, 587
clip method, 588
cloning objects in PHP, 110
closePath method, context object, 567, 584
COBOL, 7
Codd, E. F., 211
code examples from this book, xxvi, 571
download site, 37
codecs
defined, 618
supported by HTML5 <audio> and <video>
tags, 618
video, 623
color input type, 285
color property (CSS), 437
colors
animating in jQuery, 529
applying using CSS, 437gradients, 438
short color strings, 438
border-color property in CSS3, 459
colors and opacity in CSS3, 465-467
creating a gradient in HTML5 canvas
addColorStop method, 573
createLinearGradient method, 571
createRadialGradient method, 574
columns (database), 165
columns (MySQL)
adding a new column, 184
adding and removing auto incrementing
column id, 181
changing data type, 184
removing a column, 185
renaming, 185
.columns class (CSS), 465
command prompts (MySQL), 171
command-line interface (MySQL)
starting, 166
using, 171
commands (MySQL)
adding data to a table, 182
ALTER command, 181
canceling, 172
common commands, listing of, 172
creating a database, 173
creating a table, 175
creating users, 173
creating, viewing, and deleting a table, 185
ending with semicolon (;), 171
FULLTEXT index definition in, 191
comments
in CSS, 417
in HTML, 311
in JavaScript, 315
in PHP, 38
COMMIT command (MySQL), 225
compact function (PHP), 135
comparison operators
in JavaScript, 319, 336
in PHP, 46, 68, 72
compositing effects created in HTML5 canvas,
607
compositing options (HTML5 canvas), 606
concat method (JavaScript), 364
concatenation
+ (string concatenation) operator in Java‐
Script, 320
Index | 753

+= (string concatenation and assignment)
operator in JavaScript, 320
. (string concatenation) operator in PHP, 49
.= (string concatenation and ssignment)
operator in PHP, 49
CSS properties into a shorthand assignment,
444
conditional operator (see ? : (ternary) operator)
conditionals
in JavaScript, 341-344
else statement, 341
if statement, 341
switch statement, 342
ternary operator (? :), 344
in PHP, 74-83
else statement, 76
elseif statement, 78
if statement, 75
switch statement, 79-82
ternary operator (? :), 82
connections, database
closing MySQL connection from PHP, 240
connecting to MySQL database from PHP,
235
console.log function (JavaScript), 328
constants (PHP), 53
date constants, 146
defining within a class, 115
predefined, 54
TRUE and FALSE, 64
constructors
in JavaScript, 356
in PHP, 111
subclass constructors, 120
constructs, 96
content delivery networks (CDNs), supporting
jQuery, 502
content types
commonly used Internet media content
types, 157
multipart/form-data, 156
context object, 517
creating for HTML5 canvas, 566
continue statements
in JavaScript loops, 347
in PHP loops, 89
control flow (see conditionals; looping)
conversion specifiers (printf), 139, 141
$_COOKIE array, 290cookies, 287-290, 636
accessing in PHP, 290
browser/server request/response dialog with
cookies, 288
destroying in PHP, 290
forcing cookie-only sessions, 306
setting in PHP, 289
copy function (PHP), 150
count function (PHP), 132
COUNT keyword (MySQL), 193, 201
CREATE command (MySQL)
CREATE DATABASE, 173
CREATE INDEX, 188
CREATE TABLE, 175, 248
CREATE TABLE with auto-incrementing id
column, 182
CREATE TABLE with indexes, 188
createImageData method, context object, 605
createLinearGradient method, context object,
571
cross document messaging (HTML5), 645-648
cross-site scripting (XSS), preventing, 259
CSS (Cascading Style Sheets), 413-450
accessing from JavaScript, 479-497
benefits of, 5
box model and layout, 445-450
cascading, 425-431
colors, 437-439
fonts and typography, 432-435
IDs, 415
importing a style sheet, 414-415
in signup.php (social networking site), 662
integration with DOM, 413
measurements, 431
positioning elements, 439-442
profile image (social networking site), 669
pseudo-classes, 442
rules, 416-418
selectors, 420-425
semicolons (;) separating statements, 416
shorthand rules, 444
style types, 418-420
styles.css (social networking site), 682
text styles, 435-437
using in dynamic web content, 9
working with JavaScript, 12
css method (jQuery), 506, 536
CSS3, 451-477
attribute selectors, 451
754 | Index

backgrounds, 453-457
borders, 459-462
box shadows, 462
box-sizing property, 453
colors and opacity, 465-467
element overflow, 463
multiple backgrounds, 457-458
multiple-column layout, 463-465
transformations, 472
transitions, 474-477
web fonts, 469
CSV (comma-separated values) format, 227
mysqldump program, dumping data in, 231
cubic-bezier function (CSS), 475
curly braces (see { } in Symbols section)
curves, working with in HTML5 canvas, 591
arc method, 591
arcTo method, 594
bezierCurveTo method, 596
quadraticCurveTo method, 595
D
\d (digits) in regular expressions, 380
data array (JavaScript), 603
data types
automatic conversion in PHP, 71
casting in PHP, 90
in JavaScript
using type-changing functions, 348
variable typing, 321
in MySQL, 177-186
changing data type of a column, 184
FULLTEXT indexes and, 191
variable typing in PHP, 52
database engines, 175
FULLTEXT indexes and, 191
databases
defined, 165
storing small datbases locally, 563
terminology, 166
databases (MySQL), 7, 165
backing up and restoring, 227-232
creating a database, 173
database.object, 174
designing, 209
querying, 192-202
restoring, 231
date and time functions
in MySQL, 718-724in PHP, 143-147
date and time pickers, 285
date constants (PHP), 146
DATE data type (MySQL), 180
Date function (JavaScript), 8
date function (PHP), 6, 56, 144
DateTime class (PHP), 144
DATETIME data type (MySQL) , 180
debugging
JavaScript errors, 313
using magic constants in PHP, 54
decrement operator (--)
in JavaScript, 318, 334
in PHP, 45, 48, 68
decrementing variables
in JavaScript, 320
in PHP, 48
default statement
for JavaScript switch statements, 343
for PHP switch statements, 81
default styles (CSS), 418
default values for form input, 269
define function (PHP), 53
DELETE command (MySQL), 194
DELETE FROM, 244
deleting data using PHP, 252
denormaliation, 219
DESC keyword (MySQL), 201
descendant selectors (CSS), 420
DESCRIBE command (MySQL), 176, 182, 184
describing a table, 249
destroy_session_and_data function (PHP), 303
destructors (PHP), 112
development servers, 15-33
alternative W AMPs, 26
installing a LAMP on Linux, 28
installing XAMPP on Mac OS X, 27
installing XAMPP on Windows, 16-26
using a program editor, 30
using an IDE, 31
W AMP , MAMP , and LAMP, 16
working remotely, 28
logging in, 28
using FTP, 29
die function (PHP), 235
different_user function (PHP), 303
digits in regular expressions, 380
dimensions, modifying with jQuery
innerWidth and innerHeight methods, 538
Index | 755

outerWidth and outerHeight methods, 538
width and height methods, 536
dir system command (Windows), 160
display property (CSS), 491
DISTINCT keyword (MySQL), 193
DISTINCTROW keyword (MySQL), 193
<div> tags
class attribute, 415
foreground color of text, 437
id attribute, 415
inserting new div element into the DOM,
489
style settings within, 415
versus <span> elements, 429
division operator (/)
in JavaScript, 318
in PHP, 45, 67, 68
DNS (Domain Name Service), 3
do...while loops
in JavaScript, 345
in PHP, 86
DOCTYPE declaration, 413, 566
document object (JavaScript), 324
fetching width and height using jQuery, 536
document root
accessing for XAMPP on Mac OS X, 27
accessing for XAMPP on Windows, 25
accessing on Linux, 28
document.getElementById method, 326, 401
document.write function (JavaScript), 310
document.write method (JavaScript), 324
about, 328
using, 329
where not to use, 515
DOM (Document Object Model), 309, 324-328
adapting to Internet Explorer, 326
adding new elements using JavaScript,
489-490
alternatives to adding/removing elements,
491
CSS integration with, 413
manipulating using jQuey, 530-535
adding and removing elements, 533-535
object hierarchy, 324
removing elements using JavaScript, 490
traversing using jQuery, 539-549
child elements, 543
parent elements, 539-543selecting next and previous elements,
545
sibling elements, 543
using, 327
using with XML documents, 408
drag and drop (HTML5), 643-645
drawImage method, context object, 597
various ways of drawing an image on the
canvas, 599
DROP command (MySQL), 182
DROP TABLE, 185
dropping a table using PHP, 250
DROP keyword (MySQL), 185
drop-down lists, creating with <select> tag, 275
duplicate entry error (MySQLQ), 189
dynamic linking (PHP), 91
dynamic web content, 1-14
Apache web server, 11
benefits of PHP , MySQL, JavaScript, CSS,
and HTML5, 5
HTML5, 10
HTTP and HTML, 2
open source technologies and, 12
request/response procedure, 2
using CSS, 9
using JavaScript, 8
using MySQL, 7
using PHP, 6
E
each function (PHP), 128, 136
$.each method (jQuery), 550
ease function (CSS), 475
ease-in transition function (CSS), 475
ease-in-out transition function (CSS), 475
ease-out transition function (CSS), 475
echo statements in PHP, 48
echo <<<_END ... _END structure, 245, 266
multiline string echo statement, 50
print statements versus, 55
editing at pixel level (HTML5 canvas), 602
editors, 25, 27
using a program editor, 30
Editra, 30
element overflow (CSS3), 463
ellipsis (...), indicating truncated text, 468
else statements
in JavaScript, 341
in PHP, 76
756 | Index

closing if...else or if...elseif...else, 79
elseif statements (PHP), 78
em (CSS measurement), 431
email address, validating on forms, 376
embedded styles (CSS), 415
order of precedence, 426
empty method (jQuery), 533, 535
encapsulation, 106
end function (PHP), 136
_END ... _END tags in heredoc construct in
PHP, 51
endswitch command in PHP switch statement,
81
ENGINE MyISAM (MySQL), 175
eq method (jQuery), 547
equality operator (==)
in JavaScript, 335
in PHP, 46, 48, 68, 70
error handling in JavaScript
debugging errors, 313
using onerror event, 339
using try ... catch construct, 340
error messages
in JavaScript, 313
in PHP, 236
escape characters
in JavaScript, 320
in PHP, 49
preventing from being injected into
MySQL, 277
escapeshellcmd function (PHP), 161
event functions and properties (jQuery),
510-521
alternative mouse methods, 519
considerate programming, 515
keypress event, 513
mousemove event, 515-518
other mouse events, 518
submit event, 520
event handling in jQuery, 508
events in JavaScript, 339
attaching to objects in a script, 487
attaching to other events, 488
cross document messaging, 647
drag and drop events, 643
ex (CSS measurement), 431
exclusive or operator (see xor logical operator)
exec function (PHP), 161
execution operators (PHP), 66EXPLAIN command (MySQL), 226
explicit casting in PHP, 90
explode function (PHP), 133
expressions
in JavaScript, 331
for loops, 346
literals and variables, 332
in PHP, 63-66
Boolean values, TRUE or FALSE, 63
literals and variables, 65
extending JavaScript objects, 360
external style sheets (CSS), 419
order of precedence, 426
extract function (PHP), 134
F
\f (form feed) escape character, 320
fadeIn method (jQuery), 524
fadeOut method (jQuery), 524
fadeTo method (jQuery), 524
fadeToggle method (jQuery), 524
false and true values (JavaScript), 332
FALSE and TRUE values (PHP), 63, 386
fclose fuction (PHP), 148
fgets function (PHP), 148, 149, 152
fields (database), 165
file handles ($fh variable), 148, 151
file handling
file pointers, 151
files
including in PHP, 104
naming, differences among systems, 147
requiring in PHP, 105
$_FILES array (PHP), 156, 157
FileZilla, 29
file_exists function (PHP), 147, 150
file_get_contents function (PHP), 154, 402
fill method, context object, 567
filling areas in HTML5 canvas, 586
applying a gradient fill, 571
fillRect method, context object, 569
fills, using patterns for, 576
fillStyle property (context object), 566, 569, 576
fillText method, context object, 580, 583
filter method (jQuery), 547
final keyword (PHP), 121
finally keyword (JavaScript), 341
find method (jQuery), 543
finish method (jQuery), 530
Index | 757

FireFTP, 29
first method (jQuery), 547
First Normal Form, 212
fixed positioning of elements, 440
Flash, 617
fallback video player for non-HTML5
browsers, 627
providing for non-HTML5 browsers, 621
flat files, 7
float property (CSS), 442
flock function (PHP), 153
focus pseudo-class (CSS), 443
universal selector (*) and, 444
font property (context object), 579
@font-face directive (CSS), 469
font-family property (CSS), 433
setting using jQuery, 506
font-size property (CSS), 416, 434, 482
font-style property (CSS), 433
font-weight property (CSS), 434, 540
fontSize property (JavaScript), 482
fopen function (PHP), 148
mode parameters, 148
for ... in loop (JavaScript), 363
for loops
in JavaScript, 346, 354
breaking out of, 346
iterating through an array, 355
iterating through compositing types, 608
iterating through multidimensional
array, 364
in PHP, 86
breaking out of, 88
comparison to while loops, 87
printing out array contents, 124
foreach ... as loop (PHP), 127, 130, 136, 273
walking through numeric multidimensional
array, 131
forEach method (JavaScript), 365
cross-browser solution, 365
form attribute, <input> element, 284
form handling, 265-285
building forms, 265-267
displaying forms, 245
enhancements in HTML5, 281-285
example program, 279-281
HTML5 features awaiting full implementa‐
tion, 283
HTML5 forms, 562input types, 270-277
retrieving submitted data, 267
sanitizing input, 277
submit event of a form, intercepting, 520
validating form data using PHP, 387-391
validation of form data in PHP, 158
<form> tags
<input> tag outside of, 283
autocomplete attribute, 282
onSubmit attribute, 374
formaction override atribute, 283
format function (CSS), 470
format specifiers
date function in PHP, 145
printf function in PHP, 140
formenctype override attribute, 283
formmethod override attribute, 283
formnovalidate override attriute, 283
formtarget override attribute, 283
fread function (PHP), 148, 149
friends.php (social networking site), 675
fseek function (PHP), 152
FTP , using for file transfer with development
server, 29
FULLTEXT indexes (MySQL), 191
MATCH ... AGAINST construct used
against columns, 197
stopwords, 711
functions
advantages of, 95
in JavaScript, 322, 351-356
defining, 351
prototype property, 359
returning a value, 353
returning an array, 355
in MySQL, 204, 715-724
date functions, 718-723
time functions, 723
in PHP, 55, 96-106
defining, 98
including and requiring files, 103
passing by reference, 100
preventing SQL and XSS injections, 260
returning a value, 98
returning an array, 100
returning global variables, 102
variable scope and, 56-62, 103
version compatibility, 105
functions.php (social networking site), 654
758 | Index

function_exists function (PHP), 105
fuzzy character mapping, 378
fwrite function (PHP), 148
G
GD (Graphics Draw) library, 11
geolocation, 559-561, 631-636
$_GET array (PHP), 244
assigning to PHP global variable, security
issues, 268
security concerns, 277
$.get method (jQuery), 517, 552
GET method (HTTP), 243, 265
Ajax GET request, 403-406
getElementById function (JavaScript), 326, 401,
423
enhancing, 479-481
including enhanced functions, 482
replacement by $() function, 327
getElementsByTagName method (JavaScript),
409
getImageData method, context object, 602
getnext function (JavaScript), 337
getnext function (PHP), 73
global variables, 103
in JavaScript, 322
in PHP, 59
PHP functions returning, 102
globalAlpha property (context object), 609
globalCompositeOperation property (context
object), 606
Gmail, using Ajax to check username availabil‐
ity, 12-14
Google CDN, jQuery from, 502
Google Chrome, 15
Google Fonts, 470
Google Maps, 395, 634
creating interactive map of user's location,
635
GPS (Global Positioning System), 631
gradients
creating and applying using CSS, 438
creating in HTML5 canvas
addColorStop method, 573
linear gradient, 571
radial gradient, 574
GRANT command (MySQL), 174
graphical effects, advanced (HTML5 canvas),
606compositing, 606
greater than operator (>)
in JavaScript, 336
in PHP, 46, 68, 72
greater than or equal to operator (>=)
in JavaScript, 336
in PHP, 46, 68
GROUP BY keyword (MySQL), 201
grouping in regular expressions, 379
H
H.264 (video) codec, 624
<h1> tags, changing style of, 413
hash function (PHP), 294
hashing algorithms, 294
<head> tags
<style> tags within, 413
JavaScript scripts within, 311
header.php (social networking site), 656
height method (jQuery), 536
heredoc operator (<<<) in PHP, 51
hidden fields in forms, 274
hide method (jQuery), 522
possible arguments, 522
history object (JavaScript), 328, 485
hover method (jQuery), 519
hover pseudo-class (CSS), 442, 476
HSL (Hue, Saturation, and Luminance) colors,
465
hsl function (CSS), 465
HSLA (Hue, Saturation, Luminance, and
Alpha) colors, 465, 466
hsla function (CSS3), 466
HTML, 1
<!-- and --> comment tags, 311
adding microdata to, 648
backgrounds, multiple, using CSS3, 457
CSS selectors in use, 425
form handling, 245
importing CSS from within, 414
incorporating PHP in, 35
inline styles for elements, 420
inserting CSS style declarations directly
within, 415
JavaScript and, 310-315
HTML forms (see form handling)
html function (jQuery), 508, 530
inserting elements into the DOM, 533
text method versus, 531
Index | 759

HTML injection, preventing in MySQL, 259
<html> tags, manifest file in, 642
HTML5, 10, 558
(see also canvas)
about, 557
audio and video, 617-629
<audio> and <video> elements, 561
browser support for, 615
cross document messaging, 645-648
DOCTYPE declaration, 413
drag and drop, 643-645
form handling enhancements, 281-285
features awaiting full implementation,
283-285
forms, 562
geolocation, 559-561, 631-636
JavaScript and, 631
local storage, 563, 636-639
microdata, 564, 648, 651
new features in, 10
offline web applications, 641-643
other new tags, 651
self-closing tags, no longer valid, 64
versus XHTML, 162
web applications, 563
web workers, 563, 639-641
working with JavaScript, CSS, PHP , and
MySQL, 12
htmlentities function (PHP), 61, 260, 278
htmlspecialchars function (PHP), 161
HTTP, 1
authentiation, 290-298
defined, 2
request/response procedure, 2
HTTPS, 303
I
id attribute (HTML5), 415
ID selectors (CSS), 422, 426
idata object (JavaScript), 602
IDENTIFIED BY clause (GRANT command in
MySQL), 175
identity operator (===)
in JavaScript, 335
in PHP, 68, 71
IDEs (integrated development environments)
benefits of using, 31
popular IDEs for PHP, 32
IDs (CSS), 415if statements
in JavaScript, 341
else statements and, 342
restricting messages listeners react to,
648
|| operator causing problems, 337
in PHP, 75
break command in, 89
continue statement in, 89
using operators, 48
if...else if... statement (JavaScript), 342
if...else statements (PHP), 76
if...elseif...else statements (PHP), 78
images
adding profile image on social networking
site, 668
applying an image as fill pattern in HTML5
canvas, 576
copying in HTML5 canvas, 567
created in HTML5 canvas, specifying type
for, 569
dragging and dropping, 644
manipulating image data in HTML5 canvas,
602
createImageData method, 605
data array, 603
putImageData method, 605
manipulating in HTML5 canvas, 597-602
adding shadows, 600
copying from a canvas, 600
drawImage method, 597
resizing an image, 598
selecting an image area, 598
implicit casting in PHP, 90
@import directive (CSS), 414
! important declaration in CSS rules, 428
in keyword (JavaScript), 363
inches (CSS measurement), 431
include statement (PHP), 104
include_once statement (PHP), 104
including JavaScript files in HML documents,
312
increment operator (++)
in JavaScript, 318, 334
in PHP, 45, 48, 68
incrementing variables
in JavaScript, 320
in PHP, 48
indentation, text-indent property, 436
760 | Index

index.php (social networking site), 660
indexes
array, 44, 317
associative arrays in PHP, 126
MySQL, 186-192
purposes of, 214
indexOf function (JavaScript), 376
inequality operator (!=)
in JavaScript, 334
in PHP, 46, 68, 71
inheritance, 107
in PHP, 118-121
ini_set function (PHP), 303, 306
inline JavaScript, 486-489
inline styles (CSS), 420
order of precedence, 426
innerHeight method (jQuery), 538
innerHTML property (JavaScript), 329, 401,
491
displaying the time, 494
innerWidth method (jQuery), 538
InnoDB storage engine, 223
input (forms) (see form handling)
<input> tags, 268
autocomplete attribute, 282
autofocus attribute, 282
color type, 285
date and time pickers, 285
form attribute, 283
list attribute, 284
min and max attributes, 284
number and range types, 285
placeholder attribute, 282
required attribute, 282
step attribute, 284
type attribute, 270
value attribute, 269, 392
width and height attributes, 283
INSERT command (MySQL), 7, 182
adding data using PHP, 250
INSERT INTO, 245
shortcut for inserting multiple rows of data,
202
using with AUTO_INCREMENT column,
253
V ALUES keyword, 183
instance of a class, 106, 356
integrated development environments (see
IDEs)interfaces, 106
internal styles (CSS), 419
Internet Explorer, 15, 29
(see also browsers)
Internet media types, 157
interrupts, accessing, 492-497
using interrupts for animation, 495
intervals
canceling, 495
setting, 493
IP addresses, 3
for localhost, 25
using as indicator of location, 632
is method (jQuery), 548
isNAN function (JavaScript), 376
isPointInPath method, context object, 590
isset function (PHP), 243, 267
is_array function (PHP), 132
itemscope, itemtye, itemid, itemref, and item‐
prop attributes, 648
J
JavaScript, 309
accessing CSS properties from, 482-484
accessing interrupts, 492-497
adding new elements to the DOM, 489-490
alternatives to adding and removing ele‐
ments, 491
arrays, 361-368
benefits of, 5
comments, 315
conditionals, 341-344
controlling video playback from, 626
drawing on HTML5 canvas, 558
explicit casting in, 348
expressions, 331
functions, 322, 351-356
getElementById function, enhancing to
handle DOM elements and CSS styles,
479-482
global variables, 322
HTML text and, 310-315
HTML5 features and, 631
implementing Ajax, 395-411
in dynamic client/server request/response
process, 5
inline JavaScript, 486-489
literals, 332
local variables, 323
Index | 761

looping in, 344-348
objects, 356, 361
onerror event, 339
operators, 318-321, 333-338
placing at end of HTML pages, 510
playing HTML5 audio with, 620
removing elements from the DOM, 490
semicolons (;) ending statements, 315
social networking site file (javascript.js), 685
try ... catch construct, 340
using in dynamic web content, 8
using regular expressions in, 386
validating user input, 371-377
variables, 316-318
window object and its properties, 484
with statement, 338
working with CSS, MySQL, PHP , and
HTML5, 12
writing to/reading from canvas, 565
JOIN ... ON construct (MySQL), 203
join method (JavaScript), 365, 550
jq keyword, 505
jQuery, 9
about, 499
advantages of, 500
choosing the right version, 500
compressed or editable, 501
Internet Explorer support, 501
customizing, 503
DOM traversal, 539-549
traversing jQuery selections, 546
downloading, 501
dynamically applying classes, 535
event functions and properties, 510-521
for mobile devices, 520
handling events, 508
including in web pages, 500
linking to, using a CDN, 502
always using latest version, 503
manipulating the DOM, 530-535
methods, 731-746
modifying dimensions, 535-539
objects, 729
plugins, 553
jQuery mobile, 554
UI (User Interface), 553
URL for, 553
selectors, 505-508, 725-729
special effects, 521-530syntax, 503
avoiding conflict with other libraries,
505
UI add-in, 529
using Ajax functionality, 551
using without selectors, 549
$.each method, 550
$.map method, 551
waiting until document is ready, 509
jQuery() function, 504
K
key/value pairs, associative arrays in PHP, 126
keypress method (jQuery), 513
keys (MySQL), 214, 216
L
labels (form), 276
LAMPs (Linux, Apache, MySQL, and PHP), 16
installing XAMPP on Linux, 28
last method (jQuery), 547
less than operator (<)
in JavaScript, 336
in PHP, 46, 68, 72
less than or equal to operator (<=)
in JavaScript, 336
in PHP, 46, 68, 72
letter-spacing property (CSS), 435
LIKE keyword (MySQL), 195, 204
LIMIT keyword (MySQL), 196
line breaks (HTML5 and XHTML), 11
line-height property (CSS), 435
linear gradients, 438, 571
linear transition function (CSS), 475
lines, drawing in HTML5 canvas, 581
lineCap and lineJoin properties, 581
lineWidth property, 581
miterLimit property, 584
lineTo method, context object, 585
link pseudo-class (CSS), 443
<link> tags, using to import CSS, 414
links object (JavaScript), 326
links, modifying using jQuery, 532
Linux
accessing MySQL via command-line inter‐
face, 169
likely location of mysqldump, 228
ls system command, 160
starting MySQL and logging in as user, 174
762 | Index

Linux, Apache, MySQL, and PHP (see LAMPs)
list attribute, <input> element, 284
list function (PHP), using with each function,
128
literals
in JavaScript, 332
in PHP, 65
local storage (HTML5), 563, 636-639
localStorage object, 637
local variables, 103
in JavaScript, 323, 355
in PHP, 57
localhostt in URLs, 25
LOCK TABLES command (MySQL), 228, 230
locks
file locking with flock function (PHP), 153
locking database tables, 254
logical operators
in JavaScript, 319, 336
in PHP, 46, 68, 72
using in MySQL WHERE queries, 204
login.php (social networking site), 665
logins
creating loging file in PHP for MySQL, 234
HTTP authentication login prompt, 291
logging in on social networking site, 662
logout.php (social networking site), 681
longdate function (PHP), 56
variable scope and, 57
looping
in JavaScript, 344-348
breaking out of loops, 346
continue statement, 347
do ... while loops, 345
for loops, 346
while loops, 344
in PHP, 83-90
breaking out of loops, 88
continue statement, 89
do...while loops, 86
for loops, 86
foreach ... as loop, 127
while loops, 84
ls system command, 160
M
MAC (Media Access Control) address, 632
Mac OS X
accessing MySQL via Terminal, 168installing XAMPP on, 27
likely location of mysqldump, 228
ls system command, 160
SSH on, 29
starting MySQL and logging in as user, 174
Mac, Apache, MySQL, and PHP (see MAMPs)
magic constants (PHP), 54
magic quotes (PHP), 256
MAMPs (Mac, Apache, MySQL, and PHP), 16
installing XAMPP on Mac OS X, 27
manifest files, 641
many-to-many relationships, 221
many-to-one relationships, 220
map (interactive) of user's location, 635
$.map method (jQuery), 551
margin property (CSS), 445
margin-bottom property (CSS), 445
margin-left property (CSS), 445
margin-right property (CSS), 445
margin-top property (CSS), 445
margins, setting with CSS, 445
markup, changes in HTML5, 10
MATCH ... AGAINST construct (MySQL), 197
in Boolean mode, 198
matching in regular expressions, 382
matching parts of strings (CSS), 452
MathML (Math Markup Language), 11
matrix function (CSS), 472
md5 hashing algorithm , 294
measurement units (CSS), 431
measureText method, context object, 581
members.php (social networking site), 672-675
adding and dropping friends, 672
listing all members, 672
viewing a user's profile, 672
messages.php (social networking site), 678
messaging, cross document, 645-648
metacharacters in regular expressions, 378
escaping, 379
summary of, 383
method chaining, 355, 519
jQuery methods, 529
methods, 106
in JavaScript, 356, 357
static methods, 360
using prototype keyword for, 358
in jQuery, 731-746
in PHP
calling, 109
Index | 763

final methods, 121
overriding and using parent operator,
119
scope, 115
static methods, 113, 117
writing, 112
microdata, 564, 648-651
Microsoft CDN, jQuery on, 502
millimeters (CSS measurement), 431
min and max attributes, <input> element, 284
miterLimit property (context object), 584
mktime function (PHP), 144
mobile devices, Apple iOS and Google
Android, 15
modifiers (general) for regular expressions, 385
MODIFY keyword (MySQL), 184
modulus and assignment operator (%=)
in JavaScript, 319
in PHP, 45
modulus operator (%)
in JavaScript, 318
in PHP, 45, 68
mouse events
alternative mouse methods, 519
mouse movement and key events, intercept‐
ing, 515-518
mouseenter and mouseleave, 518
mousemove event, 515
mouseout method (jQuery), 519
mouseover method (jQuery), 519
moveTo method, context object, 567, 584
move_uploaded_file function (PHP), 156
Mozilla Firefox, 15
FireFTP add-on, 29
MP3 (audio) codec, 618
MP4 format, 624
multidimensional arrays
in JavaScript, 317, 363
in PHP, 43, 129
multipart/form-data content type, 156
multiple-column layout (CSS3), 463-465
multiple-line commands (PHP), 50
multiplication operator (*)
in JavaScript, 318
in PHP, 45, 67, 68
MySQL
acccessing via command line, 166-172
accessing via phpMyAdmin, 205, 206
backing up and restoring, 227-232basics, 165
commands, 172-177
data types, 177-186
database design, 209
database terms, 166
EXPLAIN command, 226
FULLTEXT stopwords, 711
functions, 204, 715-724
date, 718-723
string, 715-718
time, 723-724
in dynamic client/server request/response
process, 4
in W AMPs, MAMPs, and LAMPs, 16
indexes, 186-192
inserting and deleting data in a database
using PHP, 240-248
joining tables together, 202
normalization, 211-219
PHP authentication using, 296
PHP functions for (social networking site),
654
preventing hacking attempts, 277
querying a database, 192-202
querying a database with PHP, 233-240
relationships in database data, 219-222
setting up tables for social networking site
(setup.php), 658
transactions, 223-226
usernames and passwords, storing, 295
using for dynamic web content, 7
working with PHP , JavaScript, CSS, and
HTML5, 12
mysqldump command, 227-232
mysqli extensions, 233
connecting to MySQL server with, 235
querying a database, 236
using procedurally, 261, 279
mysqli_real_escape_string function, 279
mysql_entities_fix_string function, 260
mysql_insert_id function, 252
N
\n (newline) escape character, 320
names
of JavaScript functions, 352
of PHP functions, 98
of properties and methods in JavaScript, 357
validating in user signup form, 374
764 | Index

naming rules
variables in JavaScript, 316
variables in PHP, 44
NATURAL JOIN keyword (MySQL), 203, 255
new keyword (PHP), 108
next method (jQuery), 545
nextAll method (jQuery), 546
nextUntil method (jQuery), 546
noConflict method (jQuery), 505
non-looping conditionals, 74
normalization
First Normal Form, 212
Second Normal Form, 214
Third Normal Form, 217
when not to use, 219
<noscript> tags, 310
Not (!) logical operator
in JavaScript, 319, 334, 336
in PHP, 68, 73, 89
not identical operator (!==)
in JavaScript, 319, 334
in PHP, 68, 71
NOT logical operator in MysQL WHERE quer‐
ies, 204
not method (jQuery), 547
NULL values
in MySQL fields, 176
in PHP, 65
number and range input types, 285
numbers
conversion to and from stings in JavaScript,
335
conversion to and from strings in PHP, 52
numeric arrays
in JavaScript, 361
assigning element values, 361
assignment using Array keyword, 362
in PHP, 123, 131, 239
walking through, using foreach ... as
loop, 127
numeric data types (MySQL), 179
numeric variables
in JavaScript, 317
in PHP, 41
O
object operator (->) in PHP, 113, 235
object-oriented programming (OOP), 106
objects, 95in JavaScript, 356-361
accessing, 358
attaching events to, 487
creating, 357
declaring a class, 356
prototype keyword, 358-361
in jQuery, 508, 729
in PHP
accessing, 109
cloning, 110
constructors, 111
creating, 108
declaring a class, 107
declaring constants, 115
declaring properties, 114
destructors, 112
inheritance, 118
property and method scope, 115
static methods, 113
static properties and methods, 116
terminology, 106
writing methods, 112
offline web applications (HTML5), 641-643
OGG format, 624
Ogg Vorbis (audio) codec, 618
onclick event, 339
ondragstart, ondragover, and ondrop events,
643
one-to-many relationships, 220
one-to-one relationships, 219
one-way functions, 294
onerror event, 339
online resources, 707
onload event, 509, 577
onreadystatechange property, XMLHttpRe‐
quest, 400
onSubmit attribute, <form> element, 374
opacity property (CSS), 467
open source, benefits of, 12
OpenType fonts, 469
Opera, 15
operating systems
audio types supported, 619
video types supported, 624
operators
in JavaScript, 318-321, 333-338
arithmetic operators, 318
associativity, 334
comparison operators, 319, 336
Index | 765

escaping characters, 320
logical operators, 319, 336
precedence, 334
relational operators, 335-338
string concatenation, 320
types of, 333
in PHP, 45, 66-74
arithmetic operators, 45
assignment operators, 45
associativity, 69
comparison operators, 46
logical operators, 46
precedence, 67
relational operators, 70
types of, 66
or (low precedence) logical operator (PHP), 47,
68, 73
Or (||) logical operator
in JavaScript, 319, 336
in PHP, 47, 68
OR logical operator in MySQL WHERE quer‐
ies, 204
ORDER BY keyword (MySQL), 200
outerHeight method (jQuery), 538
outerWidth method (jQuery), 538
overflow property (CSS), 463, 468
override attributes on form elements, 283
P
packet sniffing, 303
padding, adjusting with CSS, 448
<param> element, FlashVars attribute, 622, 628
parent elements, 539-543
reporting with is method, 548
selecting ancestor elements, 541
parent method (jQuery), 539
using a filter, 540
parent operator (PHP), 119
parents method (jQuery), 541
comparing to parentsUntil method, 542
parentsUntil method (jQuery), 541
comparing to parents method, 542
passing by reference in PHP (deprecated), 100
passwords
checking validity of, 293
salting before encrypting, 294
storing, 294
validating for form input, 376, 391
paths, using in HTML5 canvas, 584-586beginPath and closePath methods, 584
in line drawing, 582
isPointInPath method, 590
moveTo and lineTo methods, 584
rect method, 585
stroke method, 585
patterns, using for fills in HTML5 canvas, 576
PCM (audio) codec, 618
percent (%), CSS measurement, 432
Perl, 5
perspective function (CSS), 473
PHP, 35-62
arrays, 123-136
benefits of, 5
casting, implicit and explicit, 90
code examples for this book, 37
comments, 38
conditionals, 74-83
constants, 53
cookies, using in, 287-290
date and time functions, 143-147
dynamic linking with, 91
echo versus print commands, 55
expressions, 63-66
file handling, 147-160
form handling, 265-285
functions, 55, 95-106
HTTP authentication, 290-298
IDEs for, 31
in dynamic client/server request/response
process, 4
in W AMPs, MAMPs, and LAMPs, 16
incorporting within HTML, 35
inserting and deleting data in MySQL data‐
base, 240-248
looping in, 83-90
making calls to MySQL, 8
multiple-line commands, 50
objects, 106-121
operators, 45, 66-74
practical MySQL techniques, 248-255
printf function, 139-143
querying MySQL database, 233-240
resource sites, 707
sending Ajax GET request, 405
sending Ajax POST request, 402
sessions, 298-306
social networking site example files, 653-686
sprintf function, 143
766 | Index

symbiosis with MySQL, 5
syntax
$ symbol, 39
semicolons (;), 39
system calls, 160
using, 6
using for dynamic web content, 11
using regular expressions in, 386
validating form data, 387-391
variable assignment, 48
variable scope, 56-62
variable typing, 52
variables, 40-45
working with MySQL, JavaScript, CSS, and
HTML5, 12
XHTML or HTML5, 162
<?php and ?> tags, 234
<?php> <?> tags, 36
phpDesigner IDE, 31
phpinfo function, 96
phpMyAdmin, accessing MySQL via, 205-206
phpversion function, 105
php_sapi_name function, 292
picas (CSS measurement), 431
pixels (CSS measurement), 431
placeholder attribute, <input> element, 282
placeholders, using with prepared statements
(MySQL), 257
players for audio and video, 617
points (CSS measurement), 431
pop method (JavaScript), 366
position property (CSS), 439
relative value, 528
positioning elements (CSS), 439, 526
absolute positioning, 440
applying different positioning values, 441
fixed positioning, 440
relative positioning, 440
$_POST array (PHP), 244, 267
assigning to PHP global variable, security
issues, 268
$.post method (jQuery), 551
POST method (HTTP), 156, 243, 266
Ajax POST request, 400
<pre> </pre> tags, 143, 245
<pre> tags, 130
precedence (operator), 67, 334
precision setting (printf), 141
preg_match function (PHP), 386preg_match_all function (PHP), 386
preg_replace function (JavaScript), 386
preparedstatements with placeholders
(MySQL), 257
prepend method (jQuery), 533, 534
prev method (jQuery), 545, 546
prevAll method (jQuery), 546
preventDefault method, event object, 515
prevUntil method (jQuery), 546
primary keys, 189, 210
print function (PHP), 99
as pseudofunction, 96
echo command versus, 55
printf function (PHP), 139-143
conversion specifiers, 139
precision, setting for displayed result, 140
string padding, 142
using sprintf, 143
print_r fuction (PHP), 108, 110
printing out array contents, 124
privacy, preserving with database information,
222
private keyword (PHP), 116
profile.php (social networking site), 667-672
adding "About Me" text, 668
adding an image, 668
displaying current profile, 669
processing the image, 668
program editors, 30
properties
in CSS, 416
accessing from JavaScript, 482-484, 491
altering using jQuery, 506
animating using jQuery, 526-529
applying, 417
font properties, 432
order in shorthand rules, 445
shorthand assignment of, 444
specifying for transitions, 474
in JavaScript, 356, 358
managed by save and restore methods in
canvas, 610
prototype property, 359
static properties, 360
in PHP, 106
accessing an object's properties, 109
declaring, 114
scope, 115
static properties, 117
Index | 767

protected keyword (PHP), 116
prototype keyword (JavaScript), 358, 361
pseudo-classes (CSS), 442, 451
pseudo-elements (CSS), 442, 451
pseudofunctions, 96
public keyword (PHP), 107, 116
Pulse Coded Modulation (PCM) codec, 618
push method (JavaScript), 361, 366
putImageData method, context object, 605
PuTTY, 28
Q
quadraticCurveTo method, context object, 595
querying MySQL databases using PHP,
233-240, 246
building and executing a query, 236
closing a connection, 240
connecting to a database, 235
creating a login file, 234
fetching a result, 237
fetching a row, 239
performing a secondary query, 254
proess of using PHP with MySQL, 233
queues, managing in jQuery, 530
R
\r (carriage return) escape character, 320
\r (carriage return) escape character, 320
radial gradients, 439, 574
radio buttons, 272, 273
range input type, 285
ranges in regular expressions, 380
ready method (jQuery), 509
readyState property, XMLHttpRequest object,
400
real_escape_string method, 256
records (database), 165
records (MySQL), deleting using PHP, 244
rectangles, drawing in HTML5 canvas
addColorStop method for gradients, 573
clearRect method, 569
combining rectangle-drawing commands,
570
createLinearGradient method, 571
createRadialGradient method, 574
fillRect method, 569
rect method, 585
strokeRect method, 570
using patterns for fills, 576register_globals function (PHP), 268
regular expressions, 377-387
breakdown of typical regular expression,
381
character classes, 380
examples of, 385
fuzzy character matching, 378
general modifiers, 385
grouping through parentheses, 379
in JavaScript form validation, 376
informaton resources for, 387
metacharacters, 378, 383
negation in, 380
ranges in, 380
using in JavaScript, 386
using in PHP, 386, 392
relational databases, 7
primary keys, 210
relational operators
in JavaScript, 335-338
in PHP, 70
relationships (database data), 219-222
databases and anonymity, 222
many-to-many, 221
one-to-many, 220
one-to-one, 219
relative positioning of elements, 440, 528
remote server, MySQL on, 170
remove method (jQuery), 533, 535
removeClass method (jQuery), 535
RENAME command (MySQL), 183
rename function (PHP), 150
replace method (JavaScript), 386
request/response process, 2
require statement (PHP), 105, 235
required attribute, <input> element, 282
require_once statement (PHP), 105, 235
reset function (PHP), 136
resources, online, 707
responseText property, XMLHttpRequest
object, 401
responseXML property, XMLHttpRequest, 408
restore method, context object, 610
restoring MySQL databases, 231
return statements
in JavaScript, 355
in JavaScript functions, 352
in PHP functions, 98
reverse method (JavaScript), 367
768 | Index

REVOKE command (MySQL), 175
RGB colors, 437, 465
in CSS3, 466
rgb function (CSS), 437, 466
RGBA colors, 465, 467
rgba function (CSS), 467
ROLLBACK command (MySQL), 225
rotate function (CSS), 472
rotate method, context object, 611, 615
rotate3d function (CSS), 473
rows (database), 165
rows (MySQL), fetching results as, 239
rsort function (PHP), 133
rules (CSS), 416
calculating specificity of, 427
exactly equivalent style rules, 428
using a different number base, 428
multiple assignments, 416
shorthand rules, 444
universal selector (*) and, 424
using comments with, 417
S
Safari, 15
salting, 294
save method, context object, 610
Scalable Vector Graphics (see SVG)
scale function (CSS), 472
scale method, context object, 609, 614
scale3d function (CSS), 473
scope resolution operator (::) in PHP, 114, 115
screen object, 485
<script> tags, 8, 310
including JavaScript scripts, 312
including jQuery within, 501
scripting languages, 312
Second Normal Form, 214
Secure Sokets Layer (SSL), 303
security
PHP superglobals and, 61
preventing hacking attemps on MySQL
input, 255
sessions, 303
web messaging communications, 648
seek options (fseek function in PHP), 152
SELECT command (MySQL), 7, 192
GROUP BY keyword with, 201
joining two tables into single SELECT, 203
using AS keyword, 203LIMIT qualifier with, 196
ORDER BY keyword with, 200
retrieving data using PHP, 251
SELECT COUNT, 193
SELECT DISTINCT, 193
<select> tags, 275
selectors (CSS), 416, 417, 420-425
attribute selectors, 423, 451
child selectors, 421
class selectors, 423
descendant selectors, 420
ID selectors, 422
selecting by group, 425
style sheet selectors, 426
type selectors, 420
universal selector (*), 424
selectors (jQuery), 505-508, 725-729
class selector, 507
combining, 507
element selector, 506
ID selector, 507
self keyword (PHP), 115, 120
self-closing HTML tags, 64
sepia effect, creating for an image in HTML5
canvas, 604
server port other than 80 for XAMPP, 25
$_SERVER variable (PHP), 292
server-side scripting, 5
servers, 2
server half of Ajax process, 402
setting up a development server, 15-33
shared, storing session data, 306
$_SESSION array, 299, 301
session fixation, preventing, 304
sessions, 298-306
ending, 302
retrieving session variables, 300
security, 303
setting timeout for, 303
starting, 299
session_destroy function (PHP), 302
session_regenerate_id function (PHP), 305
session_start function (PHP), 299
setAttribute function (JavaScript), 482
setcookie function (PHP), 289
setInterval function (JavaScript), 493
setLineDash method, context object, 596
setTimeout function (JavaScript), 492
passing a string to, 492
Index | 769

repeating timeouts, 493
setTransform method, context object, 615
setup.php (social networking site), 658
sha1 and sha2 hashing algorithms, 294
shadows, adding to images in HTML5 canvas,
600
SHOW comand (MySQL), 185
SHOW command (MySQL), 170
show method (jQuery), 522
shuffle function (PHP), 133
siblings method (jQuery), 543
selecting and filtering sibling elements, 544
using andSelf method with, 545
signup.php (social networking site), 661
checking username availability, 661
logging in, 662
skew function (CSS), 472
slideDown method (jQuery), 525
slideToggle method (jQuery), 525
slideUp method (jQuery), 525
SMALLINT data type (MySQL), 184
social networking site, 653
checkuser.php, 665
designing, 653
examples on companion website, 654
friends.php, 675
functions.php, 654
header.php, 656
index.php, 660
javascript.js, 685
login.php file, 665
logout.php, 681
members.php, 672-675
messages.php, 678
profile.php, 667-672
setup.php, 658
signup.php, 661
sort function (PHP), 133
sort method (JavaScript), 367
<source> element (HTML5), 619, 623
attributes supported, 625
spacing (text), 435
<span> versus <div> elements, 429
special effects, processing in jQuery, 521-530
animations, 526-530
stopping, 529
arguments, 522
fading in and out, 524
hiding and showing, 522sliding elements up and down, 525
toggle method, 523
sprintf function (PHP), 143
SQL (Structured Query Language), 7, 165
SQL injections, preventing, 260
SSH, for remote access to developent server, 28
SSL (Secure Sockets Layer), 303, 637
START TRANSACTION sttement (MySQL),
224
statements
in JavaScript, 333
in PHP, 66
static methods
in JavaScript, 360
in PHP, 113, 117
static properties
in JavaScript, 360
in PHP, 117
static variables, 103
in PHP, 59
step attribute, <input> element, 284
stop method (jQuery), 529
stopwords, 191, 711-713
storage engines (MySQL), 223
string concatenation operator (.) in PHP, 49, 68
string object (JavaScript), 338
string padding (printf), 142
strings
in JavaScript, 316
concatenation, 320
in PHP
concatenation, 49
conversions to and from numbers , 53
escaping charaters, 49
exploding into an array, 133
functions for, 97
string variables, 40
types of, 49
matching parts of in CSS3, 452
string functions in MySQL, 715-718
stripslashes function (PHP), 278
stroke method, context oject, 585
using with setLineDash, 596
strokeRect method, context object, 570
strokeText method, context object, 578, 581
strrev function (PHP), 97
strtolower function (PHP), 98
strtoupper function (PHP), 97
style sheets (CSS)
770 | Index

creators and order of precedence, 426
external, 419
importing, 414
methods of creation and order of prece‐
dence, 426
styles.css (social networking site), 682
<style> tags, 9
CSS @import directive within, 414
internal styles within, 419
style types (CSS), 418
default styles, 418
external style sheets, 419
inline styles, 420
internal styles, 419
user styles, 418
subclasses, 107
constructors, 120
submit button (forms), 277
submit event (jQuery), 520
substr function (PHP), 53
substr method (JavaScript), 354
subtraction operator (-)
in JavaScript, 318
in PHP, 45, 68
superclass, 107
superglobal variables (PHP), 60
security and, 61
SVG (Scalable Vector Graphics), 11
switch statements
in JavaScript, 342
break command, 343
default action, 343
in PHP, 79
alternative syntax, 81
break command, 81
case command, 80
default action, 81
syntax errors in JavaScript, 340
system calls (PHP), 160
T
\t (tab) escape character, 50, 130, 320
table cells, padding applied to text in, 448
tables (MySQL), 165
adding data to, 182
adding data using PHP, 250
adding indexes, 187
adding indexes when creating, 188
ALTER TABLE command, 181backing up a single table, 230
backing up all tables at once, 230
ceating, viewing, and deleting, 185
creating, 175
creating transaction-ready table, 223
creating using PHP, 248
deleting data using PHP, 252
describing using PHP, 249
dropping a table using PHP, 250
joining, 202
locking for reading, 228
names of, case sensitivity, 173
renaming, 183
restoring a table to a database, 231
retrieving data using PHP, 251
updating data using PHP, 251
tags in PHP, 52
Tcl scripting language, 312
Telnet, using for remote access to developent
server, 28
ternary operator (? :), 67
in JavaScript, 334, 344
in PHP, 68
replacing if and else statements in PHP, 82
test method (JavaScipt), 376, 386
text
flowing in multiple columns (CSS3), 463
writing to HTML5 canvas, 578
fillText method, 580
font property, 579
measureText method, 581
strokeText method, 578
textAlign property, 579
text areas, 270
autofocus attribute, 282
wrap types available in, 271
text boxes, 270
TEXT data types (MySQL), 178
text effects in CSS3, 467-469
text method (jQuery), 531
text-decoration property (CSS), 435, 482
text-indent property (CSS), 436
text-overflow property (CSS), 468
text-shadow property (CSS), 467
text/cache-manifest MIME type, 642
textAlign property (context object), 579
textBaseLine property (context object), 578, 579
textDecoration property (JavaScript), 481
Theora (video) codec, 624
Index | 771

Third Normal Form, 217
third-party cookies, 287
this keyword (JavaScript), 357, 401, 486
$this variable (PHP), 113
TIME data type (MySQL), 180
time function (PHP), 56, 143
time functions (MySQL), 723-724
timeouts
canceling, 493
repeating with setTimeout, 493
setting for sessions, 303
setting with setTimeout, 492
TIMESAMP data type (MySQL), 180
timestamps
creating, 144
fetching, 143
toDataURL method, context object, 567, 581
toggle method (jQuery), 523
toggleClass method (jQuery), 535
toLowerCase method (JavaScript), 354
toUpperCase method (JavaScript), 354
transactions, 223, 226
storage engines, 223
using BEGIN statement, 224
using COMMIT command, 225
using ROLLBACK command, 225
transform method, context object, 613
transform property (CSS), 472
transform-origin property (CSS), 473
transformations
in CSS
text, 436
in CSS3, 472
3D transformations, 473
using HTML5 canvas, 609-615
rotate method, 611
save and restore methods, 610
scale method, 609
setTransform method, 615
transform method, 613
translate method, 612
transition property (CSS), shorthand syntax,
476
transition-delay property (CSS), 475
transition-duration property (CSS), 475
transition-property property (CSS), 474
transition-timing property (CSS), 475
transitions in CSS3, 474-477
translate function (CSS), 472translate method, context object, 612
translate3d function (CSS), 473
transparency, 465
opacity property in CSS3, 467
specifying for HTML5 canvas with global‐
Alpha property, 609
triggers, 219
true and false values (JavaScript), 332
TRUE and FALSE values (PHP), 63, 386
TrueType fonts, 469
try ... catch construct (JavaScript), 340, 397
finally clause, 341
type selectors (CSS), 420
type-changing functions in JavaScript, 348
typeof operator (JavaScript), 321, 323
types (see data types)
typography and fonts, 432-435
U
ucfirst function (PHP), 98
UI plugin (jQuery), 553
unary operators, 66
in JavaScript, 333
undefined variables in JavaScript, 323
universal selector (*) in CSS, 424, 444
Unix
ls system command, 160
timestamps, 56, 143
unlink function (PHP), 151
UNSIGNED qualifier (MySQL), 180
UPDATE ... SET construct (MySQL), 199
calling from PHP, 251
UPDATE keyword (MySQL), 189
url function (CSS), 469
user agent string, 304
user styles (CSS), 418
usernames
checking for availability, social networking
site, 661
checking validity of, 293
storing, 294
validating for form input, 376
regular expression used, 382
users, creating in MySQL, 173
V
val method (jQuery), 521, 531
validation
form data using jQuery, 520
772 | Index

form data using PHP, 387-392
form input with JavaScript, 371-377
value attribute, <input> element, 392
V ALUES keyword (MySQL), 183
var keyword
in JavaScript, 323, 324
in PHP, 116
V ARCHAR data type (MySQL), 177, 185
versus TEXT type, 178
variable substitution, 49
variables
in JavaScript, 316-318
arrays, 317
expressions as variables, 332
incrementing and decrementing, 320
naming rules, 316
numeric variables, 317
scope, 322
string variables, 316
typing, 321
in PHP, 40-45
arrays, 42
assignment, 48
expressions as variables, 65
extracting from arrays, 134
initialization, importance of, 268
naming rules, 44
numeric variables, 41
scope, 56-62, 103
string variables, 40
syntax, 39
typing, 52
passing a reference to its value, 100
VBScript, 312
version compatibility (PHP), 105
<video> element (HTML5), 10, 561, 623
attributes supported, 625
codecs, 623
<source> tags nested in, 623
visibility property (CSS), 491
visited pseudo-class (CSS), 442
Vorbis (audio) codec, 618
VP8 (video) codec, 624
VP9 (video) codec, 624
W
W3C (World Wide Web Consortium), 10
W AMPs (Windows, Apache, MySQL, and
PHP), 16alternatives to XAMPP, 26
installing XAMPP on Windows, 16-26
web applications, 563
offline, 641-643
web browsers (see browsers)
web fonts in CSS3, 469
Google web fonts, 470
web page for this book, xxvii
web servers, 1
Apache, 11
browser/server request/response dialog with
cookies, 288
web workers (HTML5), 563, 639-641
WebKit, 499
WebM audio-video format, 624
WHERE keyword (MySQL), 189
uses of, 195
using in DELETE command, 194
using logical operators in WHERE queries,
204
using with LIKE qualifier, 195
which property, event object, 514
while loops
in JavaScript, 344, 641
in PHP, 84, 128
comparison to for loops, 87
white-space:nowrap property (CSS), 468
whitespace
in PHP code, 39
matching in regular expressions, 380
whitespace characters in PHP, 76
width and height attributes, <input> element,
283
width method (jQuery), 536
window object
common properties, 484
defaultStatus and status properties, 485
fetching width and height in jQuery, 536
innerHeight and innerWidth properties, 485
Windows
accessing MySQL via command prompt,
167
dir system command, 160
installing XAMPP on, 16
PuTTY for remote access to development
server, 28
starting MySQL and logging in as user, 174
XAMPP on, location of mysqldump, 228
Index | 773

Windows, Apache, MySQL, and PHP (see
W AMPs)
with statement (JavaScript), 338
word-spacing property (CSS), 435
word-wrap property (CSS), 469
WordPress blogging platform, 92
World Wide Web Consortium (W3C), 10
X
XAMPP
accessing MySQL via phpMyAdmin,
205-206
configuring from control panel, 21
installing on Linux, 28
installing on Mac OS X, 27
installing on Windows, 16
likely locations for mysqldump in different
installations, 228
testing the installation, 24
accessing the document root, 25
XHTML
HTML5 and, 11versus HTML5, 162
XML
about, 408
reasons for using in Ajax, 410
using jQuery text method with, 531
XMLHttpRequest object, 340, 395, 396-411
GET request, 403
POST requests, 398-400
properties and methods, 397
readyState property, 400
xor (exclusive or) logical operator (PHP), 47,
68, 72
XSS scripting, preventing, 259
Y
YEAR data type (MySQL), 180
Z
ZEROFILL qualifier, numeric data types in
MySQL, 180
774 | Index

About the Author
Robin Nixon  has over 30 years of experience with writing software and developing
websites and apps. He also has an extensive history of writing about computers and
technology, with a portfolio of over 500 published magazine articles and almost 30
books, many of which have been translated into other languages. He is also a prolific
Internet video course instructor
As well as IT, his interests include psychology and motivation (which he also writes
about), artificial intelligence research, many types of music (both playing and listen‐
ing to), playing and creating board games, studying philosophy and culture, and
enjoying good food and drink.
Robin lives on the southeast coast of England (where he writes full time) with his five
children and wife, Julie (a trained nurse and university lecturer). Between them they
also foster three disabled children. Y ou can keep up with Robin’s (sporadic) posts via
his website at robinnixon.com .
Colophon
The animals on the cover of Learning PHP , MySQL, JavaScript, CSS, & HTML5  are
sugar gliders ( Petaurus breviceps ). Sugar gliders are small, gray-furred creatures that
grow to an adult length of 6 to 7.5 inches. Their tails, which are distinguished by a
black tip, are usually as long as their bodies. Membranes extend between their wrists
and ankles and provide an aerodynamic surface that helps them glide between trees.
Sugar gliders are native to Australia and Tasmania. They prefer to live in the hollow
parts of eucalyptus and other types of large trees with several other adult sugar gliders
and their own children.
Though sugar gliders reside in groups and defend their territory together, they don’t
always live in harmony. One male will assert his dominance by marking the group’s
territory with his saliva and then by marking all group members with a distinctive
scent produced from his forehead and chest glands. This ensures that members of the
group will know when an outsider approaches; group members will fight off any
sugar glider not bearing their scent. However, a sugar glider group will welcome and
mark an outsider if one of their adult males dies (the group will typically replace a
deceased adult female with one of their own female offspring).
Sugar gliders make popular pets because of their inquisitive, playful natures, and
because many think they are cute. But there are disadvantages to keeping sugar glid‐
ers as pets: as they are exotic animals, sugar gliders need specialized, complicated
diets consisting of items such as crickets, a variety of fruits and vegetables, and meal‐
worms; healthy housing requires a cage or space no less than the size of an aviary;

their distinctive scents can be bothersome to humans; as they are nocturnal creatures,
they will bark, hiss, run, and glide all night long; it’s not uncommon for them to lose
control of their bowels while playing or eating; and in some states and countries, it is
illegal to own sugar gliders as household pets.
The cover image is from Dover’s Animals . The cover fonts are URW Typewriter and
Guardian Sans. The text font is Adobe Minion Pro; the heading font is Adobe Myriad
Condensed; and the code font is Dalton Maag’s Ubuntu Mono.

CÔNG TY ĐIỆN TOÁN VÀ TRUY ỀN SỐ LIỆU 
TRUNG TÂM ĐIỆN TOÁN TRUY ỀN SỐ LIỆU KV1 
 
-------------- o0o ------------- 
 
 
 
 
 
GIÁO TRÌNH ĐÀO TẠO  
 
XÂY DỰNG VÀ QU ẢN TRỊ 
 
 WEBSITE, PORTAL  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Hà nội, năm 2003 
 1

MỤC LỤC 
 
Chương I. Giới thiệu về  InterNet, World Wide Web ........................................ 6 
1.1 Lịch sử phát triển.......................................................................................... 6 
1.2 Tổ chức của Internet ...................................................................................... 7 
1.3 Vấn đề quản lý mạng Internet ....................................................................... 9 
1.4 Nguồn gốc Worl d Wide We b...................................................................... 10 
1.5 Worl d Wide We b là gì? .............................................................................. 11 
1.6 Trình duy ệt Web: ........................................................................................ 11 
Chương 2:  Tổng quan v ề một hệ thống Web ................................................... 24 
2.1 Giới thiệu.................................................................................................... 24 
2.2 M ô hình hệ thống Web nói chung ............................................................... 24 
2.3. N guyên tắc hoạt động................................................................................ 25 
Chương 3:  Frontpage 2 002 (Front page XP) ................................................... 27 
3.1 Mở, đóng, tạo mới, ghi một trang hay m ột Web site .................................. 28 
3.2 Định dạng font c hữ, paragraph,... ............................................................... 30 
3.3 Ảnh, âm thanh ............................................................................................. 32 
3.4 Bảng(Table) ................................................................................................ 34 
3.5 Hyperlink, Bookm ark.................................................................................. 36 
3.6 Tạo khung (form )........................................................................................ 38 
Chương 4 Ngôn ng ữ đánh dấu siêu văn bản (HTM L: Hyper Text Markup 
Language) .......................................................................................................... 41 
4.1 Khái ni ệm.................................................................................................... 41 
4.2 Các th ẻ cơ bản:............................................................................................ 41 
4.2.1 Các thẻ định nghĩa đoạn văn bản, kiểu chữ............................................. 41 
4.2.2 Các thẻ định nghĩa bảng, ảnh................................................................... 50 
3.2.3 Tên một đối tượng, hyperlink (t hẻ A)...................................................... 54 
4.2.4 Tạo form ................................................................................................... 58 
4.2.5 Tạo khung (th ẻ Frame) ............................................................................. 63 
Chương 5: CS S (Cascading Style  Sheets) ........................................................ 72 
5.1 Khái quát ..................................................................................................... 72 
5.2 Kỹ thuật CSS (nh ững kỹ thuật thông dụng)................................................ 73 
5. 3 Một số thuộc tính hay dùng trong C SS (cùng thẻ HTML) ........................ 75 
Bài tập............................................................................................................... 77 
Chương 6 Sử dụng phần mềm Photos hop, C oreldraw á p dụng cho việc chỉnh 
sửa, xuất ảnh cho We b.................................................................................... 118 
6.1- Đồ hoạ trên Web ...................................................................................... 118 
6.1.1Giới thiệu đồ hoạ trên web ...................................................................... 118 
6.1.2-Đồ hoạ trên Web khác gì? ..................................................................... 120 
6.2- Xử lý đồ họa trên Web: ........................................................................... 120 
6.2.1- Phần mềm xử lý đồ hoạ  photos hop...................................................... 120 
6.2.1.1- Cơ sở về Phot oshop ........................................................................... 120 
6.2.1.2-Giới thiệu các công c ụ chọn:.............................................................. 126 
6.2.1.3 Công c ụ cắt ảnh:.................................................................................. 132 
6.2.1.4 Nhóm  công cụ chỉnh sửa ảnh:............................................................. 132 
6.2.1.5 Công c ụ tạo chữ:................................................................................. 135 
 2
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

6.2.1.6  Cá c công cụ bút vẽ:............................................................................ 137 
6.2.1.7 - Sử dụng công c ụ Eraser (E) ...................................................... 138 
6.2.1.8 Công c ụ tô m àu cho đối tượng:........................................................... 138 
6.2.1.8  C ông cụ tạo đường dẫn Path:............................................................. 139 
6.2.1.10 - Các công c ụ tạo hình:..................................................................... 140 
6.2.1.11 C ông cụ Zoom  và Hand: ................................................................... 141 
6.2.1.12-  Công c ụ lấy màu............................................................................. 142 
6.2.1.13 N hững điều cơ bản về Layer : ........................................................... 142 
6.2.1.14   Mặt nạ và kênh: ............................................................................... 147 
6.2.1.15 Là m việc với bảng Histor y (chuyển đổi ảnh đến 1 trạng thái bất kỳ)
......................................................................................................................... 148 
6.2.1.16 Căn chỉnh m àu cho ảnh:.................................................................... 149 
6.2.2- Sử  dụng  corel draw áp d ụng cho thiết kế logo cho web ..................... 160 
6.2.2.1-Cơ sở về Corel Draw .......................................................................... 160 
6.2.2.2- Làm  việc với Corel Draw: ................................................................. 160 
6.2.3 - Giới thiệu các phần mềm xử lý đồ hoạ khác ....................................... 186 
6.2.3.1 - Fl ash:................................................................................................. 186 
6.2.3.2- A dobe Im age Ready: ......................................................................... 186 
6 .2.3.4- Xu h ướng về đồ hoạ hiện đại trên Web ............................................ 187 
Chương 7. Các ph ương pháp c ập nhật thông tin lên web ............................... 188 
7.1 FTP d ưới dạng dòng l ệnh.......................................................................... 188 
7.2 FTP d ưới dạng truyền file thông qua các ch ương trình ............................ 189 
7.2.1 Giới thiệu một số chương trình FTP Cli ent........................................... 189 
7.2.2 Tạo kết nối bằng WS _FTP P ro client .................................................... 189 
7.2.3 Truyền file .............................................................................................. 190 
7.2.4 Một vài chức năng của WS_FTP ........................................................... 191 
7.2.4.1 Sửa thông tin Site profile đã có sẵn.................................................... 191 
7.2.4.2. Cá c chức năng xử lý file và folder trên giao di ện chương trình ........ 192 
7.2.4.3. Cá c chức năng trên Menu .................................................................. 193 
194 7.2.4.4 Các thu ật ngữ thông dụng trong khi s ử dụng WS_FTP Pro ...............
Chương 8: Giới thiệu một số ngôn ngữ lập trình We b – Ngôn ng ữ lập trình 
ASP ................................................................................................................. 195 
8.1.Khái niệm về CGI: .................................................................................... 195 
8.1.1.Khái niệm:.............................................................................................. 195 
8.1.2.Cấu trúc: ................................................................................................. 195 
8.1.3.Ví dụ về một CGI viết bằng Perl ........................................................... 195 
8.2.Giới thiệu một số ngôn ngữ lập trình WEB .............................................. 196 
8.2.1. Perl, vi ết tắt của Practical Extraction and Report Language ................ 196 
8.2.2. PH P, viết tắt của PHP Hype rtext Prepr ocessor ..................................... 197 
8.2.3.JSP, viết tắt của Java Server Pages ........................................................ 198 
8.2.4.Javascript: ............................................................................................... 199 
8.2.5.ASP........................................................................................................ 199 
8.3. – N gôn ngữ ASP ...................................................................................... 200 
8.3.1 Kiến thức cơ bản về VBScript ............................................................... 200 
8.3.1.1- Biến và phạm vi biến......................................................................... 201 
8.3.1.2- Cá c kiểu dữ liệu:................................................................................ 202 
 3
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

8.3.1.3- Cá c hàm  trong V BScript :.................................................................. 204 
8.3.1.4- Cá c toán tử và biểu thức.................................................................... 208 
8.3.1.5- Cá c cấu trúc điều khiển...................................................................... 209 
8.3.1.6. Cá c cấu trúc lặp.................................................................................. 210 
8.3.2 - Ngôn ng ữ ASP ..................................................................................... 212 
8.3.3- Mô hình AS P hoạt động như thế nào?.................................................. 213 
8.3.4- Tạo một trang ASP ............................................................................... 214 
8.3.4.1- Thêm  các lệnh Script ......................................................................... 215 
8.3.4.2- Sử dụng các Server- Side VBScript và Javascript ............................. 216 
8.3.4.3- K hai báo biến trong A SP................................................................... 216 
8.3.4.4- P hạm vi hoạt động của biến............................................................... 217 
8.3.4.5- Cá c biến phiên và bi ến ứng dụng...................................................... 218 
8.3.4.6- K hai báo thủ tục, hàm  và cách g ọi..................................................... 218 
8.3.4.7- Liên k ết nhiều tệp trong m ột tệp........................................................ 220 
8.3..5- Sử dụng các đối tượng C ompone nt..................................................... 222 
8.3.5.1- K hái niệm Com pone nts..................................................................... 222 
8.3.5.2- Sử dụng các đối tượng trong C omponent .......................................... 223 
8.3.5.3- Cá c phương thức và thuộc tính của đối tượng................................... 224 
8.3.5.4- Thiết lập phạm vi đối tượng.............................................................. 224 
8.3.6- Làm  việc với tập hợp (Collection) trong ASP ...................................... 225 
8.36.1- Truy xu ất theo tên ............................................................................... 226 
8.3.6.2- Truy xu ất theo chỉ số......................................................................... 226 
8.3.6.3- Truy xu ất đến các phần tử của Collection dùng c ấu trúc lệnh.......... 226 
8.3.6.4- Sử dụng thuộc tính C ount trong C ollection ....................................... 226 
8.3.7- Các đối tượng của ASP ......................................................................... 226 
8.3.7.1- Đối tượng Re quest ............................................................................. 227 
8.3.7.2- Đối tượng Response ........................................................................... 232 
8.3.7.3- Đối tượng Server ............................................................................... 233 
8.3.7.4- Đối tượng Application ....................................................................... 233 
8.3.7.5- Đối tượng Session .............................................................................. 234 
8.3.7.6 - Tệp Global.asa .................................................................................. 234 
8.3.7.8- Truy xu ất dữ liệu trong AS P.............................................................. 238 
8.3.8.1- Tạo một ODBC DSN ......................................................................... 238 
8.3.8.2- Cấu hình File DS N cho MS Access ................................................... 238 
8.3.8.3- Cấu hình File DS N cho S QL Server .................................................. 238 
8.3.8.4- Cấu hình File DS N cho O racle.......................................................... 239 
8.3.8.5- Liên k ết và truy xu ất CSDL b ằng đối tượng Connection .................. 239 
8.3.8.6- Sử dụng đối tượng RecordSet ............................................................ 240 
8.3.8.7- Cá c thao tác d ữ liệu với RecordSet ................................................... 241 
8.3.9- Thao tác v ới tệp và thư mục................................................................. 242 
8.3.9.1- Đối tượng Drive ................................................................................. 243 
8.3.9.2- Đối tượng Folder ............................................................................... 244 
8.3.9.3- Đối tượng File .................................................................................... 244 
Chương 9: Quản trị máy chủ Web Server trên Windows ............................... 253 
9.1. Giới thiệu WEB S erver............................................................................ 253 
9.2. Giới thiệu một số phần mềm Web  Server................................................ 253 
 4
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

9.3. Q uản trị máy  chủ WebServer  trên Windows - P hần mềm IIS Web Server
......................................................................................................................... 255 
9.3.1. Các khái ni ệm cơ bản............................................................................ 255 
9.3.2. Cài đặt Internet Information Services IIS ............................................. 258 
9.3.2.1. C huẩn bị cài đặt.................................................................................. 258 
9.3.2.2. Cài  đặt Internet Info rmation Services ................................................ 258 
9.3.3. Quản trị Internet Information Services (IIS) ......................................... 261 
9.3.3.1. Cấu hình Internet Inform ation Ser vices............................................. 261 
9.3.3.2 Stop/Start/Restart IIS .......................................................................... 275 
9.3.3.3  Cài  đặt các công c ụ hỗ trợ bảo mật.................................................... 276 
Chương 10 Giới thiệu về WebP ortal và ph ương pháp thi ết kế web ............... 282 
10.1 We bportal là gì? ...................................................................................... 282 
10.2 Các lưu ý khi xây d ựng Webportal ......................................................... 282 
10.3  Phương pháp thi ết kế web ...................................................................... 284 
10.3.1 Xác định mục đích, yêu c ầu, đối tượng, nhu cầu điều kiện thiết kế Web
......................................................................................................................... 285 
10.3.2 Kỹ thuật khảo sát, thu th ập thông ti n................................................... 287 
10.3.3 Phâ n tích, lựa chọn các thành ph ần chí nh của Website, th ứ tự ưu tiên 289 
10.3.4 Phương án kỹ thuật, mô hình bảo mật, vận hành website ................... 290 
10.3.5 Cấu trúc logic Web .............................................................................. 294 
10.3.6 Cấu trúc cơ sở dữ liệu Web .................................................................. 296 
10.3.7 Phương án triển khai xâ y dựng Web .................................................... 298 
 5
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chương I. Giới thiệu về  InterNet, World Wide Web 
 
* INTERNET 
1.1 Lịch sử phát triển 
Mạng Internet ngày nay là m ột mạng toàn cầu, ba o gồm hàng chục triệu người 
sử dụng, được hình thành cuối thập kỷ 60 từ một thí nghi ệm của Bộ Quốc 
phòng Mỹ. Tại thời điểm ban đầu đó là mạng ARPAnet c ủa Ban quản lý dự án 
nghiên cứu quốc phòng. ARPAnet là m ột mạng thử nghiệm phục vụ các nghiên 
cứu quốc phòng, m ột trong những mục đích của nó là xâ y dựng một mạng m áy 
tính có kh ả năng chịu đựng các sự cố (ví dụ một số nút mạng bị tấn công và 
phá huỷ nhưng mạng vẫn tiếp tục hoạt động). Mạng cho phé p một máy tính bất 
kỳ trên mạng liên lạc với mọi máy tính khác. 
Khả năng kết nối các hệ thống m áy tính khác  nhau đã hấp dẫn mọi người, mặt 
khác đây cũng là phương pháp th ực tế duy nhất để kết nối các m áy tính của các 
hãng khác nha u. Kết quả là các nhà phát tri ển phần mềm ở Mỹ, Anh và châ u 
Âu bắt đầu phát triển các phần mềm trên bộ giao thức TCP/IP (giao th ức được 
sử dụng trong vi ệc truyền thông trên Internet) cho t ất cả các loại máy. Điều này 
cũng hấp dẫn các trường đại học, các trung t âm nghiê n cứu lớn và các c ơ quan 
chính phủ, những nơi mong m uốn mua máy tính từ các nhà sản xuất, không b ị 
phụ thuộc vào một hãng cố định nào. 
Bên cạnh đó các hệ thống cục bộ LAN bắt đầu phát triển cùng với sự xuất hiện 
các máy để bàn (desktop w orkstations) - 1983. P hần lớn các máy để bàn sử 
dụng Berke ley UNI X, phần mềm cho kết nối TCP/IP đã được coi là m ột phần 
của hệ điều hành nà y. Một điều rõ ràng là các m ạng nà y có thể kết nối với nha u 
dễ dàng. 
Trong quá trình hình t hành mạng Internet, NSFNET ( được sự tài trợ của Hội 
Khoa học quốc gia Mỹ) đóng một vai trò t ương đối quan trọng. Vào cu ối 
những năm 80, NFS t hiết lập 5 tr ung tâm  siêu m áy tính.  Trước đó, những m áy 
tính nha nh nhất thế giới  được sử dụng cho công vi ệc phát triển vũ khí mới và 
một vài hãng l ớn. Với các trung t âm mới này, NF S đã cho phé p mọi người hoạt 
động trong l ĩnh vực khoa h ọc được sử dụng. Ban đầu, NF S định sử dụng 
ARPAnet để nối 5 trung tâm  máy tính nà y, nhưng ý đồ này đã bị thói qua n liêu 
và bộ máy hành chính làm th ất bại. Vì vậy, NF S đã quyết định xâ y dựng mạng 
riêng của mình, vẫn dựa trên thủ tục TCP/IP, đường truyền tốc độ 56 kbps. C ác 
trường đại học được nối thành các m ạng vùng, và các m ạng vùng được nối với 
các trung tâm siêu máy tính.     
Đến cuối năm 1987, khi  l ượng thông tin truy ền tải làm các m áy tính kiểm so át 
đường truyền và bản thân mạng điện thoại nối các trung tâm siêu máy tính b ị 
quá tải, một hợp đồng về nâng cấp mạng NS FNET đã được ký với công ty 
Merit Network Inc, công ty đang cùng với IBM và MCI qu ản lý mạng giá o dục 
ở Michigan. M ạng cũ đã được nâng cấp bằng đường điện thoại nhanh nh ất lúc 
bấy giờ, cho phép nâng t ốc độ lên gấp 20 lần. Các m áy tính kiểm so át mạng 
 6
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

cũng được nâng cấp. Việc nâng cấp mạng vẫn liên tục được tiến hành, đặc biệt 
trong những năm cuối cùn g do số lượng người sử dụng Internet t ăng  nha nh 
chóng. 
Điểm quan trọng của NS FNET là nó c ho phép m ọi người cùng sử dụng. Trước 
NSFNET, chỉ có các nhà khoa h ọc, chuyên gia m áy tính và nhân viên các c ơ 
quan chính ph ủ  được kết nối Internet. NSF ch ỉ tài trợ cho các tr ường đại học 
để nối mạng, do đó mỗi sinh viên đại học đều có khả năng làm vi ệc trên 
Internet.  
Ngày nay mạng Internet đã được  phát tri ển nha nh chóng tr ong giới khoa  học 
và giáo dục của Mỹ, sau đó phát triển rộng toàn cầu,  phục vụ một cách đắc lực 
cho việc trao đổi thông tin tr ước hết trong các l ĩnh vực nghiê n cứu, giáo dục và 
gần đây cho thương mại. 
1.2 Tổ chức của Internet 
Internet là m ột liên mạng, tức là mạng của các mạng con. V ậy đầu tiên là v ấn 
đề kết nối hai mạng con. Để kết nối hai mạng con với nha u, có ha i vấn đề cần 
giải quyết. Về mặt vật lý, hai m ạng con c hỉ có thể kết nối với nhau khi có một 
máy tính c ó thể kết nối với cả hai mạng nà y. Việc kết nối đơn thuần về vậy lý 
chưa thể làm cho hai m ạng con có th ể trao đổi thông tin v ới nhau. V ậy vấn đề 
thứ hai là máy k ết nối được về mặt vật lý với hai mạng con phải hiểu được cả 
hai gia o thức truyền tin được sử dụng trên hai m ạng con này và cá c gói  thông  
tin của hai mạng con sẽ được gửi qua nhau thông qua đó. Máy tính này được 
gọi là Internet gateway hay router. 
RNet 1 Net 2
 
Hình 1. 1: Hai mạng Net 1 và N et 2 kết nối thông qua router R. 
Khi kết nối đã trở nên phức tạp hơn, các m áy gateway c ần phải biết về sơ đồ 
kiến trúc của các mạng kết nối. Ví dụ trong hình sau đây cho th ấy nhiều mạng 
được kết nối bằng 2 router. 
R 1 R 2Net 1 Net 2 Net 3
 
Hình 1. 2: 3 mạng kết nối với nha u thông qua 2 router 
Như vậy, router R 1 phải chuyển tất cả các gói thông t in đến một máy  nằm ở 
o các máy trong mạng Net 2 ho ặc Net 3. V ới kích thước lớn như mạng Internet, vi ệc các routers 
làm sao có th ể quyết định về việc chuyển các gói thông tin ch
các mạng sẽ trở nên phức tạp hơn. 
 7
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Để các routers có th ể thực hiện được công vi ệc chuyển một số lớn các gói  
thông tin thu ộc các mạng khác nhau ng ười ta đề ra quy tắc là: 
Các routers chuy ển các gói thông tin d ựa trên địa chỉ mạng của nơi đến, chứ 
eo số mạng trên Internet ch ứ không ph ải là số 
nh lệch nhau. Giao th ức TCP/IP của Internet ho ạt 
 chính là điểm giúp 
cho TC P/IP tỏ ra rất mạnh. 
Như vậy, người dùng trong Internet hình dung Internet là m ột mạng thống nhất 
và bất kỳ hai m áy nào trên Interne t đều được nối với nhau thông qua m ột mạng 
duy nhất. Hình vẽ sau mô tả kiến trúc tổng thể của Internet. không phải dựa trên địa chỉ của máy nhận. 
Như vậy, dựa trên địa chỉ mạng nên tổng số thông tin m à router ph ải lưu giữ về 
sơ đồ kiến trúc mạng sẽ tuân th
máy trên Internet. 
Trên Internet, t ất cả các mạng đều có quyền bình đẳng cho dù chúng có t ổ chức 
hay số lượng m áy là rất chê
động tuâ n theo qua n điểm sau : 
Tất các các m ạng con trong Inter net như là Ethernet, m ột mạng diện rộng như 
NSFNET back bone hay m ột liên kết điểm-điểm giữa hai m áy duy nh ất đều 
được coi như là một mạng. 
Điều này xuất phát từ quan điểm đầu tiên khi thi ết kế giao thức TCP/IP là để có 
thể liên kết giữa các mạng có kiến trúc hoàn toàn khác nhau, khái ni ệm "mạng" 
đối với TCP/IP b ị ẩn đi phần kiến trúc vật lý của mạng. Đây
Internet
host
(a) 
 8
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

routerInternet
Physical
   net
host
(b)
 
Hình 1.3: Mạng Internet d ưới con mắt người sử dụng. Các máy được nối với 
nhau thông qua m ột mạng duy nh ất. (b) - K iến trúc tổng quát c ủa mạng 
Internet. Các routers cung c ấp các kết nối giữa các mạng.  
 
 
nh 1.4: Mạng Internet chi ti ết hơn 
1.3 Vấn đề quản lý mạng Internet      Sub net 
Sub net 
 9 
Hì
  
Sub net 
 
Internet 
Firewall 
Switch, hub  
Serv er System ISDN 
VPN 
… 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Thực chất Internet không thu ộc quyền quản lý của bất kỳ ai. Nó không c ó 
giám  đốc, không có ban qu ản trị. Bạn có thể tham gia ho ặc không tham gia và o 
Internet, đó là quyền của mỗi thành viên. M ỗi mạng thành ph ần sẽ có một giám 
đốc hay chủ tịch, một cơ
không c ó một tổ chức nào c quan chính phủ hoặc một hãng điều hành, nh ưng 
hịu trách nhi ệm về toàn bộ Internet. 
ư phương hướng để 
hát triển Internet. IAB h ọp định kỳ để bàn về các vấn đề như các chuẩn, cách 
phân chia tài nguyê n, địa chỉ ... 
- Mọi người trên Internet nh thông qua ủy ban Kỹ 
uật Internet (Internet Engineerin g Task  Force - IETF). IETF c ũng là một tổ 
hức tự nguyện, có mục đích thảo luận về các vấn đề kỹ thuật và sự hoạt động 
i trọng, IETF l ập một nhóm kỹ thuật để 
y tính nối vào I nternet.  - Hiệp hội Internet (Internet So city - ISOC)  là m ột hiệp hội tự nguyện có mục 
đích phát tri ển khả năng trao đổi thông tin d ựa vào công ngh ệ Internet. Hi ệp hội 
bầu ra Internet Architecture Board- IAB ( ủy ban Kiến trúc mạng). ủy ban này 
có trách nhi ệm đưa ra các h ướng dẫn về kỹ thuật cũng nh
p
thể hiện nguyện vọng của mì
th
c
của Internet. N ếu một vấn đề được co
nghiên cứu vấn đề này. 
- Nhóm đặc trách nghiên c ứu phát triển Internet (IRTF). 
- Trung tâ m thông tin m ạng (Network Information Center -NIC) g ồm có  nhiều 
trung tâm  khu vực như APNI C - khu v ực châu á -Thái Bình D ương. NIC ch ịu 
trách nhiệm phân tên và địa chỉ cho các m ạng m á
* WO RLD WIDE  WEB: 
“Bất kỳ một cá nhân nào, đang sử dụng bất kỳ loại máy tính nà o, ở bất kỳ nơi 
nào, đều có thể truy cập được dữ liệu trên Internet chỉ nhờ sử dụng một chương 
trình đơn giản” đó là ý tưởng của Tim  Berners-Lee - M ột nhà  khoa  học tại 
phòng t hí nghiệm vật lý châu âu (CERN) vào năm 1989.  
 
 
Hình 1. 5: Worl d Wide Web  
 
1.4 Nguồn gốc World Wide Web. 
Vào c uối năm 1980,  Tim  Berner  Lee đã viết một chương trình l ưu trữ dữ liệu 
tên là “Enquire” là c ơ sở để sau này phát tri ển chương tr ình cho Web server và 
 10
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Web client đầu tiên. Chương trình này được bắt đầu vào tháng 12 năm 1990  tại 
CERN và được quảng bá vào m ùa hè năm 1991.  "Worl dWideWe b" trình duy ệt 
hằm mở rộng các tính n ăng của bộ trình duy ệt Mosaic. 
3C (World Wi de W eb Consortium ) được hình t hành vào cu ối năm 1994,  với 
 phát triển  HTML ở một cấp độ ưu tiên nhất và phát 
n nay. 
g hơn là một dịch vụ của 
n thấy trên m àn hình m áy 
ợc nhờ thông qua các “siêu liên k ết” (hyperlink). Siêu liên k ết về 
 hypertext  đầu tiên chạy trên máy NeXT - Step. 
Cũng và o thời gian này đã có nhiều công trình chu ẩn hoá các h ệ thống 
Hypertext. Các n ỗ lực này tập trung vào lĩnh vực Internet theo s ự phát triển của 
Hypertext Markup La ngua ge, ha y HTML, được thiết lập bởi Tim Berner Lee. 
Phiên bản đầu tiên này bây gi ờ gọi là HTM L 1.0 
Năm 1993,  một sinh viên tr ẻ tên là Marc Andressen, tr ường đại học Illinois t ại 
Urba na- C hampaign đã tạo ra một giao diện đồ họa đầu tiên dành c ho W eb 
được gọi là Mosaic. Ban đầu nó đã được phát triển trên nền X W indows, m ột 
môi trường dựa vào Unix. (Lúc đó Uni x là hệ điều hành phổ biến nhất cho các 
hệ thống m áy tính nối kết với Internet). 
Sau đó, Những người lập trình M osaic bắt đầu nghĩ ra các ph ần mở rộng tuỳ 
biến dành cho HTML n
W
hướng dẫn  cấu trúc và s ự
triển ngôn ng ữ này cho đế
 
1.5 World Wide Web là gì? 
Theo W3C: Worl d Wide We b là mạng lưới nguồn thông tin cho phép ta khai  
thác thông qua m ột số công cụ, chương trình ho ạt động dưới các giao th ức 
mạng. 
Worl d Wi de Web là công c ụ, phương tiện hay đún
Internet. Hi ểu thế nào là dịch vụ Internet? Đó là những cách th ức được sử dụng 
trên Internet nh ằm giúp cho vi ệc trao đổi thông tin tr ở nên thuận tiện và dễ 
dàng. 
Không gi ống với những dịch vụ khác  của Internet, Web cung c ấp thông tin r ất 
đa dạng, ba o gồm văn bản, hình ảnh, âm  thanh, vi deo, nghĩa là những gì chúng 
ta có thể cảm nhận được. Thông tin được biểu diễn bằng “trang Web” theo 
đúng nghĩa của một trang m à chúng ta có th ể  nhì
tính. Mọi thông tin đều có thể biểu thị trên trang We b đó, kể cả âm thanh, hì nh 
ảnh động. Nhưng vấn đề lý thú nh ất của Web nằm ở khía cạnh khác. Trang 
Web bạn nhìn th ấy trên m àn hình m áy tính có kh ả năng liên k ết với những 
trang Web khác, d ẫn ta đến những nguồn thông ti n khác. Kh ả năng nà y của 
Web c ó đư
bản chất là địa chỉ trỏ tới nguồn thông tin (trang Web) n ằm đâu đó trên 
Internet. B ằng những siêu liên k ết này, các trang We b có thể liên kết với nhau 
thành một mạng chằng chịt, trang này ch ỉ tới trang khác, cho phép ta chu du 
trên biển cả thông tin. 
 
1.6 Trình duy ệt Web: 
 11
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Worl d Wi de Web được bắt đầu tại CERN (Conseil European  pour la Recherche 
Nucleaire, bây gi ờ được gọi là European La borat ory for Particle Physics). M ặc 
dù ý tưởng về Web xuất phát từ nhiều nơi khác nha u, nhưng một đề nghị ban 
đầu đã được viết bằng văn bản và được thông tin tại CERN và o năm 1989. 
CERN c òn chịu trách nhi ệm về việc phát triển bộ trình duy ệt Web đầu tiên, và  
bộ trình duy ệt này đã được xuất bản vào năm 1990. 
nh duyệt với các giao di ện đồ họa mà chúng ta 
r for Supercom puting Applications), đặt cơ sở 
để thành lập M osaic Com munications  
ên của Netscape Navigator, v ới biệt dành 
ệt chạy trên truy ền hình 
ây giờ thậm chí không c ần sử dụng m áy tính đế 
ai bộ trình duy ệt chính được sử dụng ngày nay là Netscape Navi gator và 
Các tính năng 
ày cho phép trình bà y các trang ph ức tạp hơn, bao gồm việc bố trí nhiều cột 
ửa này hỗ trợ các phần mở 
ộng Netscape. Các tính n ăng ba o gồm sự hỗ trợ đối với các khung (frame), 
một tính năng trì nh bày trang trên Netsca pe Navi gator 2.0 cho phép hi ển thị Bộ trình duy ệt đầu tiên nà y đã được soạn thảo trên m ột máy NeXT-Step. 
Không gi ống như các bộ trì
thường nhìn th ấy ngà y nay, nó c hỉ hiển thị văn bản (text). Các b ộ trình duy ệt 
khác cũng sớm được phát tri ển, bao gồm Erwise, Viola, và Lynx. Ngày nay, 
nhiều máy vẫn còn sử dụng các bộ trình duy ệt không thu ộc đồ họa này, đặc biệt 
là Lynx. Lynx được sử dụng chủ yếu trên các h ệ thống Unix và VMS, m ặc dù 
nó có sẵn đối với tất cả các trình ứng dụng lớn. 
Sau đó, NCSA (Nati onal Cente
tại trường đại học của Illinois ở Urbana-C hampaign, bắt đầu quan tâ m đến Web 
và bắt đầu phát triển một bộ trình duy ệt. Bộ trình duy ệt này, Mosaic for X, đã 
được xuất bản rộng rãi trên các n ền X, P C/Windows và Macintosh và o thá ng 9 
năm 1993. 
Một trong nh ững người đã làm việc trên đề án nà y là một sinh vi ên tại NCSA, 
chưa tốt nghiệp, tên Mark A ndreessen. Vào n ăm 1994, Mark A ndreessen và 
năm n gười khác đã rời NCSA 
Corporation, sau đó trở thành Netscape Communi cations Cor poration. 
Netscape đã xuất bản phiê n bản đầu ti
là "Mozilla", vào cu ối năm 1994. 
Trong khi đó, Micr osoft đã phát tri ển Internet Expl orer (lE), là đối thủ cạnh 
tranh c hính của Netscape; S un Mi crosystem s đã phát triển HotJava; và Am erica 
Online  (AOL)  đã phát tri ển bộ trình duy ệt AOL của riêng họ. Gần đây, một 
ông ty có tên là WebTV đã giới thiệu một bộ trình duy c
nhờ sử dụng một hộp set-top. B
truy cập Web! 
H
Microsoft Internet Explorer. 
Tháng 10 năm 1994 N etscape giới thiệu Net scape Navi gator 1.0 m iễn phí đối 
với người sử dụng thông qua lnte rnet. Thá ng 3 năm 1995 Netscape  Navi gator 
1.1 được công bố. Nó bao g ồm sự hỗ trợ đối với các tính n ăng trình bà y cao 
cấp nhờ sử dụng các font đồ họa và các b ảng biểu HTML 3.0. 
n
text và các hình ảnh linh động. 
Tháng 9 năm 1995 Ne tscape giới thiệu Netscape Navigator Gold 2.0, b ộ trình 
duyệt này cho phép ng ười sử dụng tạo, chỉnh sửa và định hướng các tài li ệu 
ực tuyến một cách dễ dàng. Về bản chất, bộ chỉnh s tr
r
 12
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

nhiều ô c ó thể được cuộn một cách độc lập trên một màn hình đơn; các font và 
các bảng biểu HTML 3.0. 
Tháng 1 năm 1996 Netscape công bố các plug-in, đây là các ph ần mềm nhỏ cải 
ến các tính n ăng của bộ trình duy ệt. 
y Modeling Language (VRML). 
háng 8 năm 1996 Netscape công b ố Netscape Na vigat or 3.0 hỗ trợ cả Java và  
 Navigator. 
nội 
ternet 
xplorer 3.0. 
háng 10 năm 1996 N etscape công b ố Netscape C ommunicator, b ộ trình duy ệt 
 1997 Microsoff gi ới thiệu Inte rnet Expl orer 3.0 cu ối cùng dành 
ho Macintosh. Microsoft lnte rnet Explorer 3.0 c ung cấp sự hỗ trợ đầy đủ đối 
bảng biểu, các khung và các khung c ải tiến (không có 
ường biên và di động). Với phiên bản này, lnternet Explorer tr ở thành bộ trình ti
Tháng 4 năm 1996 Ne tscape công b ố Netscape Navigator  3.0. Nó h ỗ trợ các thẻ 
HTML m ới, bao gồm màu  nền trong bảng biểu và các ch ức năng nhúng a udio 
và vide o. Microsoft Internet Ex plorer 2. 0 dành cho Macintosh được xuất bản. 
Nó hỗ trợ plug-in Shockwave, các th ẻ HTML 2.0 và 3. 0, Q uickTim e, và 
Virtual Realit
 
Tháng 5 năm 1996 Mi crosoft i 
*nter net Explorer 3. 0 Beta sẵn sàng. 
 
Tháng 6 năm 1996 Ne tscape công b ố rằng có trên 130 nhà phát tri ển plug-in 
đang tạo các plug-in để làm việc với Nets cape Navigator. Nó c ũng công b ố 
rằng site Internet c ủa nó nhận trên 80 tri ệu lượt truy cập một ngày và đã tích 
lũy trê n 10 tỷ lượt truy cập kể từ khi bắt đầu. Micros oft tiếp tục phát triển IE 
3.0, và sẽ giới thiệu khả năng mở rộng qua các Active X control. 
 
T
JavaScript. M ột số nhà phát tri ển thuộc nhóm th ứ ba lập ra các s ơ đồ để phát 
triển các plug-in nh ằm tận dụng tính năng của Netscape Navigat or 3.0. Đã có 
175 plug-in được công bố cho Netscape
 
Microsoft tung ra lnte rnet Expl orer 3.0. Các  Web site đứng đầu cung cấp 
dung miễn phí mà có th ể chỉ được xem bởi những người sử dụng ln
E
 
T
này hợp nhất phần mềm bộ trình duy ệt Netscape Navi gator 4.0, ph ần mềm tạo 
HTML Netscape Com-poser, th ư điện tử Netscape Messenger, ph ần mềm thảo 
luận nhóm  Netscape Collabra, và ph ần mềm cộng tác thời gian thực Netscape 
Conference. 
 
Netscape công b ố Netscape Navi gator 4.0,  bao gồm sự hỗ trợ đối với sự định vị 
tuyệt đối, tạo lớp và stylesheet, các font H TML mới, và sự hỗ trợ đối với 
Netscape ONE (the open netw ork envir onment). 
Tháng 1 năm
c
với HTML 3.2, các 
đ
duyệt đầu tiên cho phép nh ững người sử dụng Macintosh xem  các trang We b 
được tạo nhờ sử dụng cascading stylesheet chu ẩn của HTML. 
 
 13
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Tháng 4 năm 1997 Mi crosoft công b ố Microsoft Internet Explorer 4.0. S ự hỗ 
trợ stylesheet c ải tiến. Dynamic HTML, và Active Desktop được xem  như là 
ôi khi bạn cấn tìm  hiểu bộ trình duy ệt có những đặc tính nào và ai h ỗ trợ 
chúng. Điều qua n trọng là bạn phải nhận biết các đặc tính nà o được hỗ trợ bởi 
các bộ trình duy ệt nào và chúng được thực thi lần đầu trong các phiên b ản nào. 
Nắm vững điều này, bạn sẽ có thể thực hiện các quy ết định về kiểu thiết kế và 
các đặc tính của các Web site d ựa vào sự phân tích c ác số liệu thống kê server  
đối với những bộ trình duy ệt nào mà người xem của bạn đang sử dụng và bao 
nhiêu người trong số họ không t hể nhìn thẩy các đặc tính m à bạn đã sử dụng. 
Trong mục này, c húng ta sẽ xem xét chi ti ết hơn về các bộ trình duy ệt mà bạn 
có thể gặp. 
 
Netscape Navigator 
 
Netscape Navi gator hiện đang là một trong các b ộ trình duy ệt phổ biến nhất 
trên World Wide Web. Trong khi b ộ trình duy ệt này có s ẵn như là một trình 
ứng dụng riêng biệt, Netscape c ũng đã đưa nó và o một bộ sản phẩm có  tên là 
Netscape Com municator; Com municator bao g ồm không ch ỉ bộ trình duy ệt, mà 
còn các công c ụ khác để cộng tác. Đối với các mục đích thảo luận ở đây, chúng 
ta sẽ chỉ xem  xét bộ trình duy ệt. 
Đa phương tiện truyền thông, s ụ tương tác, và các k ỹ thuật tạo hình động. 
Có nhiều cách để thực thi sự tương tác hay di  chuyển trên một site. Một cách là 
sử dụng Gl F động, mà trong đó một loạt các file GlF t ải trên trang theo trình t ự 
GlF là m ột dạng đồ họa Netscape Navigator c ũng hỗ trợ thẻ EMBED, tuy 
không ph ải là HTML chính th ức, nhưng nó cho phé p nhúng m ột file audio. Th ẻ 
EMBED hoạt độ ơn. File 
ợc nhúng đưmột làn sóng m ới trong sự trình duy ệt. 
 
Tháng 7 năm 1997 Mi crosoft ch ứng thực HTML 4.0 của World Wide Web 
Consortium  và công b ố sự hỗ trợ trong M icrosoft Internet Explorer 4.0. 
 
Các đặc tính chính c ủa các bộ trình duy ệt 
 
Đ
ng đối với các phiên b ản của Naviga tor 2.0 và cao h
ợc điều khiển bởi một plug-i n. đư
 
 14
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 1. 6: Bộ trình duy ệt Netscape Navigat or 7.0 
 
Một cách khác để bổ sung sự tương tác và đa phương tiện truyền thông vào 
Web là sử dụng Java và JavaScript. Java là m ột ngôn ng ữ lập trình theo h ướng 
đối tượng với đầy đủ đặc tính và nó có th ể được sử dụng để chèn các applet vào 
các trang Web ho ặc để viết các trình ứng dụng riêng bi ệt. Java có th ể được 
chèn vào m ột trang HTML b ằng cách s ử dụng thẻ APPL ET, được hỗ trợ bởi 
Netscape 2.0 và cao h ơn, mặc dù nó không xu ất hiện trong đặc tả HTML chính 
thức, cho đến HTML 3.2. Mặt khác, JavaS cript là một ngôn ng ữ tạo script và 
không được sử dụng để phát triển các trình ứng dụng riêng biệt. Nó được thực 
thi nhờ sử dụng thẻ SCRIPT, nh ưng không được thực thi trong Navigator cho 
đến phiê n bản 3.05b. 
Các plug-in, là các m ẩu phần mềm nhỏ được sử dụng để mở rộng các tính n ăng 
của một chương trình ph ần mềm, được thực thi trong các b ộ trình duy ệt Web 
bởi Netscape Communications  dành c ho Na vigator bắt đầu với phiên bản 2.0. 
Các plug-in có th ể được sử dụng để xem  audio, vide o, 3D và nhi ều thứ khác. 
Thậm ch í bạn có thể sử dụng chúng để xem  các m àn hình nền của những người 
sử dụng khác. Nó ch ỉ phụ thuộc vào plug-in nào m à bạn có ( và bao nhiêu RA M 
mà bạn có thể dành riê ng cho nó!). 
ạn có thể bổ sung các form vào Web site c ủa bạn b B ằng các h sử dụng thẻ 
ạn có thể sử dụng các form để trả lời bất kỳ câu hỏi nào m à bạn FORM . B
thích, để lấy thông tin v ề những người sử dụng, và để cung cấp cho họ một cơ 
hội phản hồi. Các form đã được hỗ trợ bởi Navigator kể từ phiên bản 1.1. 
 
 15
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Các table, layout, và style 
Các table là m ột sự tiến bộ lớn khi những người thiết kế Web sau cùng có t hể 
trình bà y thông tin tr ong các hà ng và các c ột bằng cách s ử dụng các table thay 
vì text đã được định dạng sẵn. Netscape Navi gator đã hỗ trợ các table k ể từ 
n hơn, bạn đã nhìn thấy các 
ame (khung). Mỗi fram e này có th ể được cuộn qua m ột cách riêng l ẻ. 
avigator đã hỗ trợ các frame đơn giản kể từ phiê n bản 1.1. N hiều đặc tính thú 
ư các màu frame) không được hỗ trợ cho đến phiên bản 3.05b.  
 tử stylesheet (m ột tài liệu riêng). Điều này có ngh ĩa rằng người thiết kế 
ỉ định m àu đoạn trong stylesheet. Nó cho phép ng ười thiết kế thay 
hi một người thiết kế đồ họa có thể yêu cầu một trang chuyên v ề 
ồ họa. Một ưu điểm khác của các stylesheet là chúng giúp cho vi ệc tạo Web 
 hơn nhiều - chẳng hạn, tất cả các table c ủa bạn 
ó thể tự động có hình d ạng giống nhau. B ạn sẽ tìm hiểu thêm  về các stylesheet 
ác stylesheet cho đến 
 nhiều người chưa nhìn thấy chúng. 
xuống các hình ảnh để bạn có thể xem 
húng. Các hình ảnh nội tuyến đã được hỗ trợ bởi Navigator  kể từ phiên bản 
1.0. Các hình ảnh thường được sử dụng như là các liên k ết. 
Một cách sử dụng của các hình ảnh là ởạng các bản đồ ảnh (imagemap). M ột 
bản đồ ảnh là m , mỗi phần liên  
ết bạn với một nơi khác trên Web. Các b ản đồ ảnh, giống như các hình ảnh, đã phiên bản 1.1, mặc dù một số thuộc tính đối với thẻ TABLE được bổ sung vào  
sau này. Cá c table thật sự là một đặc tính thu ận lợi. 
Nếu bạn đã từng tr uy cập Web và đi qua các Web site có nhi ều "ô" khác nha u, 
hay các m ục riêng lẻ trong cửa sổ bộ trình duy ệt lớ
fr
N
vị (chẳng hạn nh
Tiến bộ mới nhất về style khi truy c ập We b là stylesheet, m ột khái niệm lần 
đầu tiên được thực thi trong m ột bộ trình duy ệt chính b ởi Micros off 
Corporation. ý t ưởng đằng sau c ác stylesheet là ng ười thiết kế Web  có thể chỉ 
định các thành ph ần thiết kế cho toàn b ộ site trong m ột nơi. Chẳng hạn, một 
người thiết kế có thể cho tất cả các đoạn có f ont là m àu xanh dương, và sau đó 
mỗi đoạn sẽ tự động có m àu xanh d ương. Đoạn nhận thông tin m àu xanh 
dương
chỉ cần ch
đổi tất cả các đoạn trên site sang b ất kỳ một màu khác bằng cách thay đổi 
stylesheet thay vì thay đổi mỗi đoạn. Đặc tính này ti ết kiệm cho bạn rất nhiều 
thời gian. 
Có nhiều ưu điểm kh ác đối với các stylesheet, ch ẳng hạn như khả năng gởi các 
stylesheet khác nha u cho những người sử dụng khác nhau. M ột người đang sử 
dụng một bộ trình duy ệt dựa vào lời nói có th ể yêu cầu một tài liệu rất đơn 
giản, trong k
đ
site nhất quán trở nên dễ dàng
c
trong chương 7. Bây gi ờ, bạn chỉ cần lưu ý rằng chúng được hỗ trợ bởi các bộ 
trình duy ệt mới hơn. Netscape đã không h ỗ trợ c
Navi gator 4.0, vì v ậy
 
Hình ảnh 
Khả năng có các hình ảnh đã đem lại cho Web m ột ưu điểm vượt trội so với 
Gopher, ti ền thâ n của nó. Trong khi không ph ải tất cả các bộ trình duy ệt đều có 
thể xem các hình ảnh nội tuyến, nghiã là trên cùng m ột trang với text, tất cả các 
bộ trình duy ệt đều có khả năng tải 
c
 d
ột ảnh có thể nhấp được chia thành nhi ều phần
k
được thực thi trong Netscape k ể từ phiên bản 1.0.  
 
 
 16
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Thư và tin tức 
Nhiều bộ trình duy ệt cho phép ng ười sử dụng đọc và gởi e-m ail hay các bài báo 
Usenet newsgroup. Ph ương pháp t ất cả trong một này là m ột phương phá p phổ 
biến, trong đó nó cho phé p những người thiết kế Web site h ợp nhất các liên k ết 
với các newsgroup archive hay các địa chỉ e-mail nh ất định nằm ngay trong các 
trang We b của chúng. C ả thư và tin tức đều đã được mô tả bởi Navigator k ể từ 
phiên bản 1.0, mặc dù giao di ện này đã thay đổi đôi chút với các phiên bản mới 
ơn. 
ếu bạn dự định có một Web site mà nh ững người sử dụng của 
ạn có thể mua hàng hóa. Hãy xem  chương 22 để biết thêm chi ti ết về Web 
 
icrosoft lnternet Explorer hiện đang ở phiên bản 6.0. Microsoft đã phát triển 
ệ, bao gồm các stylesheet và ActiveX. 
 tương tác, và các k ỹ thuật tạo hình động  
 hỗ trợ các kỹ thuật tạo hoạt hình GlF.  Nó cũng đã hỗ trợ các a pplet Java k ể 
ản 3.0b2. S ự bao hàm của thẻ SCRI PT đối với Java Script đã xuất h
Bảo mật 
Trong khi có nhi ều loại mã hóa trên Internet, b ạn có thể quan tâm  đến việc bảo 
đảm sự bảo mật. Bắt đầu với Navigator 3.0, các ch ứng nhận kỹ thuật số đã 
được hỗ trợ. Các phiên b ản mới hơn của Netscape có m ột biểu tượng chìa khóa  
ở dưới cùng cho phép b ạn xem  một giao tác có an toà n hay không.  Điều này sẽ 
quan trọng hơn n
b
commerce.
 
Microsoft Internet Explorer 
 
M
một số công ngh
Các đặc tính chính : 
Đa phương tiện truyền thông, s ự
IE
từ phiê n b
hiện cùng với phiên bản 3.0. Mic rosoft cũng đã sao chép ý t ưởng plug-in c ủa 
Netscape - hi ện có nhiều plug-in dành cho c ả Navigator và IE. IE đã hỗ trợ các 
form ngay t ừ lúc đầu - phiê n bản 1.0. 
 
 17
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 1. 7: Bộ trình duy ệt Internet Explorer 6.0 
 
Có lẽ biến đổi hấp dẫn nhất trong việc phát triển IE là sự giới thiệu của 
ActiveX. ActiveX đã được sáng tạo bởi Microsoft, điều chỉnh các công ngh ệ 
hiện có O LE 2.0 và  OCX cho phù h ợp với các trìn h ứng dụng lnternet. M ột 
ActiveX control là m ột sự kết hợp giữa một plug-in và m ột applet Java - nó b ổ 
sung tính n ăng hoạt động giống như một plug-in, và nó c hạy một cách độc lập 
với bộ trình duy ệt, giống như một applet. Không gi ống như một applet , 
ActiveX control được tải xuống và được chứa trên  đĩa cứng của người sử dụng. 
ác ActiveX control hiện không được hỗ trợ b C ởi bất kỳ bộ trình duy ệt nào 
ặc dù c ó một plug- in Navigat or cho phé p bạn xem các ActiveX ngoài I E m
contr ol. Sự hỗ trợ đối với ActiveX b ắt đầu với phiê n bản IE 3. 0. 
 
Các table, layout, và style 
Microsoft I nternet Explorer đã hỗ trợ các table k ể từ phiên bản 1.0 và các fram e 
kể từ phiên bản 3.0. Các tùy chọn mà nó hỗ trợ đối với các frame hơi khác với 
 18
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

các tùy ch ọn được hỗ trợ bởi Nets cape Navi gator, và Mi crosoft đã phát m inh ra 
các frame (nh ờ sử dụng thẻ (FRAME). B ạn sẽ tìm hiểu thêm  về các frame  
trong chương 5. 
 
Hình ảnh 
IE đã hỗ trợ các hình ảnh kể từ phiên bản 2.0. Nó không hỗ trợ nhiều tùy c họn 
chẳng hạn như canh giữa, hoặc dàn text xung quanh đối tượng 
IE đã hỗ trợ việc đọc và gởi e-m ail, cùng v ới việc 
ọc và gởi đến các newsgroup. 
iống như Navigator, IE h ỗ trợ các chứng nhận kỹ thuật số để bảo đảm sự an 
àn. Ngoài ra, IE có một công ngh ệ được gọi là Authenticode. Authenticode  
 người tạo phần mềm ký nhận phần mềm của họ bằng kỹ thuật 
 để những người sử dụng có thể biết chắc rằng phần mềm này (bao g ồm cả 
ng IE mà nhiều bố mẹ tìm thấy hấp dẫn là khả năng sử dụng 
ynx đã được phát triển tại trường đại học Kansas để sử dụng trên hệ thống của 
n dựa 
nó cho các 
ình ứng dụng khác. Nó đặc biệt phổ biến ở các trường đại học và trung h ọc, 
g có các Unix s hell account. 
ì nó có thể được 
ấu hình dưới dạng một text reader để đọc các dòng t ừ các trang Web. V ới hệ 
chúng được cấu hình với phần cứng audio thích h ợp được gọi là một 
tin dựa vào text . Bởi vì bộ trình duy ệt này không t ải các hình ảnh vào 
te có thể nhanh chóng được lướt 
ynx là một bộ trình duy ệt text-only, vì v ậy nếu bạn muốn hòa hợp với những 
Lynx, bạn sẽ phải cung cấp các phương thức khác đối với hình 
ynx tải chúng xu ống. 
ynx là một ví dụ hoàn hảo về một điều gì đó mà chúng ta  thường nhìn th ấy 
ới phần mềm - thường có một sự trao đổi giữa các đặc tính (ch ẳng bố trí hì nh ảnh, 
ảnh. IE cũng hỗ trợ các bản đồ ảnh. 
 
Thư và tin tức 
Bắt đầu với phiên bản 2.0, 
đ
 
Bảo mật 
G
to
cho phép nh ững
số
applet Java) đã đến từ nơi giống như họ nghĩ. 
Một đặc tính tro
"parental controls" được cài sẵn vào bộ trình duyệt. Các cài đặt này sẽ không 
cho phép ng ười sử dụng xem  các Web site vốn có các n ội dung không th ể chấp 
nhận được. 
 
 
Lynx 
 
L
riêng họ. Phiên bản hiện hành là 2.6. Lynx l à một bộ trình duy ệt cũ hơ
vào text và  có ưu điểm chạy trên các h ệ thống cũ hơn. Nó được sử dụng phần 
lớn trên các h ệ thống Unix và VMS, m ặc dù bạn có thể sử dụng 
tr
nơi mà các sinh viên th ườn
Lynx cũng phổ biến đối với một số người bị khiếm thị bởi v
c
thống của 
bộ tổng hợp tiếng nói , máy tính đọc lớn cho người sử dụng. Ngoài ra, nhi ều 
người sử dụng Web s ẽ khởi động Lynx khi h ọ vội vã muốn tìm các n ội dung 
thông 
nhiều đối tượng có kích cỡ file lớn, nê n các si
qua để tìm nội dung thích h ợp. 
L
người sử dụng 
ảnh nếu không hãy cho phép nh ững người sử dụng L
L
trong t hế gi
 19
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

hạn như hình ảnh, kiểu định dạng, và các fram e), và các yêu c ầu hệ thống 
(chẳng hạn như các vấn đề nền ứng dụng và  RAM). Tr ong khi Lynx không h ỗ 
trợ nhiều đặc tính mới hơn, bạn cũng không c ần nhiều RAM và m ột máy mới 
ơn để chạy nó: Với giao diện dòng lệnh của Lynx, nó có th ể được đưa vào sử 
ụng nếu bạn đã quen với việc trỏ và nhấp chuột.  
a phương tiện truyền thông, s ự tương tác, và các k ỹ thuật tạo hình động 
 cần nhấp chuột vào trong m ột trường và gõ 
 biết thẻ TABLE và sau đó phân c hia thông tin r a 
ành một loại form  trình bày. Ngh ĩa là, tất cả thông ti n đều nằm ở đó và người 
hưng 
nh bày sau trong sách này. 
ác frame trong Lynx tương tự như các tabl e - trong khi Lynx nh ận biết và xử 
 frame, các kết quả có thể hoàn toàn khác v ới những 
ì mà bạn mong m uốn. Thay vì m ô phỏng các fram e, Lynx cung c ấp các liên 
 trợ các stylesh eet. 
, nó làm  việc với các bản đồ ảnh. 
ynx làm việc tốt hơn với các bản đồ ảnh phía client  bởi vì nó giúp cho b ộ 
àng tìm ra nơi mà các vùng khác nha u của bản đồ dẫn đến. Trên 
một bản đồ phía server, b ộ trình duy ệt nhấp chuột và một cặp 
a độ được gởi đến server. Lynx ch ỉ có khả năng gởi các tọa độ (0,0), và vì 
ng cách này không đem lại hiệu quả tốt.  
ạn không th ể đọc e-mail c ủa bạn từ trong Lynx. Tuy nhiê n, bạn có thể gởi e-
ail từ Lynx nếu có một liên kết đến một địa chỉ e-m ail hay một tác giả đã 
định trong tr ang H TML. Lynx hỗ trợ việc đọc các newsgroup và tr ả 
i các bài báo newsgroup. h
d
 
Đ
Lynx không h ỗ trợ các GlF hì nh động, thẻ EMB ED, Ja va, JavaScr ipt, các pl ug-
in hoặc cấu trúc ActiveX. Lynx không h ỗ trợ các form, m ặc dù những người sử 
dụng Lynx ph ải định hướng qua chúng nh ờ sử dụng các phím m ũi tên hay phím 
TAB trên bàn phím thay vì ch ỉ
nhập nội dung của chúng. Lynx có th ể điều khiển các hộp kiểm, các nút radio, 
các nút thông th ường, các danh sá ch chọn, và các vùng g ởi text. 
 
Các table, layout và s tyle 
Lynx không h ỗ trợ các table, m ặc dù nó không nh ất thiết phải hiển thị chúng 
như ý bạn muốn. Nó nhận
th
sử dụng có thể tìm ra hệ thống phân c ấp và t heo dõi các liên k ết nếu có,  n
bạn sẽ không ph ụ thuộc quá nhi ều vào các hàng và các c ột. Nếu bạn muốn lập 
các table có ý ngh ĩa đối với những người sử dụng Lynx, b ạn có thể cần sử dụng 
thẻ PRE, được trì
C
lý các thẻ kết hợp với các
g
kết text với các fram e khác nha u trên một trang H TML. Sau đó, khi bạn học 
cách tạo các frame, b ạn sẽ tìm hiểu thêm  về thẻ NOFRAMES, nó  được sử dụng 
để cung cấp nội dung thay th ế cho các b ộ trình duy ệt vốn không hoàn toàn h ỗ 
trợ các frame. Lynx không h ỗ
 
Hình ảnh 
Như đã được lưu ý ở trên, bộ trình duy ệt Lynx không h ỗ trợ hình ảnh. Tuy 
nhiên
L
trình duyệt dễ d
một bản đồ phía client, b ộ trình duy ệt có cơ hội xử lý text khác. Hãy ghi nh ớ 
rằng, vì không có hì nh ảnh, nên bản đồ được hiển thị trong Lynx d ưới dạng cá c 
liên kết text. Trên 
tọ
vậy phươ
 
Thư và tin tức 
B
m
được chỉ 
lờ
 20
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Bảo mật 
Lynx hiện không h ỗ trợ bất kỳ đặc tính an toàn b ổ sung nào. 
 
 
NCSA M osaic 
 
Giống như Lynx, NCSA Mosaic là m ột bộ trình duy ệt được phát tri ển tại 
trường đại học. 
NCSA Mos aic là một bộ trình duyệt cũ hơn với các tính n ăng giới hạn, mặc dù 
ó có thể xử lý các th ẻ HTML và các loại file nhiều hơn so với Lynx. M ột 
nhất giữa NCSA Mosaic và Lynx là Lynx hỗ trợ 
và các kỹ thuật tạo hình động 
saic không h ỗ trợ các GIF động, thẻ EM BED, các applet Java , 
ác table, layout, và style 
ỗ trợ các table, các frame, hay các stylesheet. 
đầu với phiên bản 2.0, Mosaic có th ể hiển thị các file ảnh GlF  và 
G . 
 bản trước đây không h ỗ trợ đồ họa. 
Thư và tin tức 
CSA Mosaic không hỗ trợ việc đọc thư và tin tức. 
ảo mật 
n được 
các  
 
AOL 
 
Vào năm 1995, nhà c ung cấp dịch vụ trực tuyến lớn nhất thế giới, America 
Online ( AOL) đã phát triển một bộ trình duy ệt Web. Bộ trình duy ệt AOL c ho 
phép những người sử dựng AOL ch ọn bất kỳ bộ trình duyệt nào mà họ muốn 
sử dụng cùng v ới dịch vụ AOL. n
trong các điểm khác biệt lớn 
các kiểu định dạng file đồ họa. 
Vào thá ng 1 năm 1997, Mosaic đã chấm dứt phát triển bất kỳ phiên bản mới 
nào của bộ trình duy ệt. Tuy nhiên,  nhiều người vẫn còn sử dụng nó. Mosaic có  
sẵn đối với các trình ứng dụng X- Windows, Macintosh và PC. 
 
Đa phương tiện truyền thông, s ự tương tác, 
NCSA M o
JavaScript, hay plug-in ho ặc cấu trúc ActiveX. Nó h ỗ trợ các form. 
 
C
Mosaic không h
 
Hình ảnh 
Đây là một trong các l ĩnh vực mà trong đó Mosaic ti ến bộ hơn nhiều so với 
Lynx. Bắt 
JP
Các phiên
NCSA Mosaic không h ỗ trợ các bản đồ ảnh. 
 
N
 
B
Giống như Lynx, NCSA Mosaic  không có các h ệ thống bảo đảm an  toà
cài sẵn trong b ộ trình duy ệt. Nó không h ỗ trợ một đặc tính giống như 
chứng nhận kỹ thuật số. 
 
 21
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Đối với người sử dụng, lợi ích của việc sử dụng bộ trình duyệt AOL là h ọ có 
ể vào Web m ột cách nhanh chóng - m ọi thứ đi qua AOL và có r ất ít thứ mà 
hải tải xuống và cấu hình. Điểm hạn chế là chất lượng của bộ 
trình duyệt AOL kém. Ph ần lớn một Web site được thiết kế để làm việc tốt trên 
các
3.0
 
Đa
Bộ
Jav ay các thành ph ần ActiveX. N ó 
hỗ trợ các form. 
Bộ trình duy ệt AOL hỗ trợ các table và các frame. B ộ trình duy ệt nhận biết thẻ 
TABLE nhưng không có nhi ều thuộc tính (hay tùy ch ọn) dành c ho nó.  Cả các 
table và fram e đều được thực thi bắt đầu với phiên bản 3.0. Bộ trình duy ệt AOL  
không hỗ trợ các stylesheet. 
 
Hình ảnh 
Tất cả các phiên b ản của bộ trình duy ệt AOL đều hỗ trợ đồ họa và các b ản đồ 
ảnh. 
 
Thư và tin tức 
Bộ trình duy ệt AO L cho phé p khách hàng s ử dụng thư và tin tức, nhưng sự truy 
cập bị giới hạn đối với những gì m à AOL c ung cấp - không có s ự truy cập trực 
tiếp vào Int ernet. 
 
Bảo mật 
Bộ trình duy ệt AOL không ch ứa bất kỳ đặc tính nào để tăng sự an toàn cho các 
giao tác tr ực tuyến. Nó không h ỗ trợ các chứng nhận kỹ thuật số. 
 
 
Web TV 
 
Bộ trình duy ệt WebTV cho phép ng ười sử dụng truy c ập lnternet thông qua 
một máy truy ền hình. Môi tr ường người sử dụng tất khác với một máy tính, vì  
vậy nếu bạn quyết định rằng bạn muốn thu hút càng nhi ều người sử dụng 
WebTV cà ng tốt, bạn nên kiểm tra cách ho ạt động phần mở rộng của chúng. 
 
Đa phương tiện truyền thông, s ự tương tác, và các k ỹ thuật tạo hình động 
 
a 
Nó không hỗ trợ thẻ EMBED. các applet Ja va, JavaSc ript, các plug-th
người sử dụng p
 bộ trình duy ệt khác đều cần phải có một "phiên b ản AOL" mới. Phiên b ản 
 là phiên bản sau cùng. 
 phương tiện truyền thông, s ự tương tác, và các k ỹ thuật tạo hình động. 
 trình duy ệt AOL không h ỗ trợ các G IF động, thẻ EMBED, Java, hay 
aScript. Nó cũng không h ỗ trợ các plug-in h
 
Các table, layout và style 
 
Bộ trình duy ệt WebTV  phiê n bản 0.9 hỗ trợ các G IF động và các form, m ặc dù
nó không h ỗ trợ sự mã hó a (để bảo đảm an toàn) đối với thông tin được gởi qu
các form. 
in, hoặc ActiveX. 
 
 22
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Các table, layout và các style 
WebTV h ỗ trợ các table, tuy không tuân  theo cách thông th ường. Bộ t
duyệt WebTV không h ỗ trợ các frame hay stylesheet. M ột trong cácrình 
 quy ước 
u rộng 
ững 
rối về sự hiển thị khi cố xem các Web 
ình ảnh 
ộ trình duy ệt WebTV h ỗ trợ đồ họa. Có nhiều phần mở rộng chuyên biệt đối 
c bản đồ ảnh phía client. 
hư và tin tức 
ộ trình duy ệt WebTV cho phép ng ười sử dụng gởi và nhận e-mail nhưng 
hông có một giao diện trực tiếp đối với các tin t ức Usenet. Nh ững người sử 
ụng vẫn có thể đọc các bài báo newsgroup được truy cập đối xứng trê n các 
eb site. 
ảo mật 
ộ trình duy ệt WebTV không ch ứa bất kỳ thành phần bảo đảm sự an toàn nà o, 
ao gồm sự hỗ trợ đối với các chứng nhận kỹ thuật số. 
 
óm tắt chương: 
hương bạn những kiến thức mang tính khái ni ệm về 
ternet, Web và các tính năng của các bộ trình duy ệt web.  Bạn có thể thấy 
ược nguồn gốc, sự phát triển của Internet, web m ột cách khái quát. khó hiểu nhất của WebTV là thi ết bị đầu cuối được cài đặt với một chiề
cố định là 544 pixel và nó không h ỗ trợ việc cuộn theo chi ều ngang. Nh
người sử dụng có khả năng gặp các rắc 
site vốn sử dụng các thành ph ần rộng hơn. 
H
B
với We bTV. Nó c ũng hỗ trợ cá
 
T
B
k
d
W
 
B
B
b
 
T
 
C  này cung cấp cho 
In
đ
 
 23
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Ch
 
2.1
mộ
 
2.2 M
 ương 2:  Tổng quan v ề một hệ thống We b 
 Giới thiệu 
 
Một hệ thống We b là một hệ thống cung c ấp thông tin trên m ạng Internet 
ng qua các thành phần Má y chủ, trình duy ệt và nội dung thô  thông tin.  
Trong chương này sẽ giới thiệu một cách cơ bản nguyên lý ho ạt động của 
t hệ thống Web c ũng như các thông tin l iên qua n tới các cách th ức xác 
h vị trí nguồn thông tin, cách th ức trao  đổi dữ liệu giữa máy  chủ với địn
trình duyệt và cách th ức thể hiện thông tin. 
ô hình hệ thống Web nói chung 
 
 
Mạng dịch vụ Web là m ạng các máy tính liên quan đến dịch vụ Web bao g ồm 
các máy ch ủ dịch vụ, các m áy tính và thi ết bị phục vụ cho việc cung cấp dịch 
vụ Web.  
Hệ thống đó bao gồm: 
- Đường kết nối với mạng cung cấp dịch vụ Internet 
 24
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Các máy ch ủ cung cấp dịch vụ Web: cung c ấp các dịch vụ web hosting, ch ứa 
các phần mềm Application Ser ver đảm ảo việc phát triển các dịch vụ trên 
 
2.3
 
 
 
 
 
 
 
 
 
 
 
 
 
Khi máy client k ết nối vào I nterne t (thông qua h ệ thống mạng LAN  hay các 
đường dial up..), ng ười sử dụng dùng trình duy ệt web (w eb br owser) gõ địa chỉ 
tên miền cần truy nhập (ví dụ: http://home.vnn.vn) g ửi yêu cầu đến máy chủ 
Web. 
 
Web Ser ver xem  xét và thực hiện hết những yêu cầu từ phía We b browser g ửi 
đến. Kết quả là một trang "thu ần HTML" được đưa ra Browser. Ng ười sử dụng 
sẽ hoàn t oàn trong su ốt với những gì đằng sau của một Web server  như CGI 
Script, các ứng dụng cơ sở dữ liệu.  
Trường hợp là web t ĩnh thì web server s ẽ lấy thông tin l ưu sẵn trên m áy chủ 
dạng thư mục, file gửi lại theo yêu c ầu của client. Tr ường hợp web động (dùng 
các ngôn ng ữ lập trình web nh ư ASP, PHP, J SP, CGI ... k ết nối và khai thác c ơ 
sở dữ liệu.  
 
Một ví dụ: Khi có k ế hoạch đi công tác t ại Hà nội, A biết có thể tìm được 
các thông tin liên quan t ới thời tiết ở Hà nội tại địa chỉ Web b
web, kết nối đến các cơ sở dữ liệu trên các máy tính khác, m ạng khác 
- Các máy ch ủ cơ sở dữ liệu, máy chủ chứng thực, máy ch ủ tìm kiếm ... 
- Hệ thống tường lửa (cả phần cứng và phần mềm) đảm bảo an toàn cho h ệ 
thống m áy chủ với môi trường Internet. 
- Hệ thống m áy trạm điều hành, cập nhật thông tin c ho m áy chủ Web... 
 
. Nguyên tắc hoạt động 
 
 
 
 
 
 
 
http://home.vnn.v n http://home.vnn.v n 
Server ans wer Server ans wer I
Clien
Web S erver nternet 
CGI 
API
…. 
base Greeting! 
Well com e to Our site 
 
      VNN  Web Site on the Net 
 
We hope that you w ill find every 
thing you are loo king for… 
 <html> 
<body> 
<H1>  Greeting! </H1> 
<p><i>Well com e to our  site</i></ p> 
thing you are loo king for …  </p> 
</body> 
</html> Brows
Server 
HTM
Data <img src=“vnnlo go.gif”> 
<p>We hop that  you will find ever y  
 25
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

"http://hanoi.vnn.vn" –  địa chỉ này chính là m ột URI (Uniform Resource 
Identifier - world wi de web addre ss) . 
Khi A nhập URI trên vào trình duy ệt thì: 
1. Trình duy ệt  sẽ thực hiện gửi yêu cầu lấy thông tin t ới địa chỉ xác định 
trong U RL thông qua giao th ức truyền dữ liệu có tên là http. 
2. Máy chủ nới chứa thông tin s ẽ xác định những thông tin c ần thiết theo 
yêu cầu dựa trên URI c ủa người sử dụng gửi tới. Truyền thông tin liên 
qua tới yêu cầu tới người sử dụng thông qua giao th ức truyền thông http. 
3. Trình duy ệt sau khi nh ận được kết quả trả lời của máy chủ sẽ tiến hành 
trình bà y dữ liệu kết quả nhận được theo khuôn d ạng nhất định. Bản 
thân trong k ết quả nhận được cũng ba o gồm các liên k ết tới thông tin ở 
vị trí khác trên Web và các v ị trí n ày cũng được xác định bởi các URI. 
Trong ví d ụ trên đã giới thiệu cho chúng ta ba c ấu trúc của Web gồm: Xác định 
vị trí thông tin, Trao đổi và cách th ể hiện thông tin: 
1. Xác định vị trí thông tin: M ỗi resource trong Web s ẽ được xác định bởi 
Uniform Resource Identifier (URI). Trong ví d ụ trên, r esource  dùng để 
lấy tông tin v ề thời tiết ở Hà nội được xác định bời URI: 
"http://hanoi.vnn.vn". 
2. Trao đổi thông tin: Các tác nhân c ủa We b (trình duyệt – browser, we b 
server, …) th ực hiện trao đổi thông tin th ông qua các messa ge, các  
message này được hình thành khi có yêu c ầu của người sử dụng hoặc 
khi thực ẽ 
định nghĩa cách thức trao đổi dữ liệu giữa các tác nhân t rong We b, trong 
thể là: HTML, XML, … d ữ
nghĩa này, trình duy ệt sẽ trì u có thể giúp người sử 
dụng khai thác thông tin m ộễ dàng. 
 
 hiện các tiến trình xử lý dữ liệu. Các giao th ức (Protocols) s
ví dụ này là giao th ức HTTP. 
Thể hiện thông tin: Các message được hình t hành khi trao đối thông tin gi ữa 
các tác nhân trong web đã chứa các định dạng dữ liệu. Tùy t huộc vào từng 
yêu cầu cụ thể mà các đinh dạng thể hiện dữ liệu sẽ khác nha u. Tr ong 
trường hợp khi nhận kết quả trả lời từ các web server, các định dạng đó có 
 liệu ảnh, … Dựa trên các định dạng được định 
nh bày lại sao cho d ữ liệ
t cách d
 26
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chươ
ại đa số các trang Web trên Internet vi ết bằng ngôn ng ữ HTML. Nếu chúng ta 
hông thạo lắm về ngôn ngữ này, chúng ta v ẫn có thể tạo được các trang Web 
ễ dàng thông qua các ch ương trình  t ạm gọi là công c ụ làm Web. Có r ất nhiều 
hương trình nh ư vậy ví dụ như: Frontpage, Hotdog , Dream weaver... 
rong tài liệu này c húng tôi gi ới thiệu với các bạn sử dụng chương trình 
rontpage 2002: 
- Mở, đóng, tạo mới, ghi  một trang Web. 
- Định dạng font ch ữ, paragraph, m àu chữ, ... 
- Làm việc với bảng. 
- Tạo Form  ng 3:  Frontpage 2002 (Front page XP)  
 
Đ
k
d
c
T
F
- ảnh, âm thanh, ... 
- Hyperlink, Bookmark. 
 
Hình 3. 1: Giao di ện Frontpage 2002 cửa sổ soạn thảo 
hi mở Frontpage 2002, gi ống như bất cứ một chương trình soạn thảo nào, 
chúng ta s ẽ thấy một loạt các công c ụ phía trên. Các công c ụ này có th ể cho 
hiển thị hoặc không b ằng cách cli ck chuột phải lên thanh công c ụ rồi chọn loại 
công vụ cần hiển thị. K
 27
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Với Frontpage có th ể soạn thảo trang trực tiếp bằng gia o diện trực quan ho ặc 
xây dựng trực tiếp bằng thẻ HTML  
 
Hình 3. 2  Giao diện Frontpage 2002 c ửa sổ mã 
.1 Mở, đóng, tạo mới, ghi một trang hay m ột Web site 
ư mục trên máy nh ư một website. Khi đó tại 
số các file để windows qu ản lý 
tên “_private”, “_vti_c nf”, “_vti _pvt”). 
 này không còn giá trị sử dụng vì thế 
ước k ững file này. 
 Web ... 3
+ Tạo mới một trang hay m ột Website:   
Frontpage có kh ả năng coi một th
thư mục được coi là website đó sẽ sinh ra m ột 
(Các file này n ằm trong các th ư mục có 
Khi đưa website lên m ạng thì c ác file
tr hi đưa lên mạng chúng ta nên xoá b ỏ toàn bộ nh
 
Trên thanh công c ụ vào: File --> New --> Page or
 
 28
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

ộ
 Hình 3.
Hình 3. 4: Chọn template 
 
Sau đó chọn trang cần tạo: 
Có thể chọn một trang trắng (Bl ank page) ho ặc 
chọn trang theo m ột thiết kế có sẵn của Front 
page(Page template) r ồi chọn một trong số các 
mẫu có sẵn (Có thể là Frame). Đối với Webs ite 
chọn Em pty We b hoặc Website Template. 
 
 
 
 
 
 
 
 
 
+ Mở một Website (M ột thư mục c coi là 
Website): 
 
Trên thanh công c ụ vào: File --> Open Web 
 3: Tạo m t trang ha y we b 
 
đượ
 29
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 2. 5: Mở Website 
.  
Sau đó chọn  thư mục cần xây dựng
 
 
 
Hình 3. 6: Chọn thư mục web 
 
3.2 Định dạng font ch ữ, para graph,... 
Font chữ: Format --> Font... r ồi chọn font cần hiển thị, và m àu hiển thị của 
doạn text. Ho ặc bạn có thể chọn nga y tại Dropm enu font c ần hiển thị (Giống 
một số trình soạn thảo văn bản khác) và m àu tại biểu tượng chữ A trên thanh 
công cụ.  
 
Paragraph: L ựa chọn đoạn văn bản cần định dạng (Bôi đen), click chu ột phải 
vào đoạn ăn bản đó đó rồi chọn Paragraph.  
 
 
 30
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 3. 7: Đặt paragra gh 
 
 
 
C  định dạng theo: ó thể
Alignment: Quy định vị trí của đoạn text đó. Giá trị:  
Defaut, left, right, center, Justify. 
- Identation: Xác định lề của đoạn text. Giá tr ị: 
 Before text: Kho
 After text: Khoảng cách lề phải. 
 trắng đầu đoạn text. 
c đoạn text. Gi á trị: 
Line spacing: Kho ảng cách gi ữa các dòng trong đoạn text. 
  
- 
ảng cách lề trái. 
 Ident first  line: Kho ảng
- Spacing: Xác định khoảng cách gi ữa cá
 Before: Khoảng cách phía trên đoạn text. 
 After: Khoảng cách phía d ưới đoạn text. 
 
 31
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 3. 8: Chọn tham  số paragra ph 
 
3.3 Ảnh, âm thanh 
Ảnh, âm  thanh tr ong trang Web không ph c xây dựng trong trang 
à nó được gọi từ file ảnh i. ải là nó đượ
hay file âm thanh bên ngoà m
Chèn ảnh: Insert --> Picture -->From file... r ồi chọn file ảnh cần chèn. 
 
 
 
Hình 3.9: Insert ảnh 
 
 
 
Đặc tính của ảnh: C họn  ảnh cần đặt thuộc tính, click chu ổi phải chọn Pictur e 
Properties... 
 32
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 3. 10: Đặt đặc tính của ảnh 
 
 
am số cho ảnh Hình 3. 11 : Chọn th
 33
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Tạo âm huột phải vào trang ch ọn Page properties, T ại 
mục background sound ch ọn file âm thanh c ần chè n.  thanh cho trang: Click c
 
 
 
âm thanh nền 
Table  tham số sau: 
Size: 
Alignment: V ị trí của bảng trong trang. Giá tr ị:  
Default, left, right, center. 
Border size: Độ dày của đường viền bảng. 
Cellpadding: Kho ảng cách ph ần tử trong cell đến đường viền bảng. 
Cellspacing: Kho ảng cách ph ần tử ngoài cell đến đường viền bảng. 
Specify width: Độ rộng của bảng. 
Bạn cũng có thể tạo bảng bằng biểu tượng trên thanh công c ụ hoặc có thể vẽ 
bảng bằng cách Table --> Draw Table. 
Bạn muốn sửa bảng click chu ột phải vào bảng cần sửa chọn Table Properties... 
cũng có các tham s ố như trên. 
 Hình 3. 12: Đặt 
 
3.4 Bảng(Table) 
Tạo bảng: 
--> Insert --> Table... sau đó bạn điền các
- 
Rows: Số lượng hàng trong b ảng. 
Colums: Số lượng cột trong bảng. 
 - Layout: 
 34
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 3. 13: Chọn Thuộc tính cho b ảng 
Tạo màu nền cho m
Click chu ột phải vào bảng hoặc cell cầno màu nền chọn Table pr operties (v ới 
roperties (với cell). Tại  mục Background  có 2 l ựa chọn  
- Color: Ch ọn màu nền cho bảng hoặc cell. ột bảng hoặc một cell: 
 tạ
Table) ho ặc Cell p
  
 - Use background picture: Ch ọn một file ảnh có sẵn làm nền. 
 
 35
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 3. 14: Đặt tham số của bảng 
 
ng(Bookmark): 
t tên. Trên thanh công c ụ vào Insert --> Bookmark..., t ại 
bạn gõ tên cho đối tượng cần đặt. 3.5 Hyperlink, Bookmark 
Đặt tên cho m ột đối tượ
Chọn đối tượng cần đặ
phần Bookmark nam e, 
 
 
 
 36
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 3. 15: Đặt bookm ark cho một đối tượng 
ể là một đoạn text, có th ể là ảnh,...). 
t --> Hyperlink... (Phím nóng Crtl+K, cũng có thể click chu ột vào 
g quả cầu trên tha nh công cụ), tại phần UR L của cửa sổ mới hiện bạn 
đánh địa chỉ cần link đến là
  
Tạo siêu liên k ết (hyperlink): 
Chọn đối tượng cần tạo hyperlink (có th
Sau đó, 
vào Inser
biểu tượn
 được.  
 
Hình 3. 16: Tạo hyperlink 
ến một đối tượng đã đặt tên trong m ột trang nào đó, bạn vẫn làm  như 
trên nhưng sau khi đánh đị c Bookmark  b ạn chọn tên  
của đối tượng cần link tới. 
  
Để link đ
a chỉ đến trang đó, tại mụ
 37
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 3. 17: Đặt thuộ tính cho hyperlink 
 
ờng link có s ử dụng frame, b ạn có t hể chỉ định trang link đến 
ần Target frame click chu ột vào biểu 
 Same frame: Trang hi ển thị ame chứa đường link. 
e: Trang hi ển thị toàn bộ cửa sổ (không thu ộc fram e nào). 
ndows: Trang hiển thị sang một cửa sổ mới (Không thu ộc cửa sổ chứa 
ame: Trang hiển thị sang frame cha (bao frame có ch ứa đường link). 
ung(form): 
n tử thuộc form (các form field) ph ải nằm trong khung nà y thì mới có 
nghĩa. 
Insert --> F orm --> Form.  
 
Khi tạo khung l uôn có 
Submit: G ửi dữ liệu đến một một đối tợng xử lý khác (có th ể là một chương 
ực tiếp qua Email,...). 
ng các form field. c
 
Nếu trang ch ứa đư
hiển thị tại fram e nào bằng cách, t ại ph
tượng “cái bút”, r ồi chọn các tham s ố: 
 vào đúng fr
Whole fram
New Wi
frame). 
Parent fr
3.6 Tạo khung (form) 
a, Tạo kh
 Mọi phầ
2 nút chức năng : 
ư
trình CGI, có th ể gửi tr
Clear: Xóa d ữ liệu tro
 38
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 3. 18: Tạoform 
 
b, Tạo các form field
 
Giá trị là một dòng ký t ự 
 
t có thanh trượt (Scrolling text box):  
 Text Box 
ồm nh iều dòng ký t ự 
ert --> Form--> Check Box. 
á trị là các lựa chọn logic. Sử dụng tr ong trường hợp chọn nhiều giá 
trị cùng một lúc 
 
- Hộp lựa chọn logic (Radio Button) :  
Insert --> F or
Giá trị là các lựa chọn logic. S ửụng tr ong t rường hợp chọn một giá trị 
- Hộp l
rop-down menu. 
- File U
 
 Có tác dụng gửi file lên má
 
 (Pus h button):  
sert-->Form-->Push Button. 
ng tin mà ta gán cho chúng : (Phải nằm trong kh ung) 
- Hộp text một dòng ( One line text box):  
Insert --> F orm --> One-line Text Box 
- Hộp tex
Insert --> F orm -->  Scrolling
Giá trị là một đoạn văn bản g
 
- Hộp lựa chọn  (Check box):  
Ins
Gi
m--> Radio Button. 
 d
duy nhất. 
 
ựa chọn trượt (Drop-down menu):  
Insert --> F orm --> D
Giá trị là một danh sách các l ựa chọn đã được tạo sẵn 
pload: 
Insert --> F orm --> File Upload 
y chủ 
- Nút bấm
In
Giá trị là thô
 39
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Mỗi form
click chu
  field có các đặc tính riêng c ủa chúng. Để lựa chọn các tham s ố này ta 
ột phải vào form field đó rồi chọn Form Field Properties.. 
 
 
h dáng trang có t ạo form 
ày hướng dẫn về cách trình bày trang và các k ỹ thuật định dạng văn 
bản. Qua đó bạn có thể tạo g bị phụ thuộc vào những 
giới hạn của HTML. M ặc dù Fr ontpage 2002 c ung cấp cho bạn hầu hết các kỹ 
thuật xây dựng, bạn có thể thấy một trang web r ất vừa ý, nhưng kỳ thực bản 
thân nó v ẫn chứa rất n ) không cần thiết. Đó 
ển thị trên trình duy ệt không hoàn toàn theo ý 
o diện front page rất hoàn hảo. Vì  vậy để cho 
ến thức nhất định về 
mã nguồn của nó nhất là khi bạn m ử lý các trang web động.  
 
ủa cuốn sách này s ẽ hướng dẫn bạn cách sử dụng mã ngu ồn 
ng trong vi ệc soạn thảo trang web hi ệu quả. Hình 3. 19 : Hìn
+ 
Tóm tắt chương 
 
Chương n
những trang we b mà khôn
hiều những thẻ mã nguồn (HTML
có thể là lý do khi trang web hi
muốn của bạn mặc dù trên gia
trang we b của bạn hiển thị tốt hơn bạn cuã ng cần phải có ki
uốn lập trình, s
Phần tiếp theo c
HTML với các thẻ cơ bản đủ sử dụ
 
 
 40
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chương
(HTML: 4 Ngôn ngữ đánh dấu siêu văn bản 
 Hyper Text Markup Language)  
ệm 
HTML( Hypertext Markup La ánh dấu siêu văn bản, một 
ngôn ngữ thông dụng hiển thị Web.  
Ngôn ngữ HTML không ph ải là một ngôn ng ữ lập trình. H TML gọi là ngôn 
ngữ chỉ vì nó gồm các tập hợp nhỏ các nhóm ký t ự theo  một quy tắc mà bạn 
dùng để quy định kiểu dáng, v ị trí, cách th ức của văn bản, ảnh, âm thanh ha y 
bất cứ một đối tượng nào khác cùng v ới sự liên kết giữa chúng. 
Các trang vi ết bằng ngôn ng ữ HTML có c ấu trúc như sau: 
<HTM L> 
<HEAD> 
> 
<BODY> 
 văn bản 
hẻ cơ bản: 
Cách định nghĩa thẻ:   
Có 2 loại thẻ: 
- Thẻ có nội dung: <Tê n thẻ> ẻ> 
<tên thẻ>: Bắt đầu một thẻ. 
</tên thẻ>: Kết thúc một thẻ. 
Thẻ rỗng: <Tên th ẻ> (Trường hợp này không có k ết thúc thẻ) 
.2.1 Các thẻ định nghĩa đoạn văn bản, kiểu chữ 
Thẻ P: Định nghĩa đoạn văn bản. 
 bản </P>  
4.1 Khái ni
nguage) là ngôn ng ữ đ
<TITLE> ti êu đề trang <TITLE
</HEAD> 
Nội dung
</BODY> 
 </HTML>  
4.2 Các t
 nội dung text </Tên th
- 
 
4
Cú phá p: <P> nội dung đoạn văn
 
 
Mã nguồn 
 41
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<html> 
<head><title>Test</
<body> title></head> 
<p> Day la noi dung doan text </p
 > 
</body>
</html> 
Hiển thị trên trình duy ệt 
 
Hìn ản h 4.1: Hiển thị đoạn văn b
Thẻ H: Quy định kích cỡ của tiêu đề. 
 Cú phá p:  <Hx> Tiêu đề </Hx> 
 Trong đó: x =1,2,3,4,5,6. x càng nh ỏ cỡ chữ càng lớn. 
Mã nguồn 
<html> 
<head><title>Test</title></head> 
<body> 
<H1> Tie u de co  chu lon nhat (H1) </H1>< br> 
<H2> Tie u de co chu l on thu hai (H2) </H 1><br> 
.. .. .. <br> 
<H6> Tie u de co chu nho nhat</H6> 
</body> 
</html> 
Hiển thị trên trình duy ệt 
 42
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4.2: Ví dụ về tiêu đề văn bản 
Thẻ B: Chữ đậm. 
 Cú pháp: <B>Phần chữ đậm</B> 
Mã nguồn 
<html> 
<head><title>Test</title></head> 
<body> 
<p><b> Phan  text chu dam </b></p> 
</body> 
< > /html 
Hiển th duyệt ị trên trình 
 
Hình m 4.3: Đoạn văn bản chữ đậ
 43
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Thẻ I: Chữ nghiêng. 
 Cú pháp: <I>Phần chữ nghiêng</I> 
Mã nguồn 
<html> 
<head><title>Test</title></head> 
<body> 
<p><i> Phan  text ch
</body> 
</html> u nghieng</i></p> 
Hiển thị trên trình duy ệt 
 
Hình 4. 3: Đoạn văn bản chữ nghi êng 
 
Thẻ U
 > 
Mã nguồn : Chữ gạch chân. 
Cú pháp: <U>P hần chữ gạch chân</U
<html>
<head><title>Test</title></head> 
</html 
<body> 
<p><u> Phan  text gach chan</u></p> 
</body> 
> 
Hiển thị trên trình duy ệt 
 44
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4. 4: Đoạn văn bản chữ gạch chân 
 
Thẻ F
Cú phá p: <FO NT FA CE=”tên font” CO
size=”số nguyê n”> 
Mộ
.VONT: Quy định font chữ. 
LOR=”m ã màu hoặc tên m àu” 
t số tên font thông d ụng: .VnTime; .VnTimeH; .VnArial; 
nArialH;.VnAvant; .VnAvantH;... 
Mã nguồn 
<html> 
<head> 
<title>Test</title> 
<meta http-equi v="Content-Type" co ntent="text/html; charset=utf-8"> 
</head> 
body> 
<p><font face="Arial" colo r="#000000" size="2"> Ph ần  text có font Arial 
theo chuẩn Unic ode, cỡ chữ bằng 2, m
 <
àu đen </font></p> 
</body>
</html> 
Hiển thị trên trình duy ệt 
 
Hình 4. 5: Ví dụ về phông ch ữ 
 45
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Thẻ BR: Xuống dòng  <BR>(Thu ộc loại thẻ rỗng) 
Mã nguồn 
<html> 
<head><title>Test</title></head> 
<body> 
<p>Pha n  text truoc the BR <br> Phan text sau the BR< /p> 
</body> 
</html> 
Hiển thị trên trình duy ệt 
 
Hình yệt  4.6: Thẻ BR trên trình du
Thẻ Sub: Chữ nhỏ chỉ số dưới. 
 Cú pháp: <SUB>Phần chữ nhỏ chỉ số dưới</SUB> 
Mã nguồn 
<html> 
<head><title>Test</title></head> 
<body> 
<p>Đối tượng<sub>Chi so duoi</sub></p> 
</body> 
</html> 
 
Hiển thị trên trình duy ệt 
 46
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4. 7: Chỉ số dưới  
Thẻ Sup: Chữ nhỏ chỉ số trên. 
 Cú phá p: <SU P> Phần chữ nhỏ chỉ số trên</SUP> 
Mã nguồn 
<html> 
<head><title>Test</title></head> 
<body> 
<p>Đối tượng<sup>Chi so tren</sup></p> 
</body> 
</html> 
Hiển thị trên trình duy ệt 
 
Hình 4. 8: Chỉ số trên 
 
 
Thẻ DL: Định nghĩa một danh sách. 
 
Cú Phá p 
            <D L>Đề mục danh sách 
   < DT>Danh sá DT> 
 <DT>Danh sách mức 1</DT> 
      <DD>Danh sách m ức 2</DD> ch mức 1</
  
  
 47
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

..... 
 </DL>     <DD>Danh sách m ức 2</DD> 
 <DT>Danh sách mức 1</DT> 
     <DD>Danh sách m ức 2</DD> 
 
Mã nguồn 
<html> 
<head><title>Test</title><
<body> 
<DL><b><i>De muc danh sach</i></b> 
<DT>Danh sach muc 1</DT>
<DT>Danh sach muc 1</DT> 
DD>Danh sach muc 2</DD> 
/body> 
/html> /head> 
 
<
<DD>Da nh sach muc 2</DD> 
<DT>Danh sach muc 1</DT> 
<DD>Da nh sach muc 2</DD> 
<DT>.. ..</DT> 
</DL> 
<
<
Hiển th duyệt ị trên trình 
 
Hình 4. 9: Ví dụ về danh sách 
 
 
Thẻ UL: Tạo danh sách có bu
ú pháp: llets 
C
 48
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<LI>
<LI>Text3</LI> 
</UL> 
Mã nguồn <UL>  
<LI>Text1</LI> 
Text2</LI> 
...... 
<html> 
<head><title>Test</title></head> 
<body> 
<UL> 
<LI>text1< /LI> 
<LI>text2< /LI> 
<LI>text3< /LI> 
</UL> 
</body> 
</html> 
Hiển thị trên trình duy ệt 
 
 
Hình 3.10: Danh sách có bullet 
 
Thẻ OL: Tạo danh sách theo có đánh số thứ tự. 
 Cú pháp: <OL> 
   <LI> Text1</LI> 
   <LI> Text2</LI> 
   <LI> Text3</LI> 
   ...... 
      </OL> 
Mã nguồn 
<html> 
 49
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<head><title>Test</title
<body> 
<OL> 
<LI>text1< /LI> 
<LI>text2< /LI> 
<LI>text3< /LI> 
</OL> 
</body> 
</html> ></head> 
Hiển thị trên trình duy ệt 
 
Hình 3. 11: Danh sách có đánh số thứ tự 
 
 
 
4.2.2 Các thẻ định nghĩa bảng, ảnh 
Thẻ TABLE: Tạo bảng 
 Cú pháp:  
<TABLE > 
<TR>  
<TD>Nội dung cột 1, hàng1</TD> 
<TD>Nội dung cột 2, hàng1</TD> 
..... 
</TR> 
<TR> 
<TD>Nội dung cột 1, hàng 2</TD > 
<TD>Nội dung cột 2, hàng 2</TD > 
...... 
</TR> 
...... 
</TAB LE> 
 50
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Một số tham số của bảng:  
Cách s
acing:  Quy định khoảng cách c ủa phần tử ngoài cell đến đường 
bảng hoặc một cell. 
height:  Quy định độ cao của một bảng hoặc một cell. 
  Quy định tính tr ôi nổi của bảng hoặc định vị phần tử trong 
  Quy định độ dày của đường viền trong bảng. 
Mã nguồn ử dụng: <TAB LE tham so=”giátrị”> hoặc <TD thamso=”giá tr ị”> 
cellsp
viền bảng. 
cellpaddi ng:  Quy định khoảng cách của phần tử trong cell đến đường 
viền bảng 
width:   Quy định độ rộng của một 
align:
cell. 
border:
<html> 
<head><title>Test</title></head> 
<body> 
<table width="500" border="1"> 
<tr> 
<td widt h="40% ">1,1</td> 
<td widt h="60% ">1,2</td> 
</tr> 
<tr> 
<td widt h="40% ">2,1</td> 
<td widt h="60% ">2,2</td> 
</tr> 
</body> 
</html> 
Hiển thị trên trình duy ệt 
 
Hình 4. 12: Ví dụ về bảng 
 
 51
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Mã nguồn 
<html> 
<head> 
<title>Test</test> 
 
22.jpg" 
n những cây cầu ở Hà 
cây cầu 
ông thể 
úc xinh đẹp của Hà Nội.<br><br>V ốn được xây 
n nhiên đã ban tặng cho Hà N ội một nét đặc sắc mà 
c, đó là những dòng sông nh ỏ chảy uốn lượn trong 
phố, là vô số những hồ lớn nhỏ mà phần lớn đều có đảo và bá n đảo 
ng của người dân thà nh phố 
viên ngọc tô điểm cho  bộ mặt đô thà nh. C ó 
ộ phận hữu cơ tạo nên Hà Nội của chúng ta . 
i Hà Nội đã phát hiện, nắm bắt được nét đẹp 
 điểm xuyết thêm cho nó, ng ười Hà 
 sông, nối liền bờ - đảo với những 
ác nhau theo từng hoàn c ảnh. Đặc sắc nhất có lẽ phải nói đến cầu 
i cây cầu 
ăn Siê u 
ủa nước Việt, đây chính là m ột phần không th ể thiếu của 
cụm công t rình văn hóa liên hoà n nổi tiếng "Đền Ngọc Sơn - Cầu Thê Húc  - 
Tháp Bút - Đài Nghiên" đã làm tăng lê n sự lung linh huy ền diệu của khu "Li nh 
Địa" Hồ Gươm. Hà Nội có ca dao r ằng:<br><br><i>R ủ nhau xem c ảnh Kiếm 
Hồ<br>Xem cầu Thê Húc, xem  chùa N gọc Sơn<br>Đài Nghiên, Tháp Bút 
chưa m òn<br>Hỏi ai gây d ựng nên non n ước này.... </i>
<p align="right"><font face="Arial"  size="2"><i>Mai Lâm</i></font></p>
</td></tr></table> 
<body> 
</html> </head> 
<body> 
<table width="500"><tr><td> 
<table align="right" c ellpaddi ng="10"><tr><td>
<img src=" http://hanoi.vnn.vn/minhho a/file_minh_hoa/MH201102497
border="0"> 
</td></tr></table> 
<p align="justify"><font face="Arial" size=" 2">Nhắc đế
Nội, hẳn bạn sẽ nghĩ ngay đến những cây cầu lớn như Long Biên, Th ăng Long 
hay Chương Dương. Tuy nhiê n bài viết này sẽ đưa bạn đến với những 
khác của Hà Nội, nhỏ bé hơn nhiều nhưng lại là những nét chấm phá kh
thiếu trong không gian ki ến tr
dựng bên bờ sông Cái, thiê
hiếm thành ph ố nào có đượ
lòng thành 
được tạo bởi thiên nhiên ho ặc do công s ức lao độ
qua các th ế hệ, chúng nh ư những 
thể nói sông, h ồ đã trở thành một b
Với sự thông m inh sáng tạo, ngườ
đặc trưng đó của thành ph ố mình và nh ư để
Nội đã tạo nên những cây cầu nối những bờ
sắc thái kh
Thê Húc, khi nh ắc đến thắng cảnh Hồ Gươm không t hể không nh ắc tớ
này. Được dựng từ năm 1865 the o ý tưởng của Phương đình Nguy ễn V
- nhà văn hóa lớn c
Hiển thị trên trình duy ệt 
 52
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4. 13: Trang we b bố trí ảnh và text 
Thẻ IM
 Cú
<IMG S
alt=”Đoạn text thông báo” widt
align=”vịG: Gọi ảnh. 
 pháp:  
RC=”đường dẫn đến ảnh cần gọi” border=”chiều rộng đường viền” 
h=”chiều rộng ảnh” height=”chi ều cao ảnh”  
 trí của ảnh”>  
Mã nguồn  
 
<html> 
<head> 
 53
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<title>test</title> 
</head> 
<body> 
<p><img border="0" src="l ogo_vdc.gif" width="80" height="65" al t = “Logo 
/p> VDC”><
</body> 
</html> 
Hiển thị trên trình duy ệt 
 
Hình 4. 14: ví dụ ảnh 
 
 
3.2.3 Tên một đối tượng, hy perlink (th ẻ A) 
Tên một đối tượng: <
Hyperlink: <A href =” đường dẫn đến file”>Ph ần t
 
 A name=”tên”>Phần tử cần đặt tên</A> 
ử cần link</A> 
Mã nguồn 
<html> 
<head><t
<body> itle>Test</title></head> 
p><a href=”http://home.vnn.vn”> Phan te xt co link den trang chu </a></p> 
/body> 
/html> <
<
<
Hiển thị trên trình duy ệt 
 54
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4. 15 Hyperlink 
 
Mã nguồn 
<html> 
<head> 
itle>test</title> 
<p><a href="#cungdinh">Nh ạc cung đình Huế</a></p> 
nbsp;</p> 
&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p> 
<p ><b
Đã hàn  thuật hát chèo, tu ồng, múa r ối nước, dâ n ca v.v... là 
những hệ 
thuật h  người nông dâ n miền Bắc Việt Nam rất yêu thích. 
Đặc biệt nó đư ; <i><a 
href="n
<p ><b Thái</b></font><br> 
Làng n hái, còn gọi là làng B ưởi, ở phía Tây B ắc của 
Thủ đô ây bắt đầu từ thế kỷ XV, được Nguyễn Trãi 
nói đến khá ư địa chí"</i> c ủa ông ( viết năm 1435): P hường 
Yên Bá
đã làm a 
href="n 3110240142" id="l5">Chi tiết</a></i ></p> 
<p><b><a name ="cungdinh" >Nh ạc cung đình Huế</a> - loại hình âm  nhạc 
c sắc ở Việt Nam </b></font> <br> 
Âm nh đình Việt Nam là m ột bộ môn âm  nhạc truyền thống đặc sắc của 
Việt Nam, có giá tr ị cao về nghệ thuật và phương diện lịch sử. Nhạc cung đình 
còn xuất hiện c, 
Nhật B c. Theo sử sách để lại thì nhạc cung đình xuất hiện lần đầu 
tiên và rần, nhưng m ãi đến đời Nguyễn nhạc cung đình mới chính 
 biến và phát triển mạnh tại Cung đình Huế. &nbsp; <i><a <t
</head> 
<body> 
<p>&nbsp;</p><p>&nbsp;</ p><p>&nbsp;</p><p>&nb sp;</p><p>&
<p>&nbsp;</p><p>
>Nghệ thuật hát chèo</b></font><br> 
g trăm năm nay, nghệ
loại hình ngh ệ thuật truyền thống độc đáo của Việt Nam . Trong đó ng
át chèo đã được những
ợc phổ biến rất rộng ở đồng bằng sông Hồng. & nbsp
ghethuat.asp?id=BT13110240751" id ="l5">Chi tiết</a></i ></p> 
>Làng giấy dó Yên 
ghề giấy nổi tiếng Yên T
 Hà Nội. Nghề làm giấy ở đ
 rõ trong sách <i>"D
i ở Thăng Long đương thời chuyên làm gi ấy; người thợ thủ công ở đây 
 ra giấy thị (để viết chỉ thị); giấy lệnh (để ghi mệnh lệnh). & nbsp; <i><
ghethuat.asp?id=BT1
truyền thống đặ
ạc cung 
trong triều đình của một số quốc gia châu Á nh ư Trung Qu ố
ản, Hàn Q uố
o đời nhà T
thức được phổ
 55
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

href="nghethuat.asp?id=BT14110236304" id ="l5">Chi tiết</a></i ></p> 
ghề đúc đồng ở Sài G òn xưa</b></font><br> 
Ở đúc đồng là một nghề thủ công dân gian tr uyền thống. Nếu bỏ qua sự 
tồn tại về một nghề đúc đồng của c n địa thì nghề đúc đồng của 
ệt có lẽ đã xuất hiện ngay từ những thế hệ đầu tiên đi mở đất - Với 
u cầu về vũ khí, đồ sinh hoạt... Và, ngày càng được bổ sung phát tri ển 
T13110239856" id ="l5">Chi tiết</a></i ></p> 
>&nbsp;</p><p>&nbsp;</p> <p ><b>N
 Sài G òn 
ác cư dân bả
người Vi
những nh
bởi những đợt di dân s au đó. &nbsp; <i><a 
href="nghethuat.asp?id=B
<p>&nbsp;</p><p>&nbsp;</p><p
<p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p> 
</body> 
</html> 
Hiển thị trên trình duy ệt 
 56
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4. 16 Book m ark 
 
 
 57
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

4.2.4 Tạo form 
- Thẻ <form> là công c ụ chủ yếu để tạo các trang web c ó tính chất tương
tác.  
- Thẻ <form > cho phé p người sử dụng Br owser nhập thông tin 
 hoặc lựa 
chọn trong các kh ả năng có sẵn. 
 
 
FORM method=”POST” action=”đường dẫn đến chương trình”>  
 
ch thức trao đổi thông tin qua ch ương trình. - Mỗi form th ường gắn với một chương trình th ực hiện gọi là "script",
chương trình này s ẽ tiến hành làm  một công việc nào đó khi người dùn g 
nhấn nút chấp nhận (submit) trên form. 
Cú phá p:
<
Các thẻ form 
</FORM> 
Web Se rver
RequeRequest st 
Server an swer Server an swerInternet Brows
Client er 
APP
CGI- C, C+ + 
- Javascr ipt
- Basic 
- Perl 
-….
 
Hình 4. 17: Cá
 
 58
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Các thẻ tạo form: 
Thẻ INPUT: 
Cú phá p: <INPU T type=”lo ại thẻ” nam e=”Tên trường” value=”giá tr ị”> 
Có các lo ại sau: 
Text:  Hộp text box có m ột dòng để điền dữ liệu. 
Checkbox: H ộp lựa chọn logic kiểu giá trị tập hợp. 
Radio:  H ộp lựa chọn logic ki ểu giá trị duy nhất. 
Button: T ạo một nút bấm bất kỳ. 
Submit: T ạo nút bấm có tính c hất gửi thông tin. 
Reset: Tạo nút bấm có tính xoá toàn b ộ thông tin trong các form field. 
Thẻ SELECT:(H ộp lựa chọn trượt) 
Cú phá p: <SELEC T nam e=”tên trường” size=”giá tr ị”> 
  <OPTION value=”giá trị 1”> Tên l ựa chọn1</OPTION>  
  <OPTION value=”giá trị 2”> Tên l ựa chọn2</OPTION>  
  .......... 
 </SELECT> 
Trong đó: 
iá trị của size là độ rộng của hộp lựa chọn trượt. 
giá trị1: Là giá tr ị của lựa chọn 1. 
giá trị2: Là giá tr ị của lựa chọn 2. 
... 
Thẻ TEX TAREA:(Hộp text có thanh tr ượt) 
Cú phá p: 
 <TEX TAREA nam e=”Tên trường”  rows=”s ố hàng”  cols=”s ố cột”> 
</TEX TAREA> g
 59
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Mã nguồn 
<html> 
<head><title>Test</title></h
<body> 
<div align=”center”> 
<form method=”POST” action=”ct.cgi”> 
<table width=”500” border=”1”> 
<tr> 
<td widt h=”40%”>O ne-line Text box</td> 
<td widt h=”60%”> 
<input type =”text” nam e=”textbox” size=”20”> 
</td> 
</tr> 
<tr> 
<td widt h=”40%”>C heckb ox và Radio button</td> 
<td widt h=”60%”> 
<input type=”checkbox” name=”checkb ox” value=”Ye s” >&nbsp;  &nbsp; 
&nbsp; 
<input type =”radio” na me=”radio” value=”Y es”> 
</td> 
</tr> 
<tr> 
<td widt h=”40%” >N ormal button, S ubmit button, Reset button</td> 
<td widt h=”60%”> 
<input type =”button” value=”B utton”  nam e=”b1”>& nbsp; &nbsp; &nbsp; 
<input type =”subm it” value=”S ubmit” nam e=”b2”> & nbsp; & nbsp; &nbs p; 
<input type =”reset” value=”Reset” nam e=”b3”> 
</td> 
</tr> 
</table> 
</form> 
</div> 
</body> 
</html> 
 
 
 ead> 
Hiển thị trên trình duy ệt 
 
 60
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4. 18: Ví dụ về form (thẻ Input) 
 61
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Mã nguồn 
est</title></head> 
body> 
<div align=”center”> 
<form method=”POST” 
<table width=”95%”>  
<tr> 
<td widt h=”40%”>Dr op m enu</td> 
<td widt h=”60%”> 
<select nam e=”dropm enu” size=”1”> 
<option value=”” selected>Chon m enu</option> 
<option value=”m enu1 ”>Menu1</opti on> 
<option value=”m enu2 ”>Menu2</opti on> 
<option value=”m enu3 ”>Menu3</opti on> 
</select> 
</td> 
</tr> 
<tr> 
<td widt h=”40%”>Scr olling te xt box</td> 
<td widt h=”60%”> 
<textarea name=”textarea” cols=”20” rows=”4”> 
</textarea> 
</td> 
</tr> 
</table> 
</form> 
</div> 
</body> 
</html> 
 <html> 
<head><title>T
<
action=”ct.cgi”> 
 
 
 
 
 
 
Hiển thị trên trình duy ệt 
 
 62
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4. 19: Thẻ Select, textarea 
 
4.2.5 Tạo khu ng (thẻ Frame) 
 
Cú phá p: 
<html> 
<frameset framespacing="0" border= "0" rows="frame1,frame2,..., *" 
fram eborde r="0"> 
<frame name="tên frame1" scrolli ng="no" noresize target="_t op" 
src="đường dẫn 1"> 
<frame name="tên frame2" scrolling= "auto" noresize target="_self" 
src="đường dẫn 2"> 
<frameset framespacing="0 " border="0" rows="...." 
fram eborde r="0"> 
  ..... 
 </frameset> 
...... 
<frame name="tên frame n" scrolli ng="auto" noresize target="_self" 
src="đường dẫn n"> 
<no
<body> 
<p>N oi dung do ạn text thong bao tri nh duyet  khong ho t ro 
Frame</p> 
</body> 
/noframe>  
frames> 
<
</frameset> 
 63
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</html> 
Mã nguồn 
<html> 
<head> 
<meta http-equi v="Content-T
<title
</head> 
<fra
<frame namype" content="text/html; charset=utf-8"> 
>Le hoi</title> 
meset framespacing="0" bor der="0" r ows="159, *" frameborder ="0"> 
e="header" scrolling="no" noresize target ="_top" src="top.html"> 
 your browser does n't support them .</p> 
y> 
ml> <frame name="main" src="list_lehoi .html" scrolling="auto" noresize 
target="_self"> 
<noframes> 
<body> 
<p>This page uses fram es, but
</bod
</noframes> 
</frameset> 
</ht
 
 64
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hiển thị trên trình duy ệt 
 
Hình 4. 20: Toà n bộ trang Frame 
 
 65
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4. 21: Fram e trên (top. html) 
 
 
Hình 4. 22: Fram e dưới (phu_ta y_ho.html) 
 66
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Tóm tắt chương 
 
Mã nguồn HTML là m ột trong nh ững phần trọng yếu trong i Web. 
ỉnh sửa l  sau khi so ạn 
g web qu ang w   
 
úp bạn ảo we b vàđến xây dựn
eb động. K  nguồn với c h, hàm trong các 
ngôn ngữ lập trình là c ực kỳ quan trọng quyết định trangộng đó có đạt 
được sự linh hoạt hay không. 
 
p 
ăn
 kỳ tạo một trang HTML có n ội dung 
 sau: 
="Content-Type" content="text/html; charset=utf-8"> 
ực hành Visual Basic 6</title> 
ce="Arial" size=2 color="black" > 
IỀU K ISUAL BASIC 6.0 
Điều khiển label và com mand but ton 
Bài1: Modul Help 
Bài 2: Modul Display 
Bài 3: Modul Display1 
Bài 4: Modul Display2 
Bài 5: Modul About 
Bài 6: Modul Display3 
Bài 7: Modul Move 
Bài 8: Modul Random 
Bài 9: Modul Form 
tart 
n textbox, o và mảng điều khiển 
ài 11: Modul Multiply 
  làm việc vớ
Bạn có t hể ch
thảo các tranại mã nguồn và loại bỏ hay thêm vào các th
a các công c ụ để tối ưu cho trẻ
eb của bạn.
Chương nà y gi
các trang w có cơ sở cho việc soạn th
hi đó việc kết hợp mã tiến 
ác lện
 web đg 
Bài tậ
 
Bài tập về Đoạn v bản, kiểu chữ 
 
Bài 1: Sử dụng trìnhsoạn thảo text bất 
như
<html> 
<head> 
<meta http-equi v
<title>Các bài th
</head> 
<body> 
<p><font fa
Mục lục 
Phần I. CÁC Đ HIỂN CƠ BẢN TRONG V
Bài 10: M odul S
&nbsp; 
Điều khiể ption button 
B
</font> 
</p> 
</body> 
</html> 
1.1 Theo bạn trình duy ệt sẽ hiển thị trang HTML trên nh ư thế nào?  
1.2 Chỉnh sửa nội dung trang HTML trên sao cho hi ển thị giống hì nh 3.23
 67
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 4.23 Bài t ập 1 HTM L 
 
 68
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Bài 2: Hãy soạn các trang web nh ư hình 4. 24 
 
 
 
Hình 4.24:  Bài tập 2 
 
 69
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Bài tập về bảng 
 
Bài 3: Sử dụng trình so ạn thảo text b t kỳ lập trang HTML sao cho khi hi ển thị ấ
như hình 4. 25 
 
H
 ình 4.25. Bài tập 3 
 70
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Bài tập về form 
 
Bài 5: Sử dụng trình so ạn thảo text bất kỳ lập trang HTML sao cho khi hi ển thị 
như hình 3. 27 
 
 
Hình 4.27: Bài tập tổng hợp 
 71
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chương 5: CSS (Cascaing Style Sheets)  
ể hiện phong cách, tr ợ giúp H TML tr ong việc hiển thị, 
ạng mẫu trợ giúp trình bà y trong các ứng dụng văn bản 
 bàn (tem plate trong M SWWord). 
ột mở rộng của Web và  là một trong nh ững hy vọng lớn để thực hiện 
 tưởng tách we b thành hai ph ần: trình bà y và nội dung.  
 chất, CSS là m ột tập hợp các quy t ắc định dạng được định nghĩa cho 
n đi kèm với việc một nội dung được định dạng 
iều này giải nghĩa cho từ "cascading".  d
 
5.1 Khái quát 
- CSS là ngôn ng ữ th
tương tự như các định d
của máy để
- CSS là m
ý
-Về thực
các thẻ của HTML. CSS luô
theo thẻ (HTML, XML,...) - đ
 
 
 
 
Hình 5.1: Vị trí của CSS trên WEB-Internet 
anguage 
XLS-FO: Formatting Objects 
SS được gắn cùng trang web (H TML) theo các cách sau:  
XLS-T: Transform ation L
 
 
 
 
 
C
 72
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Gọi từ một tập tin ngoài (external): 
HEET HREF=" style.css" TYPE="text/css"> 
úng vào trang H TML: 
 TYPE="text/css"> 
!-- 
dent: 10pt} 
E="text-inde nt: 10pt ">Indented paragraph</P> 
ếp (import): 
ss"> 
import url(http://www.and.so.on.partial1.css); 
.and.so.on.partial2.css); 
ate): 
LINK REL=Stylesheet HREF=" style.css" TYPE="text/css"> 
EL=Stylesheet HREF="style2 .css" TY PE="text/css" TITLE="Loai 
"> 
EL=Stylesheet HREF="style3 .css" TY PE="text/css" TITLE="Loai 
K REL="Alternate Stylesheet" HREF="style3.css" TYPE="text/css" 
LE="Man hinh" M EDIA=screen> 
HREF="style4.css" TYPE="text/css" 
IA=print> 
uật CSS (nh ững kỹ thuật thông d ụng) 
ndent: 10pt} - CSS rle (ruleset) 
 - CSS selector 
 dearation <LINK REL =STYLES
Đượ c nh
<STYLE
<
P {text-in
--> 
</STYLE> 
Đượ c định nghĩa cùng  thẻ (inline): 
<P STY L
Đượ c gọi gián ti
<STYLE TYPE="text=c
<!-- 
@
@import url(http://www
--> 
</STYLE> 
Đượ c gọi thay thế (Altern
<
<LINK R
#
<LINK R
##"> 
Hoặc: 
<LIN
TIT
<LINK REL="Alternate Stylesheet" 
E="In" MED TITL
 
5.2 Kỹ th
Quy tắc dùng tron g CSS: 
P {text-i u
P
{text-inde nt: 10pt} - C SScl
 73
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

text-inde nt - CSS property 
S value 
g CSS CLASS: 
là một dạng selector đặc biệt, là tập hợp nhiều định nghĩa CSS và 
n cho bất kỳ một thẻ HTML nào. Khi dùng thì m ới có tác dụng lên thẻ 
L nào gọi đến nó.  
 /* class as selector */ 
footnote/> This elem ent is associated with the CLASS 
DDRESS> 
And so is this</P> 
: 
E {color: re d} 
dụng cho ph ần văn bản được lồng trong 3 t hẻ HTML theo th ứ tự 
ả hiệu: (ps eudo-element) 
hỉ có 2 phần tử giả hiệu, dùng cho các th ẻ hiển thị khối, dòng (block, p, ...) 
giả hiệu: 
lớp giảiệu: 
lo: white} 
colr: red} 
ackground: transparent; color: black} 
 một văn bản có cấu trúc, được bắt đầu từ thẻ <HTML> r ồi đến thẻ 
 và sau đó là các th ẻ như <Hn>, <P>,... 
 của các thẻ bậc dưới được kế thừa thuộc tính của các 
ắc, font chữ, cách lề,... 
cũng thực hiện việc kế thừa thuộc tính. Ví d ụ như: 
t} 10pt - CS
Cách dùn
CLASS 
hông gá k
HTM
.footnote {f ont: 70%} 
<ADD RESS CLA SS=
footnote</ A
<P CLASS=footnote>
Cách dùng ng ữ cảnh
TD P CO D
Chỉ có tác 
trên. 
 tử gi Phần
C
first-line 
first-letter 
CLASS 
Chỉ có 1 thẻ A là có các  h
A:link { backgr ound: bl ack; cor
A:active {background; black: 
A:visited {bo
Tính kế thừa: 
HTML là
<BODY>
Như vậy, các thu ộc tính
thẻ bậc trên, như màu  s
Tương tự như vậy, CSS 
BODY {font-size: 10p
H1 {f ont-size: 180%} 
Có nghĩa là: 
 74
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Toàn bộ font chữ được hiển thị trong văn bản với độ lớn là 10pt, riêng đối với 
 bản trong th ẻ H1 sẽ được hiển thị với độ lớn hơn 1.8 lần (hay là 
nh đều được kế thừa, ví dụ như thuộc tính backgr ound. 
t số thuộc tính hay dùng trong CSS (cùng th ẻ HTML) phần văn
18pt). 
Không ph ải mọi thuộc tí
 
5. 3 Mộ
 
Thuộc tính Mục đích Giá trị 
(nên dùng) Thừa 
kế 
Định dạng chữ 
Color dùng để định nghĩa màu chữ hiển 
thị #rrggbb có 
font-wei ght ch ỉ định kiểu chữ hiển thị (đậm, 
béo,...) Bold 
lighter 
norm al có 
font-family chỉ định font ch ữ .VnTime 
.VnArial có 
font-size kích cỡ chữ 12pt 
15px có 
font-style kiểu hiển thị Italic 
norm al có 
text-decoration trang trí ch ữ None 
underline 
overline 
line-through có 
Dàn chữ 
line-height chỉ định độ cao dòng %(font ch ữ) có 
vertical-align chỉnh theo chi ều dọc Top 
bottom 
middle 
sub 
super 
baseline có 
 75
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Thuộc tính Mục đích Giá trị 
(nên dùng) Thừa 
kế 
Text-indent điều chỉnh dòng đầu tiên của 
khối văn bản px, pt, % có 
Tex heo chiều nga ng Left 
right 
justify 
center có t-align dàn t
Nền 
background-color ch ỉ định màu nền #rrggbb  
background-image ch ỉ định ảnh nền url()  
Lề 
margin-top, 
argin-left, 
ottom, chỉ định việc cách lề px, pt có 
m
margin-b
margin-right, 
marg in 
Dàn trang 
list-style-type kiểu dành cho t hẻ UL, OL None 
disc 
circle 
re 
decim al 
lower-roman 
upper-roman 
lower-alpha 
upper-alpha có 
squa
list-style-image ảnh thay cho bullet url() có 
list-style kiểu vắn tắt   
 
 
Tóm tắt chương 
 
Chương nà y giúp bạn có đư
rang web hấp dợc khả năng phong phú trong vi ệc trang trí, t ạo các 
ẫn hơn. Bạn có thể sử dụng  CSS để tạo thành tập hợp các định 
bsite điều đó sẽ tiện lợi hơn nhiều trong việc soạn thảo, t
dạng riêng cho c ả we
 76
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

sửa đổi định dạng trang cũng như làm trang web đó có cấu trúc đồng nhất và 
huyên nghiệp hơn. 
nền của trang Web) 
u Background 
ht
<he
pe="text/css"> 
ckground-color: 
ound-col or: 
/h1> 
p>  
 
 c
 
Bài tập 
 
I. Backgr ound (
1
<. Đặt mà
ml> 
d>  
 a
 
<style ty
ody {ba b
yellow} 
h1 {backgr ound-col or: 
#00ff00} 
h2 {backgr ound-col or: 
transparent} 
p {bac kgr
rgb(250,0,255)} 
</style> 
 
</head> 
 
<body> 
 
<h1>This is header 1<
<h2> This is header 2</h2> 
p>This is a paragraph</ <
 
</body> 
/html> <
 
2. Đặt background là một ảnh có sẵn 
 77
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<html> 
<head> 
style type="text/css"> 
 
d-image: 
ges/bgdesert.jpg") 
 
body>  
<
body  
{
backgroun
url("/ima
} 
</style> 
</head> 
 
<
</body> 
 
</html> 
 
 78
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

3. Đặt ảnh nền cố định (ảnh nền không cu ộn theo trang w eb) 
html> 
 
ody  
rl("/images/smiley.gif"); 
:  
ackground-attachment:  
/style> 
<body> 
<br
:</b> 
etscape 4 does not supporthe 
" 
ot scroll 
/p> 
 scroll 
e</p> 
t scroll 
est of the page</p> 
p>The image will not scroll 
est of the page</p> 
p>The image will not scroll 
rest of the page</p> 
he image will not scroll 
> 
t scroll 
/p> 
ll 
age</p> 
ill not scroll 
ith the rest of the page</p> 
l> Ảnh 1 (ảnh nền ở vị trí cố định, trên cùng): <
<head> 
<style type="text/css">
b
{ 
background-image:  
u
background-repeat
no-repeat; 
b
fixed 
} 
<
</head> 
 
 
 
Ảnh 2 (ảnh nền vẫn ở vị trí cũ, khi cuộn 
web): 
><br> 
<p> 
<b>Note
N  t
"background-attachm ent
property. 
</p> 
 
<p>The image will n
with the rest of the page<
<p>The image will not
with the rest of the pag
<p>The image will no
with the r
<
with the r
<
with the 
<p>T
with the rest of the page</p
<p>The image will no
with the rest of the page<
<p>The image will not scro
with the rest of the p
<p>The image w
w
 
</body> 
</htm
 79
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

4. Định nghĩa tất cả các thuộc tính của bac kground trong m ột khai báo  
 type="text/css"> 
ody 
iley.gif")  
enter center 
/head> 
p>This is some text</p> 
<p>
 is some text</p> 
 is some text</p> 
p>This is some text</p> 
> 
s is some text</p> 
t</p> 
> 
 is some text</p> 
t</p> 
 some text</p> 
is some text</p> 
t</p> 
xt</p> 
 is some text</p> 
t</p> 
ext</p> 
text</p> 
is some text</p> 
p>This is some text</p> 
/html>  
 
 
 
 
 <html> 
<head> 
<style
b
{  
background: #00ff00  
url("/images/sm
no-re peat fixed  
c
} 
</style> 
<
 
<body> 
 
<
This is some text</p> 
<p>This
<p>This
<
<p>This is some text</ p
<p>Thi
<p>This is some tex
<p>This is some text</ p
<p>This
<p>This is some tex
<p>This is some text</ p> 
<p>This is
<p>This 
<p>This is some tex
<p>This is some text</ p> 
<p>This is some te
<p>This
<p>This is some tex
<p>This is some text</ p> 
<p>This is some t
<p>This is some 
<p>This 
<
 
</body> 
<
 
II. Các định dạng cho chữ v
1. Định nghĩa màu chà ký tự 
o chữ 
 80
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<html> 
<head> 
<style type="text/css"> 
h1 {c olor: #00ff00} 
h2 {c olor: #dda 0dd} 
p {color: rgb(0,0,255)} 
body> 
>This is header 1< /h1> 
 
/p>  
 
</style> 
 
</head> 
 
<
<h1
<h2> This is header 2< /h2>
<p>This is a paragraph<
</body> 
</html> 
2. Định khoảng cách gi ữa 
<html> 
<head> các ký tự 
-spacing: -3px} 
-spacing: 0.5cm} 
 
tscape 4 does 
tter-spacing" 
perty. 
/h1> 
his is header 4</h4>  
 
  
<style type="text/css"> 
h1 {letter
h4 {letter
</style> 
</h
 ead> 
<body> 
<p> 
<b>Note:</b> Ne
not support  the "le
pro
</p> 
 
<h1> This is header 1<
<h4> T
 
</body> 
</html> 
 
3. Căn l
html> ề đoạn văn bản 
t/css">  
 
 <
<head> 
 
<style type="tex
 81
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

h1 {text-align: center} 
h2 {text-ali gn: left} 
h3 {text-ali gn: 
</style> 
 
</head> right} 
 is header 1</h1> 
 is header 2</h2> 
<h3> This is header 3< /h3> 
 
</b 
<body> 
 
<h1> This
<h2> This
ody> 
</html> 
4. Trình bày kiểu chữ 
 
s"> 
 overline} 
: line-through} 
coration: underline} 
coration: none} 
2> 
3> 
w.w3schools.com">
a> 
</b
</h 
 
 
 <html>
<head> 
 
<style type="text/cs
: h1 {text- decoration
h2 {text-decoration
h3 {text- de
 {text-de a
</style> 
 
/head> <
 
<body> 
 
<h1> This is header 1< /h1> 
<h2> This is header 2< /h
<h3> This is header 3< /h
<p> 
<a 
href="htt p://ww
link</ This is a 
</p> 
 
ody> 
tml> 
5.  Trình bày đoạn văn bản 
ype="text/css">  
 
 
 <html> 
head> <
 
<style t
 82
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

p {text-indent: 1cm} 
tyle> 
ody> 
p> 
me text in a 
aragraph 
me text in a 
aragraph 
 a 
 
 
 in a 
h 
/body>  
</s
 
</head> 
 
<b
 
<
This is so
p
This is so
p
This is some text in
paragraph 
This is some text in a
paragraph 
This is some text in a
paragraph 
This is some text
paragrap
</p> 
 
<
</html> 
6 Định dạng các ký t ự trong văn bản 
<html> 
<he
ase {text-transform: 
e} 
-transform: 
apitalize {text-transform: 
"uppercase"> 
me text in a 
> 
 
  
 
 ad>  
 
<style type="text/css"> 
p.upperc
uppercas
p.lowercase {text
lowercase} 
p.c
capitalize} 
</style> 
</head> 
<body> 
<p class=
This is so
paragraph</p> 
<p class="lowercase"
This is some text in a
paragraph< /p> 
<p class="capitalize"> 
This is some text in a
paragraph< /p> 
 83
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</body> 
</html> 
 
III. Định dạng kiểu chữ 
. Thiết lập kiểu chữ 
<html> 
<head> 
 
<style type="text/css"> 
h3 {font-family: times} 
p {font-family: courier} 
p.sansserif {font-fam ily: sans-
serif} 
</style> 
 
</head
 
h3>This is header 3< /h3> 
is is a paragraph</p> 
raph</p> 
/html>  
 
 
 
 
 1
> 
<body> 
 
<
 
<p> 
Th
 
<p class="sansserif"> 
This is a parag
 
</body> 
<
 
 
2. Thiết lập cỡ chữ 
html> 
"> 
 
%} 
body> 
 is header 1</h1>  
 <
<head> 
 
<style type="text/css
h1 {f ont-si ze: 150%}
h2 {f ont-si ze: 130
p {font-size: 100%} 
</style> 
 
</head> 
<
 
<h1> This
 
 84
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<h2> This is header 2< /h2> 
<p>
 This is a paragraph</p> 
 </body>
</html> 
 
 
3. Thiết lập mẫu chữ 
tml> 
ext/css"> 
style: italic} 
style: norm al} 
tyle: oblique} 
1> 
raph</p>  
 
 <h
<head> 
 
tyle type="t <s
h1 {font-
h2 {f ont-
p {font-s
</style> 
 
</head> 
 
<body> 
 
<h1> This is header 1< /h
<h2> This is header 2</h2> 
p>This is a parag <
 
</body> 
</html> 
 
css"> 
al} 
 small-caps} 
pe 4 does not 
iant" 
s="normal"> 4. Sử dụng nhiều kiểu chữ trong cùng m ột đoạn văn bản 
<html> 
head> <
 
<style type="text/
al {font- variant: norm p.norm
p.small {fo nt-variant:
</style> 
 
</head> 
<body> 
 
<p> 
<b>Note:</b> Netsca
r support the "font-va
property.</p> 
 
 clas <p
 
 85
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

This is a paragraph</p> 
is is a paragraph</p> 
/body>  
<p class="small"> 
Th
 
<
</html> 
 
5. Thiết lập cỡ cho kiểu chữ đậm 
 
 
t: normal} 
eight: bold} 
weight: 900} 
ss="normal"> 
</p> 
ss="thick"> 
</p> 
ss="thicker"> 
his is a paragraph</p> 
</html>  
 
 
 <html> 
<head> 
 
<style type="text/css">
p.norm al {font- weigh
p.thick {font-w
p.thicker {f ont-
</style> 
 
</head> 
 
<body> 
 
<p cla
This is a paragraph
 
<p cla
This is a paragraph
 
<p cla
T
 
</body> 
 
 
hiết lập các thuộc tính của kiểu chữ trong một khai báo 
head> 
yle type="text/css"> 
-caps 900 12px arial 6. T
<html> 
<
 
<st
p 
{ 
font: italic small
} 
</style> 
 
 
 86
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</head> 
 
<body> 
 
<p>This is a paragraph</p> 
 
</body> 
</html> 
IV. Đường viền - Border 
1. Thiết lập kiểu mẫu của đường viền 
html> 
head> 
<st
{border-style: 
.dashed {border-style: 
} 
yle: 
le {border-style: 
.groove { border-style: 
border-style: 
dge} 
r-style: 
rder-style: 
/head> 
 
 
p class="dashed"> 
<p class="solid"> 
A s
 
<p class="double">  
 <
<
 
yle type="text/css">  
p.dotted 
dotted} 
p
dashed
p.solid {border-st
solid} 
p.doub
double} 
p
groove} 
p.ridge {
ri
p.inset {borde
inset} 
p.outset {bo
outset} 
</style> 
 
<
 
<body> 
<p class="dotted">
A dotted border</p>
 
<
A dashe d border</p> 
 
olid border</p> 
 87
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

A double border</p> 
s="groove"> 
/p> 
ge"> 
order</p> 
"inset"> 
er</p> 
utset"> 
> 
/html>  
<p clas
A groove border<
 
<p class="rid
A ridge b
 
<p class=
An inset bord
 
<p class="o
An outset border</p
 
</body> 
<
 
2. Thiết lập các 
<html> đường viền khác nhau trên các trang we b 
text/css"> 
ble {border-
d double} 
p.doublesol id {border-
style: doubl e solid} 
p.g
ove double} 
border-style: 
uble groove} 
> 
body> 
:</b> Netscape 4 
oes not support the 
er-style" property. 
rty 
ss="soliddouble"> 
ome text</p>  
 
 <head> 
 
<style type="
p.soliddou
style: soli
roove double {bor der-
style: gro
p.three {
solid do
</style> 
 
</head
 
<
<p> 
<b>Note
d
"bord
Use the "border" pr ope
to set the borders in 
Netscape.</p> 
 
<p cla
S
<br> 
 88
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<p class="doublesolid"> 
p 
ovedouble"> 
t</p> 
<br> 
 
<p class="three"> 
Some text</p> 
 
</body> 
</html> 
 Some text</p> 
<br> 
 
<
class="gro
Some tex
 
. Thiết lập màu cho đường viền 
<ht
<head> 
pe="text/css"> 
.one{ 
style: solid; 
00ff} 
lid; 
lor: #ff0000  
0000ff} 
order-style: solid; 
lor: #ff0000  
00ff00 #0000ff} 
r{ 
0  
e> 
</b
 "border-color" 3
ml> 
 
<style ty
p
border-
border-color: #00
p.two{ 
border-style: so
border-co
#
p.three{ 
b
border-co
#
p.fou
border-style: solid; 
border-color: #ff000
#00ff00 #0000ff  
rgb(250,0,255)} 
</styl
 
</head> 
<body> 
 
<p 
class="one"><b>Note:
> The
 89
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

property is not recognized 
ernet 
 alone. 
e" 
rders 
rnet Explorer.</p> 
"two">Some 
 
<p 
class="three"><b>Note:</
b> Netscape 4 does not 
support the "border-col or" 
property. U se the "bor der" 
property to set the borders 
and colors in 
Netscape.</p> 
 
<p class="four ">Some 
text</p> 
</body> 
</html> in Int
Explorer if it is used
Use the "border-styl
property to set the bo
first 
in Inte
 
<p class=
text</p> 
 
4. Thiết lập độ rộng cho đường viền phía dưới 
<html> 
<head> 
 
<style 
type="text/css"> 
p  
{ 
border-style: solid; 
border-bottom -width: 
15px 
} 
</style> 
 
</head> 
 
<body> 
 
<p>The "border-
bottom-width" 
property is not 
 90
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

rec
 if it is used 
e the 
border-style" 
</p> 
/html> ognized in Internet 
Explorer
alone. Us
"
property to set the 
borders first 
with Internet 
Explorer.
 
</body> 
<
 
5. Thiết lập độ rộng cho đường viền phía trên 
> 
r-style: solid; 
order-top-width: 
 
/head> 
p>The "border-top-
width" property is not  
 Internet 
perty to set <html> 
<head
 
<style 
type="text/css"> 
p { 
borde
b
15px}
</style> 
 
<
<body> 
 
<
recognized in
Explorer if it is used 
se the "border- alone. U
style" pro
the borders first 
in Internet 
</p> Explorer.
</body> 
</html> 
 
6. Thi
báo ết lập tất cả các thuộc tính của đường viền phía dưới trong một khai 
 91
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<html> 
<head> 
 
<style 
type="text/css"> 
 
bottom: 
000 
> 
/head> 
body> 
p><b>Note:</b> 
rt the "border-
" propert y. Use 
 
 with 
pe.</p> 
/body> p  
{
border-
medium  solid #ff0
} 
</style
 
<
 
<
 
<
Netscape 4 does not 
suppo
bottom
the "bor der-bottom -
width" property to set
the widt h of the 
bottom 
border
Netsca
 
<
</html> 
 
7. Thiết lập tất cả các thuộc tính của đường viền bên trái trong m ột khai 
báo 
pe="text/css"> 
000 
 
body> 
ape 4 does not <html> 
<head> 
<style 
ty
p  
{ 
border-left: m edium  
solid #ff 0
}
</style> 
</head> 
<
<p><b>Note:</b> 
Netsc
 92
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

support the "border-
dth" 
ty to set the 
of the left 
etscape.</p> left" property. Use the 
"border-left-wi
proper
width 
border in 
N
</body> 
</html> 
 
 
8. Thiết lập tất cả các thuộc tính của đường viền bên phải trong một khai 
o 
 
head> 
 
"text/css"> 
ht: medium 
ff0000 
/head> 
p><b>Note:</b> 
Netscape 4 does not 
support the "border-
right" property. Use 
the "border-right-
width" property to set 
the widt h of the right 
border in  
 
 
 
 
 
 
 
bá
<html> 
<
 
<style
type=
p  
{ 
border-rig
solid #
} 
</style> 
 
<
 
<body> 
 
<
 93
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Netscape.</p> 
 
</body>
/html>  
<
 
9. Thiết lập tất cả cá
báo c thuộc tính của đường viền phía trên trong m ột khai 
t/css"> 
>Note:</b> 
4 does not 
e "border-
roperty. Use the 
> <html> 
head> <
<style 
ype="tex t
p  
 {
border-top: m edium  
 #ff0000 solid
} 
</style> 
</head> 
> <body
<p><b
Netscape 
rt th suppo
op" p t
"border-top-width" 
rty to set the prope
width of the top bor der 
in Netscape.</p> 
 
</body> 
</html
 
10. Thiết lập độ rộng của các đường viền trong m ột khai bá o 
 94
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<html> 
<head> 
 
<style 
type="text/css"> 
p.one  
order- {b style: solid; 
yle: solid; 
h: 5px 
le: solid; 
h: 5px 
yle: solid; 
ernet 
"four"> border-widt h: 5px} 
two  p.
{border-st
rder-widtbo
10px} 
hree  p.t
{border-sty
rder-widtbo
10px 1px} 
our  p.f
{ 
rder-st bo
border-widt h: 5px 
px 1px medium 10
} 
</style> 
 
</head> 
 
<body> 
 
ss="one"> <p cla
The "borde r-width" 
property is not 
Int recognized in 
Explorer if it is used 
Use the alone. 
"border-style" 
e property to set th
borders first 
in Internet Explorer. 
</p> 
<p class="two"> 
Some text 
</p> 
<p class="three"> 
text Some 
</p> 
<p class=
 95
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Some text 
 </p> 
 
</body>
</html> 
 
11. Thiết lập các thuộc tính của đường viền trong m ột khai bá o 
dium  doubl e 
/head> <html> 
<head> 
 
<style type="text/css"> 
p  
{ 
border: m e
rgb(250,0,255) 
} 
</style> 
 
<
 
<body> 
 
<p>Some text</p> 
 
</body> 
</html> 
 
 
 
 
 
V. Căn lề đoạn văn bản 
n trái của đoạn văn 
 
in {margin-left: 
> 
s a 1. Thiết lập lề bê
<html>
<head> 
 
<style 
type="text/css"> 
p.marg
2cm} 
</style> 
 
</head> 
<body
 
<p>This i
 96
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

paragraph This is a 
aragraph 
 
h</p> 
 is a paragraph 
th a left margin 
h 
ody> p
This is a paragraph 
This is a
paragrap
 
<p class="margin"> 
This
wi
This is a paragrap
with a left margin</p> 
 
</b
</html> 
 
iết lập lề bên phải của đoạn văn 
html> 
style 
/head> 
> 
s is a 
 a paragraph 
his is a 
</p> 
p class="margin"> 
his is a paragraph 
ith a right margin 
his is a paragraph 
argin</p> 
/body> 
/html> 2. Th
<
<head> 
<
type="text/css"> 
p.margin { margin-
right: 5cm } 
</style> 
<
<body
<p>This is a 
paragraph Thi
paragraph 
This is
T
paragraph
 
<
T
w
T
with a right 
m
<
<
 
3. Thiết lập lề phía trên c ủa đoạn văn 
 97
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<html> 
xt/css"> 
 {margin-top:  
ragraph 
paragraph 
"margin"> 
aph 
<head> 
<style 
type="te
.margin p
5cm} 
</style> 
 
</head> 
ody> <b
 
<p> 
is is a pa Th
This is a paragraph 
is is a paragraph Th
This is a 
/p> <
 
<p class=
This is a paragraph 
with a top margin 
his is a paragr T
with a top margin 
/p> <
 
y> </bod
</html> 
 
 
 
 
 
 
 
 
 
 
4. Thiết lập lề phía dưới của đoạn văn 
 
 98
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<html> 
text/css"> 
margin-
d> 
 a paragraph 
 a paragraph 
aragraph 
<p class="margin"> 
This is a paragraph 
with a bottom margin 
This is a paragraph 
with a bottom margin 
</p> 
 
<p> 
This is a paragraph 
This is a paragraph 
This is a paragraph 
This is a paragraph 
</p> 
 
</body> 
</html> 
<head> 
 
<style 
type="
p.margin {
bottom: 80px} 
</style> 
 
</hea
 
<body> 
 
<p> 
This is a paragraph 
This is
This is
This is a p
</p> 
 
 
 99
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

5. Thiết lập các thuộc tính lề trong một khai báo 
html> 
style type="text/css"> 
 3cm  4cm } 
tyle> 
ody> 
p> 
paragraph 
/p> 
p class="margin"> 
with 
p> 
s a paragraph 
> <
<head> 
 
<
p.margin { margin: 2cm  
4cm
</s
 
</head> 
 
<b
 
<
This is a 
<
 
<
This is a paragraph 
marg ins 
</p> 
 
<
This i
</p> 
 
</body> 
</html
 
VI. Padding 
. Thiết lập paddi ng bên trái c ủa ô 
html> 
<head> 
<style type="text/css"> 
td {padding-left: 2cm} 
</style> 
</head> 
<body> 
 
<table 
border="1"><tr><td> 
This is a tablecell with a left 
padding 
</td></tr></table> 
  
 
 1
<
 100
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</body> 
</html> 
 
2. Thiết l
html> ập paddi ng bên ph ải của ô 
"> 
ight: 
er="1"> 
ecell with 
dding. This 
cell with a 
ing. <
<head> 
 
tyle <s
type="text/css
r td {padding-
m} 5c
</style> 
 
</head> 
 
ody> <b
 
ble bord <ta
<tr> 
<td> 
is is a tabl Th
a right pa
 a table is
right pa dd
</td> 
/tr> <
</table> 
 
</body> 
</html> 
 
3. Thiết lập paddi ng ph
html> ía trên của ô 
> 
p: 2cm}  
 
 
 <
<head> 
 
<style 
type="text/css"
g-to td {paddin
</style> 
 
</head> 
<body> 
 
<table border="1"> 
<tr> 
 101
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<td> 
This is a tablecell with 
 top padding 
/table> 
 a
</td> 
</tr> 
<
 
</body>
</html> 
 
4. Thiết lập paddi ng phía dưới của ô 
pe="text/css"> 
ng-bottom: 
cm} 
e> 
table border="1"> 
/td> 
</b 
 
 
 <html>  
<head> 
 
<style 
ty
td {paddi
2
</styl
 
</head> 
 
<body> 
 
<
<tr> 
<td> 
This is a tablecell 
with a bottom 
padding 
<
</tr> 
</table> 
 
 
ody> 
 </html>
 
 102
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

5.  Thiết lập các thuộc tính của paddi
<html> ng trong một khai báo 
e="text/css"> 
} 
ues {padding: 
0.5cm  2.
der="1"> 
tablecell with 
on each side 
<head> 
 
<style typ
td {paddi ng: 1.5cm
td.twoval
5cm} 
tyle> </s
 
</head> 
 
<body> 
 
<table bor
<tr> 
<td> 
This is a 
padding 
</td> 
</tr> 
</table> 
<br>
  
ing on each side. The top and bottom  paddi ng have 
hile the left and right paddi ng have anot her value <table border="1"> 
<tr> 
<td class="twovalues"> 
This is a tablecell with padd
the same value (0.5cm), w
(2.5) 
</td> 
</tr> 
</table> 
 
</body> 
</html> 
 
 103
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

VI.
ập danh sách không đánh số thứ tự 
/css"> 
c 
  
-type: circle 
type: square 
: none 
c"> 
a</li> 
 
> 
ass="square"> 
i> 
"none"> 
offee</li>  
 
 
 
 
  Danh sách – List 
1. Thiết l
<html> 
<head> 
<style type="text
ul.disc  
{ 
list-style-type: dis
} 
.circle ul
{ 
t-style lis
} 
e  ul.squar
{ 
list-style-
} 
l.none  u
{ 
list-style-type
} 
</style> 
</head> 
<body> 
<ul class=" dis
<li>Coffee</li> 
<li>Tea</li> 
li>Coca Col <
</ul>
<ul class=" circle"> 
<li>Coffee</li> 
<li>Tea</li> 
<li>Coca Cola</li
 </ul>
l <ul c
<li>Coffee</li> 
<li>Tea</li> 
<li>Coca Cola</l
</ul> 
<ul class=
<li>C
<li>Tea</li> 
<li>Coca Cola</li> 
</ul> 
</body> 
</html> 
 
 104
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

2. Thiết lập danh sách v ới chỉ số thứ tự 
<head> 
<st
al  
list-style-type: decimal} 
  
man} 
roman  
st-style-type: upper-roman} 
le-type: lower-alpha} 
ualpha  
-type: upper-alpha} 
/head> 
li> 
li>Coca Cola</li> 
<ol
<li
<li>Tea</li> 
 Cola</li> 
s="lalpha"> 
 
>Tea</li> 
oca Cola</li> 
l> 
a"> 
>Coffee</li> 
li> 
 Cola</li> 
l>  
 
 <html> 
yle type="text/css">  
ol.decim  
{
ol.lroman
{list-style-type: lower-ro
ol.u
{li
ol.lalpha  
{list-sty
ol.
{list-style
</style> 
<
<body> 
 
<ol class=" decimal"> 
<li>Coffee</li> 
<li>Tea</li> 
<li>Coca Cola</li> 
</ol> 
<ol class=" lroman"> 
<li>Coffee</li> 
<li>Tea</
<
</ol> 
 class="uroman"> 
>Coffee</li> 
<li>Coca
</ol> 
<ol clas
<li>Coffee</li>
<li
<li>C
</o
<ol class=" ualph
<li
<li>Tea</
<li>Coca
</o
 
</body> 
 
 105
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</html> 
 
3. Lấy ảnh là m đơn vị đánh dấu 
l> 
xt/css"> 
l  
: 
ow.gif"
> 
y> 
b> 
 not 
style-
</p> 
oca Cola</li> 
/ul> 
/html> <htm
<head> 
 
<style type="te
u
{ 
list-style-image
url("/images/arr
) 
} 
</style> 
 
</head
 
<bod
 
<p><b>Note:</
Netscape 4 does
support the "list-
image" property.
 
<ul> 
<li>Coffee</li> 
<li>Tea</li> 
<li>C
<
 
</body> 
<
 
 
 
 
 
 
 
 
 
 
 106
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

4. Đặt chỗ cho đơn vị đánh dấu 
e 
osition: outside <html> 
<head> 
 
<style type="text/css"> 
ul.inside  
{ 
list-style-position: insid
} 
 
ul.outside  
{ 
ist-style-p l
} 
</style> 
 
</head> 
<body> 
<
pp><b>Note:</b> Netscape 4 does not support the "list-style-position" 
ro
 list has a value of  "inside":</p> 
lass="inside"> 
lementary 
f bergamot oil. This com bination creates an ultra fine tea where 
ll purpose" tea m ade of freshly picke d, organic 
jasmine flowers. 
 delight that is naturally sweet and almost 
ported from  the Cape of G ood H ope has 
reminds us of those tangy tea blends currentl y 
uld be pointed out that this  is com pletely free of 
redients. perty.</p> 
 
<p>This
 
<ul c
<li> 
Earl Grey Tea - A fine black tea, ferm ented to perfection in a com p
b
plend o
recision and process gives birth to  this much-revered beverage.  
</li> 
<li> 
Jasmine Tea - A fabul ous "a
camellia sinensis (green tea) and 
</li> 
<li> 
Honeybush Tea - A super fruity
unbelievabl e! This m agnificent tea im
a smooth and fr uitful body that 
on the market. However it sho
flavoring a gents and other ing
</li> 
</ul> 
 
<p>This list has a value of  
"outside":< /p> 
<ul class=" outside"> 
 107
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<li> 
Earl Grey Tea - A fine black tea, fermented to perfection in a com plementary 
his combination creates an ultra fine tea where 
 to this much-revered beverage.  
 "all purpose" tea m ade of freshly picke d, organic 
 jasmine flowers. 
er fruity delight that is naturally sweet and almost 
ent tea imported from  the Cape of G ood H ope has 
ul body that reminds us of those tangy tea blends currentl y 
ould be pointed out that this  is com pletely free of 
 other ingredients. blend of bergam ot oil. T
precision a nd process gives birth
</li> 
<li> 
Jasmine Tea - A fabul ous
camellia sinensis (green tea) and
</li> 
<li> 
Honeybush Tea - A sup
unbelievabl e! This m agnific
a smooth and fr uitf
on the market. However it sh
flavoring a gents and
</li> 
</ul> 
</body> 
</html> 
 
 108
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

5. Thiết lập các thuộc tính trong m ột khai bá o 
 
<html> 
<li>Coca Cola</li> 
</ul> 
 
</body> 
</html> 
 
<head> 
 
<style type="text/css"> 
ul  
{ 
list-style: square inside 
url("/images/arrow.gif"
) 
} 
</style> 
 
</head> 
 
<body> 
 
<p><b>Note:</b> 
Netscape 4 does not 
display the images or 
position the list.</p> 
 
<ul> 
<li>Coffee</li> 
<li>Tea</li> 
 
 109
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

VIII. Dimension 
1. Thiết lập chiều rộng và chiều dài cho ảnh 
<html> 
<head> 
 
<style type="text/css"> 
img.norm al  
{ 
height: auto; 
width: a uto 
} 
img.big  
{ 
height: 80pax; 
width: 100px 
} 
img.small  
{ 
height: 30px; 
width: 50px 
<bo
 
<p>b
Nea
suppor
proper
"width
property does not w ork 
on images.</p> 
 
<img  class="normal"  
src="/imag es/back.gif" 
width= "72" 
height="40"> 
<br><br> 
<img class="bi g" 
src="/imag es/back.gif" 
width= "72" 
height="40"> 
br><br> 
img class="small"  
c="/images/back.gif" } 
</style> 
 
</head> 
dy> 
<>Note:</b> 
tscpe 4 does not 
t the "height" 
ty, and the 
" 
<
<
sr
 110
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

width= "72" 
height="40"> 
 
</body> 
</html> 
 
2. Tăng khoảng cách gi ữa các dòng 
<html> 
<head> 
 
<style type="text/css"> 
p.increase {line-height: 1cm} 
</style> This is a paragraph This is a 
paragraph This is a paragraph This is 
a paragraph This is a paragraph This 
is a paragraph This  is a paragraph  
 
</head> 
 
<body> 
 This is a paragraph This is a 
paragraph This is a paragraph This is 
a paragraph This is a paragraph This 
<p> 
This is a paragraph This is a paragraph 
This is a paragraph This is a paragraph 
This is a paragraph This is a paragraph 
This is a paragraph 
</p> is a paragraph This  is a paragraph 
 
 
<p class="increase"> 
This is a paragraph This is a paragraph 
This is a paragraph This is a paragraph 
This is a paragraph This is a paragraph 
This is a paragraph</ p> 
 
</body> 
</html> 
 
IX. Classification – Phân lo ại 
1. Ẩn hoặc hiển thị đoạn văn bản 
 
<div>The div section is invisible</div>  no distance between the two 
paragraphs.  <html> 
<head> 
<style type="text/css"> 
div { display: none} 
p {display: inline} 
</style> 
</head> 
<body>  
 
 
 
 
 
With the value of  "inline" there 
should be  
 111
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<p>With the value of  "inline" there  
should be</p> 
<p>no distance betwe en the tw o 
paragraphs.</p> 
 
</body> 
</html> 
 
2. Thiết lập ảnh xuất hiện trong một đoạn văn bản 
<
 
  
float to the left in the
paragraph.  
</p> <html> 
<head>  
 
 
<style type="text/css"> 
img  
{ 
float: left  
 
 
 
} 
</style> 
 
</head> 
 
body> 
<p> 
<img 
src="/im ages/bookasp20. gif
"  
width= "120" height="151" 
/>With the  
value of "left" the image 
will
  
 
</body> 
</html> 
 112
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

3. Vị trí tương đối của đoạn văn bản so với vị trí bình th ường 
<html> 
<head> 
type="text/css"> 
position:relative; 
</style> 
 
 
="ex2">Headi
</p>  
<style 
h1.ex1 
{ 
left:20 
} 
h1.ex2 
{ 
position:relative; 
left:-20 
} 
</head> 
<body> 
<h1> Norm al 
Heading</ h1>
<h1 
class="ex1">Headi
ng +20</h1> 
<h1 
class
ng -20</h1> 
 
<p> 
Relative positioning 
moves an element 
relative to its 
original position. 
</p> 
<p> 
"left:20" adds 20 
pixels to the 
element's L EFT 
position. 
<p> 
"left:-20" s ubtracts 
20 pixels from  the 
element's L EFT 
position. 
 113
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</p> 
</body> 
</html> 
 
4. Vị trí tương đối của dòng tiêu đề  
<html> 
 
<head> 
<style type="text/css"> 
h1 
{ 
position:relative; 
 
left:40 
} 
</style> 
</head> 
 
<body> 
<h1> Headi ng A</h1> 
<p>This is a paragraph.</p> 
<h1> Headi ng B</h1> 
<p>This is a paragraph.</p> 
<h1> Headi ng C</h1> 
<p>This is a paragraph.</p> 
<h1> Headi ng D</h1> 
<p>This is a paragraph.</p> 
</body>  
</html> 
5. Vị trí tuyệt đối của đoạn văn bản 
 
<html> 
<head> 
<style 
type="text/css"
> 
h1.x 
{ 
position:absolut
e; 
left:100; 
top:150 
} 
</style> 
</head> 
 114
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<body> 
<h1 
placed 
page. 
heading is 100 
pixels from  the 
left of the page. 
The TO P 
osition is 150 
p of the page. 
</p> 
 
</body> 
</html> 
  
class="x">This 
is a 
heading</h1> 
 
<p> 
With absolute 
positioning, an 
element can be 
anywhere on a 
</p> 
 
<p> 
The LEFT 
position of the 
p
pixels from  the 
to
 
6. Không hiển thị một đoạn văn bản 
<html> 
<head> 
<style type="text/css"> 
h1.one 
{ 
visibility:visible 
} 
h1.two 
{ 
visibility:hidden 
} 
</style> 
 115
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</head> 
<body> 
 
<p><b>Note:</b> 
Netscape 4 does not 
support the "visibility" 
property.</p> 
 
<h1 
class="one">Heading 
one</h1> 
<h1 
class="two">Heading 
two</h1> 
 
<p>Where is heading 
two?</p> 
 
</body> 
</html> 
 
7. Thayổi con trỏ 
<html> 
<body> 
 
<p> 
<b>Note:</b> Netscape 4 does not support the "cursor" property. 
</p>  
 
<p>Move the mouse over the words to see the cursor 
 
<span style="cursor:auto"> 
Auto</span><br /> 
<span style="cursor:crosshair"> 
Crosshair</span><br / > 
<span style="cursor:de fault"> 
Default</span><br />  
<span style="cursor:pointer"> 
Pointer</span><br /> 
<span style="cursor:m ove"> 
Move</span><br /> 
<span style="cursor:e-resize"> 
e-resize</span><br /> 
<span style="cursor:ne -resize"> 
ne-resize</span><br / > 
<span style="cursor:nw-resize">  đ
change.</p>  
 116
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

nw-resize</span><br /> 
<span style="cursor:n- resize"> 
n-resize</span><br />  
<span style="cursor:se-resize"> 
se-resize</span><br /> 
<span style="cursor:sw-resize"> 
sw-resize</span><br /> 
<span style="cursor:s-resize"> 
s-resize</span><br /> 
<span style="cursor:w -resize"> 
w-resize</span><br />  
<span style="cursor:text"> 
text</span><br /> 
<span style="cursor:w ait"> 
wait</span><br /> 
<span style="cursor:he lp"> 
help</span> 
</body> 
</html> 
 
 117
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Ch
cho v
 
6.1- Đ
6.1
- Sơ lư
ợ cho bản tin của bạn và mời người xem 
ảnh thích h ợp, bản tin của bạn có thể 
ờ được đọc, người xem có th ể lướt qua site c ủa bạn và di chuy ển 
đến site kế tiếp. Việc tìm diệ ấn đề của việc lập kế hoạch 
ột cách sáng t ạo. 
Việ
là thiế  hút người xem. M ọi người thực hiện các quy ết định một 
các
của ng te của bạn để gợi ra các cảm 
xúc
nhất. 
Màu s
g màu    
         Sắc độ 
          
ơ bản 
em 
cảm thấy sự hứng thú được tạo ra bởi các m àu trong hình ảnh cũng như bởi chủ 
đề của hình ảnh. ương 6 Sử dụng phần mềm Photoshop,  Coreldr aw áp dụng 
iệc chỉnh sửa, xuất ảnh cho Web  
ồ hoạ trên W eb 
.1Giới thiệu đồ hoạ trên web 
ợc về đồ hoạ: Thiết kế diện mạo cho Website c ủa bạn là một công việc 
hấp dẫn. Hình ảnh trực tuyến sẽ hỗ tr
hận bản tin đó. Nếu không có hình n
không bao gi
n mạo của bạn là một v
m
c trình bày thông t in với diện mạo và ấn tượng bổ xung vào b ản tin của bạn 
t yếu để thu
h có ý thức và vô t hức dựa vào các c ảm xúc của họ. Một trong các công vi ệc 
ười thiết kế là tạo ra một hình ảnh cho websi
 thích hợp đối với người xem để truyền đạt bản tin của bạn một cách hay 
ắc: Màu sắc là một trong nh ững khía c ạnh thiết kế thú vị nhất đối với 
Web. Tr ong chế bản truyền thống, màu th ường được sử dụng cho các ấn phẩm 
có giá trị cao nhờ các phương pháp th ủ công. N hưng trên web, vi ệc bổ xung 
màu tương đối dễ dàng nga y cả đối với những người mới bắt đầu thiết kế web. 
Bằng một vài thao tác, b ạn có thể sử dụng các ứng dụng đồ hoạ và các bức ảnh 
chụp đầy màu sắc làm hiệu quả hơn cho trang web c ủa bạn.  
     Vòn
 
 
          
           Hình 6.1: Vòng màu c
 
Việc sử dụng m àu sắc một cách hữu hiệu phụ thuộc vào sự hiểu biết và tuân 
theo một số quy tắc đơn giản về cách mà m ắt bạn cảm nhận màu và cách m àu 
tác động đến bạn. Chúng ta thường gọi các màu là “ nóng” và “l ạnh”  
Các m àu Nóng: Mà u đỏ, màu cam, và màu vàng là màu nóng. Các màu nóng 
có vẻ di chuyển ra phí a trước trong m ột hình ảnh, và chúng chuy ển tải một ý 
nghĩa về năng lượng. Các m àu này kíc h thích người xem  và làm  cho người x
 118
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Các màu l ạnh: màu tím, màu xanh dương, m àu xanh lục là màu l ạnh. Các m àu 
lạnh có vẻ lùi xa dần về phía nền và gợi lên một cảm giác căng thẳng được xoa 
dịu dần. 
Màn hì nh m áy tính thể hiện mọi màu sắc bằng chế độ màu RGB 
Red 
        Green 
        Blue 
  
Số lượng mỗi màu sử dụng dựa trên giá tr ị giữa 0 và 255. 
Nếu R= 255   G=255   B=255 = M àu trắng 
Nếu R= 0   G=0   B=0 = Màu đen 
Người ta còn định nghĩa màu b ằng các  giá trị số thập lục phâ n He x – 
Hexadecimal, là giá tr ị của gồm 6 con  số để mô tả 1 màu. Có giá trị từ 00 đến 
F F
Ví dụ:     000000 = M àu đen 
               F FFFFF = Màu tr ắng 
Là một người thiết kế, bạn sẽ cần chọn các sắc độ nào của màu để sử dụng chủ 
ếu dựa vào các c ảm nhận của bạn. Hã y để cho mắt bạn đánh giá sự phối màu 
 tải bản tin 
ủa bạn theo một cách dễ hiểu và Logic. Để làm được như vậy, bạn cần phải 
ể sử dụng cảm giác “ không cân đối” để tập chung s ự chú ý, ng ười 
xem sẽ nhìn và o thành ph ần này một cách cẩn thận, cố cảm nhận về nó y
của bạn. 
Bố cục: dù bạn đang thiết kế một bản tin nội bộ, một mục quảng cáo, ha y một 
trang web, b ạn cần quyết định cách sắp xếp đồ hoạ và text để chuyển
c
nắm được một số nguyên tắc về bố cục.  
- Có nhiều kiểu bố cục (cân đối, đăng đối, đối xứng, …) nh ưng bố cục 
nào cũng phải đem đến 1 sự cân bằng, chặt chẽ 
- Bố cục phải có chính có ph ụ. 
- Có thể phá cách nh ưng phải không th ể phá vỡ các quy chu ẩn chung. B ạn 
có th
và tìm ra m ột cách để hợp nhất nó và o toà n bộ cảm nhận về sự cân đối. 
 
                  
 
         
Hình 6. 2: Các kiểu bố cục 
 
 
 119
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

6.1.2-Đồ hoạ trên We b khác gì? 
 Luôn bị giới hạn trong bố cục màn hình nga ng (thông -  thường là 600 x 800 
 đặc trưng của Web, đó là phải có thanh menu ch ứa các 
Giao diện của site phải được thống 
hất về mặt hình ảnh và phải mang cùng m ột phong c ách trình bày. Nh ư vậy 
 mãn  đối với nhiều người khi bạn bấm nút liên kết đến một trang 
eb có màu sắc cũng như cách trình bày hoà n toàn khác, t ạo cho ta c ảm giác là 
ất trên 20s để tải qua một modem  56k,  
ạn. Vì vậy trong trang we b không nê n đặt quá nhiều ảnh ha y 
nh quá lớn 
động đến 
bsite của bạn. Nhưng nếu bạn quá lạm dụng nó sẽ làm rối loạn, giảm đi 
tính thẩm mỹ cũng như hạn chế tốc độ truy cập của trang. 
 
6.2- Xử lý đồ họa trên Web: 
Bạn đã hiểu một số điểm căn bản về đồ hoạ, bạn có thể thắc  mắc làm thế nào 
c Thiết k ạn cần phần mềm nào? Chương 
để tạo các ảnh chuyên nghiệp cho website c ủa 
ẽ giới 
ụng nhất đó là: Phot oshop 
.2.1.1- Cơ sở về Phot oshoppixels) và  không bao quát được toàn bộ trang như trong in ấn.  
- Mang m ột phong cách
liên kết với toàn bộ các trang trong h ệ thống Website c ủa bạn, có phần đầu 
trang ( header) và ph ần chân trang ( Footer). 
n
mới đảm bảo được tính nhất quán trong s uốt site của bạn. Mắt bạn sẽ bị thu hút 
và nhì n thấy một loạt các hình ảnh dưới dạng một mẫu đồng nhất, và rất là 
không tho ả
w
bị lạc vào một site khác ch ứ không ph ải là website mà b ạn đang truy c ập. 
- Giới hạn trong công ngh ệ: Trở ngại lớn nhất làm mất hứng người xem là một 
Website t ải quá c hậm. Nếu một ảnh m
bạn có thể chắc chắn rằng phần lớn người xem đều trở nên mất kiên nhẫn và rời 
khỏi website c ủa b
ả
- Một lợi thế của đồ hoạ web là việc sử dụng các hình ảnh động. Web đang 
không ng ừng phát tri ển thành m ột đa phương tiện truyền thông tinh vi, n ếu 
ược sử dụng một cách hữu hiệu, các hình ảnh động sẽ mang sự sống đ
cho we
đ  chuyên sâu vào vi ệ
trình tạo ảnh nà o được xử dụng ể  thật sự ế web. B
ban?. Có nhiều công cụ có sẵn để tạo và xử lý đồ hoạ trên Web nh ư: Flash, Gif 
Animation, Corel, Inlustrator ….Nh ưng trong ch ương này chúng tôi s
thiệu với các bạn 2 chương trình x ử lý đồ hoạ thông d
6.0 và corel Draw 10. 
 
6.2.1- Phần mềm xử lý đồ hoạ  phot oshop 
 
6  
Adobe photoshop là s n lớn những người 
ết kế đồ hoạ chu eb. Photoshop c ó 
ạn quét một bức ảnh chụp hay tinh ản phẩm được chọn sử dụng bởi phầ
yên nghiệp nhất đang xử lý các ảnh w thi
nhiều công cụ và tiện ích xử lý ảnh. K hi b
chỉnh lại nó, tạo một ảnh của một bức vẽ, hay các nút, các thanh, các n ền 
chuẩn, Photoshop c ó thể thực hiện được điều đó. Nó cũng có khả năng xử lý và 
chuyển đổi phần lớn các dạng fi le ảnh sang file gif và jpg. P hotoshop s ẽ cho 
phép bạn xử lý hầu hết tất cả các dạng ảnh mà bạn gặp phải. 
 120
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Ý nghĩa các định dạng của tệp tin: (Nh ững định dạng thông d ụng) 
u nén không ph ải hi sinh - Psd: Là định dạng chu ẩn của  Photos hop 
- GIF (Graphic Interchange Format): Gif s ử dụng kiể
dữ liệu gốc. Chỉ rút gọn trung bình 1/ 3 tập tin cũ. Gif giới hạn trong 256 màu.  
- JPEG  (Joint Photographic Expert  Group): D ùng để nén các hình ảnh suất cho 
Web. Do c hế độ JPEG cho phé p ảnh lên tới 16 triệu mầu nên các hình ảnh có 
chất lượng hình ảnh và mầu cao 
- PNG: Là định dạng tệp tin để nén các hình ảnh sẽ được xuất cho Web.  
- TIFF: Các t ệp tin dạng TIFF là các t ệp tin có c hất lượng cao được dùng để 
định dạng cho ảnh đầu vào và dùng trong in ấn (dùng cho máy PC và MAC) 
- BMP: Là định dạng dùng cho các file ảnh, c ó thể dùng rộng rãi cho các  
chương trình ch ạy trong Window.  
Các chế độ màu của Ph otoshop: 
- Chế độ màu RGB:  
 Màn hì nh m áy tính thể hiện mọi màu sắc bằng chế độ màu RGB.  
   Red     
    Green     
    Blue 
Số lượng mỗi màu sử dụng dựa trên giá tr ị giữa 0 và 255. 
ếu R=N 255   G =255   B =255 =  Màu tr ắng 
Nếu R= 0   G=0   B=0 = Màu đen 
Người ta còn định nghĩa màu b ằng các  giá trị số thập lục phâ n He x – 
Hexadecimal, là giá tr ị của gồm 6 con  số để mô tả 1 màu. Có giá trị từ 00 đến 
FF 
Ví d ụ: 000000 = Màu đen 
           FFFFFF = Màu tr ắng 
- Chế độ màu CM YK:  
Là chế độ màu  gồm 04 màu: C= Cyan; M= Magenta; Y= Yellow; K= Black. Là 
chế độ màu  chuẩn dùng để in các ấn phẩm.  
Chế độ mầu Index: 
ụng một bảng mầu có 256 m ầu, khi  hình ảnh có 
guyên chất lượng của hình ảnh khi nhìn trên m àn hình.  - 
Là chế độ mầu chỉ định, sử d
mầu nằm ngoài bảng mầu chỉ định, chế độ Inde x color sẽ tự thay thế mầu đó 
bằng một mầu tương tự trong bảng mầu. Bằng cách gi ới hạn mầu trong m ột 
bảng mầu, mầu chỉ định có thể giảm bớt kích cỡ của tệp tin trong khi v ẫn giữ 
n
 121
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

6.2.1.1- Làm  việc với Photos hop: 
Tạo 1 File m ới: 
Thực hiện một trong các cách s au: 
Ctrl+N) 
ể xác định kích cỡ và độ phân giải của tệp mới dựa trên kích c ỡ và độ phân 
Để xác định kích cỡ của tiệ ở trên màn hình, ch ọn 
ile > New. Với hộp thoại Ne p đang mở trong t hực đơn 
ưa thông số vào c ác ô sau:  
ame: đặt tên tiệp  
ser chất lựng cao: 200 dpi 
or: Chế độ hiển thị mặc định và l à mô hình màu tiêu chu ẩn để hiển thị 
 hình Video 
iết bị, dùng để truyền các tệp giữa các hệ 
ackground Color: Tài liệu mới tạo sử dụng màu phông n ền hiện thời 
ền trong su ốt không có các giá 
ị màu. Để xác định kích cỡ và độ phân giải của tệp mới dựa trên kích c ỡ và độ phân 
giải của nội dung đang chứa trong Clipboar d, chọn File > New. (
Đ
giải của lần thiết lập gần nhất, giữ Alt/option và ch ọn File > New.  
p dựa trên một tiệp đang m
w đang mở, chọn tên Tệ F
Window. 
Đ
N
lmage Size: kích th ước tiệp 
width ( rộng): 
Height ( cao):  
Resolution ( độ phân giải):  
Để hiển thị trên màn hình: 72 dpi (pixel/inch ) cho máy Mac và 96 dpi cho máy 
PC 
Để in thử la
Để in ốp sét: 300 dpi  
Mode ( chế độ màu) :  
Bitmap: Ảnh chỉ có hai  giá trị, đen hoặc trắng  
Grayscale: nh c ó 256 mức xám khác nhau 
GB colR
các màu c ủa màn
CMYK col or: dùng để biên tập các hình ảnh để xuất ra cho in ấn 
Lab col or: Kiểu màu độc lập với th
thống m àu khác nhau 
Contents: Phông n ền tập tài liệu  
White: phông n ền màu trắng 
B
Transparent: Tài li ệu mới tạo sẽ có lớp phông n
tr
 122
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 3: Cửa sổ New của menu File 
Chọn m ột trong ba tr ường h ợp sau: 
File > save: để lưu Công vi i đã thực hiện các thay  đổi với 
các định 
File > Save  as: lưu tệ
khác nhau c ủa một tệ
đóng lại và  tệp 
File > Save a C o
Lưu ý: cách l ưu tệp n
theo các kênh alpha c
 Canvas  (không gi an
Canvas l à ô rộng mà
cũng có th ể tro
ửa sổ và rê chuột. Cửa 
hước của Canvas k hông thay đổi. .. 
hi bạn tạo lệp mới, kích thước của ảnh chính l à kích thước của canv as. Sau 
đó, nếu muốn điều chỉnh canvas, vào l mage > Canvas Size:  điền các gi an trị 
mới vào ô Width và Height ; Anchor cho phép b ạ xác định vị trí của vùng  
an sẽ được m Lưu fĩle . 
ệc của bạn sau k h
dạng hi ện th ời (Ctrl+S) 
p với tên mới. Cách này cho phép b ạn lạo ra c ác phiên bn 
p, lưu vào đĩa cứng khác ho ặc lưu dự trữ tệp gốc sẽ được 
vừa lưu được mở trên màn hình. (Shift+Ctrl+S) 
py: lưu tệp với tên mới và vẫn để mở tệp gốc.  
ày sẽ cho phép b ạn làm phẳng ảnh và lưu tệp không kèm 
ủa tập đó. 
 làm việc) và cửa sổ đang được kích hoạt 
u trắng trong c ửa sổ, nơi bạn tạo và biê n tập ảnh. Canv as 
ng suốt hoặc mang màu c ủa phông n ền. . 
ạn hãy để con trỏ chuột vào góc d ưới, bên phải của c B
sổ sẽ mở rộng, nhưng lưu ý rằng kích t
K
n
ở rộng. không gi
Bạn có thể in ở nhiều cửa sổ cùng một lúc trong Phot oshop nhưng chỉ có một 
cửa sổ được kích hoạt (cửa sổ làm việc). 
 
 123
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Thanh trạng thái nằm ở phía dưới màn hình .  
Thanh trạng thái có các thông tin sau: 
 Document Size: S ố bên trái là kí ch cỡ tài liệu không c hứa các lớp. Bạn có thể 
coi số này là kích c ỡ tệp tin khi ảnh đã được làm phẳng, hoặc khi tài li ệu đã 
ược xuất cho máy in. S ố bên phải cho bi đ ết tệp tin khi ch ứa tất cả các lớp, các  
u với 1 tập tin 
ưới bảng này. kênh Alpha và d ữ liệu (Số này ban đầu bằng 0 khi bat b ắt đầ
trống không) . Số đó thường lớn hơn dung lượng không gi an thực sự được sử 
dụng trên đĩa cứng, bởi vì  Photos hop có th ể nén t hông tin k hi lưu trên đĩa. 
ý nghĩa các định dạng của tệp tin: (Những định dạng thông d ụng) 
Số % của tệp tin đang được hiển thị. 
 Bảng quản lý Navigat or 
Mở bảng điều khiển bằng cách vào Window>  Show Navi gator. Bảng này hiển 
thị ảnh dưới dạng thu nhỏ. Bạn cod t hể phóng to hay thu nh ỏ ảnh bằng cách 
nhập giá trị vao ô % hay kích chu ột vào mũi tên phí a d
 
Hình 6.4: b ảng điềển Navi gator u khi
 
 Giới thiệu bảng công cụ 
 
 hật  
3. C ông cụ chọn 1px theo chi ều 
ngang 
hiều dọc 1.Công cụ chọn hình chữ n
2. Công cụ chọn hình elip  
4. Công cụ chọn 1px theo c
 3. Công cụ chọn sợi dây từ tính 1.Công cụ chọn sợi dây tự do  
2. Công cụ chọn sợi dây thẳng 
 124
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

ật  
eo chiều 
ngang 
4. Công cụ chọn 1px theo chi ều dọc 1.Công cụ chọn hình chữ nh
2. Công cụ chọn hình elip  
3. C ông cụ chọn 1px th
 1.Công cụ chọn sợi dây tự d
2. Công cụ chọn sợi dây thẳ
3. Công cụ chọn sợi dây to  
ng 
ừ tính 
 Công cụ dịch chuyển 
 Công cụ cây đũa thần (Magic Wand)  
cho phé p chọn vùng có m àu tô tư-
ơng tự 
 Công cụ cắt ảnh 
 Công cụ Slice 
 1.Công c ụ bút  lông 
2.Công cụ but chì  
 Công cụ phuc hồi ảnh như ban đầu 
 1.Công cụ con dấu  
2 Công cụ con dấu mẫu 
 
 2.Công c ụ tẩy dùng màu 
làm màu  tẩy 
3.Công cụ tẩy những vùng1.Công cụ tẩy  
nền dưới 
 hình ảnh 
có thuộc tính tương tự nhau  
 1. Công cụ tô chuyển màu 
2. Công cụ tô màu  
 
 2. Công cụ làm nét 
3. Công cụ di mầu 1.Công c ụ làm nhoè
 125
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

1. C ông cụ làm sá
 ng ảnh 
2. Công c ụ tối ảnh 
3. Công cụ bão hoà m ầu  
 
 Công cụ tạo đường dẫn 
 
 Công cụ chọn các hì nh vector 
 
 
 1. Tạo text theo chi ều ngang  
2. Tạo text theo chi ều dọc  
3. Tạo text thanh vùng ch ọn 
theo chiều nga ng 
4. Tạo text thành vùng ch ọn 
theo chiều dọc 
 
 Các công c ụ tạo hình 
   
 1.Công cụ chọn màu 
 Chọn nhiều màu 
3. Thước đo 
 2.
  Công cụ bàn tay ké o 
 
  Công cụ phóng to, thu nh ỏ. 
Hình 6. 5: Thanh công c ụ 
 
6.2.1.2-Giới thiệu các công c ụ chọn: 
 
Trong phot oshop,  bạn có thể tạo các vùng ch ọn dựa theo kích c ỡ, hình dạng, 
àu sắc… bằng 4 công c ụ chọn m cơ bản: Mar quee, Lasso, Magic Wand và Pe n. 
 Marquee và Lasso có ch ứa các công c ụ ẩn ở phía  
Các vùng ch ọn the o hình dạng cố định:  Trên hộp công cụ, bộ công cụ
dưới. Có thể chọn công cụ ẩn bằng cách gi ữ nút chuột trên biểu tượng công c ụ 
đang thể hiện của nhóm và ch ọn công cụ mà bạn muốn từ menu vừa xuất hiện. 
Để tạo một vùng ch ọn, bạn dùng công c ụ chọn, kéo xung quanh vùng mu ốn 
chọn. Hình th ể của vùng ch ọn còn tỳ tuộc vào công c ụ chọn được dùng để tạo 
vùng chọn. 
 126
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 6: Rectangular Marquee Tool 
 
- Sử dụng công c ụ Rectangular Marquee Tool (M) để chọn một vùng ch ữ 
nhật trong ảnh (Giữ Shift trong khi kéo s ẽ tạo được hình vuông).  
- Sử dụng công cụ Elliptical Marquee Tool để chọn một vùng hì nh el lipse 
(Giữ Shift trong khi kéo s ẽ tạo được hình tròn).  
- Sử dụng công c ụ Single Row  Marquee Tool ho ặc Single Column 
Marquee Tool để chọn 1 vùng là 1 dòng có chi ều cao là 1 pixe l hoặc 
một cột có chiều rộng 1 Pixel. 
Các vùng ch ọn có hình d ạng tự do: 
 
 
Hình 6. 7: Lasso Tool 
 
- Sử dụng công cụ Lasso Tool kéo trên ảnh để tạo một vùng c họn có hình 
ụ Magnetic Las so sẽ tạo ra vùng ch ọn có biên ch ọn được hút vào 
ông cụ Lasso có th ể dùng để tạo các vùng ch ọn với biên chọn gồm những 
ẽ các đoạn thẳng. Nhấn giữ phím Alt trong 
hím Alt, bạn có thể nhấn phím Delete ho ặc Backspace để 
ng chọn dựa theo màu s ắc: 
 dạng tự do. 
- Công cụ Polygonal Laso Tool để tạo vùng ch ọn có bi ên là một đa giác 
(biên chọn là các đoạn thẳng nối vào nha u) 
- Công c
biên của các chi ti ết trong ảnh. Bạn có thể chủ động định hướng cho 
biên c họn bằng cách b ấm chuột để xác định điểm định hướng, điểm ép  
buộc. 
C
đoạn ngoằn ngèo nh ư vẽ tay xen k
khi vẽ bằng ccông c ụ Lasso, con tr ỏ sẽ tạm thời chuyển thành con tr ỏ của công 
cụ Polygonal Lasso. Chú ý không th ả chuột, bạn bấm ch uột tại điểm  khác. 
Trong khi v ẫn giữ nút chuột, thả phím  Alt, con trỏ sẽ trở lại thành con tr ỏ 
Lasso. 
Trong quá trình ch ọn nếu bị lỗi, bạn sẽ dễ dàng bỏ chọn và chọn lại đoạn lỗi 
trong khi v ẫn giữ p
huỷ bỏ các điểm neo này r ồi bấm chọn lại. 
 
Các vù
 
Hình 6. 8: Magic Wand 
 
 127
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Công cụ Magic Wand ch ọn các phần ảnh dựa theo mức độ màu  gần giống nhau 
của các pixel n ằm sát nha u. Công cụ này rất có ích khi ph ải chọn vùng ch ọn có 
hình dáng ph ức tạp mà bạn không t hể tạo được bằng công c ụ Lasso. 
Thanh tuỳ chọn của công cụ Magic Wand c hứa các tuỳ chọn, bạn có thể thay  
ổi chúng để điều khiển cách làm vi ệc của công cụ. Tuỳ chọn Tolerance s ẽ xác 
ợc chọn khi bạn bấm vào 1 điểm ở trên 
nh. Giá tr ị này nằm trong kho ảng từ 0 tới 255. Giá tr ị mặc định là 32, điều này 
có nghĩa là sẽ có 32 tông m àu sáng hơn và 32 tông m àu tối hơn được chọn. 
Chú ý: K hi dùng một tro o, Marquee, cũng có thể 
hấn giữ phím Shift để nối thêm  vào vùng ch ọn hiện hành. Để loại bỏ bớt vùn g 
à kéo vùng bạn muốn loại bớt. 
Định lại vị trí đường biên ch ọn khi đang tạo nó: Nếu hình thể vùng chọn chưa 
phù hợp với hình Oval  và nếu đã thả nút chuột thì bạn phải vẽ lại vùng ch ọn. 
trong khi v ẫn giữ nút chuột, nhấn giữ phím  Spacebar trên bàn phím  và kéo 
chuột. Biên ch ọn sẽ di chuyển khi bạn kéo. Cẩn thận thả nút Spacebar nh ưng 
không thả nút c huột và tiếp tục vẽ, có gắng làm  cho kí ch cỡ và hì nh dá ng của 
biên chọn phù hợp với hình mu ốn chọn. 
 
i chuyển phần ảnh đư ang được chọn. Chọn 
ao chép vùng chọn nếạn kéo nó tới vị trí khác. 
 
hay đổi kích thước vùng ch ột hộp 
n. Khung bao c ó 8 điểm vuông nh ỏ ở các 
ong khi côg cụ chọn đang được chọn, di 
ấn giữ phím  Ctrl làm  con trỏ chuyển 
ỏ của công cụ Move. Trong khi v ẫn giữ Ctrl, kéo vùng ch ọn đến vị 
trí mới. 
Bạn có t hể di chuyển vị trí vùng ch ọn bằng cách s ử dụng các mũi tên trên bàn 
phím . Mỗi lần nhấn phím sẽ làm di chuy ển từng bước 1 hoặc 10 pixels n ếu như 
bạn giữ phím Shift. đ
định số lượng tông m àu xấp xỉ nhau đư
ả
ng các công cụ chọn như Lass
n
chọn, bạn nhấn giữ phím Alt v
 
Để bỏ chọn vùng ch ọn đang hiện hành: C họn menu Edit/ Deselect ( Ctl+D) 
hoặc bấm ra vùng khác phía ngoài biên ch ọn trong của sổ ảnh để bỏ chọn. 
 
D ợc chọn: Khi vùng ch ọn vẫn đ
công cụ Move từ hộp công cụ, con trỏ sẽ chuyển thành hình m ũi tên và cái kéo, 
thông báo r ằng nếu bạn kéo c huột, bạn sẽ cắt vùng ch ọn và di c huyển nó từ vị 
trí hiện hành sang v ị trí mới. 
 
Di chuyển và sao ché p cùng một lúc: Dùng công c ụ Move, đặt con trỏ vào bên 
trong vùng ch ọn và nhấn giữ phím Alt. Con tr ỏ sẽ chuyển thà nh hình hai m ũi 
tên, thông báo s ẽ s u b
ọn: Chọn menu Edit/ Transform/ Scale. M T
bao sẽ xuất hiện xung quanh vùng ch ọ
cạnh và góc c ủa khung bao ( Ha ndle) và m ột điểm tâm ở giữa. Nhấn Shift và 
kéo handle ở góc để tăng kích t hước. Chú ý vi ệc giữ Shift sẽ bảo toà n tỷ lệ của 
vùng chọn, làm cho nó không b ị méo . Nhấn Enter để hoàn tất việc tăng kíc h 
thước. 
 
Di chuyển vùng ch ọn bằng phím t ắt: Tr
huyển co trỏ vào bên trong vùng ch ọn, nh c
thành con tr
 
 128
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Biến đổi vùng ch ọn: Bạn sẽ thực hiện việc quay vùng ch ọn bằng cách ch ọn 
Edit/ Transform/ Rotate (Ctrl + T). M ột khung bao xu ất hiện xung quanh đối 
tượng và c on trỏ sẽ có hình mũi tên cong khi đặt bên ngoài khung qua y. Ké o và 
n các đối tượng được đặt và phối trộn tốt hơn với  
Chọn lại vùng gần đây nhất: Chọn menu Select/ Reselect ( Ctrl+ Shift+D ho ặc 
Command + Shi
ới công cụ chọn đang được chọn, bạn bấm ch uột phải hoặc Control –click và o 
ảo ngược vùng ch ọn: Trong khi ch ọn 1 vùng ảnh, lệnh Select/ Inverse ( Ctrl + 
Shift+ I) ho ặc Com mand + S hift+ I dùng để chọn các vùng không được chọn 
trong ảnh. 
 
Xoá ảnh trong vùng ch ọn: Nhấn phím Backspace ho ặc Delete, ảnh trong vuang  
chọn sẽ bị xoá nhưng đường biên ch ọn vẫn được giữ lại sau khi xoá . Chọn Edit / 
Clear kết quả cũng tương tự như trên. 
Chọn menu Edit/ Cut ( Ctrl+X) ảnh trong vùng ch ọn sẽ bị xoá và  đưa vào bộ 
nhớ Clipboard. 
 
Mở rộng hoặc thu hẹp vùng ch ọn bằng cách ch ỉ rõ số pixel: 
Với vùng ch ọn đang có, bạ hu hẹp nó bằng cách ch ọn 
enu Select/Modif y/ Expa nd để mở rộng hoặc Contract để thu hẹp. quay đối tượng sau đó bấm phím Enter để áp dụng biến đổi. 
 
Làm mềm biên ch ọn bằng tính n ăng A nti-aliased và Feather: Tr ong kỹ thuật 
ghép ảnh, chúng ta th ường phải chọn các đối tượng ảnh, sau đó đặt các đối 
tượng này lên trên các n ền khác nhau, tính n ăng A nti-aliased và Fea ther sẽ giúp 
cho biê
 
ft+ D) 
V
ảnh và chọn mục Reselect t ừ content m enu; 
 
Đ
n có thể mở rộng hoặc t
m
 
             
  
Hình 6. 9: Hộp thoại  Expa nd 
 
ở rộng ho Vùng chọn mới được m ặc thu hẹp dựa trên vùng c họn ban đầu. 
ạo vùng ch ọn cũ: 
đều biên của vùng c họn cũ.  
ọn là đường viền của biên ch T
Bạn chọn menu Select/ border. Trong h ộp thoại Border Selection, nh ập giá t rị 
chiều rộng đường viền ở hộp nhập With từ 1- 200 pixe l và bấm nút OK. M ột 
ùng chọn mới sẽ được tạo có biên cách v
 
 129
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 10: Hộp thoại Border Selection 
 
M rộng vùng ch ọn tới các màu t ương tự: 
ọn Menu Select/ Grow để thêm vào vùng ch ọn các pixel g ần kề, nằm trong 
m vi Tolerance được xác định trên thanh tùy ch ọn của công cụ Magic 
nd. Hoặc chọn Nenu Select /Similar để thêm  vào vùng ch ọn các pixel ở 
p nơi trong ảnh( không ch ỉ các pixel n ằm gần kề) nằm trong ph ạm vi 
lerance. ở
Ch
phạ
Wa
khắ
To
Lện
ạ
Tra
Di 
tượ  để chuyển cả hộp bao và đối tượng chọn. Giứ Shift rồi kéo 
phía ngoài hộp bao, con tr ỏ sẽ chuyển thành hì nh m úi tên 
ngang hoặc dọc. Kéo các handle ở góc làm bi ến 
lt+ kéo để tạo biến dạng từ tâm ra. 
iến dạng phối cảnh: Ctrl+Alt+ Shift+kéo các handle ở góc để làm biến dạng 
o phối cảnh. 
i chuyển cạnh này đối  
h Free Transform: (Ctrl+ T): 
 Bn có thể làm một loạt hoặc xen kẽ nhiều phé p biến đổi với lênh Free 
nsform cho đến khi  tạo được kết quả mong muốn. 
chuyển: đưa con trỏ vào bên trong h ộp bao, con tr ỏ sẽ chuyển thành bi ểu 
ng Move r ồi kéo
để ép buộc di chuyển theo phương thẳng đứng, nga ng hoặc 45o. 
Quay: Đưa cho trỏ ra 
2 đầu và kéo để quay cả hộp bao và đối tượng chọn. Shift và ké o sẽ ép buộc 
quay the o từng góc 15o so v ới tâm  quay. 
Thay dổi kích thước và tỷ lệ: Kéo các c ạnh hoặc handle ở cạnh để làm biến 
dạng đối tượng theo chi ều 
dạng đồng thời cả hai chiều. Shift kéo handle ở góc sẽ giữ nguyên t ỷ lệ của đối 
tượng khi biến dạng. A lt kéo hoặc Option kéo s ẽ làm biến dạng đều từ tâm ra. 
Xô nghiêng: Ctrl+Shi ft+ kéo các c ạnh để xô nghiêng đối tượng theo chi ều 
ngang hoặc đứng. Ctrl+Shift+A
B
đối tượng the
Làm méo: Ctrl+ kéo c ác handle ở góc để di chuyển riêng thanh handle này tùy 
ý. Ctrl+ Shift+ kéo ở góc để di chuyển handle này và  ép buộc theo ph ương 
ngang hoặc htnẳng đứng. Ctrl + Alt+ kéo m ột cạnh để d
xứng qua tâm. 
Các lệnh bổ xung: trong khi đang sử dụng lệnh Free Tr ansform , bạn có t hể bấm 
chuột phải để mở content m enu và ch ọn các ệnh bổ xung nh ư quay 90o, 
180o…. 
 
 130
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 11: Hộp thoại Free Transform 
 
Hủy bỏ các lệnh biến dạng: 
 làm, bạn nhấn phím Ctrl+Z. Để hủy bỏ toàn bộ 
t/ Transform/ Again ( Ctrl+Shift+T) Để hủy bỏ1 phé p biến dạng vừa
chuõi biến dạng vừa làm, bạn nhấn phím  Esc hoặc bấm nút ca ncel trên tha nh 
tùy chọn. Để kết thúc và áp d ụng chuối biến dạng đã làm, bạn nhấn phím  Enter 
hoặc bấm vào nút Com mit trên thanh t ùy chọn. 
 
Áp dụng lại một chuỗi biến dạng Free Transform đã thực hiện trước đó: 
 Sau khi thực hiện mộtloạt các biến đổi bằng lệnh Free Transform, b ạn có thể 
tiếp tục thực hiện lại chuối biến đổi vừa rồi cho m ôth đối tượng khá c đang chọn 
bằng menu Edi
 
Phương pháp s ử dụng các giá tr ị số: 
Sau khi kh ởi động lệnh Free Transform, b ạn cũng có thể thực hiện các phép 
biến đổi chính xác b ằng cách nh ập giá trị số trên thanh tùy ch ọn. 
 
 
Tô m àu cho vùng c họn: bạn có thể tô m àu cho vùng c họn bằng menu Edit/Fill. 
 
 
Hình 6. 12: Hộp thoại Fill 
 131
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chọn các kiêu màu tô Foregrou nd Color ( Alt+Delete) Ho ặc Bac kground Col or 
( Ctrl + Delete). 
 
6.2.1.3 Công c ụ cắt ảnh: 
 
Chúng ta s ẽ dùng công c ụ Crop để xén ảnh và qua y cho vừa với kích thước yêu 
cầu. Chọn công cụ Crop tù hộp công cụ. Trên thanh tùy ch ọn nhập kích thước 
vào hộp nhập Wi dth và hộp nhập Height, ho ặc tạo một khung xén xung quanh 
phần ảnh. Không ph ải bận  vừa với ảnh, chúng ta s ẽ 
iều chỉnh kích c ỡ xung qua nh khung xé n. Bạn có thể kéo các handle xung 
iều chỉnh lại khung xén cho v ừ với ảnh cần xén. Nhấn  tâm khi khung xén không
đ
quanh khung xén để đ
Enter hoặc nhấp đúp chuột để hoàn tất việc cắt ảnh. Nhấn Esc nếu muốn hủy bỏ 
khung xén.  
- Sử dụng công cụ Slice (K) 
  
Công cụ Slice dùng để chia cắt hình ảnh ra thành nhi ều mảnh nhỏ, Trước khi sử 
dụng công c ụ Slice, cần dùng nh ững đường Guide để chia hình ảnh ra thành 
những vùng c ần cắt. Sau khi chia hình ảnh thành nh ững vùng nh ỏ như ý, dùng 
công cụ Slice để chia cắt hình ảnh (tương tự như khi ta dùng dao để cát miếng 
bánh) 
 
Cách thực hiện: 
Chọn công cụ Slice, đặt công cụ tại 1 góc của vùng cần cắt, giữ chuột và ké o 
chuột đến góc đối diện, thả chuột. 
Khi muốn chỉnh sửa 1 Slice đã được cắt, dùng công c ụ Slice Select Tool để 
chỉnh sửa  
- Thay đổi độ rộng, hẹp của các Slice đã cắt 
- Loại bỏ Slice 
Đặt tên và gán các thu ộc tính cho Slice 
 
6.2.1.4 Nhóm công c ụ chỉnh sửa ảnh: 
 
Chỉnh sửa các vùng ảnh bằng công c ụ Clone Stamp: 
Công cụ Clone Stam p sử dụng các pixel t ừ một vùng của ảnh để thay thế cho 
các pixel c ủa một vùng khác trên ảnh. Với côn g cụ này, bạn có thể thay thế, sửa 
chữa các vùng b ị lỗi của ảnh gốc. Chọn công cụ Clone Stam p từ hộp công cụ, 
ên thanh tùy chọn, mở bộ chọn Brush, c họn một nét bút kích c ỡ phù hợp với 
 sửa. Chắc chắn rằng tùy ch ọn Aligned được chọn. Di chuy ển 
sao chép liên tục, không bị lặp lại sau mỗi lần kéo. tr
vùng định chỉnh
con trỏ tới phần ảnh gần nhất so với phần ảnh bị lỗi. Nhấn giữ phím  Alt để 
chuyển con trỏ thành c on trỏ xác định vị trí bắt đầu lấy mẫu nguồn và bấm để 
xác định vị trí này.  Kéo con trỏ của công cụ Clone Stamp để xóa vùng b ị lỗi. 
Kéo t ô xóa một phần của góc  bị lỗi rồi thả nút chuột, di chuy ển con trỏ tới vị trí 
khác của vùng lỗi và tiếp tục tô xóa vùng b ị lỗi. Khi tùy ch ọn Aligned được 
chọn sẽ đảm bảo ảnh được 
 
 132
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Sử dụng công c ụ Pattern Stamp: 
Chọn một vùng chọn. Chọn menu Filter/ Pattern Maker. 
  
 
Hình 6. 13: Pattern Maker 
 
Trong hộp thoại Pattern Maker b ấm vào nút  Use Im age 
i hộp 
thoại để xem lại các biến thể của mẫu tô và c họn một mẫu 
tô muốn sử dụng. Bấm nút Save  Preset Pattern, nh ập tên 
vào K để trở về hộp thoại 
Pattern Maker. N ếu bạn bấm OK hộp thoại Pattern Maker 
ược tạo. 
mẫu tô. Bấm ra phía ngoài để đóng bộ chọn lại. Trong c ủa 
 
Sử dụng công c ụ Healing Brus h và Patch 
 Size. Bấm nút Ge neral, bạn có thể tiếp tục bấm nút 
General Again để tạo thêm các biến thể khác của mẫu tô. 
Sử dụng các nút m ũi tên tam giác d ưới đáy, bên ph ả
 hộp thoại Name và b ẫm nút O
sẽ tô toàn bộ ảnh bằng mẫu tô vừa đ
Để áp dụng mẫu tô, chọn công cụ Pattern Stam p. Trên 
thanh tùy ch ọn, chọn một nét bút  từ bộ chọn Brus h, bấm 
vào mũi tên tam giác c ủa bộ chọn pattern để mở bộ chọn 
sổảnh, bạn kéo con tr ỏ để thay thể bằng mẫu tô mới. 
 
 
Hình 6. 14: Heali ng Br ush và Patch 
 
Đây là công c ụ cải tiến mở rộng khả năng của hai công c ụ Clone Stam p và 
Pattern Stam p. Các công c ụ này cho phé p thực hiện đồng thời việc sao chép và 
khả năng phối trộn tốt giữa các pixel t ừ một vùng ảnh này với một vùng ảnh 
khác. 
Chọn công cụ Healing Br ush , trên tha nh tùy chọn bấm vào nút  mũi tên ở bộ 
chọn Brush. Kéo con tr ượt Diameter để điều chỉnh đường kí nh nét bút . B ấm ra 
bên ngoài để đóng bộ chọn lại. Nhấn giữ Alt hoặc Option và bấm vào  vị trí gần 
với vị trí cần sửa để lấy mẫu
ông cụ Patch được dùng để vá ảnh, c ông cụ này kết hợp cách ch ọn của công 
 
bạn ột vùng làm vùng c ần vá hoặc vùng lấy mẫu vá. Sau đó bạn 
dùng công c ụ patch ké o vùng c họn tới v ong ảnh. Khi th ả nút chuột, 
công cụ patch sẽ thực h
tory Bruch để phục hồi lại phần chỉnh sửa 
c đố làm nguồn . Thả phím  Alt và kéo. 
C
cụLasso và tính năng phối màu của công cụ Healing Br ush. Với công cụ Patch, 
 có thể chọn m
ị trí khác tr
iện chức năng vá. 
 
Sử dụng công c ụ His
Công cụ history Brus h dùng dữ liệuảnh từ các trạng thái trướ
sao chép. Điểm tiến bộ của công cụ này là bạn có thể phục hồi trở lại một vùng 
ảnh giới hạn, không ph ải loại bỏ toàn bộ kết quả đã làm theo t ừng bước. Chính  
 133
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

vì điều này, bạn có thể giữ lại các vùng ảnh đã chỉnh sửa hoàn hảo và có t hể 
phục hồi lại các vùng ảnh sau khi ch ỉnh sửa nhưng không đạt yêu cầu. 
g cụ History Brush kh ảo sát các tùy ch ọn khá c nhau của công cụ này 
 Dodge trong h ộp công cụ. Trên thanh tùy  chọn, 
ộp chọn Brush để mở bộ chọn nét bút định sẵn, chọn phạm vi tông 
àu chịu tác động Ra nge, ở tùy c họn Expos ure, chọn cường độ tăng sáng b ằng 
ào ô nhập hoặc dùng thanh tr ượt. Chọn công cụ History t ừ hộp công cụ. Trong bảng history, ké o thanh cu ộn lên 
phía trên s ẽ thấy được Snaps hot Post – graffiti. B ấm vào ô trống bê n trái tê n 
Post – graffiti. động tác này s ẽ chọn Post – graffiti làm ngu ồn sao chép. K éo 
công cụ history Br ush trên vùng m à trước đây bạn xóa.  Sử dụng thanh tùy ch ọn 
của côn
như độ mờ đục, và phương thức phối màu Mode… 
 
Điều chỉnh độ sáng bằng công cụ Dodge: 
Chúng ta s ẽ dùng c ông cụ Dod ge để làm sáng hơn vùng sáng và làm  tăng độ 
chi tiết của ảnh. C họn công cụ
bấm vào h
m
cách nhập trực tiếp giá trị v
 
 
Hình 6. 15: thanh tr ạng thái của công cụ Dodge 
 
Kéo con tr ỏ vào phần bạn muốn. chỉnh sửa trên khung hình cho đến khi được 
kết quả mon g muốn. 
Nếu muốn tạo hiệu ứng Dodge theo tùng đoạn thẳng, thay vì ph ải kéo con trỏ 
theo đường thẳng, bạn có thể bấm tại một điểm sau  đó Shift+ b ấm tại 1 điểm 
thứ hai, hiệu ứng dodge sẽ xảy ra trên đoạn thẳng nối giữa hai điểm này. 
 
Giới thiệu về công cụ Burn:  
Ngược lại với công cụ Dodge, t hay vì làm  sáng hơn phạm vi tông m àu được 
chọn, công cụ Burn sẽ làm chúng đậm và tối hơn. Các t ùy chọn và các thao tác 
ũng giống như công cụ Dodge 
iềc
 
Đu chỉnh cường độ màu  bằng công c ụ Sponge:
  
Dùng công c ụ Sponge để tăng cường độ màu . Chọn công cụ Sponge trên thanh 
g cụ. Trên thanh tùy ch ọn công cụ Sponge xác l ập các tùy ch ọn Mode: ki ểu 
động, Flcôn
tác 
này càng t ăng. ow: cường độ tác động… ké o con trỏ của công cụ Sponge  trên 
vùng định tăng cường độ màu. Càng ké o nhiều lần thì cường độ màu  ở vùng 
 134
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Trong danh sách Mode , kiểu tác động Desaturate s ẽ loại bỏ sự có mặt của màu  
ên ảnhở tr , làm ảnh bị xỉn đi, chỉ con các s ắc đen xám. Saturate và Desaturate là 
loạhai kiểu tác  động trái ng ược nhau. Tuy nhiên b ạn không nên dùng ki ểu này để 
i bỏ kiểu kia. 
 
Làm mềm mại vùng bóng đậm và vùng bóng sáng b ằng công cụ Blur:
  
Chọn công cụ Blur từ hộp công cụ, trong bảng Brus hes, chọn một nét bút. Trê n 
thanh tùy c họn đặt các giá tr ị. Kéo con tr ỏ của công cụ Blur trên vùng bóng  
đậm và vùng bóng sáng để làm mềm và tạo sự chuyển màu ở những vùng này. 
 
Công cụ Sharpen làm  nét ảnh: 
  
Ngược lại với công cụ Blur, thay vì làm m ềm , công cụ Shar pen sẽ làm cho ảnh 
nét hơn. Cá c tùy chọn và các thao tác c ũng giống như công cụ Blur 
 
 Sử dụng công c ụ SMUDGE (R) 
Công cụ Smudge  có hình bàn ta y đang chỉ  dùng để làm mờ và biến dạng ảnh. 
Chọn công cụ Smudge, nh ấp chuột và di c huọtt vào vùng hònh ảnh cần làm  mờ 
vag biến dạng. 
 
6.2.1.5 Công c ụ tạo chữ: 
 
 
Hình 6. 16:  công c ụ Text 
 
Tạo văn bản: 
 
Khi bạn dùng công c ụ Horizontal (t ạo văn bản hướng nga ng) hoặc Vertical 
Type (tạo văn bản có hướng dọc), văn bản sẽ hiện lập tức trên của sổ ảnh. 
Ngoài việc thay đổi thuộc tính như văn bản, bạn có t hể biến đổi hình dạng tổng 
quát cho nó, áp d ụng các hi ệu ứng, tha y đổi phương thức trộn phối màu hoặc 
thay đổi độ mờ đục cho nó. 
Nhưng bạn không th ể áp dụng các bộ lọc, sử dụng các công c ụ vẽ, không th ể tô 
văn bản với các mẫu tô chuy ển màu hoặc với các hoa v ăn định sẵn. Để áp dụng 
ác hiệu ứng này, b ạn phải chuyể c n văn bản này thành đối tượng thường bằng 
/ Type. Tuy nhiê n khi sử dụng lệnh này thì các thu ộc tính 
a. 
ọn có dạng văn bản này thành d ạng mặt nạ Layer. 
 
Chỉnh sửa văn bản: 
ể chỉnh sửa văn bản, chúng ta c ần chọn nó. Bạn có thể chọn một ký tự đơn, 
một từ hoặc tất cả các ký tự trong cả khối văn bản. Bạn có thể thay đổi kích menu La yer/Rasterize
văn bản không còn n ữ
Nếu sử dụng H orizontal Type Mask ho ặc Vertical Type Mas k, bạn có thể 
chuyển đổi các vùng ch
Đ
 135
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

thước,tỷ lệ văn bản , điều chỉnh khoảng cách gi ữa hai ký t ự, điều chỉnh khoảng 
cách dòng ( Lead ing). Di chuy ển các ký t ự được chọn lên trên ho ặc xuống dưới 
đường baseline. 
 
 
Hình 6. 17:  Hộp thoại Text 
 
Từ trái qua ph ải - Từ trên xuống dưới: 
ể hiện  1. Chọn font chữ 
2. Chọn Mode c ho chữ 
3. Chọn Siz e cho chữ 
4. Chọn khoảng cách gi ữa các dòng trong 1 đoạn, giá  trị càmg lớn thì khoảng 
cách càng xa 
5. Chọn khoảng cách gi ữa các ký t ự, giá trị càng lớn thì khoảng các h càng xa. 
6. Chọn tỉ lệ giữa chiều cao và c hiều rộng của chữ. 
7. Chọn tỉ lệ giữa chữ hoa và ch ữ thường 
8. Chọn mầu cho chữ  
9. Chọn ngôn ng ữ th
10. Chọn chế độ chống hiệu ứng răng cưa. (Anti Alias) 
 
Cách sử dụng công cụ Type Mark  
  
ông cụ Type Mask t ạo ra vùng ch ọn có dạng ký tự. Đ C ối với công cụ Type  
tạo ra như một hình ảnh, được xác định bằng vùng ch ọn. Vì 
ứng làm đẹp cho chữ (Filters. Mask, ký t ự được 
vậy sau khi  đã tạo ký tự bằng công c ụ Type Mask xong không th ể  chỉnh sửa lại 
được. 
Tuy c ông cự Type Mask có khuyết điểm nhưng nó cũng có một ưu điểm lớn, 
đó là ứng dụng được các hiệu ứng làm  đẹp cho c hữ như khắc nổi  tạo bóng . 
Công cụ Type  tuy c ó thể chỉnh sửa được, nhưng vì không được xem là m ột đối 
ượng hình ảnh nên không th ể ứng dụng các hiệu t
Plug-lns) trên P hotoshop được. 
 
Chuyển hướng cho văn bản: 
Bạn có thể chuyển hướng cho văn bản từ ngang sang d ọc hoặc ngược lại. Bấm 
vào nút Te xt Orientat ion ở bên trái, trên thanh tùy c họn. hoặc trong b ảng 
Character, b ấm nú t mở menu và chọn lệnh Cha nge, Te xt Orientati on từ menu 
của bảng. Hay ch ọn menu La yer/ Type/ H orizontal ho ặc Vertical.B ạn có t hể 
 136
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

quay các ký t ự của văn bản bằng cách ch ọn các ký t ự này và bấm nút mở men u 
của bảng Character, và ch ọn lệnh Rotate Character 
 
Các xác lập cho văn bản Paragra ph: 
 
Khi tạo văn bản dạng Paragraph,   Photos hop cũng cung cấp thêm  các tuỳ chọn 
định dạng văn bản, Trong b ảng Paragraph có xác l ập gióng hà ng( Align), dàn 
đều hai bê n( Justify), kho ảng thụt vào ( Indent) và kho ảng cách gi ữa các đoạn 
văn bản. M enu cho phép tinh c hỉnh các tuỳ chọn này: 
 
 
Hình 6. 18:  Hộp thoại Paragraph 
 
6.2.1.6  C ác công cụ bút vẽ: 
Sử dụng công c ụ bút chì: 
  
Công cụ Pen được sử dụng như một cái bút chì. Ch ọn công cụ Pen tool, dùng 
công cụ để vẽ nét. Trên thanh thuộc tính, bạn có thể chọn kíc h cỡ bút  ở tuỳ 
ếu muốn vẽ đoạn thẳng, tha y vì phải kéo con trỏ theo đường thẳng, bạn có thể 
m tại 1 điểm thứ hai, sẽ xuất hiện đoạn thẳng 
Sử dụng công c ụ BRUSHchọn Brush . 
N
bấm tại một điểm sau  đó Shift+ b ấ
nối giữa hai điểm này. 
 
 tool (B)  
dụng như một cái bút v ẽ. C Công cụ Brush được sử họn công cụ Brush t ool, 
àu. Photos hop sẽ dùng m àu foce Ground để làm dùng công c ụ Brush để tô m
màu tô và dùng m àu back gr ound để làm màu xoá (dùng công c ụ Eraser) 
Nét vẽ của công cụ Brush được chọn trong bảng Brus h tại thanh thu ộc tính của 
công cụ  
Master Diameter:  
Dùng để chọn độ lớn của đường kính nét vẽ .Các chế độ (Mode) c ủa công cụ 
Brush 
 137
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 18:  Hộp thoại công cụ Brush 
 
 
 
6.2.1.7 - Sử dụng công c ụ Eraser (E) 
  
Công cụ Eraser có hình c ực tẩy, dùng để tẩy xóa hình ảnh. C húng ta đã quen  
dùng công c ụ này qua công vi ệc tẩy xóa, nh ưng công c ụ Eraser còn có ch ức 
năng phục bổi những gì đã bị xóa. Đánh dấu chân Ô Eraser to History trên 
thanh Pr operty bar để mở ch  phầđã bị tẩy xoá ức năng phục hồi những n 
 
6.2.1.8 Công c ụ tô màu cho đối tượng: 
 
 
Hình 6. 19:  công c ụ Gradient 
 
Tô màu chuyển ( Gra dient) : 
Màu chuy ển Gra dient là sự chuyển dần giữa hai hay nhi ều mà
nh kiểu chuyển tiếp bằng công c ụ gradient. Bấm chọn công u. Có t hể điều 
chỉ cụ Gradient t ừ 
 mũi tên để mở hộp chọn hộpô
Gradient   cng cụ. Trên thanh thu ộc tính bấm vào nút
 
Hình 6.20:  hộp chọn Gradient 
 
Chọn m àu rồi bấm ra phía ngoài để đóng bộ chọn lại. Kéo con 
trỏ để buộc hướng 
chuyển màu theo phương ngang). ột kiểu chuyển m
 với công cụ Gradi ent ( bạn có thể giữ Shift trong khi kéo 
 138
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Bạó
trạng thái. C ửa sổ Gradient Editor xu ất hiện. Kéo các m ũi tên để điều chỉnh độ 
chunn c thể thay đổi màu chuy ển bằng cách nh ấp chuột vào ô m ẫu trên thanh 
yể của màu  . 
 
Hình 6. 21:  hộp thoại  Gradient 
u cho đối tượng (Paint Buket):  
Đổ m
Ch
màu. P
For
thá
 
6.2.à
ọn công cụ Paint Buket trên thanh công c ụ. Nhấp chuột vào l ayer cần đổ 
aint Buket sẽ tự đổ màu cho đối tượng đươc chọn. Màu m ặc định là màu 
ound Color. Bạn cũng có thể c egr họn các mẫu tô Patent trên thanh tr ạng 
i để tô m àu cho đối tượng. 
  Công 1.8 cụ tạo đường dẫn Path:  
 
 
Hình 6. 22:  Công c ụ tạo đường dẫn Path 
 
Nh
gấp kh
kỳ.ô
Ch
điểđ Nếu 
mu
sợiy
i đầu a dây điều óm công cụ Pen giúp chúng t a:  Vẽ những nét thẳng, nét cong, nh ững hình 
úc, những đường cong khé p kín. Vẽ lại đường viền của một hình ảnh bất 
 T màu một hình s au khi đã vẽ lại.  
ọn công cụ Pen Tool trong thanh công c ụ. Bấm ch uột lên khung ảnh lấy 
 thẳng. m ầu, bấm tiếp để lấy các điểm tiếp theo nếu muốn vẽ đường
ốn vẽ theo đường cong , bấm điểm đầu, giữ chuột rồi kéo, bạn sẽ được các 
 dâ điều chỉnh, thả chuột rồi bấm tại điểm tiếp theo. Gi ữ Ctrl+ nhấp chuột 
 dây neo+ ké o, Đường cong s ẽ thay đổi theo cách kéo c ủ tạ
khiển. 
 
 139
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 23:  đường dẫn Path và dây điều khiển 
 
Để ection. Để tô 
mà Để tô nét cho đường Path, ch ọn Str oke Path….  biến đường Path thành vùng ch ọn, chọn menu Path/  Meke Sel
u cho path ch ọn Fill Path. 
 
 
Hình 6. 24:  Menu  Path 
 
6.2.1.10 - Các công c ụ tạo hình:  
 
 
Hình 6.25:  Các công c ụ tạo hình 
 
- 
Cô tròn cạnh 
Công cụ tạo nét 
- Công cụ tạo hình đa 
g cụ nào trong nhóm  công cụ này, trên t hanh trạng thái sẽ xuất Công cụ tạo hình chữ nhật 
ng cụ tạo hình chữ nhật - 
- Công cụ tạo hình Ellipse 
 Công cụ tạo hình đa giác -
- 
phương. 
 
Chọn bất kỳ côn
hiện các tính n ăng tương ứng 
 
 
Hình 6. 26:  thanh tr ạng thái công c ụ tạo hình 
 140
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

6.2.1.11 C ông cụ Zoom và Hand:  
 
Zoom : 
  
 
Để thu phóng s ự thể hiện của ảnh, bạn sử dụng m enu V iew với một trong các 
cách sau: 
- Dùng menu View / Zoom In để phóng to s ự thể hiện của ảnh. 
- Dùng menu View / Zoom Out để thu nhỏ sự thể hiện của ảnh. 
- Dùng menu View / Fit on Screen: Thể hiện toà n bộ ảnh lớn nhất vừa vặn 
a ảnh và kíc h cỡ của cửa sổ chương trình 
hóng to, thu nhỏ của ảnh trên màn hình. Dùng 
menu View  / Actual Pixels (trong Im ageready là View 1 Actual Size) để thu 
phóng ảnh sao cho độ phân giải của ảnh bằng với độ phân giải của màn hình 
(một pixel của ảnh thể hiện bằng một dọt (điểm) của màn hì nh). 
- Dùng menu View / Print Size (ch ỉ có trong Photoshop) để thu phóng ảnh 
bằng với kích thước khi in ra. 
- Dùng menu View / Resize Window  to Fit (trong Imageready) ho ặc tùy c họn 
Resize Window g cụ Zoom  (trong 
Photos hop): lệnh nà y thay đổi kích cỡ cửa sổ cho phù h ợp với cấp dộ thu 
ông cụ Hand để làm cho ảnh vừa vặn với màn 
hìnF
Mỗ
chỉ thể m thu phóng s ẽ 
ược thể hiện trên thanh tiêu đề của cửa sổ file ảnh và ở tận cùng, bên tr ái 
ar) 
thu phóng trên thanh trạng thái ho ặc trong bảng N avigator. B ạn 
ỏ của công cụ Zoom  tạo một đường bao hình ch ữ nhật để xác 
ảnh thì công c ụ Hand sẽ 
ô
kíc
- C p công cụ, kéo con trỏ trong cửa sổ ảnh để di 
nh khác trong c ửa sổ này .  
Cũng giống nh công c ụ Zoom , bạn có thể chọn công cụ Hand từ bàn phím mà  
ần bỏ chọn công cụ đang chọn.Chọn công cụ bất kỳ (khác công c ụ 
Hand).Nh ấn giữ phím Sp ụ Hand từ bàn phím . 
Kéo con trỏ để di chuyển tới vùng ảnh m ong m uốn trong cửa sổ ảnh, sau đó 
ả phím Spacebar. với màn hình. Kích c ỡ củ
Photos hop sẽ xác định độ p
to Fit trên thanh tùy chọn của côn
phóng của ảnh. 
 Bạn có thể double-click vào c
h (it on Screen). 
i khi bạn sử dụng lệnh Zoom , ảnh sẽ được phóng t o hoặc thu nhỏ, nhưng nó 
 hiện trong ph ạm vi của cửa sổ file ảnh m à thôi. P hần tră
đ
thanh trạng thái (status b
Trong P hotoshop, c ó thể nhập chỉnh xác cấp độ thu phóng ảnh theo ý b ạn ở hộp 
thể hiện cấp độ 
có thể kéo con tr
định vùng ảnh m uốn phóng to. 
 
Cuộn Ảnh:  
Bạn có thể dùng công c ụ Hand để di chuyển, cuộn ảnh trong c ửa sổ chứa file 
ảnh. Nếu ảnh đã thể hiện đầy đủ trong cửa sổ chứa file 
khng có tác dụng khi bạn kéo c on trỏ trong cửa sổ ảnh. 
- Kéo góc d ưới bên phải của khung c ửa sổ ảnh vào phía trong ảnh để làm giảm 
h thước của cửa sổ này, sao cho c ửa sổ ảnh chỉ thể hiện một phần của ảnh  
họn công cụ Hand từ hộ
chuyển tới các phần ả
- 
không c
acebar để tạm thời chọn công c
- 
th
 141
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Double-cl ick và o công cụ Zoom  trong hộp công cụ để đưa ảnh về cấp độ view 
00%. 
.2.1.12-  Công c ụ lấy màu1
 
6  
ây là công c ụ rất hữu hiệu để bạn copy c hính xác m ột màu . Dùng c ông cụ 
Edropper Tool tr ỏ vào 1 m àu bất kỳ nào trên ảnh, ban sẽ coppy m àu nga y chí nh 
chỗ đó.  
 
6.2.1.13 N hững điều cơ bản về Layer : 
Đ
 
 
Có thể xem các layer nh ư những tấm phim  có đặt các phần ảnh trên đó.Trong 
một layer, nh ững phần có ảnh sẽ không trong su ốt, các phần còn lại sẽ trong 
suốt. Mỗi file Phot oshop c ó một hoặc nhiều layer, các Layer x ếp chồng lên 
nhau thà nh nhiều lớp.  
Nói thêm v ề layer Backgr ound 
Layer Background được đặt ở vị trí cuối cùng (nằm dưới các layer khác) trong  
bảng Layers. M ột fie ảnh chỉ có thể có một layer Background. B ạn không th ể 
ay đổi trật tự sắp xếp, phương thức phối trộn màu (blending m ode) hoặc độ 
yer bình thường . D ouble-click và o layer Backgroun d 
ong bảng Layers, ho ặc chọn menu La yer / New / Layer From  Background để 
ng tạo một layer mới bằng cách kéo ảnh từ file này sang file khá c 
ằng cách ch ọn công cụ Move từ hộp công cụ. Kéo từ cửa sổ file ảnh này sang 
file ảnh kia. Con tr ỏ sẽ chuyển thành hũi tên với ô vuông và d ấu cộng. 
ếu bạn nhấn phím Shift khi dang kéo thì ảnh sao chép s ẽ đặt ngay chính gi ữa 
 nhau trong 
ùng một cửa sổ. 
ắt là các layer bi ẩn đi. Bạn có thể bấm 
ào biểu thượng con mắt để làm ẩn hoặc hiện layer. 
 th
mờ đục (opacity) c ủa layer Bac kground . Tuy nhiên, b ạn có thể chuyển layer 
Background thành m ột la
tr
mở hộp thoại New Layer . Đặt tên và xác l ập các tùy ch ọn cho layer m ới, rồi 
click nút O K.  
 
Đổi tên và sao chép la yer từ một file khác: 
Cũng dễ dà
b
ình m
N
của sổ file ảnh đích. Khi th ả chuột, hai lớp ảnh sẽ đặt chồng lên
c
 
Thể hiện hoặc làm ẩn ảnh chứa trong layer: 
Biểu tượng con m ắt ở ngoài cùng bên trái tên layer cho bi ết layer này đang 
được thể hiện. Các layer không có con m
v
 142
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 27:  Cửa sổ layer 
 
ắp xếp lại các Layer: 
 tự xếp 
p). Thứ tự này sẽ quyết định việc thể hiện nội dung file ảnh. Thay đổi thứ tự 
khi nhìn thấy một đường màu tr ằng xuất hiện giữa các layer thì 
ả nút c huột. 
Có thể sắp xếp lại vị trí layer đang chọ trong bảng Layers b ằng các lệnh từ 
enu La yer / Arrange: 
: đưa layer đang 
họn xuống dưới một cấp (không xu ống dưới layer Background). 
- Send To Back (phím  tắt Ctrl+shift+[ ho ặc Command+shift +[ (Mac OS)): đưa 
layer đang chọn xuống dưới 1 cùng (không xu ống dưới 1 layer Bac kground). 
Các lệnh trên không s ử dụng được cho la yer Backgr ound trước khi chuy ển 
layer này thành layer th ường. 
 
Thay đổi độ mờ đục Opacity và ph ương thức phối trộn màu Blendi ng m ode cho 
layer 
Phần ảnh layer trên đã che khu ất các phần ảnh khác n ằm dưới nó. Bạn có thể 
thay đổi độ mờ đục Opacity để thấy được các phần ảnh phía d ưới xuyên qua 
cánh cửa. Cũng có thể thay đổi phương thức phối trộn màu Ble nding m ode để 
thay đổi hiệu ứng phối trộn màu của các pixe l. 
 
Liên kết layer: 
ó một cách rất hiêu quả là liên kết hai hoặc nhiều layer lại với nhau. V ới các 
yer đã được liên kết, bạn có thể di chuyển, biến đổi chúng 1 cách  đồng thời. 
 biết 
ác layer đã được liên kết. 
 S
Thứ tự tổ chức các layer trong fil e ảnh còn gọi là Straking Order ( th ứ
lớ
xếp lớp sẽ làm cho một phần ảnh nào đó di chuyển lên phía trên ho ặc ẩn dưới 
các phần ảnh trong các layer khác. Trong b ảng layer, ké o layer cần thay đổi thứ 
tự lên phía trên, 
th
n
m
- Bring Forward (phí m tắt Ctrl+j ho ặc Command+j (Mac OS)): đưa layer 
đưang chọn lên trên m ột cấp. 
- Bring To Front (phí m tắt ( trl+shift+j ho ặc Command+s hift +] (Mac OS)): 
đưa layer đưang chọn lên trên cùng. 
- Send Backward (phím t ắt Ctrl+[ ho ặc Com mand+[ (Mac OS))
c
C
la
Trong khi v ẫn duy trì  vị trí tương đối cho các phần ảnh trên các layer đã liên 
kết. Để liên kết các layer l ại với nhau, bạn bấm vào ô vuông nh ỏ nằm giữa biểu 
tượng con m ắt và tên layer. M ột biểu tượng hình m ắt xích sẽ xuất hiện cho
c
 143
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Áp dụng hiệu ứng laye r bằng các layer style 
ác hiệu ứng đặc biệt khác. C ác layer style 
ược áp dụng một cách tự động và có th ể chỉnh sửa được Chúng liên k ết trực 
tiếp với layer mà b ạn chỉ định.Tr ong P hotoshop, bạn sẽ dùng hộp thoại Layer  
Style để điều chỉnh các style.  
Với các hiệu ứng layer  sau khi  đã áp dụng, bạn có thể tạm thời tắt tác dụng của 
nó bằng cách click t ắt biểu tượng con m ắt của hiệu ứng trong b ảng Layers . 
Cũng có thể sao chép hi ệu ứng bằng cách ké o nó thả vào một layer khác. 
 Bạn có thể tăng cường hiệu quả cho layer b ằng cách áp d ụng hiệu ứng layer 
(còn gọi là layer style) có s ẵn như shadow ( đổ bóng), Grow (t ỏa sáng), be vel 
(vát cạnh), emboss (làm  nổi) và c
đ
 
Hình 6. 28:  Cửa sổ layer Style 
 
Tạo một tập hợp layer  và đưa các  layer vào t ập hợp này:  
ạn có thể tạo một tập hợp, một bộ các layer hay còn g ọi là layer set, gi ống 
như một thư mục để chứa các layer có chung m ột mục đích hoặc cùng tính 
chất. Điều này gi úp bạn dễ dàng quản lý các file ảnh phức tạp, có quá nhiều 
layer: 
- Trong bảng layer, b ấm nút mở menu và chọn mục New layer set. 
 B
 144
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 28:  Menu la yer 
 
- Trong hộp thoại New layer set đặt tên cho t ập hợp layer mới ở hộp nhập 
name rồi OK. 
 
Hình 6. 29:  Menu New  layer Set 
 
Tạo một layer mới: 
Để tạo một layer mới, bạn thực hiện một trong các cách sau: 
- Click và o nút New  Layer ở phía  dưi bảng Layers để tạo một layer mới với độ 
mờ đục Opacity là 100% và ph ương thức phối trộn màu Blending m ode là 
Normal. Trong b ảng Layers, layer m ới sẽ được chọn, được đặt tên tự động (như 
Layer 1, Layer 2...) và đặt trên layer đang c họn trước đây. 
- Trong b ảng Layers, click vào nút m ở menu  và chọn mục New Layer t ừ menu 
của bảng. Trong h ộp thoại New Layer b ạn cóthể chọn các tùy ch ọn cho layer  
mới: Đặt tên cho layer ở hộp nhập Nam e. Click ch ọn tùy c họn Group Wi th 
Previous Layer n ếu bạn muốn layer m ới là một phần của nhóm  cắt clipping 
group. 
Chọn một màu từ danh sách Col or, màu này sẽ được dùng làm  màu trang trí 
cho la yer mới, giúp dễ phân biệt layer này v ới các layer khác trong b ảng Layers  
. Nếu muốn, bạn có t hể chọn một phương thức phối trộn màu ở hộp danh sá ch 
Mode và độ mờ đục ở hộp nhập Opacity. Click nút OK để đóng hộp thoại, 
layer mới với các xác l ập trên 
được tạo 
 
 145
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Di chuyển ảnh trong layer 
Để di chuyển ảnh trong layer, b ạn chọn laye r muốn di chuy ển từ bảng Layers. 
ông cụ hoặc nhấn giữ phím Ctrl hoặc Co mmand  
y không thực hiện được với layer 
ackground, bạn phải chuyển layer Backgr ound thà nh layer th ường. 
họn nhanh layer 
 di chuyển ảnh trên m ột layer, bạn phải chọn layer 
 Layers  trước khi sử dụng công c ụ Mov e. Có thể thực hiện điều 
này nha nh hơn bằng cách ch ọn công cụ Move và chọn tùy chọn Au to Select 
Layer trên t hanh tùy ch c chọn. khi bạn click vào ph ần 
ảnh thuộc layer nào t hlayer đó sẽ tự động được chọn trong bảng Layers. Tuy 
nhiên. các pixel t ại vị trí c % trở lên, 
nếu dưới 50 thì ph ần ảnh b 
Tương tự như trên, với công
chọn Auto Select Layer trên n có thể dùng c on trỏ của công 
cụ Move, Ctrl b ấm. 
 
Sao ché p layer: 
Để sao chép layer trên cùng 
thả vào nút New Layer. Lay
nguồn. 
 
Hợp nhất các layer b ằng lệnh
- Lệnh Merge Down: dùng 
- Lệnh M
(có biể o layer đang chọn. Các  layer ẩn được giữ 
nguyên. 
- Lệnh Merge Link: dùng để hợp nhấcác layer có liên kết với layer đang 
chọn. 
Lệnh Merge layer set: dùng để hợp nhất tất cả các layer trong m ôth tập hợp 
lay
- Lện ắt ( 
 
Khoá L
Bạó
ngăn n i vô tình. Khi m ột layer bị khoá, một biểu tượng khoá s ẽ 
thểệ
hoàn t
Bấm vào nút Lock All ở phần Lock, phía trên b ảng layer. M ột layer sẽ bị xoá 
hoà
Chọn m hoá một vài thuộc tính của 
layer. Chọn công cụ Mov e từ hộp c
(Mac OS) trong khi m ột công cụ khác đang chọn để tạm thời chuyển sang côn g 
cụ Move. Drag con t rỏ trong cửa sổ ảnh để di chuyển vị trí của toàn bộ ảnh 
trong layer  đang chọn. Tuy nhiên, cách nà
B
 
C
-Thông th ường, nếu muốn
này từ bảng
ọn. Nếu tùy chọn này đượ
ì 
clik phải có giá tr ị mờ đục Opacity t ừ 50
êndưới sẽ được xét đến. 
 cụ Move đang được chọn, thay vì ph ải chọn tuỳ 
thanh tuỳ chọn, bạ
một file ảnh, bạn kéo layer  nguồn muốn sao ché p 
er sao có cùng tính chất và được đặt trên layer 
 Merge hoặc Flatten: 
để hựp nhất hai layer n ằm kề nhau. 
erge Visible: Dùng để hợp nhất tất cảc các layer đang được thể hiện 
utượng c on mắt) và
t 
- 
er 
h Merge Group: dùng để hợp nhất các layer trong m ột nhóm c
Clippi ng G roup). 
ayer: 
n c thẻ khoá từng phần hoặc toàn bộ để bảo vên hì nh ảnh chứa trong nó, 
gừa các thay đổ
 hin bên cạnh tên của layer. Bi ểu tượng này sẽ bị tô đặc khi layer b ị khoá 
oàn, hoặc biểu tượng rỗng khi bị khoá  1 phần. 
n toà n 
ột hoặc nhiều tuỳ chọn khoá ở phần lock sẽ k
 146
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

6.2.1.14   Mặt nạ và kênh:  
Ngi 
động c ặt nạ cũng tương tự như  một khuôn m ẫu. ảnh 
thô 
dưới p ẽ được bảo vệ và không b ị thay đổi. Bạn có 
thểo , hoặc lưu mặt nạ lại để sử 
dụnc
 
Làm v
Các m à bảo vệ các phần khác nha u trên file ảnh. Khi 
bạn
không
sau nà
đổi mà o file ảnh. 
Tro 
mặt nạ c độ xám  (grayscale channel - còn g ọi 
là ah  
inf
spot (m  tạo bằng cách ph ối hợp các kênh m àu thà nh 
phầ
Chann Imageready không h ỗ trợ các kênh,  
ngo 
Optim ảng Optimize. 
 
ạo mặt nạ tạm thời: oàcách sử dụng các layer, P hotoshop dùng m ặt nạ (mask) để cô lập và tác 
ho từng vùng c ủa ảnh. M
ngqua phần bị cắt của mặt nạ có thể chỉnh sửa, thay đổi được Phần ảnh bê n 
hần không b ị cắt của mặt nạ s
 tạ một mặt nạ tạm thời cho một lần sử dụng
g ho các lần sau. 
iệc với mặt nạ (mask) và kênh (cha nnel) 
ặt nạ cho phép cô l ập v
 tạo mặt nạ từ một vùng ch ọn, vùng không được chọn sẽ được bảo vệ và 
 bị chỉnh sửa. Bạn có thể lưu lại các vùng ch ọn thành m ặt nạ để sứ dụng 
y. Mặt nạ còn được dùng cho các công vi ệc chỉnh sửa phức tạp, như thay 
u hoặc áp dụng các bộ lọc ch
ngPhotoshop,  bạn có thể sử dụng mặt nạ tạm thời (quic k mask) hoặc tạo 
 và lưu nó vào m ột kênh với các sắ
lpa channel). P hotoshop còn có các kê nh để tái tạo màu của file ảnh (C olor
ormation channels - các kênh m àu thành ph ần) và c ác kênh riêng c ho màu 
àu riêng biệt, không th ể tái
n). Không nh ư layer, các  kênh không th ể in ra được. Bạn sử dụng bảng 
els để xem  và làm  việc với các kênh. 
ạitrừ kênh alpha dùng cho định dạng PN G trong su ốt và tùy ch ọn Weighted  
ization của b
T
B
 )  để chuyển biên vùng c họn thành mặt nạ ấm vào biểu tượng Qickmask( 
tạm thời.  
 
Hình 6. 30:  Quick Mask 
c khi  chuyển sang ch ế độ 
hỉnh sửa mặt nạ tạm thời  
Trong chế độ Quic k Mask, m àu đỏ thể hiện vùng không được chọn, được bảo 
vệ bời mặt nạ. Bạn chỉ áp dụng được các chuy ển đổi cho vùng không được bảo 
vệ, đó là vùng nhìn th ấy rõ (vùng đã được chọn trướ
Quick Mask) Và không b ị che bởi lớp màu đỏ (có thể chuyển màu cho phần 
che của mặt nạ, nhưng nên nh ớ nó chỉ là mà u dùng để phân biệt mà thôi, không 
phải màu áp d ụng cho ảnh). 
 
C
 147
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Điều thuận lợi của việc chỉnh sửa vùng ch ọn thông 
tạqua việc chỉnh sửa mặt nạ 
m thời là bạn có thể dùng gần như tất cả các công c ụ và bộ lọc cho việc chỉnh 
sửa (ngay c ả những công c ụ chọn).Trong ch ế độ Quick Mask, Phot oshop sẽ tự 
động chuyển sang c hế độ Grays cale (các c ấp độ xám ). Màu f oreground m ặc 
unmặc định là m àu trắng. Khi dùng công c ụ 
g ế độ Quic k Mas k, bạn cần ghi nhớ các 
à 
le ảnh có thể chứa tới 24 kênh, ba o gồm tất cả các kênh m àu và các kênh 
n mặt nạ và opacity ( độ mờ đục) cho mỗi 
trong việc thể hiện mặt nạ của kênh alpha, 
 alpha bằng 
cách sử dụng các công c ụ vẽ và công cụ chỉnh sửa. Đưa các vùng ch ọn vào  
kêna
các file
Trong b pha 1 và nh
Eg,  
mắt) tấ àu và kênh alpha mặt nạ mới, ảnh sẽ trông nh ư đang ở 
chế độ QuickMask (vùng m ặt nạ sẽ thể hiện với màu đỏ). 
 
Chỉnh sửa mặt nạ 
Bây giờ, bạn sẽ tinh chỉnh lại vùng ch ọn bằng cách ch ỉnh a kênh m ặt nạ. 
Những sai sót không t hải tinh chỉnh lại. Có 
h sửa trong chế độ Quic k Mask. 
 
h đếđịnh là màu đen và m àu bac kgrod 
vẽ hoặc công cụ chỉnh sửa tronch
nguyên tắc sau : Tô vẽ bằng màu tr ắng sẽ xóa phần mặt nạ (phần che màu đỏ) 
và làm  tăng thêm  vùng chọn. Tô vẽ bằng m àu đen sẽ tăng thêm  phần mặt nạ v
làm giảm vùng chọn . 
 
Kênh alpha có các tính ch ất sau: 
Mỗi fi
alpha. Tất cả các kênh đều là ảnh 7/ 8- bit gra yscale (có th ể chứa tới 256 cấp độ 
xám). Có th ể định tê n, màu, tùy chọ
kênh alpha. Opacity ch ỉ có tác dụng 
nó không c ó tác dụng với ảnh. Tất cả các kênh alpha đều có cùng kích th ước và 
độ phân giải như ảnh gốc. Bạn có thể chỉnh sửa mặt nạ trong kê nh
h lpha để có thể sử dụng lại các vùng ch ọn lâu dài cho file ảnh hoặc cho 
 ảnh khác. 
ảng C hannels, double-cl ick vào tê n kê nh Al ập tên mới 
retnhấn phím  Ente r để đổi tên. Nếu bạn cho thểhiện (có biểu tượng con 
t cả các kênh m
sử
ránh khỏi khi tạo vùng ch ọn cần p
thể chỉ thấy các lỗi khi bạn xem  kênh mặt nạ sau khi đã lưu vùng ch ọn. Có thể 
dùng các công c ụ vé và các công c ụ chỉnh sửa bình t hường để sửa kênh mặt nạ 
như khi bạn chỉn
6.2.1.15 L àm việc với bảng History (chuy ển đổi ản n 1 trạng thái bất kỳ) 
Hiển thị bảng History:  Window > Sh ow Hist ory 
Trong chương trình Photoshop, ch ế độ Undo ch ỉ thực hiện được 1 lần, để thay 
hỉ lưu giữ được tối đa là 20 bước được thực hiện trước đó. 
ứ 21 thì bước đầu tiên sẽ tự động được xoá đi trong bộ thế cho nhược điểm này , bảng H istory chính là n ơi lưu các bước đã được thực 
hiện. Bảng History c
Nếu thực hiện bước th
nhớ 
 148
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 30: bảng Histor y 
Khi muốn lấy lại một bước nào đó đã thực hiện trước đó thi kích chu ột làm 
hiển thị hộp sáng ở trong bảng History. 
- Step Forw ard i xu: Lùống một bước mới thực hiện sau thời điểm hiện tại 
Delete: Xoá bước đang hiển thị 
ột tệp tài liệu mới.  
6.2.1.16 Căn ch- Step Back ward: Ti ến lên một bước vừa thực hiện trước thời điểm hiện tại 
- New Snapshot: t ạo ra một bản Copy của hình ảnh 
- 
- Clear History: Xoá t ất cả các bước thực hiện trước bước hiện thời. (Bước 
đang được hiển thị) 
- New Document: T ạo ra m
 
ỉnh màu cho ảnh: 
ống kê (Histogram ) Xem 
 đồ thị th
 
Hình 6.31: bảng Histogram 
 
Ýghĩa của bảng Histogram   n
ông để áp 
n áy quét 
i, khi quan sát Histogram, b ục sử 
i để làm lại  - Khi nhì n Histogram , bạn có thể biết ảnh có đủ thông tin hay kh
dụg những căn chỉnh có hiệu quả; nếu bạn có 1 ảnh gốc xấu hoặc 1 m
ồ ạn sẽ có cơ sở để quyết định có nê n tiếp t t
dụng ảnh đó hay bỏ đ
 149
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Histogra m cho biết bạn đã sửa chữa nhiều lần trê n 1 ảnh và đã làm mất các 
giá trị của ảnh điểm  
- Histogra m cho biết tình trạng của ảnh: 
 - Khi các ảnh điểm tập trung ở vùng giữa của Histogra m: Ảnh chủ yếu 
có tông màu xám   
- Nếu các ảnh điểm tập trung ở phía bên phải: Ảnh thừa sáng  
- Nếu các ảnh điểm tập trung ở phía bên trái: Ảnh thừa tối  
Căn chỉnh tông giữa bằng cách sử dụng bảng Levels 
1. Mở hộp tho
2.Chọn kênh hoặc những kênh c ần căn chỉnh  
 tc các thay đổi trên nàm hình. 
 lệnh Cur ve  
 
ại Levels  
 
3. Chọn Previ ew đẻ xemrướ
4. Để điều chỉnh tông gi ữa, dùng con ch ạy màu xám  trên trục đồ thị thống 
kê. Rê con tr ỏ sang phải để làm tối vùng tông gi ữa, rê sang trái để làm 
sáng. bạn cũng xó t hể cho giá tr ị vào hộp tương ứng  
 
Sử dụng
 
Hình 6. 32: bảng Curve 
 
Giống như Levels, C urves cho phé p bạn căn chỉnh vùng tông c ủa 1 ảnh. Tuy 
 trịđiểm sáng,  điểm tối và tông gi ữa) để điều 
hỉnh, bạn có thể tác động vào bất kỳ điểm nào trong kho ảnh từ 0 đến 255 nhiên thay vì sử dụng ba giá (
c
trong khi gi ữ nguyên tối đa 15 giá tr ị khác không tha y đổi. 
Bạn cũng có thể dùng công c ụ bút chì trong b ảng Curves để gán các giá tr ị áp 
đặt cho ảnh  
 
ử dụng hộp thoại Curves S
- Trục nga ng thể hiện các giá tr ị gốc của ảnh (input levels) 
- Trục dọc thể hiện các giá tr ị mới điều chỉnh  
Cách sử dụng 
Nhấn chuột và di con tr ỏ trên vùng ảnh cần chỉnh bạn sẽ thấy 1 vòng tròn xu ất 
hiên trên đồ thị - tại nơi biểu diễn các Pixel m à con trỏ đang di lên.  
 150
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Như vậy bạn sẽ xác đinh được vungdf ảnh cần chỉnh trên đồ thị. Nếu có phần 
ảnh nà o bạn không mu ốn điều chỉnh hã y nháy chu ột trên đường đồ thị để khoá 
ùng đó. 
ốn làm  ảnh 
ưởng gì đến vùng tối và vùng sáng. b ạn hãy nhá y chuột vào vung ¼ và ¾ c ủa 
ăn chỉnh cân bằng màu  v
VD: nếu bạn muốn điều chỉnh vùng gi ữa của ảnh mà không mu
h
đồ thị để khoá vùng đó lại. 
- Đưa đường đồ thị lên trên s ẽ làm sáng ảnh, đưa đường đồ thị xuống dưới 
sẽ làm tối ảnh 
- Di các ch ấm mực ra k hỏi anh sẽ lamd mất các chấm đó  
- nhấn Option và nhá y vào đường kẻ ô để có các ô vuông nh ỉ hơn trong đồ 
thị 
- Có thể dùng bút chì để vẽ 1 đường đồ thị hoàn toàn m ới, sau đó nhá p 
Smoth để nối các đường chấm chấm thành 1 đường liền nét. 
 
C
 
Hình 6. 33: bảng Levels 
ỉnh câ n bằng màu d ựa trên nguyê n tắc phân bổ m 
Ch àu trên bá nh xe m àu nghĩa 
 muốn tăng 1 m àu nào đó ta chỉ cần giảm màu  đối lập của nó đi.Cách ch ỉnh 
nh chứ không ph ải chỉ chỉnh 1 vùng 
àu nào đó. Tuy nhiên b ạn cũng có thể chỉnh m àu cho 1 vùng ảnh nếu như bạn 
 
Cách làm: 
st> Color 
độ 
 thì 
. 
u. Các giá tr ị sẽ tăng từ 0 dến +100 nếu về 
phía đỏ, xanh lục và xanh lơ. Từ 0 đến -100 nếu về phía  Mage nta, Cya n, 
vàng.  là
này dùng đẻ chỉnh m àu chung cho toàn ả
m
đã tạo 1 vùng c họn cho vùng hình ảnh đó. Cách ch ỉnh này rất hữu hiệu khi bạn 
có 1 ảnh đã quét và o nhưng bị thiên về 1 m àu nào đó. VD: khi  ảnh thiên v ề 
màu vàng, công v ụ chỉnh m àu sẽ giúp bạ lại bỏ bớt màu vàng  m à không làm
ảnh hưởng đến các màu khác c ủa ảnh. 
1. Chọn ảnh hoặc vùng ảnh cần chỉnh màu. M ở Image>Adju
balance 
2. Chọn Shadows, Mi dtone hoặc Highlights, thông t hường bạn nên bắt đầu 
bằng Mi dtones (vùng sáng trung bì nh) nếu bạn chỉnh toàn b ộ ảnh vì 
Midtones đã bao trùm  tới 90% diện tích ảnh  
3. Đánh dấu vào ô Preserve Lum inoisity để bạn không làm thay đổi 
sáng của ảnh khi bạn tăng m àu. nếu không c ần giữ nguyê n độ sáng
không cần đánh dấu vào ô này
4. Di con c huột để điều khiển mà
 151
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

5. Chỉnh Sha dow và Highli ght, sau đó lặp lại ác dộng tá c cho tới khi bạn 
đã hài lòng.  
6. Nhấp OK 
ỉnh từng m àu riêng bi ệt  
 xa lơ – xanh lục; bên phải: cam  – vàng – xanh l ục. 
ation; Bên ph ải đi từ 0 đến 100 (ch ỉ còn m àu tinh khi ết, không 
độ bão hoà: 
phải để đạt được màu mong m uốn. Con 
số trong hộp thể hiện sự thay đổi độ quay xung qua nh bánh xe m àu kể từ 
u ảnh gốc  
4. Di con tr ượt Saturation sang trái để giảm độ bão hoà  và sang ph ải để 
tăng độ bão hoà   
Dùng lệnh Hue / Saturation 
- Master: Di ều chỉnh toàn bộ màu trong ảnh  
- Các ô m àu: Điều ch
- Trục HUE:  Di c huyển màu the o bánh xe m àu , nếu chọn Master- b ạn có 
thể di chuyển theo mọi hướng xuất phát từ màu  đỏ (nằm giữa trục), bên 
trái Hồng –nh
- Trục Satur
có m àu xám). Bên trái đi từ 0 đến 100% (H oàn toà n không có m àu) 
- Trục Lighness: Đi từ 100 dến 0 (ở giữa) đến + 100 bê n phải 
- Hộp Sam ple: The o mặc định hộp này hiển thị màu Force Ground.  Nhá y 
vào bất cứ màu nào trong ảnh sẽ làm thay đổi màu của ô này 
 
Cách điều chỉnh sắc 
1. Mở Image> Adjust > Hue and Saturation 
2. Chọn Master để điều chỉnh tất cả các màu ho ặc nháy và o ô m àu cần điều 
chỉnh  
3. Di con trượt Hue sang trái h ặc 
màu đang chọn của mà
5. Di con trượt Light ness để tăng hoặc giảm độ sáng của ảnh. 
6. Nháy OK. 
 
Làm nét ảnh : 
 
Hình 6. 34: bảng UnSharpMask 
 
 152
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Trước khi chuy ển ảnh sang in ha y đưa lên m ang Internet, ng ười ta thường là m 
tăng độ nét bằng cách áp d ụng bộ lọc Sharpen> UnSharpMask. 
- Amount ( Mức độ áp dụng): Dối với những ảnh có đọ phân giải cao từ 
150% đến 200% 
- Radius: bá n kính  
gưỡng): Đối với những ảnh có phần da người, nên áp d ụng 
Threshol d từ 2 đến 20.  - Threshol d (n
 
Dùng các l ệnh chỉnh m àu và tông m àu đa năng : 
 
 
Hình 6. 35: bảng Color Balance 
ng Variation 
ch rõ ràng nhất để chỉnh màu và tông màu là so sánh gi ữa ảnh đã sửa và ảnh 
 . Công cụ dể sửa ảnh trong photoshop la  Variation. Công c ụ này bao gồm 
ghtness/ 
Dù
Cá
gốc
Bri Contract (Sửađộ sáng tối và tương phản); Col or Balance (Cân b ằng 
màu), Hue/ Saturation (S ắc độ/ tương phản), bạn chỉ cần nháy và o 1 ảnh mẫu 
bất kỳ đẻ thay đổi màu hoặc thay đổi các đặc tính của ảnh gốc. 
Bạn có thể di chon ch ạy sang trái (Fine) ha y sang ph ải (Coarse), đẻ xác định 
hiệu quả của mỗi lần thay đổi lên ảnh gốc. 
Di chuyển con c hạy sang trái ha y sang ph ải 1 nấc sẽ làm thay đổi gấp 2 lần độ 
tác động lên ảnh gốc . 
Nếu chọn chế đọ Fine thì s ự thay đổi không đáng kể, nhưng nếu chọn chế độ 
Coarse thì s ự thay đổi sẽ rất lớn. Chế độ Coarse ch ỉ dùng khi c ần có những hiệu 
ứng đặc biệt và bạn muốn chuyển ảnh thành 1 màu. Ch ế độ con chạy nằm ở 
giữa là chđộ thường dùng nh ất. 
 
ùng Brightness and Coế 
ntract: D
 
 
Hình 6. 36: bảng Bri ghtness/ Cont ract 
 
 153
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Điều chỉnh đồng thời ba vùng t ối, sáng, trung bì nh của ảnh. Các h chỉnh nà y it 
chính xác nh ưng nhanh và d ễ.  
- Đánh dấu vào ô Pre view để nhìn tháy nga y lập tức sự thay đổi của ảnh 
- Di chon ch ạy sang trái ho ặc sang ph ải để tăng độ sáng hoặc độ bão hoà.  
Di con c hạy sang trái để giảm độ sáng hoặc độ bão hoà. 
 
11. Xuất ảnh cho We b: 
hi xuất một hình ảnh cho We K b ta thường dùng nh ững định dạng sa u: Gif ; 
rị Quality 
trong bảng JPEG property (C hất lượng của ảnh càng cao thi t ương đương 
với dung lượng càng lớn) JPEG; và PNG 
Có 2 cách để xuất ảnh cho we b: 
File > Save as - ch ọn định dạng C ompuser ve GIF  
Đối với những ảnh có nhi ều mầu và yêu c ầu chất lượng hình ảnh và mầu sắc 
cao, khi xu ất ảnh cho Web nên xu ất ở định dạng JPEG 
File > Save as - ch ọn định dạng JPEG  - Đặt giá trị vào ô giá t - 
File > Save for Web 
 
 
Hình 6. 37: bảng Save for web 
 
 
 
 154
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Bài tập Ph otosh op 
 
Thực hành: Chỉnh sửa ảnh và xuất ảnh cho w eb: 
 
1- File/ Open ho ặc (Ctrl+O) để mở một file ảnh cần chỉnh sửa.  
 
 
 
 
Trong ảnh trên bạn thấy có quá nhi ều thuyền và bạn muốn xoá bớt , chỉ để lại 
một số thuyền ở gần bờ. 
 
2- Chọn công cụ Clone Stamp (S) trên thanh công c ụ. Chọn kiểu bút mềm cỡ 
24. Di con tr ỏ chuột vào khung hình, con tr ỏ chuột sẽ chuyển thành m ột vòng 
tròn có đường kính tương ứng với cỡ bút m à bạn chọn. Giữ Ctrl+ bấm ch uột tại 
iểm gần với diểm mà bạn cần xoá để copy.  Thả Ctrl và b ấm tại điểm mà bạn đ
muốn xoá. 
 
 
 
Lặp lại nhiều lần động tác trên, ch úng ta sẽ được kết quả như trên. 
 
3 – Trên thanh công c ụ chọn công cụ Text Tool. Nh ập đoạn chữ, thay đổi màu 
chữ, kích thước, kiểu chữ …. Cho đến khi bạn cảm thấy ưng ý. La yer chữ sẽ tự 
ộng tạo một lớp mới trong của sổ layer được ký hi đ
cệu bởi chữ T ở phía bê n trái 
ủa tên lớp. 
 155
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Dù 
 
4- Tạo
Layer,
dụng hi
 ngcông cụ Move để di chuyển layer ch ữ đến vị trí bạn mong m uốn. 
 hiệu ứng cho ch ữ bằng các h bấm vào biểu tượnghình ch ữ F trong c ửa sổ 
 chọn các hiệu ứng cần thiết , xác lập các giá tr ị cho nó rồi bấm OK để áp 
ệu ứng. 
 
 
 - Mở một p dụng các 
ông cụ chọn để chọn hình ảnh mà bạn muốn đưa vào. Gi ữ Ctrl và kéo vùng  
họn sang cửa sổ đang làm  việc. Tạo hiệu ứng Outer Glow cho hình ảnh mới. 
ếu hình ảnh mới có kích th ước không phù h ợp với khuôn hình thì b ạn có thể 
 ( Ctrl+T) rồi bấm Enter. 5 hình ảnh bất kỳ mà bạn muốn ghép vào b ức ảnh này. Á
c
c
N
điều chỉnh bằng lênh Free Transform  
 
 156
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

màu sắc ưng ý.  
6 - Bạn có thể điều chỉnh tông m àu của màu  ảnh nền cho phù hợp với ảnh mới 
bằng cách ch ọn layer background. Ch ọn Images/Adjustment/Hue/Statution ( 
Ctrl+U). Điều chỉnh các thanh tr ượt màu cho đến khi được
 
 
 
7 - Tạo một lớp mới, tạo một vùng ch ọn hình c hữ nhật bao quanh khung hình. 
Chọn menu Edit/ Stroke để mở cửa sổ Stroke. Ch ọn độ rộng của nét, vị trí 
đường bao,  màu sắc đường bao … 
 
 157
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Kếtu qả cuối cùng rất khác so v ới bức ảnh ba n đầu. 
 
 
 
8 - Để xuất ảnh cho web, b ạn chọn menu File/Save for Web (Ctrl+ Shift+ 
Alt+S). Ch ọn kiểu định dạng là ảnh Jpeg, Quality là 60%. B ạn có thể nhìn được 
dung lượng ảnh ở ph  bấm OK và đặt tên 
ho ảnh. ía dưới cửa sổ Optimized. N ếu được thì
c
 
 158
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

159
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

6.2.2- Sử  dụng  c orel draw áp d ụng cho thiết kế logo cho web 
 
6.2.2.1-Cơ sở về Corel Draw  
Co 
sử dụn iệt Nam. Nó là ph ần mềm đầy uy lực và lại rất dễ sử 
dụnv
 
6.2.2.2- L àm việc với Corel Draw:relDraw 10.0 là chương trình v ẽ minh hoạ thuộc hàng đầu thế giới và được 
g nhiều nhất ở V
g à phạm vi ứng dụng không h ạn chế.  
 
 
Bắt đầu với CorelDraw: 
Menu File: 
 
Hìn
 
- Lệnh Open: dùng để mở một file tài li ệu đang c ó. 
ấn nút Open. N ếu bạn muốn mở 
các file từ các trình ứng dụng khác, nhi ều file đã 
được liệt kê trong m enu xổ xuống File Of Type. 
Đôi khi lệnh O pen về mặt căn bản là một hoạt 
 Inport, một số file có th ể không được mở 
dưới dạng tài liệu, máy sẽ thông báo các l ỗi sau. 
ạn đang thử mở chỉ có thể được nhập mà thôi, nó sẽ h 6.38: Menu File 
- Lệnh New: dùng để tạo một file mới.  
- New from Template: dùng để mở các bảng mẫu 
có sẵn, bạn không th ể viết chồng lên nh ư là các 
file tài liệu khác.  
Bạn có thể mở nhiều file tài li ệu trong h ộp thoại 
bằng cách nh ấn giữ Shift trong khi b ạn nhấp lên 
các tên file r ồi nh
đọng
o Nếu file mà b
hiển thị thông báo: 
 
 
Hình 6. 39: Hộp cảnh báo lỗi file 
 
Khi bạn mở các file c ũ hoặc các file được tạo trên một hệ thống khác, 
bạn sẽ thấy những cảnh bá o về tính tương thích phiên b ản. 
- Lệnh Cl ose: Dùng đóng các file tài li ệu 
 đổi của đối tượng đã được 
thực hiện trước đó. Lệnh nà y chỉ được thực hiện khi đối tượng nhái  
được chọn. - Lệnh Save: dùng để lưu tài liệu lần đầu tiên. Hộp thoại Save sẽ xuất 
hiện. 
- Lệnh Save As: l ưu các bản sao mới của một tài liệu mà bạn vừa mở và 
vừa chỉnh sửa. 
- Lệnh Revert: Dùng để đảo ngược những tha y
 160
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Lệnh Aquire Ima  để bạn sử dụng máy 
Scanner để quét hì nh ảnh vào Cor el để xử lý. 
ể chuyển tập tin thiết kế đang hiện hành sa ng một 
- 
 
- 
n Pri nt Merge Winzard để thực hiện tác vụ 
này, ví dụ bạn cần in thiếp mời với cùng một nội dung nh ưng với tên 
người nhận khác nhau. 
Hiện khung m àn hình quan sát đối tượng trước khi 
in. Tr ong khung m àn hình này, b ạn có thể phóng to, thu nh ỏ đối tượng 
ệnh Prepare for Serv ice Bureau: Dùng để chuyển bản vẽ thành tập tin. 
- 
- in thiết kế 
- 
 
 
Giới thảng công cụ: ge: Chứa thà nh phần tiện ích
- Lệnh Import: Dùng để nhập tài liệu đối tượng từ một chương trình, th ư 
mục khác vào trang thi ết kế để xử lý. 
- Lệnh Export: dùng đ
chương trình khác. 
Lệnh Send To: Dùng để chuyển đối tượng hiện hành sang thà nh phần 
tuỳ chọn từ Menu xổ xuống
- Lệnh Print: Dùng để in các tài li ệu của bạn 
Lệnh Print Merge: Dùng để in kết hợp giữa các ký t ự với các hình ảnh. 
Bạn có thể dùng thành ph ầ
- Lệnh Print Preview: 
để quan sát, thay đổi hướng in đối tượng, nhưng không t hay đổi nội 
dung chi ti ết của đối tượng. 
- Lệnh Print Setup: Hi ện khung tham s ố Print  Setup để chọn thiết bị máy 
in để in tập tin văn bản hiện hành 
- L
- Lệnh Puplic To The Web dùng để chuyển tập tin thiết kế sang hệ thông 
mạng theo m enu xổ xuống 
Publish t o PDF: Dùng để tối ưu hoá độ phân giải hinhd ảnh và s au đó 
truyền lên mạng Intra net hoặc Web. 
Document Info: Dùng li ệt kê những thông tin chi ti ết về tập t
hiện hành. 
Exit: Thoát kh ỏi CorelDraw 
iệu b
 
Công cụ chọn:  ( Pick tool)    
  
Khi muốn thay đổi một đối tượng nào đó thi trước tiên cần phải chọn đối tượng 
ó. Có hai cách ch ọn: chọn toà n bộ và ch ọn từng phần : 
ng 
ẽ
hông được chọn. đ
Chọn từng phần: Dùng công c ụ chọn, kíc h chuột vào đối tượng cần chọn để 
chọn đối tượng. 
Chọn toà n bộ: Dùng công c ụ chọn, giữ và kéo chu ột tạo thà nh một đường bao  
quanh các đối tượng cần chọn. Lúc nà y bạn sẽ thấy xuất hiện các hình vuông 
màu đen xung quanh hình bao các đối tượng chọn. 
Bỏ chọn đối tượng: Nếu đối tượng đã chọn rồi mà bạn muốn bỏ đối tượ
chọn, bạn chỉ cần giữ Shift và b ấm lên  nó một lần nữa thì đối tượng đó s 
k
 161
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Công cụ biên soạn các đường vecter: ( Shape tool )  
 
 
 
Công cụ biên tập đường vector:   
Bạn bấm lên nút c ần chọn. Nếu bạn muốn chọn nhiều nút thì gi ữ Shift trong khi 
bấm và kéo chuột để chọn bằng vùng ch ọn. Để bỏ chọn, bạn giữ Shift và b ấm 
n nút. Bạn có thể dùng phím  Hom e để chọn nút đầu tiên, bấm phím tab để 
uốn di chuy ển nút bạn kéo nút đã chọn tới vị trí mới , nếu muốn di c huyển 
 Ctrl. 
- Bạn bấm dấu + bên vùng s ố hay bấm lên nút  lê
chuyển tới nút khác trong đối tượng. Bấm phím  End để chuyển tới nút cuối 
ùng. c
M
thẳng thì trong lúc kéo b ạn giữ
Thêm nút: Trong khi t ạo đường cong nhiều khi bạn muốn tăng thêm s ố nút để 
điều chỉnh đường cong theo đúng ý. Bạn sẽ làm theo các b ước sau: 
- Bạn bấm lên  vị trí muốn thêm nút, lúc này b ạn sẽ thấy dấu chấm trò n 
màu đen.  
 để tạo nút mới tại vị 
trí chấm tròn nà y. 
 
Hình 6. 40: Biên t ập đường vector  
út: Bạn chọn một nút, sau đó b Huỷ n ấm lên nút  
  hoặc bấm phím Del, máy  
sẽ hỷ
Tách ru bỏ nút này. 
ời 1 nút t hành 2 nút c on: bạn bấm lên nút  
  để tách nó thà nh hai nút 
ồng lên  nhau, lúc này đường cong được tách thành hai đường nhưng vẫn 
đối tượng. con c h
là một 
Nố
bạn chi hai nút thành m ột: Bạn đánh dấu hai nút  muốn nối ở đầu của đường cong, 
ọn 
   để nối. 
Coã gin nút: bạn hãy c họn nút cần co giãn ( ít nh ất là hai nút), b ạn bấm lên nút  
 . u đen ở góc để thực hiện co ha y giãn nút. Kéo nút mà
 162
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Xoa nyút: Bạn chọn nút cần xoay ( ít nh ất là 2 nút), b ạn bấm lên nút    kéo 
nút màu đen tại các góc để thực hiện xoay góc. 
n dịch chuyển, chọn  
 Tạo chế độ đàn hồi: Đánh dấu nút  cầ   Trên thanh đặc 
tính. thực hiện di chuyển. 
Công cụ dao cắt:  
  
Dùng công c ụ cắt để cắt bất kỳ đường nà o thành hai đường con mà không cần 
phải cắt tại nút . Thông th ường đường con cắt sẽ tự động khép kí n. Nếu bạn 
không mu ốn chúng t ự khép kín thì b ạn chọn Tool – Option – Wor kspace  – 
Toolbox – Knife Tool và bỏ chọn tại ô Automatically close object. Còn n ếu 
họn Lea ve as one object thì hai m iếng cắt sẽ trở thành hai đối tượng riêng l ẻ. 
Công cụ tẩy :  c
 
Dùng để xoá các thành p anh, vết xoá sẽ tự động 
ành một đường cong khé p kín để không làm m ất màu của hình. Bạn chọn 
n kích cỡ nét xoá trên thanh đặc tính. Kéo chu ột trên thành 
ng. Co giãn tự do hần dư thừa trong một bức tr
th
công cụ tẩy, chọ
phần mà bạn muốn xoá . 
 
Công cụ biến dạng tự do: 
Khi c ông cụ Free transform đang được chọn, thanh t huộc tính sẽ thể hiện 4 kiểu 
biến dạng cơ bản: quay tự do, đối xứng tự do theo goác nghiê
và xô nghiêng t ự do. 
 
 
Hình 6. 41: Tha nh thuộc tính công c ụ biến dạng tự do 
  
Để biến dạng 1 tr ong 4 kiểu, bạn chọn 1 kiểu trên thanh thu ộc tính và b ấm- kéo 
đối tượng đang c họn trên trang v ẽ. 
 
ông cụ phóng to C thu nhỏ và kéo trượt vật thể: (Zoom  và Pan) 
 
 
 
- Phóng to t hu nhỏ:     
- Zoom in: phóng to trang v ẽ gấp hai. 
 163
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Zoom  out: thu nh ỏ trang vẽ bằng một nửa 
- Zoom  to selected: dùng ch ọn đối tượng, máy s ẽ phóng to đối tượng được 
chọn ra toà n màn hình. 
- Zoom to all opjects: Phóng to t ất cả đối tượng trong trang v ẽ ra toàn màn 
hình 
- Zoom  to pa ge widt h: Phóng to bề rộng trang v ẽ ra toàn màn hình 
ím mũi tên để 
huyển tới nơi mình cần, màn hình sẽ cuộn theo hướng mình ch ọn. Hoặc bạn 
họn công cụ có hình bàn ta y, ké o chuột trên bản vẽ để quay tới phần mà bạn - Zoom  to pa ge height: Phóng t o chiều cao trang v ẽ ra toàn màn hình. 
 
- Kéo trượt vật thể:  
Bạn có thể kéo tha nh cuộn màn hình để xem các đối tượng bị khuất này, nhưng 
làm như vậy rất chậm. Bạn có thể bấm  Alt và dùng các ph
c
c
cần. 
 
 
Công cụ tạo nét vẽ:  
 
 
- 
Bút vẽ tự do ( Freehand)  
n cọn công cụ freehand ho ặc bấm phím F5  ( Trước đó bạn phải bấm ch uột 
n vẽ), bạn chuyển con trỏ tới điểm cần vẽ. Kéo chu ột để tạo hình nét v ẽ 
Nếu bạn bấm vào 1 điểm, sau  đó bấm vào diểm khác, b ạn sẽ vẽ được 
hẳng giữa hai điểm đó. Giữ Shift trong khi kéo lùi l ại sẽ xoá nét v ẽ bạn Bạh
vào bả
tự do. 
đoạn t
vừa vẽ
- Vẽ. 
 đường Bezier 
  
công cụ Bezier, Chọn dịch chuyển chuột tới điểm cần vẽ, kéo chuột để tạo 
o một trong hai điểm mú t của đường chuẩn để uốn cong đường chuẩn. Ké
đường m uốn vẽ sẽ xuất hiện đường chuẩn thứ hai. Ké o một trong hai điểm nú t 
ở đầu đường chuẩn thứ hai để uốn cong đương m uốn vẽ. Tương tự làm tiếp nếu 
bạn muốn uốn cong theo nhiều đoạn. 
- Công cụ tạo nét vẽ mỹ thuật   
 
Khi bạn chọn công cụ này, nó s ẽ cho phép b ạn tô các nét c ọ lên các đường mới 
đặc biệt riêng khi  được chọn. hay hiện có bằng cách s ử dụng các đối tượng bị biến dạng làm  công cụ vẽ. Bạn 
xịt nhiều đối tượng lên trên các đường mới hay hiện có t rong một hiệu ứng kiểu 
lặp lại. Vẽ hoặc áp dụng các kiểu bút vẽ.  
Thanh Property Bar s ẽ cung cấp nhanh tr ạng thái đường vẽ khác nhau để chọn, 
mỗi thanh trạng thái sẽ có các tu ỳ chọn 
- Công cụ vẽ đường ziczac   
 
 164
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Công 
vẽ, kéo  hình nét vẽ theo đương ziczac. Kéo m ột trong hai điểm nút 
ở hai đ
- cụ này cho phé p bạn vẽ đường ziczac. B ạn chuyển con trỏ tới điểm cần 
 chuột để tạo
ầu để được các đường kế tiếp. 
Công cụ ghi kích th ước   
ụ này rất có ích cho các k ỹ sư, kiến trúc sư để vẽ những bản vẽ kỹ thuật  
Công c
hoặs
này t hc ơ đồ mạch điện tử, thường đòi hỏi độ chính xác cao. Khi ch ọn công cụ 
anh t huộc tính sẽ thể hiện 6 trạng thá i khác nhau. Bạn có t hể xác định 
kiểu, độ chính xác, đơn vị đo và cách th ể hiện nhãn văn bản. Sau khi t ạo xong 
một bộ đường đo kích thu ớc, bạn có t hể bấm chọn riêng nhãn v ăn bản để thay  
đổi vị trí, thuộc tính (nh ư font, kích c ỡ) bằng các tu ỳ chọn trên thanh thu ộc 
tính.   
 
Công cụ vẽ hình chữ nhật: ( Rectangle tool –F6 )  
  
 
Vẽ hìn
con trỏ
tạon
về toạ 
ứng vớ
tự n
có thể
tuỳ ch
hoặc tr
iữ Ctrl trong l úc kéo sẽ tạo thành hì nh vuông. Gi ữ Shift trong khi  kéo sẽ lấy  
ủa hình chữ nhật ( vẽ từ tâm ra ngoài). B ạn h chữ nhật là một trong nh ững thao tác đơn giản nhất. Bạn chọn công cụ, 
 sẽ biến thành hình ch ữ thập, bê n cạnh có hình ch ữ nhật nhỏ. Khi kéo 
 hìh chữ nhật, thanh tr ạng thái và thanh thu ộc tính sẽ thể hiện các thông s ố 
độ, chiều rộng, chiều cao, mô t ả chi tiết về hình t hể của đối tượng tương 
i vị trí con tr ỏ. Mỗi khi một hình chữ nhật mới được tạo, CorelDraw s ẽ 
độg gán các thuộc tính mặc định về đường biê n và m àu tô. Nếu muốn bạn 
 định lại các thuộc tính này trên thanh thu ộc tính hoặc phải sử dụng các 
ọn trong cửa sổ Object pr operties ( Window/ Dockers/ Object properties ) 
ong hộp thoại Outline Pen (F12). 
 
G
điểm ta bắt đầu kéo là m tâm điểm c
cũng có thể nhấn giữ Ctrl + S hift trong khi vẽ các đối tượng mới để giữ hình  
dạnh của chúng k ể từ gốc tâm đồng thời có chiều rộng và chiều cao bằng nhau. 
Độ bo tr òn góc ( t ừ 0 đến 100%) có th ể được xác lập bằng nhiều các h: 
- Chọn hình chữ nhật sau đó điền giá trị Corners Together 
   trên thanh đặc 
tính. 
- Chọn công cụ Biên tập, sau đó kéo bất kỳ điểm nào trong 4 đỉnh của hìn h 
theo cạnh hình ch ữ nhật để thực hiện mài tròn. 
- Bạn có t hể bấm phải chuột trên đối tượng, c họn Properties r ồi thực hiện mài 
góc, sau đó chọ u chọn Apply All 
thì việc chọn lựa này sẽ thành mặc định cho nó. n Apll y để việc lưah chọn có hiệu quả. Nế
 
Công cụ vẽ hình elip: ( Ellipse tool –F7)  
  
 
Tư h elip cũng rất đơn giản. Nhưng hi nh el ip 
linh ho  thể thành những hình nêm  tròn hoặc hình 
vònc uộc tính đặc biệt của đối tượng hình elip. ơng tự như hình chữ nhật, vẽ hìn
ạt hơn hình c hữ nhật, chúng có
g ung mà vấn giữ nguyên các th
 165
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- sang góc bánh, sau đó bạn bấm vào nút  Bạn chọn hình Elip m uốn chuyển 
Pie   trên thanh đặc tính. 
- Nếu bạn muốn chuyển sang ph ần bánh nh ỏ, bạn bấm vào nút  
    
- Bạn có thể thay đổi góc bắt đầu, góc kết thúc bằng cách điền giá trị  starting 
- 
ro
- 
 
Cô c& Endi ng Angles ho ặc có thể sử dụng công c ụ Shape. 
Bạn cũng có thể thưc hiện việc tạo bánh bằng cách b ấm phải chuột, chọn 
perties rồi chọn Pie. P
Tương tụ như vậy khi bạn muốn chuyển hinh elip sang hì nh vòng cung. 
ngụ vẽ hình đa giác: ( Polygon) 
 
 
 
Vẽ hình đa giác cũng tương tự như vẽ hình chữ nhật hoặc Elip. Nhưng công c ụ 
đặc biệ  đáng ngạc nhiê n. Bạn có thể thay 
đổi o, hoặc ấn định các thông s ố 
này trư
Có thể ng cách ch ọn hình đa giác, sau đó 
bấmt này sẽ tạo  ta nhiều hình thể hấp dẫn
 sốlượng đỉnh và cạnh của đa giác bất cứ lúc nà
ớc khi vẽ đa giác. 
 chuyển hình đa giác sang hình sao b ă
 vào nút Polygon/s tar 
  trên thanh đặc tính ( nếu muốn chuyển ngược lại 
thì mbấ vào nút  
  . 
ình xoắn ốc:  - H
ông cụ này giúp b ạn nhanh chóng t ạo ra đường xoắn ốc . Chọn vòng xoáy  C
trong phần Spiral Revol ution  
  trên thanh đặc tính, ki ểu xoá y đều 
họn số logarit trong ph ần  hay xoáy logarit ( K hoảng cách gi ữa các vòng t ăng dần the o số vòng). B ạn có 
thể c
 . 
Tạo mẫu giấy tô: 
ột , số dòng mu ốn kẻ trong phần hộp thoại trên thanh 
ông cụ tạo các hình Shape: - 
Chọn công cụ, chọn số c
thuộc tính. Bạn chuyển chuột đến điểm cần vẽ, kéo chuột để tạo hình mẫu kẻ ô, 
khi vẽ xong trên thanh đặc tính thể hiện chiều dài và r ộng của hình mẫu giấy kẻ 
ô đang tạo và toạ độ điểm đầu của nó. 
 
C
 
 
Nhóm  công cụ Shape bao gồm các công c ụ Báic Shape s ( để tạo các hình th ể 
cơ bản), Arow Shapes( t ạo các hình m ũi tên), Flowchart Shapes ( T ạo các đối 
tượng dùng trong l ưu đồ), Star Shapé ( T ạo hình ngôi  sao) và  Callout Shapes ( 
tạo các hình bao cho l ời thoại). Bạn chọn một công cụ shape b ằng cách 
giữchuọt tại biểu tượng của công cụ shapes để mở menu flyout và  chọn một 
 166
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

công cụ trong nhóm . Khi một công cụ trong nhóm được chọn, bạn có thể chọn 
hình thể muốn tạo trên thanh thu ộc tính trước khi tạo đối tượng trên trang v ẽ. 
 
 
Hình 6. 41: Bảng mẫu công cụ perfect shape 
 
ạn có thể bấm và ké o tuỳ ý vì đối tượng sẽ có hướng cố định. Đối với loại 
Cau
perfec để điều chỉnh hì nh 
dạng đ
đường  thay đổi theo cách bình th ường. Bạn cũng có thể 
chỉ
Object Properties, ch ọn tab Perfect Shape và b ạn có thể kéo các thanh tr ượt để 
iều chỉnh hình d ạng của đối tượng. 
 
Có hai aragraph Te xt. 
- V
đó có 
Artisti i đoạn văn bản trên 1 dòng . V ăn bản dạng này có th ể 
huyển thành d ạng đường Bezier thông th ường để điều chỉnh lại hình ảnh B
llot, hướng kéo của bạn sẽ xác định hướng của đối tượng. Một đối tượng 
t shape có thể có một hoặc nhiều điểm điều khiển 
ối tượng. Các thu ộc tính cơ bản khác của đối tượng perfect shape nh ư 
 biên hay màu tô có thể
nh sửa bằng cách b ấm nút c huột phải và chọn mục Properties để mở của sổ 
d
 
Công cụ tạo Text: 
 kiểu văn bản: văn bản Artistic Text và v ăn bản P
ăn bản Artistic Text: Th ường dùng cho các v ăn bản ngắn trong bản vẽ, sau 
thể áp dụng các bi ến đổi làm biến dạng các văn bản loại này . Văn bản 
c thể hiện mỗ
c
thông qua các nút trên đường path. V ăn bản Artistic Text có th ể uốn theo một 
path hoặc đường biên của hình dạng bất kỳ. 
 
 
Hình 6. 42: Văn bản Artistic Text 
 
- Văn bản Paragrapt Te xt: Văn bản paragra pt text gần giống văn bản trong 
 167
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

các chương trình s oạn thảo, dà n trang nh ư Ms,Wor d…Văn bản được lưu 
giữ trong fr ame, văn bản sẽ tự động tràn xu ống dòng d ưới  nếu nó lớn hơn 
chiều rộng của frame. Định lại kích thước hoặc xô nghiêng frame s ẽ chỉ làm 
biến dạng frame, không ảnh hưởng tới văn bản chứa bên trong. Sau khi  làm 
biến dạng frame, v ăn bản bên trong s ẽ tự sắp xếp the o hình dạng mới của 
frame. 
- 
  
Hình 6. 43: Văn bản Paragraph Te xt 
ể tạo văn bản Paragr aph Te xt, bạn kéo con tr ỏ của công cụ Text t rên trang v ẽ 
hứa văn bản. Văn bản được nhập vào sẽ được căn hàng bên trong 
t việc có thể làm sau khi ch ọn các ký t ự bằng công cụ Shape là bạn có thể di 
ển các ký t ự đã chọn tới các vị trí khác b ầng cách ch ọn và kéo m ột hoặc 
 chóng điều chỉnh khoảng cách gi ữa các ký t ự và giữa các từ 
ằng cách dùng công c ụ Shape kéo handle điều chỉnh ở phía dưới bên phải khối 
văn bản. Kéo sang bên ph ải sẽ làm tăng khoảng cách và ké o sang bên trái s ẽ 
làm giảm khoảng cách. N ếu kéo bình thường sẽ làm th ay đổi cả khoảng cách 
ữa các ký t ự và khoảng cách gi a các từ, nếu Shift- kéo sẽ chỉ làm thay đổi 
êng khoảng cách gi ữa các từ.  
  
Đ
để tạo frame c
frame. 
 
Định lại vị trí các ký t ự 
Mộ
chuy
nhiều node  điều khiển ký tự. Điều này sẽ làm di chuy ển vị trí tương qua n giữa 
chúng và các ký t ự khác trong kh ối văn bản.  
Bạn có thể tăng hoặc giảm kh oảng cách dòng c ủa một khối văn bản Artistic 
Text bằng cách kéo handle điều khiển khoảng cách dòng lên ho ặc xuống.  
Bạn có thể nhanh
b
gi
riữ
 
Điều Chỉnh thuộc tính m àu tô và đường biên cho v ăn bản 
Bạn có thể điều chỉnh thuộc tính màu tô (fill) và thu ộc tính đuờng biên  
(outline-chi ều dày, kiểu nét và m àu nét) cho v ăn bản như bất cứ đối tượng bình 
thường khác. Để áp dụng cho toàn bộ khối văn bản, bạn chọn nó bằng công cụ 
Pick. Để áp dụng cho một vài ký tự, bạn có t hể chọn chúng b ằng công c ụ Text 
hoặc Shape. Tuy nhiê n, việc áp dụng cho riêng t ừng ký tự sẽ phức tạp hơn và 
việc điều chỉnh vị trí cho các ki ểu tô màu đặc biệt sẽ khó hơn. 
 
 
 168
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Công cụ tạo hiệu ứng “Effect” 
 
 
Công cụ tạo hiệu ứng blend: 
  
iệu ứng blend t ạo ra một lo H
đạt các đối tượng trung gian có liên k ết động với 
ối tượng ban đầu và các thuộc tính của các đối tượng trung gian có tính c hất 
chuyển tiếp dựa theo hai ho ặc nhiều đối tượng ban đầu. Khi hai đối tượng được 
áp dụng hiệu ứng ble nd thông th ờng, các đối tượng chuyển tiếp trung gian s ẽ 
ay đổi về hình thể, màu tô, nét v ẽ, kích thước và vị trí, được tính toán t ừ hai 
 một đối tượng khác, hi ệu ứng blend c ũng có thể được chia thành  
ột số hiệu ứng Blend con ho ặc huỷ bỏ hiệu ứng. 
Hu ứng Blend ch ỉ được tạo bằng công c ụ Interractive Blend k ết hợp với các 
ỳ chọn trên thanh thu ộc tính. Mặc định, khi hi ệu ứng Blend đầu tiên được tạo ư
th
đối tượng ban đầu. Bạn còn c ó thể chỉnh sửa thuộc tính của đối tượng ba n đầu 
tại bất kỳ thời điểm nào, không c ần tạo lại hiệu ứng blend. B ạn cũng có thể 
kiểm so át được số lượng đối tượng trung gia n được tạo ra, xác định được mức 
độ chuyển tiếp trong quá trình blend. S ự chuyển tiếp có thể được sắp xếp theo 
đường dẫn của
m
iệ
tu
ra, một loạt gồm 20 đối tượng trung gian s ẽ xuất hiện giữa 2 đối tượng ban đầu. 
sau đó bạn có thể điều chỉnh các tuỳ chọn the o ý mình.  
Trong hiệu ứng blend c ũng có một số điểm điều khiển. Mỗi điểm điều khiển 
ứng với 1 tuỳ chọn trên thanh thu ộc tính.  
 
 
Hình 6. 44: hiệu ứng bl end 
 
ể nhanh chóng và o trạng thái ch ửa hiệu ứng Blend, b ạn nhấp đúp vào đối 
bi i 
 xoá bỏ hiệu ứng blend, b ạn bấm chọn phần chuyển tiếp của hiệu ứng và Đ ỉnh s
tượng trung gian b ất kỳ, ngay lập tức, thành ph ần điều khiển sẽ hiện trên nhóm 
Blend và các tu ỳ chọn trên thanh thu ộc tính sẽ thay đổi tương ứng. Chúng ta s ẽ 
thấy những tuỳ chọn thông d ụng nhất như số bước, góc quay, màu s ắc, gia tốc 
n đổế
ểĐ
chọn menu Efects/ Clear Blend. B ạn cũng có thể kích vào nút Cl ear Blend trên 
 169
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

thanh thu ộc tính. Hiệu ứng sẽ lập tức được xoá bỏ. Các đối tượng vẫn đươc giữ 
nguyên. 
 
Hiệu ứng C ontour:
  
Phương pháp nhanh nh ất để ấp dụng hiệu ứng Contour là dùng công c ụ 
teractive Contour kết hợp v In ới các tuỳ chọn trên thanh thu ộc tính. Bạn hãy tạo 
à chọn đối tượng muốn áp dụng hiêu ứng cont or, áp dụng m àu tô và đường 
tour bấm vào đối tượng và  
ệu ứng sẽ tạo Contour ở v
biên c ho đối tượng. Sử dụng công c ụ Interactive Con
n trỏ từ trong ra  ngoài đối tượng, hi kéo. Nếu kéo co
bên ngoài đối tượng và ngược lại. Góc kéo không ảnh hưởng tới kết quả, chỉ có 
hướng tương đối so với tâm của đối tượng là ảnh hưởng. Để huỷ bỏ hiệu ứng 
Contour, b ạn chọn Effects/Clear Cont our. 
Hiệu ứng Tranfarency:
  
Hiệu ứng trong s uốt có rất nhiều tuỳ chọn trên  thanh thuộc tính. Bạn hãy thử 
thay đổi các kiểu hiệu ứng trong su ốt khác nhau trong m enu Tra nfarency Type 
và xem  kết quả của nó. Chú ý v ới các kiểu khác nha u, vùng g ần điểm điều 
khiển màu trắng vẫn là vùng ít trong su ốt. Thay đổi kiểu trong Tranfarenc y 
ype chỉ ảnh hưởng tới hình thức áp d T ụng, còn m àu thực tế của đối tượng vẫn 
không t hay đổi. 
 
Hiệu ứng Drop Shadow  
  
Bạn có thể tạo bóng đổ dễ dàng bằng công c ụ Interactive Drop Shadow  k ết 
hợp với các tuỳ chọn trên thanh thu ộc tính. C ó 2 dạng bóng đổ: bóng đổ phẳng 
và bóng đổ phối cảnh. Bóng đổ phẳng có hình dáng gi ống đối tượng điều khiển 
và đươc dịch chuyển về phía trê n, phía dưới, sang trái, ph ải. Ngoài độ lệch về 
le, điều chỉnh độ mờ dần của bóng ở vùng 
Hiệứvị trí, bóng đổ phối cảnh có thêm nhi ều thuộc tính có th ể điều chỉnh được. bóng 
đổ phối cảnh có thể giả lập được bóng đổ thực tế. bạn có thể tạo góc nghiêng 
bằng tuỳ chọn Drop Shadow  Ang
nằm xa đối tượng bằng tuỳ chọn Drop S hadow Fa de. Tuỳ chọn Drop Sha dow  
Stretch cho phép điều chỉnh mức độ kéo dài của bóng. B ạn có thể sử dụng các 
hiệu ứng Drop Shadow  định sẵn giống như các hiệu ứng định sẵn dạng tương 
tác khác. 
 
 u ng 3 chiều  
Khi ch ụ Interractive Extrude, thanh thu ộc tính sẽ thể hiện các tuỳ 
chọc ành nhiều vùng, ba o gồm các chức 
nănn ẵn, kiểm so át hình thể, chiều sâu, vị trí điểm tụ, 
gócu à mức độ vát cạnh. 
 ọn công c
n ủa hiệu ứng. Các tu ỳ chọn nhóm  lại th
g hư lưu hiệu ứng định s
 qay, ánh sáng, m àu sắc v
 
Hình 6. 45: thanh thu ộc tính công c ụ Interractive Extrude 
 
 170
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Để thực hành á p dụng hiệu ứng Extrude, b ạn hãy thực hành theo các b ước sau: 
ột đối tượng. 
ướng bất 
ố thành ph ần điều khiển của hiệu 
à ký hiệu "X". Khung xem tr ước cho biết 
xtrude. Ký hiệu "X'  cho biết vị trí 
ùng với tọa độ con trỏ đang kéo. 
ạng khứng xem  trước sẽ phụ thuộc vào vị trí điểm tụ. 
i tượng ba n đầu sẽ xuất hiện. Bạn vừa áp dụng xong m ột hiệu ứng - Tạo m
- Chọn công cụ Interractive Extrude 
-  Kéo con tr ỏ tử tâm đối tượng đang chọn ra phía ngoài, theo h
kỳ. Chú ý, khi  kéo sẽ xuất hiện một s
ứng, các khung xem tr ước v
hình dạng và hướng của hiệu ứng E
điểm tụ của hình kh ối, nó c ó tọa độ tr
Hình d
- Kéo điểm tụ, sao cho hình th ể khung xem tr ước đạt được như ý muốn và 
thả nút chuột. Chú ý, nga y khi bạn thả nút chuột, nhóm Extrude liên k ết 
với đố
Extrude với các thông s ố tạo khối mặc định của CORE LDRAW. 
 
Hình 6. 46: điểm tụ trong hiệu ứng Extrude 
àm biến dạng đối tượng ( Interac tive Envelope Tool):  
 L
Dùng làm biến dạng đối tượng theo các nút ch ỉnh xung qua nh của đối tượng. 
- Dùng bộ mẫu khuôn d ạng: Bạn cọn đối tượng bạn muốn ép theo mẫu. 
Chọn Tap Add Preset để mở danh sách mẫu và chọn mẫu mà bạn muốn 
chọn. Chọn Appl y sau khi đã chọn xong. N ếu bạn không mu ốn lấy mẫu 
đã chọn thì bạn chọn nút Reset để huỷ khuôn m ấu vừa chọn. 
-  
 
Hình 6. 47: danh sách b ộ mẫu khuôn d ạng Interactive Envelope Tool 
 
Làm biến dạng đối tượng theo 1 hướng ( Inte ractive distortion Tool ) 
  
Khi bạn kéo sẽ làm cho các nút điều kiển biến đổi theo hướng mũi tên. Bạn có 
thể chọn các kiểu biến đổi trên thanh thu ộc tính. 
 171
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 48: Sử dụng công c ụ Inter active distortion Tool 
 
 
 
Công cụ lấy màu mẫu và đổ màu : 
  
 
Công cụ lấy màu mẫu: 
  
Đây là công c ụ rất hữu hiệu để bạn copy c hính xác m ột màu . Dùng c ông cụ
Edropper Tool tr ỏ vào 1 m àu bất kỳ nào trên bản vẽ, ban sẽ coppy m àu nga y
chính chỗ đó. Màu m à bạn copy được s 
 
ẽ hiển thị ở phía dưới, góc bên ph ải màn 
 
Công cụ đổ mhình. N hấp đúp vào ô m àu đó sẽ mở ra hộp Unif orm fill. 
Ở đây bạn có thể đọc được các thông s ố chính xác c ủa màu mà b ạn đang sử
dụng. 
 àu: 
Bạn có thể ọn được cho đối tượng bất kỳ bằng công c ụ 
hđổ màu vừa ch
 
 Painbucket Tool. Khi con tr ỏ chuột biến đổi thành hì n , bạn có thể đổ 
i trỏ chuột biến thà nh hình: 
  , bạn đổ màu cho nét  màu cho đối tượng. Kh
của đối tượng. 
 
 
 
Công cụ đường biên:  
 
 
Đường biên có thể là đường pat h đóng hoặc mở, bạn có thể điều chỉnh h
dạng của nó tới từng chi tiết. Các thu ộc tính của đường biên c ho phép b ạn th
đổi màu, xá c lập chiều dày đường biên, ki ểu đườn
Trên thanh thu ộc tính, xác l ập chiều dày nình 
ay 
g nét… 
ét bằng cá ch nhập giá trị trực tiếp 
line Wi dth và nh ấn phím Enter ho ặc bấm vào nút tam  
p và chọn giá trị định sẵn trong danh sách v ừa xuất hiện. 
t Arrowhead 
đầu mũi tên. 
ng 
ịnh sẵn và chọn 1 kiểu trong danh trong hộp nhập Out
giácbên ph ải hộp nhậ
Để áp dụng dạng đầu mũi tên cho pat h mở, bạn bấm vào nút Star
Selector ho ặc nút  End Arrow head  Selector để mở hộp chọn dạng 
Bộ chọn này dùng để gắn một biểu tượng tại điểm đầu hoặc cuối của đườ
path. Để áp dụng kiểu nét đứt đoạn cho đường path, b ạn bấm vào nút Outline 
Style Selec tor để mở danh sách các ki ểu nét đ
sách này. 
 172
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Một cách khác để xác lập thuộc tính đường biên là s ử dụ
trong hộp công cụ . Khi bạn kích vào côngng công c ụ Outlin e 
 cụ bút mực sẽ mở ra hộp thoại 
Outline Pen ( F12). 
 
Hình 6. 49: hộp thoại Outline Pen 
iên: 
- Tuỳ chọn Scale With Image: N ếu tuỳ chọn này được chọn, khi bạn tăng 
hay giảm kích cỡ của path hay đối tượng thì chiều dày nét cũng sẽ thay 
đổi theo. 
ếu tuỳ chọn 
Behind Fill không được chọn thì chiều dày nét c ủa path vẫn được thể 
 chọn thì phần màu tô sẽ lấn 
tới đương path cơ sở và làm chi ều dày nét th ể hiện bị giảm đi một nửa. 
 
 tô màu:  
Các tuỳ chọn khác của đường b
- Tuỳ chọn Behind Fill: Trong m ột path đọng và có m àu tô, n
hiện đầy đủ. Nếu tuỳ chọn Behind Fill được
 
 
Công cụ
 
 
Khá
tròn, g có thể sử dụng m àu tô fill cho các path m ở, nhưng 
bạn
hộp t
Co ô lại có thuộc tính và t uỳ 
chọn rg
- T
mu àn hình. 
- Xá
lập s
không c ạn thấy 
xuất hiện hộp thoại: 
 i niệm tô màu  được dùng để chỉ phần màu tô phía  trong 1 pat h đóng ( hì nh 
 chữ nhật….). Bạn cún
 phải chọn Fill Open Curvers trong trang General ( Document/General) c ủa 
hoại Options ( Ctrl+J). 
relDraw 10 có rất nhiều kiểu tô m àu, mối kiểu t
iên của nó. 
ô màu nhanh cho đối tượng: Chọn đối tượng cần tô, kích và o màu 
ốn chọn trong da nh sách m àu nằm bên pải m
c lập kiểu tô mặc định: Kiểu tô mặc định là kiểu tô mà bạn đã thiết 
ẵn để khi vẽ một đối tượng, m áy sẽ tự động tô theo kiểu tô này. Bạn 
ần phải chọn đối tượng, bạn chọn Fill Color Dialog, b
 173
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 50: hộp thoại Fill Color Dialog 
 
Trong 
thì bạn u cho chữ nghệ thuật. 
Par ể mặc định m àu cho chữ thường. Chọn OK,  máy  
xuấđó bạn chỉ chọn phần  Graphic. N ếu muốn mặc định m àu cho c hữ 
 đánh dấu phần Artistic để mặc định mà
agraph Text dùng đ
t hiện hộp thoại:  
 
Hình 6. 51: hộp thoại Fountain Fill 
nh và chọn OK. 
ộc tính. M ặc định các ki ểu tô Fountain 
 , bạn có thể điều khiển điểm đầu và điểm cuối của màu  
ạo màu chuyển the o các góc c ủa 
ờngò  tô này 
chuyển c lại vị 
trí 180 
c sử dụng.  
Chọn màu bạn muốn làm  mặc đị
- Kiểu tô Fountain Fill: Công c ụ này dùng để tô m àu cho đối tượng theo 
kiểu phun m àu, nó c ho phé p tạo ra các d ải chuyển màu mịn màng giữa 
các màu. C ó 4 kiểu tô màu Fountain Fill. 
Linear Fill:( Chuy ển màu theo ph ương thẳng) Bạn chọn đối tượng muốn tô, 
rồi chọn công cụ Interactive Fill trong h ộp công cụ. Chọn kiểu Linear Fill t ừ 
danh sách Fill Type trên thanh thu
Fill sẽ gồm hai màu
tô, hướng và góc chuy ển màu, con trượt và điểm tâm. 
Radial Fill: T ạo chuyển màu theo các vòng t ròn đồng tâm. B ạn có thể truy 
xuất kiểu tô này b ằng cách chọn mục Radial o ẻ dah sách Fill Type. 
onical Fill: Kiểu Conical Fill cho phép t C
đư  trn, làm cho đối tượng trông nh ư một hìng chóp. Màu
ượ  từ màu  đầu tiên (0 độ) tới màu cuối cùng ( 180 độ) và ng
độ tới 360 độ. 
Square Fill: Chuy ển màu theo vuông 90 độ. Kiểu tô nà y ít đượ
 174
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Để thay 
Picker tr
ch à ô màu mặc định, bạn có thể chọn các m àu này hoặc other 
để chọn 
Trong hộ
màu Form – To không ph ải là cặp màu đen - trắng, bạn có thể cọn hướng 
chuyển màu giữa hai m àu trên bánh xe m àu bằng 3 nút bê n trái bánh xe 
màu. Nút thứ nhất sẽ chuyển màu theo h ướng thẳng trên bánh xe  màu, nút  
gược chiều kim  đồng hồ, nút thứ 3 sẽ 
chuyển theo chiều kim  đồng hồ. 
 đổi màu  đầu hoặc cuối, bạn có t hể sử dụng hai hộp chọn màu Col or 
ên thanh thuộc tính. Bấm vào hộp chọn Color Picker để mở bộ 
u với các ọn m
màu tuỳ ý trong h ộp thoại Select Color. 
p thoại Fountain Fill, khi tu ỳ chọn Two C olor được chọn và cặp tô 
thứ hai sẽ chuyển màu theo h ương n
 
Hình 6. 51: hộp thoại Color blend 
 
Bạn có t hể thêm  nhiều màu bằng cách dùng công cụ Interactive Fill kéo  
àu trực tiếp từ các ô màu c ủa bảng m àu bên phải của sổ Corel Draw th ả 
Cm
vào đường định hướng 
 
ông cụ Interactive Mesh Fill:
  
ông cụ n 
C ày cho phép tạo mầu tô cho đối tượng thông qua m ột lưới do các 
node kết hợp lại. Thao tác v ới các node trên các đường Bezier thông th ường. 
Bạn có thể kéo tha y đổi vị trí các node này, thên ho ặc xoá bằng các công c ụ 
trên thanh thu ộc tính. 
Kiểu tô Mesh Fill có th ể kết hợp các màu s ắc tạo từ các kiểu tô Uniform, 
Fountain, Pattern, Texture và Post Script v ới việc chỉnh sử chúng trong l ưới 
Vector, điều này sẽ giúp bạn tạo ra các hi ệu quả màu  tô đặc biệt mà không th ể 
tạo bằng các ph ương pháp khác. 
Để tạo kiểu tô Mesh Fill , b ạn làm theo các b ước sau: 
- Dùng công c ụ Pick c họn một đối tượng m uốn chỉnh sửa 
- Chọn công cụ Interactive Mesh Fill 
- Trên thanh thu ộc tính,  nhập số dòng và s ố cột lưới muốn tạo ở các hộp 
nhập Grid Size. 
- Thử nghiệm điều chỉnh các nút trên l ưới. 
 
 175
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 52: Lưới Mesh Fill 
 
Bạn có thể thao tác v ới điểm lưới, đường lưới giống như các đối tượng vector 
thông t hường. Các điểm lưới có thể được thêm, xoá, thay đổi kiểu, có thể kéo 
ác điểm lưới và các handle điều khiển để thay đổi hình dạng cho lưới. Chuyển 
từ 
tha
Bạ
khô
Bit
 
 
 
Th
 
Cá
Khi đối tượng đang được chọn, bạn dùng con tr ỏ của công cụ Pick giữ nút 
chuột và kéo di chuy ển đối tượng tới vị trí khác r ồi thả nút chuột.Trong khi 
kéo, con tr ỏ sẽ chuyển thành con tr ỏ di chuyển và một đường biên xem  trước 
cho biết vị trí hiện tại của đối tượng để di chuyển đối tượng. Bạn có t hể sao 
chép thay vì di chuy ển đối tượng sang v ị trí khác b ằng cách kéo đối tượng tới 
vị trí mới, nhưng trong khi v ẫn giữ nút chuột trái, bạn nhấn nút c huột phái, rồi 
thả cả hai nút chu ột. Một cách khác, khi đối tượng đang đươc chọn, bạn di 
chuyển con trỏ tới chỗ đối tượng, nhấn nút chu ột phải và kéo d ến vị trí mới. 
Khi t hả nút chuột sẽ làm xuất hiện 1 m enu, bạn chọn mục Move Here ho ặc 
chọn Copy Here để di chuyển hoặc sao chép. Ch ọn Cancel để huỷ bỏ thao tác 
vừa làm. 
Bạn cũng có t hể di chuyển đối tượng bằng cách dùng m ũi tên lên, xu ống, trái, 
phải để di chuyển đối tượng từng khoảng cách nh ất định. Với bước di chuy ển 
đã xác lập ở trang Rulers c ủa hộp thoại Options. Để thay đổi tuỳ chọn này, bạn 
mở hộp thoại Options ( Ctrl+j), M ở cây thư mục Document, b ấm chọn Rulers 
để làm xuất hiện trang Rulers ở bên phải hộp thoại. 
 c
đường cong sang đường thẳng hoặc ngược lại. Các tuỳ chọn này đều có trên 
nh thuộc tính. 
n có thể áp dụng công c ụ Mesh Fill cho ảnh bitmap. Mesh Fill là m ột kiểu tô 
ng dễ dự đoán như các kiểu tô truyền thống khác. B ạn nên sao chép ảnh 
map và nên á p dụng Mesh Fill cho b ản sao. 
ao tác cơ bản trên đối tượng: 
ch di chuyển đối tượng: 
 176
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 53: hộp thoại Options 
 
Bước Nudge m ặc định là 0.1 Inches. B ũng có thể di chuyển đối tượng đi 
n
N
per Nudge: di  chuyển đối tượng từng đoạn bằng bước đã xác lập ở 
p Nudge nhân v ới số lần ở hộp Super Nudge. B ạn giữ phím Shift 
i nhấn các mũi tên 
-  
l 
 
 
L  đối tượng:  
 
C  
cá
đ bất kỳ một handle nào (  Ở góc hay c ạnh) để làm đối tượng 
o giãn theo tỷ lệ hoặc chỉ theo chiều rộng hặc chiều cao, hoặc không theo t ỷ lệ 
ưng vẫn giữ 
so với kích thước ban đầu . N hấn giữ Alt trong khi kéo ở 
đối tượngtheo hướng kéo dọc hay ngang. N hấn giữ Shift trong 
ấn giữ Ctrl 
 thước ban 
C
ỏ các kết quả biến dạng cho 
rrange/ Clear tranformations để trả lại hình dạng ạn c
hiều hơn hoặc ít hơn bước Nudge đã xác lập bằng các thông s ố ở hộp Supe r 
udge hoặc Micro Nudge.  
- Su
hộp nhậ
trong kh
Micro Nudge: di chuy ển đối tượng từng đoạn bằng bước đã xác lập ở
hộp nhập Nudge chia cho s ố lần ở hộp Micro N udge, Bạn giữ phím Ctr
trong khi nh ấn các mũi tên 
àm biến dạng
ông cụ Pick có th ể dùng để biến dạng đối tượng the o kiểu tương tác bằng
ch điều chỉnh một trong 8 đường vuông đen bao qua nh 1 hay nhi ều đối tượng 
ược chọn. Bạn kéo 
c
nào cả. 
o bất kỳ góc nà o để làm biến đổi kích thước đối tượng nh - Ké
nguyên tỷ lệ. Nhấn giữ Shift trong khi ké o sẽ làm biến đổi hướng từ tâm 
đối tượng ra ngoài. N hấn giữ Ctrl sẽ làm biến đổi tăng từng cấp độ là 
00%, 300%.... 2
bất kỳ handle ở góc làm  biến đổi kích thước không t heo tỷ lệ. 
- Chỉ biến đổi chiều rộng ha y chiều cao: kéo b ất kỳ handle nà o ở cạnh để 
biến đổi 
khi kéo sẽ làm biến đổi hướng từ tâm đối tượng ra ngoài . Nh
sẽ làm biến đổi tăng từng cấp độ là 200%, 300%....so v ới kích
đầu.  
orel Draw 10 Ghi nh ớ hình dạng ba n đầu của đối tượng khi nó được tạo ra, 
c biến dạng ba o nhiêu lần. Để b cho dù nó đã đượ
đối tượng, bạn chọn menu A
 177
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

ban đầu cho nó. 
 
ũng có thể quay hay xô nghiêng đối tượng bằng một trạng thái đặc biệt 
c  lần bấm thứ hai trên đối 
ọn. Khi  đó các Handle chuy ển thành m ũi tên để quay ho ặc xô 
n
đ
hanh chóng l ật một đối tượng theo chi ều thẳng đứng hoặc chiều ngang, 
b
BBạn c
ủa công cụ Pick. Trạng thái nà y sẽ xuất hiện sau
tượng đã ch
ghiêng, tâm của đối tượng sẽ trở thành tâm  quay động ( có th ể di chuyển 
ược) 
Muốn n
ạn bấm chọn các nút Mirror trên thanh thu ộc tính khi đang dùng công c ụ Pick 
ạn cũng có thể làm biến dạng đối tượng bằng công c ụ Free Transform 
   
trong nhóm công c ụ Shape. 
 
Để các biến dạng có độ chính xác cao và ki ểm so át được, bạn nên dùng c ửa sổ 
Docker Trasformation. C ửa sổ này bao gồm 5 trang t ương ứng với các phép 
biến dạng: dichuy ển ( Position), quay (R otation), co giãn đối xứng ( Scale And 
Mirror), kích th ước ( Size), xô nghiêng ( Skew). B ạn chọn Wi ndow/ D ocker/ 
Transform ations ho ặc Arrange/ Tra nsform ations, sau đó chọn 
Position(Alt+F7), Rotation (Alt+ F8), Sa cle ( Alt+F9) Size ( Alt+F10) ho ặc 
Skew từ menu phụ. 
Muốn thực hiện một phé p biến dạng nà o đó, bạn bấm chọn trang tương ứng 
trong của sổ docker, nh ập các giá  trị và bấm nút A pply áp dụng biến dạng cho 
đối tượng. 
 
Lấy đối xứng đối tượng:  Bạn nhấn phím  Ctrl và rê chu ột đi qua đối tượng, bạn 
se được 1 đối tượng đối xứng với đối tượng ban đầu. 
 
 
Sắp xếp thứ tự các đối tượng: 
 
Bạn cần biết về thứ tự sắp xếp đối tượng, đó là nguyên t ắc chủ yếu cần biết khi 
tổ chức nhiều đối tượng chồng lên nhau. Điều này sẽ giúp các b ạn kiểm soát tác 
động của một đối tượng nằm phía tr ước hoặc sau đối tượng khác. B ạn có thể 
chỉnh sửa thứ tự sau khi đã tạo ra các đối tượng. Mặc định đối tượng mới sẽ 
được xếp phía trước các đối tượng cũ. Để thay  đổi thứ tự trước sau của các đối 
tượng, và o Arrange/ O rder hoặc các nút trên thanh thu ộc tính. 
 
 
Hình 6. 54: biểu tượng Arrange/ O rder  
 
- To Front: L ệnh này sẽ mang đối tượng đang chọn lên trước tất cả các 
đối tượng khác bên tr ong hoặc ngoài trang v ẽ ( Shift+  Page Up) ho ặc 
Arrange/ O rder / To Fr ont. 
- To Back: L ệnh này m ang đối tượng đang chọn ra s au tất cả các đối 
tượng khác bên trong ho ặc ngoà i trang vẽ ( Shift+ Page Down) ho ặc 
Arrange/ Order / To Back. 
 178
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Forward One: L ệnh này m ang đối tượng đang chọn lên phía trước 1
bước trong th ứ tự 
 trước- sau hiện thời (Ctrl + Page Up) ho ặc Arrange/ 
Order / For ward O ne. 
- Back One: L ệnh này m ang đối tượng đang chọn lên phía sau 1 b ước 
- Behind: khi  dùng lệnh này cho phép b ạn chỉ định đối tượng và đối tượng 
ện ngay sau đối tượng vừa chỉ định (Arrange/ Order 
ới nhau, thiết lập mối liên hệ giữa chúng. Khi các đối 
ng đang ở trạng thái nhóm , chúng ta s ẽ ứng sử như một đối tượng đơn và vị 
a các đối tượng trong nhóm được giữ nguyên. B ất kỳ thay đổi 
ạng, hoặc những thuộc tính khác đối với nhóm  sẽ được ảnh 
hưởng đồng loạt cho các đối tượng trong nhóm. 
Để thực hiện việc nhóm các đối tượng, bạn chọn các đối tượng muốn nhóm 
bằng công c ụ Pick, chọn Arrange/Group ( Ctrl+G) ho ặc bấm lệnh Group trên 
thanh thuộc tính. 
 trong thứ tự trước- sau hi ện thời (Ctrl + Page Down)ho ặc Arrange/ 
Order / Back One. 
- In Fr ont Of: khi dùng l ệnh nà y, một con trỏ hình mũi tên m àu đen sẽ 
xuất hiện cho phép b ạn chỉ định đối tượng và đối tượng đang chọn sẽ 
được đặt ngay trên đối tượng vừa chỉ định theo th ứ tự trước – sau 
(Arrange/ Order / In Front Of) 
đang chọn sẽ xuất hi
/ Behind) 
- Reverse Or der: Lệnh này sẽ đảo ngược thứ tự sắp xếp trước sau của các 
đối tượng đang c họn ( Arrange/ Order / Reverse Order)  
 
 
Nhóm và tách nhóm các đối tượng:  
Khi có từ 2 đối tượng trở lên, lệnh Group s ẽ có hiệu lực. Lệnh này nhóm  các 
đối tượng đang chọn lại v
tượ
trí tương đối giữ
nào về vị trí, hình d
 
Hình 6. 55: biểu tượng Group 
ệnh U ngroup: 
p, lệnh U ngroup sẽ tách nhóm các đối tượng. Lệnh nà y có 
óm trở về từng đối tượng riêng, các nhóm 
. Việc tách nhóm  nhằm mục đích bỏ đi mối liên hệ 
iữa các đối tượng, nhưng không hoà n trả lại sự biến dạng hoặc những thay đổi 
ực hiện khi chúng còn n ằm trong nhóm . 
ể bỏ nhóm các  đối tượng, bạn phải chọn menu Arrange/ U ngroup ( Ctrl + U)  
hoặc b up trên thanh thuộc tính. B ạn cũng có thể chọn lệnh 
ngroup từ menu hiện ra khi b ấm nút chuột phải trên nhóm được chọn. 
i tượng trong b ản vẽ sẽ tự động tạo 
ên “ Nhóm hiệu ứng”, có liên k ết động để kiểm soát các đối tượng liên qua n 
ày, trước tiên bạn phải tách chung b ằng 
lệnh Arrange/ Break (Effect) Group Apart ( V ới (Effect) t ượng trung c ho tê n  
 
L
Ngược lại lệnh Grou
tác dụng đưa các đối tượng trong nh
trở thành c ác nhóm  riêng
g
thuộc tính khác đã th
Đ
ấm nút U ngro
U
Nhiều hiệu ứng mà bạn áp dụng cho các đố
n
đến hiệu ứng. Để tách các nhóm lo ại n
 179
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

hiệu ứng như Blend,….), sau đó dùng lệnh Ungroup 
Nếu muốn tách nhóm  ( bao gồm cả nhóm  con) t hành từng đối tượng đơn, bạn 
ự khác biệt rõ 
 là lệnh U ngroup chỉ bỏ nhóm  cho 1 cấp, 
óm con cấp thấp hơn 
 và vị trí tương đối giữa chúng 
ược cố định. Nhóm các đối tượng cũng là 1 cách để khoá c húng lại với nha u. 
Nhưng nếu muốn, bạn có thể khoá đối tượng vào trang v ẽ bằng lệnh Lock. Khi  
ác đối tượng bị khoá, chúng có th ể xuất hiện, in, hay được chọn nhưng không 
ể di chuyển, chỉnh sửa hay t hay đổi thuộc tính. Tương tự như lệnh Group, 
ể khoá các đối tượng đang chọn, bạn chọn menu Ar range/Loc k Object ho ặc 
chọn lênh 
nLock trên menu vừa xuất hiện. 
bạn không 
u cách 
ển qua y hoặc biến dạng 
ải sẽ nhân đôi đối tượng 
ở trước đối 
tượng ban đầu. 
plicate: 
iúp bạn tạo ra bản sao và t ự đọng dịch chuyển bản sao một khoảng 
it/Duplicate ( Ctrl+D). Đối tượng được tạo bằng 
ết với đối tượng gốc sau khi t ạo. sẽ cần tới lệnh Ungr oup All để bỏ nhóm cả cho các nhóm  con. S
rệt giữa lệnh U ngroup và U ngroup All
nếu nhóm  này có c hứa các nhóm  lồng nhau thì nh ững nh
vẫn được duy trì. 
 
 
 
Khoá và m ở khoá các đối tượng: 
Khi các đối tượng được nhóm  với nhau thì t ỷ lệ
đ
c
th
lệnh Loc k gồm 3 lệnh Lock, UnLock và UnLock All. 
Đ
bấm nút chuột phải trên đối tượng và chọn Lock Object t ừ menu vừa xuất hiện. 
Đối tượng sẽ không được chỉnh sửa cho đến khi mở khoá. 
Để mở khoá cho đối tượng, bạn bấm chính xác và o đường biên đối tượng và 
chọn Arrange/ UnLock ho ặc bấm nút chuột phải trên đối tượng và 
U
Để mở khoá cho t ất cả các đối tượng đang bị khoá trê n 1 bản vẽ, 
phải chọn đối tượng, c hỉ cần chọn menu, Arrange/ Unlock All. 
 
 
Sao chép, nhân đôi, nhái lại đối tượng: 
 
Lệnh Copy: 
Sao c hép là một trong những thao tác th ường dùng nh ất, việc sao chép có th ể 
ực hiện bằng nhiề th
- Phương pháp nh ấn nút chu ột phải: Khi di chuy
đối tượng bằng công cụ pick, việc nhấn chuột ph
đang trong quá trình bi ến đổi hành 1 đối tượng bản sao. 
- Phương pháp s ử dụng phím Spacebar: Nh ấn phím  Spacebar K hi di 
chuyển quay ho ặc biến dạng đối tượng bằng công c ụ pick cũng tạo được 
bản sao của đối tượng. Nhấn phím Spacebar s ẽ tạo ra một bản sao đúng 
tại vị trí co n trỏ hiện hành, n ếu nhấn giữ phím  này sẽ tạo nhiều bản sao 
theo đương drag. 
- Phương pháp nh ấn phím  cộng (+ ): khi một đối tượng được chọn, nhẫn 
phím  + trên bàn phím  sẽ tạo ra bản sao tại cùng một vị trí và 
Lệnh Du
Lệnh nà y g
cách nhất định. Bạn chọn Ed
ó mối liên k cách này s ẽ không c
 180
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

KHoảng cách dịch chuyển the o chiều nga ng và chiều dọc của bản sao khi dùng 
nh Dupli cate được xác định ở hai hộp nhập của tuỳ chọn Dupli cate Distance 
ộc tính khi không có đối tượng nào được chọn. 
 nghĩa là nhái l ại, giả lặp, là sinh s ản vô tính.  Việc tạo ra đối tượng 
ới bằng cách Duplicate và Clone là t ương đối giống nhau nh ưng mỗi phương 
ệ quả riêng. Lê nh Clone s ẽ tạo ra bản sao từ đối tượng gốc. Khi 
thuộc tính, làm bi ến dạng đối tượng cho đối tượng điều khiển thì đối 
ng clone s ẽ tự động thay đổi theo. 
 
g 
 tạo ra bản sao c ùng với khoảng dịch chuyển 
ng Cl one mới tới vị trí khác 
 đổi các thu ộc tính nhu m àu tô, đường 
 đổi theo 
i, một đối 
c tạo. Kéo đối tượng thứ hai này ra xa kh ỏi đối 
i tượng này được thể hiện rõ 
ay đổi một hoặc nhiều thuộc tính của 
phức tạp 
ó thể nhận diện đối tượng Clone ho ặc đối tượng điều khiển 
ọn đối tượng. Tuy nhiên thanh 
 khiển nào 
ng 1 bản vẽ. Để nhanh chóng xác định đối 
ể mở menu. 
Clones: nếu đối tượng đang chọn là đối tượng điều khiển, 
 đối tượng Cl one của 
đối tượng diều khiển này. 
ang chọn là đối tượng Cl one, chọn 
 
h của 1 đối tượng col one đã thay 
i đối tượng điều khiển, bạn bấm nút c huột phải vào đối 
tượng clone và ch ọn Revert To Master t ừ menu vừa xuất hiện để lấy lại 
các thuộc tính của đối tượng điều khiển và nối lại liên kết cho các thu ộc 
tính nà y. 
 
 
Gióng hàng và dàn đều đối tượng: 
Khi cần sắp xếp đối tượng có quan hệ với nhau ho ặc với trang vẽ, bạn sẽ cần 
tới hộp thoại Align and Distribute. L ệnh Al ign giúp b ạn gióng hà ng giữa các 
đối tượng, lệnh Distribute cung c ấp phương phá p dàn đều đối tượng trong m ột 
phạm vi định trước. Sử dụng hai lệnh nà y bằng cách ch ọn menu A range/ Align lệ
trên thanh thu
Lệnh Cl one: 
Clone có
m
pháp có 1 h
thay đổi 
tượ
Để tạo một đối tượng Clone c ủa đối tượng đang c họn, bạn chọn Edit /Clone và
đối tượng gốc sẽ trở thành đối tượng điều khiển để kiểm soát các đối tượn
clone. 
- Chọn menu Edit/ Clone để
giống như lệnh D uplic ate. Di chuy ển đối tượ
trên bản vẽ. 
- Chọn đối tượng gốc và thay
biên…, bạn sẽ thấy đối tượng clone s ẽ thay
- Chọn đối tượng điều khiển và c họn Edit/ Clone l ần thứ ha
tượng clone n ũa sẽ đượ
tượng gốc sao cho toàn b ộ đố
- Chọn đối tượng điều khiển và th
nó, bây gi ờ cả hai đối tượng cùng thay đổi. 
Việc tạo đối tượng clone r ất đơn giản, nhưng tìm ra đối tượng chủ thì 
hơn một chút. Bạn c
bằng cách quan sát trên thanh tr ạng thái khi ch
trạng thái không cho bi ết đối tượng cl one nào đi với đối tượng điều
khi có nhi ều đối tượng clone trên cù
tượng , bạn bấm nút chuột phải trên đối tượng đ
- Lệnh select 
chọn lệnh Select Clones t ừ menu để chọn tất cả các
- Lệnh Select Master: n ếu đối tượng đ
menu Select Master để chọn dối tượng điều khiển của đối tượng Clone
này. 
- Lệnh Revert to Master: N ếu thuộc tín
đổi khác đi so vớ
 181
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

and Distribute để mở hộp thoại hoặc bấm nút Align and Distribut e trên thanh 
thuộc tính.  
 
 
Hình 6. 56: Hộp thoại Align a nd Distribute 
 
Phím  tắt để gióng hàng: 
Nếu cần nhanh c hóng gióng hà ng đối tượng, bạn dùng công cu Pick để chọn 
ch đều nha u theo 1 trong hai cách: 
nd Of Selection, lấy hai đối tượng ngoài cùng so v ới tâm  chung của 
đối tượng đang chọn làm  chuẩn 
ủa trang hi ện hành 
ỳ chọn còn lại giúp bạn xác định điểm tham c hiếu trên c ác đối 
 khi chia đều koảng cách. 
bạn dùng phím t ắt với hai điều kiện: có ít 
- Dàn đều dựa theo biên ph ải: Shift +R 
a theo biên đáy: Shift +B đối tượng 
- Gióng hàng theo biê n đỉnh: T 
- Gióng hàng theo bê n trái: L 
- Gióng hàng theo bê n phải: R 
- Gióng hàng theo biê n đáy: B 
- Gióng hàng theo tâm  ngang: E 
- Gióng hàng theo tâm  dọc: C 
- Đặt vào giữa trang: P 
 
Lệnh distribute s ẽ tự động định khoảng cá
 
- Exte
các 
- Extend Of Page: để dựa vào c hiều rộng và c hiều cao c
làm chuẩn. 
- Những tu
tượng
 
Phím  tắt cho các l ệnh dàn đều: 
Nếu cần dàn đều đối tượng nhanh, 
nhất hai đối tượng được chọn và đang sử dụng công c ụ text. 
- Dàn đều dựa theo biên đỉnh: Shift +T 
- Dàn đều dựa theo biên Trái: Shift +L 
- Dàn đều dự
- Dàn đều tâm ngang: Shift +E 
- Dàn đều theo kho ảng cách d ọc: Shift +P 
- Dàn đều tâm đứng: Shift +C 
- Dàn đều khoảng cách đứng: Shift +A 
 
 
 182
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Cắt hàn và lấy phần giao giữa các đối tượng: 
 
Các lệnh weld, Trim, Intersection s ẽ dễ dàng giúp b ạn tạo ra các hì nh thể phức 
ker Sha ping: 
ng 
 
 tạp 
 
Cửa sổ doc
Các lệnh dùng để cắt, hàn, lấy phần gia o giữa các đối tượng, có thể hoạt độ
chính xác nh ờ cửa sổ docker Shaping. C ửa sổ này được mở bằng m enu
Arrange/Shaping ho ặc Window/ Docker/ S haping, sa u đó chọn Trim, Weld
hoặc Inters ection. 
 
 
Hình 6. 57: Cửa sổ do
 
- Lệnh Trim là l ệnh tạo hình được dùng ph ổ biến nhất, dùng để xoá
phần mà hai hoặc nhiều đối tượng chồng lê n nha u. cker Sha ping 
 bỏ 
- Lệnh Weld t ạo ra 1 hình th ể mới bằng cách hàn g ắn hai hay nhi ều đối 
- Lệnh Intersection t ạo ra 1 đối tượng là phần giao nhau c ủa hai hay nhi ều 
i 
, đối 
 
mất đi sau khi  chịu tác động cắt xén, hà n gắn hoặc lấy phần giao với đối 
c 
 
 
hất hai đối tượng đang chọn, cho dù các đối 
ng có chồng nhau hay không.  Các nút l ệnh trên t hanh t huộc tính sẽ không tượng chông lên nhau 
đối tượng 
 
Các tuỳ chọn nằmdưới tiêu đề Leave Originnal s ẽ giúp bạn giữ lại các đố
tượng gốc sau khi áp d ụng lệnh, các tu ỳ chọn nư sau: 
- Sourse Obj ects: khi  tu ỳ chọn này được chọn, sau khi á p dụng lệnh
tượng nguồn bạn chọn trước sẽ không bị mất đi 
- Target Objects: khi tu ỳ chọn này được chọn, đối tượng đích không b ị
tượng nguồn. 
 
Corel Draw 10 còn có các l ệnh Trim, Weld ho ặc Intersection trên thanh thu ộ
tính giúp b ạn áp dụng nhanh các l ệnh này c ho các hình th ể mà bạn chọn, mà
không cần phải mở cửa sổ docker  Shapi ng. Trên thanh thu ộc tính, các nút l ệnh
này sẽ có hiệu lực chỉ khi có ít n
tượ
có các tuỳ chọn để giữ lại hình nguyê n gốc như trong cử sổ docker Sha ping. 
 
 183
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 6. 58: thanh thu ộc tính docke r Shapi ng 
 
Chúng ta có th ể sử dụng đường dẫn mở làm đối tượng nguồn để cắt các đố
tượng đích có đường biên đóng. Kết quả đạt được là những nhát c ắt tách rời 
đường dẫn đóng thành t ừng phần. 
 i 
 
Hình 6. 59: Tách r ời đối 
 
 
Trong ví d ụ này, một đường cong m ở được sử dụng làm đối tượng nguồn và
đối tượng văn bản được dùng làm đối tượng đích khi áp d ụng lênh Trim. V ăn 
bản bị cắt và chuy ển đổi thành dạng curve t hông thường. Bằng cách áp d ụng
lệnh Arange/ Break curve Apart, b ạn có thể tách đối tượng mới thành từngtượng bằng đường dẫn mở 
 
 
 đối 
ng riêng bi ệt. 
ạo ch
ốn sử dụng . Chuy ển văn bản đang chọn thành d ạng curve tượ
 
 
Thực hành Bà i tập Corel:  
 
Tữ nổi: 
- Nhập văn bản mu
thông 
thường bằng phím t ắt Ctrl+q.  
 
 
 
B u tô và cho nét m àu đen. Chọn cô ỏ mà ng cụ Interactive Contour t ừ hộp công 
cụ để tạo hiệu ứng Contour cho đối tượng với kiểu Outside, b ước Contour Step 
là 1 và v ới giá trị Contour Offset thích h ợp (chúng tôi ch ọn Contour 
Offset=o.8mm).  
 
 
 
 184
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Có thể không cần tạo hiệu ứng Cont our nếu bạn không c ần tạo nền cho văn 
bản. 
Với nhóm Contour v ẫn đang chọn, bạn chọn men Arr agge / Bre ak Contour 
Group Apart để tách nhóm Contour. C họn hình văn bản phía trong (n ằm trên ) 
àu bên phải cửa sổ CORELDRAW) để bỏ đờng 
 và tô m àu đỏ. Chọn hình văn bản phía ngoài (n ầm dưới) và tô màu đen, đối 
tượng này sẽ đợc dùng làm nền. Chọn cả hai đối tượng và click chu ột phải vào 
Ô Nong (có dấu [X]) ở bảng m
biên cho hai đối tượng.  
 
 
ô màu trắng cho đối tượng vừa sao chép. Nh ấn phím  cộng (+) lần 
nữa để a và tô m àu bất kỳ cho nó để dễ phân biệt (chúng tôi ch ọn 
màu x- Chọn đối tượng màu đỏ, nhấn phím  cộng (+) ở bàn phím  số để sao chép đối 
tượng nà y. T
 tạo bản sao nữ
ám). Drag đối tượng m àu xám  về phía trái, xu ống dưới một chút để tạo 
phần bóng sáng cho v ăn bản. 
 
 
 
- Với đối tượng m àu xám  vẫn đang chọn, bạn Shift-click ch ọn thêm đối tượng 
màu trắng (có th ể dùng công c ụ Zoom phóng l ớn để dễ chọn đối tượng m àu 
trắng) và c lick vào nút Quick Tr ẫm trên th anh thuộc tính để dùng đối tượng 
màu xám cắt đối tượng màu tr ắng bê n dưới. Click ch ọn lại đối tượng m àu xám 
và xóa
  nó đi.  
 
 
Nếu v . nếu quá phức tạp thì 
dòng v ếu muốn), bạn có thể 
đổi mà đỏ nhạt cùng tông màu (cùng hue) v ới 
văn bả  phần bóng sáng b ớt chói. Nếu văn bản lớn hoặc ít chữ, chúng 
để tạo phần bóng tối cho văn bản. 
chép ăn bản nhỏ hoặc quá  dài. bạn có thể dừng ở đây
ăn bản nhỏ sẽ khó nhìn. V ới văn bản nhỏ (l~oặc n
u cho bóng sáng t hành một màu 
n chí nh để
ta có thể làm thêm các b ước tiếp theo 
 
- Click ch ọn đối tượng màu d ỏ, nhấn phím  cộng (+) ở bàn phím s ố để sao 
đối tượng này. TÔ m àu đỏ đậm (chúng t ôi chọn màu C=O, M=LOO, Y= LOO 
và K-40) cho đối tượng vừa sao chép. Nh ấn phím  cộng (+) lần nữa để tạo bản 
sao nữa và tô m àu bất kỳ cho nó để dễ phân biệt (chúng tôi ch ọn màu x~n). 
Drag đối tượng màu xám v ề phía trên, bên ph ải một chút (một khoảng tơng tự 
nh khi tạo bóng sáng) để tạo phần bóng tối cho văn bản. 
 
 185
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

-Với đối tượng màu xám v ẫn đang chọn, bạn Shift-click ch ọn thêm đối tượng 
màu đỏ đậm và click vào nút Q uick Trẫm trên thanh thu ộc tính để dùng đối 
tượng m àu xám  cắt dối tượng m àu đỏ đậm bên  dưới. Click ch ọn lại đối tượng 
màu xám  và xóa nó 
 đi.  
 
 
Để tăn cho các bóng, bạn dùng công c ụ Shape điều chỉnh lại các 
node t ng m àu trắng và m àu đỏ đậm tại nơi hai bóng này g ặp 
nhau. g thêm chi tiết 
rên hai đối tượ
 
 
Cách n t phức tạp) và dễ kiểm so át hơn việc 
dùng h
Để phá  tô các màu ch uyển cho vùng v ăn bản 
tạp quá dễ sinh ra 
i khi àu. ày tạo ra các đối tượng "nhẹ" hơn (í
iệu ứng Extrude 
t triển tiếp bài tập này, bạn có thể
và các bóng, ho ặc áp dụng sự trong s uốt chuyển dần cho các bóng b ằng công 
cụ Interactive Transpar ency. Tuy nhiê n các hiệu ứng thêm  vào s ao cho nội 
dung văn bản vẫn được chuyển tải text, dễ đọc và đừng phức 
lỗ  xuất phim  tách m
 
 
6.2.3 - Giới thiệu các phần mềm xử lý đồ hoạ khác 
6.2.3.1 - Fl ash: 
chuẩn  hoạ hoạt hình trên web. V ới 
hể bổ xung các hi ệu ứng thú vị cho trang web, làm  cho c húng c ó 
ấp dẫn hơn. Cá c doạn phi m flash có th ể thực hiện 
b nào khi trình th ể hiện Flash được cài đặt. Việc 
oạt hình đã mang lại những tích cực Ngày nay Flash đã trở thành một  cho dồ
Flash, bạn có t
tính tương tác cao h ơn và h
trên bất kỳ một trình duy ệt We
áp dụng đồ hoạ vecter cho các đoạn phim  h
mạnh mẽ và rất linh động cho Flash, các đoạn phim  Flash thường nhỏ gọn và 
tải xuống nhanh chóng. Có r ất nhiều chương trình để tao doạn phim  nhưng 
Flash vẫn được xem là công c ụ hưu hiệu nhất, chuyên nghi ệp nhất. Mang lại sự 
sống động, hấp dẫn cho các trang web 
 
6.2.3.2- Adobe Im age Ready:  
Đi kèm với Photos hop là chương trình ImageRea dy. Nó cung c ấp các tính năng 
tối ưu cho web là t ạo các file GIF ho ạt hình. PhotoS hop và Im ageReady k ết 
hợp với nhau sẽ tạo nên một môi trường hoà n hảo cho việc thiết kế đồ hoạ web. 
PhotoShop và Im ageReady có nhi ều cách thức giống nhau để hoàn thành cùng 
một công vi ệc. Vùng làm vi ệc của PhotoShop và Im ageReady bao g ồm các 
menu lệnh ở trên đỉnh của màn hình, m ột vài công c ụ, bảng dùng gi ống nha u. 
PhotoShop và ImageReady đều làm việc với ảnh bi
nhưng trong ImageReady b ạn có thể di chuyển các thàtmap, ảnh kỹ thuật số, 
nh phần như đoạn hoạt 
hình R ollover một cách trực quan. 
 186
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

ImageReady t ạo ảnh động trên c ơ chế chuyển tiếp giữa các Frame liên ti ếp. 
Bạn có thể đặt thời gian, tạo thêm frame m ới, chế độ xuất ảnh cho web r ất 
chuyên nghi ệp. Ngoà i ra Im ageReady còn gi ữ nguyên được các hiệu ứng ảnh 
mà bạn đã xử lý trong PhotoShop và ch ỉnh sửa được trong ImageReady  
 
6 .2.3.4- Xu h ướng về đồ hoạ hiện đại trên Web  
• Đơn giản 
•  Mang m àu sắc công ngh ệ, hiện đại. 
•  Sử dụng Fl ash nhiều. 
T ương: 
B ểu được một số điểm căn bản vềại ảnh, cách s ử dụng, các tha o 
g cá  
trên đây, bạ  trình và nắm vững được 
ạnh c  hoạ đó. 
shop:
ờ t mạnh và chuyên nghi ệp 
nh sử . 
 gi
g
 
hươn ững bức ảnh 
uật h hoạ 
về kỹ thuật
+ Corel Dr  để vận dụng kết hợp với các 
rìn
Bài tập chư
Học viên tự . 
 
 
 • Sử dụng Mutimedia  
óm tắt ch
ạn đã hi  các lo
tác tron c chương trình thi ết kế. Để áp dụng được những điều mà bạn đã học
n phải thật sự chuyên sâu vào t ừng chương
thế m
Photoủa mỗi chương trình x ử lý đồ
 
+ Môi trưng cho xử lý các tài li ệu ảnh rấ
+ Chỉ a và tạo ra các hi ệu ứng cho ảnh
+ Tạo raao diện cho trang W EB 
+ Chuyển iao diện sang m ôi trường WEB 
Corel:
+ Là c g trình đồ hoạ dựa theo các vector để dễ dàng tạo nh
nghệ th chuyên nghiệp, từ những hình ảnh Logo đơn giản đến các m in
. 
aw phù hợp cho t hiết kế tạo hình
chương th tạo hình ảnh động như flass, 3D… 
ơng 
 thiết kế dem o website c ủa cá nhâ n hay cơ quan, tổ chức của mình
 
 
 
 
 
 
 
 
 187
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chươ
FT ột giao thức chuẩn được định nghĩa trên 
Interne ây client là m ột hệ thống (thường là 
máy tí đến server ho ặc một hệ thống khác (FTP 
site) v
 
7.1 FT g lệnh 
Từ dấu ào : 
Trong đ rver/tên host : là máy chủ hoặc host cung c ấp dịch vụ ftp mà 
đ ở account) t
FTP bắt đầu kết nối với m nh công ng ười sử dụng được yêu cầu 
ào tên login và m ậ ư sau :  
login : 
passw ord : 
c kết nối, bạn c
ản  
óng kết nối đến ho
c help)  : hiển thị da
and (hoặc help co c mô 
về kết nối 
thiết lập kết xác định (với [host] là tên m áy). 
ự kết nối đế
ame(password)] : t
h về thư mơc ng 7. Các ph ương pháp c ập nhật thông tin lên web 
 
FTP là gì? 
P (File Transfer Protocol) là m
t. Nó là giao thức client/server, ở đ
nh của bạn) gửi các yêu c ầu 
à nhận được trả lời từ site đó. 
P dưới dạng dòn
 nhắc DOS nh ập v
ftp <ftp server/tên host> 
ó : FTP se
ăng ký (m bạn đã ại đó. 
áy này,  nếu thà
nhập v t khẩu. Khi đó màn hình nh
Sau thủ tụ ó thể thực hiện 1 số lệnh sa u :  
a) Những lệnh cơ b
quit : đ
? (hoặst từ xa, ngừng chương trình ftp.  
nh sách tất cả các lệnh ftp.  
mmand) : hiển thị bản ?comm
tả. g tóm tắt trực tiếp lệnh đượ
b) Lệnh 
open [host] : 
 đóng s nối đến máy tính 
close :
use [ nn host từ xa, trở lại ftp. 
hiết lập tên User.  
c) Lện
cd [directo
cdup : chury] : chuyển đ
yển về thư mục
tên file cụ định trên máy ở xa, nội 
ào tập ti
irectory ] : chuyển đến thư mục được xác định trên host ở xa. 
 gốc trên máy ở xa. 
c bộ] : dir [directory ] [
dung được đưa v liệt kê thư mục xác 
n trên máy cục bộ. 
lcd [d ến thư mục cục bộ. 
 188
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

ls [directory ] : liệt kê danh sách f ile trong th ư mục có thể. 
wd : xem th ư mục hiện hành của máy ở xa. 
d) Lệnh ận filep
 truyền nh
get <tê
put <tênn file nguồn> <tên bộ. 
 file nguồn> <tê ới 
máy ở xa với : <tên file n  đường dẫn tên tập tin trên host  ở xa bạn 
y về 
le đích> : là đường
oặc truyền đi mộ
ể dùng các k
danh sách file ngu
mget <danh sách file ngu
P dưới dạng tru
Giới thiệu một số c
 
WS_FTP P ro có thể kết nối tới bất kỳ hệ thống nào với điều kiện hệ thống 
FTP server. Nó c ũng cho phé p 
UNIX. 
ằng W
 dụng
 site mà c gọi là quá 
ite profile
- Site profile l ưu trữ các thông tin c ủa FTP site nh ư địa chỉ IP, Tên truy 
Password) mà bạn sử dụng để kết nối. 
• ại Connect to Remote Hos ở tại cửa sổ WS_FT P 
Pro, hã y nhấn c
1. Tại hộp tho ấn chuột vào Create  
Site. Hộp th file đích> : lấy tập tin từ máy ở xa về máy coc 
n file đích> : chuy ển tập tin từ máy máy coc b ộ t
guồn> : là
muốn lấ
<tên fi  dẫn và tên file t ại máy cục bộ  
Để lấy h
sách tên có tht nhóm  tập tin dùng l ệnh : m put và m get với danh 
ý tự đại diện như *, ?  
mput < ồn>  
ồn>  
 
 
7.2 FT
 yền file thông qua các ch ương trình 
7.2.1 hương trình FTP Client 
đó có địa chỉ IP chính xác và đã cài ứng dụng 
truyền các file gi ữa các hệ điều hành khác nhau bao g ồm cả Windows, O S/2 và  
 
7.2.2 Tạo kết nối b
sửS_FTP Pro client 
a vào các - Trước khi 
thông tin v ề WS_FTP Pro để truyền file, bạn phải đư
 bạn muốn kết nối tới. Quá trình này đượ
trình tạo S . 
nhập (Username) và M ật khẩu (
- Để tạo Site profile  bạn làm theo các b ước sau: 
 Nếu hộp tho t chưa m
huột vào C onnect để mở ra. 
 
ại Connect to Remote Host, nh
oại tạo Site Profile xu ất hiện 
 189
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

2. Vào tên m à bạn muốn gọi cho site m ới của bạn trong ô Name 
3. Trong ô “ Create In ”, nhấn chuột vào nút Browse và ch ọn thư 
mục mà bạn muốn lưu site của bạn vào đó. Nếu bạn muốn lưu nó 
vào thư mục gốc, hã y chọn thư mục Sites. 
203.162.1. 44 hoặc  ftp.Ipswitch4. Nhấn “Next  >“ 
5. Trong ô “ Host Name or IP Address ”,  vào địa chỉ của FTP site 
ủa FTP site. hoặc tên c
VD: .com  
6. Nhấn “Nex
7. Trong ô “ U
(Đây là tên ký khi tạo account ftp c ủa bạn) 
8. Trong ô “ P unt ftp 
trên 
(Mật khẩu n  
9. Chọn “Save
10. Nhấn “Fini
 
au khi bạn kết t ng 
thư mục(folder) mà b ạn chọn. Quá trình t ạo Site profile đã hoàn tất, bây giờ 
 2 uột vào nút  Connect 
- Hộp thoại Connec  
Pro sẽ tạo một kết nố ẽ 
ị tất cả các thư  
ông thì cửa sổ  
của site profile.  
uyền file 
- Sau khi k ết nối tới FTP site, b ạn đã sẵn sàng để truyền các file gi ữa máy 
h của bạn và F TP  
được chia làm 2 lo ại: 
• Upload: tru TP site 
• Downl oad: bạn. 
Giữa hai cửa sổ lớt >” 
ser ID”, vào tên truy nh ập (usernam e) 
 mà đã được đăng 
assword”, vào mật khẩu (passwor d) của acco
ày cũng được đăng ký khi t ạo account ftp c ủa bạn)
 Password” 
sh” 
-     S húc quá trình trên bạn sẽ nhìn t hấy site của bạn tro
bạn có thể kết nối tới site đó: 
 1.  Chọn site profile c ần kết nối 
.  Nhấn ch
 
t to Remote Host đóng lại và chương trình WS _FTP
i FTP. Nếu kết nối thành công, c ửa sổ bên tay ph ải s
hiển th
Nếu kh mục và file đuợc lưu trữ tại site mà b ạn kết nối tới.
bên tay phải sẽ để trống, bạn hãy xem lại các thông s ố
 
7.2.3 Tr
tín  site mà bạn đang kết nối. Quá trình truy ền file này
 
yền các file t ừ máy tính của bạn lên F
truyền các file t ừ FTP s ite về máy  của 
- n là 2 mũi tên để điều khiển truyền file 
 190
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chọn file tại cửa sổ bên phải (trên FTP site) và nh ấn chuột vào nút  để 
Downl oad fi ạn (hiển thị tại cửa sổ 
bên trái) le về thư mục hiện hành tr ong m áy của b
 
  Chọn file tại cửa sổ bên trái (Máy của bạn) và nhấn chuột vào nút để 
upload file l ổ bên 
phải) 
 
vài chức năngên thư mục hiện hành của FTP site (hi ển thị tại cửa s
 
7.2.4 Một  của WS_FTP 
 
Giao diện Classic và Ex  
ro có 2 plorer. Cả hai 
 chức năng 
n hiển thị. 
- Đối với người lần đ P Pro nên sử dụng gia o diện 
 trước khi sử dụ
 
ần này sẽ trình 
diện Classic. Đối với g  tính năng cũng hoàn toàn gi ống 
sic, chúng chỉ khác
 thông tin Site pplorer 
- WS_FT
đều có cácP P cách thể hiện giao diện, Classic và Ex
và hoạt động như nhau, chúng c hỉ khác nhau về giao 
ầu tiên sử dụng W S_FTdiệ
Classic ng giao di ện Expl orer 
-    P h bày các tính năng của WS_FTP Pro t hông qua giao 
iao diện Expl orer các
Clas
  nhau về giao diện hiển thị. 
7.2.4.1 Sửa rofile đã có sẵn 
 
a hãy bắt đầu b hộp 
thoại “Connnect to Rem t để 
hiển thị. Chúng t ằng hộp thoại “Connect to Remote Host”. N ếu 
ote Ho st” chưa được mở, hãy nhấn nút Connec
 191
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hộp thoại này để tạo, sửa chữa và sắp xếp lại các site profile c ủa bạn và các 
thư mục mà bạn sử dụng để lưu trữ chúng. Để sửa chữa site profile: 
• Chọn site profile c ần sửa chữa trong danh sách Site 
• Nhấn chuột vào nút Edit ở bên phải danh sách. 
 
Tại hộp thoại Site Option v ừa hiện ra,  bạn vào các m ục được hiển thị dọc 
ía trên cộ ost info, rt n, Advanc  thay 
g số sử dụng khi kết nối FTP site. 
y đ g để g i ó. 
ứcng lder  go diện chương trìnhtheo ph
đổi các thônủa hp thoại H Staup, Sessio ed để
 
Sau khi thaổi xon, bạn nhấn Ok hi lạcác thay đổi đ
 
7.2.4.2. C ác ch  nă xử lý file và fo  trênia  
ay chíniữ nh _F Pro, bạn thấy chư  trình 
được chia làm 2 kh ỏ hơn là Local System (máy tính c ủa bạn) 
ote System  TP Site). Hai khung c ửổ này cho bạn biết đang 
 và Rem ote System , đồng thời cũng cho bi ết 
những gì được chứa trong th ư mục hiện thời bạn đang xem  
- Ng h ga của chương trì
ung cửa sổ nhWSTP ơng
và Rem
ở đâu trong Local System(F a s bạn 
 192
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- 
 hiện được thì Remote System s ẽ không hi ển thị gì. 
- Một loạt các phím ch ức năng được trình bày d ọc theo bê n tay phải từng 
cửa Local System hi ển thị các file và folder trên máy tính c ủa bạn còn 
Remote System hi ển thị file và folder trên FTP site mà b ạn kết nối. Nếu kết 
nối không t hực
 sổ, được sử dụng điều khiển các file và folder Lo cal System và Remote 
System . cụ thể như sau: 
 
 
- ChgDirT tên thư 
mục 
- MkD T
- View
 - Execute: Th ực hiện file chạy 
- Delete: Xóa file ho ặc folder 
Lưu ý:: hay đổi 
ir:ạo thư mục 
: Xem nội dung file - Refresh: C ập nhật lại danh sác h các file và 
folder 
- DirInfo: Thông tin c ủa Remote System 
 
có chức n ực hiện được, tùy theo quy ền của account ftp m à bạn 
được cấp
Ví Dụ:Nếu các bạn thực hiện các chức năng này trên Remote System có th ể 
ăng không th
. 
 N bạn chỉ có quyền Xem  nội dung thì các ch ức 
năng Ch MkDir , Execute , Delete  trên cửa sổ Rem ote System  không t hực 
hiện đượ
 
7.2.4.3. C  năng trên Menuếu như acount ftp c ủa 
gDir , 
c. 
ác chức  
Ở phía trên c ủa chương trì nh W S_FTP Pr o, các bạn nhìn t hấy thanh m enu 
như sau: 
 193
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Trên  tương tự như chúng tôi đã 
giới tôi chỉ giới thiệu các m enu m à thường sử 
dụng
Sites menu: thanh Menu c ũng có một vài các ch ức năng
thiệu ở phía trên. Ở đây chúng 
: 
 
 es, Organise Sites t ương tự 
như khi chúng ta t ạo Site profiles ở phía trên. Ở dưới của menu là danh sách 
các sites mà b ạn đã tạo tại hộp thoại “Connect to Remote Host”. Danh sách 
st”. 
HelpTrong menu nà y cũng có chức năng Add Sit
này thực ra là cách g ọi nha nh để bạn kết nối đến một site mà không c ần gọi 
đến hộp thoại “Connect to Remote Ho
 menu: 
 n kết đến hệ thống trợ giúp trực tuyến của WS _FTP P ro. 
Tại đ ụ thể về các chức năng, c ông cụ 
của W
 
7.2.4.4  Bạn có t hể liê
ây có rất nhiều thông tin và h ướng dẫn c
S_FTP Pro. 
 Các thuật ngữ thông dụng trong khi s ử dụng WS_FTP Pro 
Addre
- Địa : 203.162.4.1) hoặc tên  miền 
(VD: www.ftp.com ) 
ối với FTP site 
Read  
quyền Read ngh ĩa là bạn chỉ có thể copy và xem  files 
trên site nh  Upload hoặc xóa filé.  
Remo
FTP 
ng trình FTP Server.  
Site 
Một ác của  FTP Server ho ặc FTP Site 
Site P
Là n nối tới một site n ào đó được tạo ra bởi WS_FTP 
Pro 
Write
Account ft p của bạn có quyền Write  nghĩa là bạn có thể upload, thay đổi 
hoặcss 
 chỉ của FTP site. Có th ể là địa chỉ IP (VD
Client  
Chương trình ứng dụng để kết nối với FTP site. Ví d ụ: WS_FTP là FTP 
Client.  
Local Syst em 
Máy tính ho ặc thiết bị mạng của bạn dùng để kết n
Account ft p của bạn có 
ưng không th ể
te System 
site mà bạn kết nối tới 
Server  
Máy tính được cài đặt chươ
cách gọi kh
rofile 
ơi lưu trữ thông tin k ết 
 
 xóa files, cũng như dow nload và xem  nội dung của chúng. 
 194
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chươ ình Web – Ngôn 
ngữ l
riển của mạng 
là sự p t hướng mới trong lập trình, đó là lập trình mạng. Với sự 
bùng n n cầu, sự ra đời của WW W( worl d wide web), đặt ra 
yêu cầ g tin một cách nha nh chóng, chính xác gi ữa các web 
server các ngôn ngữ lập trình WEB ra đời. 
 ng 8: Giới thiệu một số ngôn ng ữ lập tr
ập trình ASP  
 
Mạng m áy tính ngà y nay đã trở thành một thành ph ần qua n trọng trong ngành 
truyền thông và cu ộc sống hàng ngày. Song song v ới việc phát t
hát triển của mộ
ổ thông tin trên toà
u phải xử lý thôn
với client. Do v ậy, 
8.1.Kh
8.1.1.K
 CGI v của Common Gateway Interface, đó là m ôi trường lập trình chu ẩn 
giữa Web Server và Các ch ương trình được viết bằng các ngôn ng ữ bất kỳ(Perl, 
C,..). K một trang We b viết bằng CGI, Web Server s ẽ xem 
phần m eb và gọi chương trình thông d ịch Script t ương 
ứng(Sc ịch trang Web và tr ả lại kết quả cho người sử dụng. Các 
chươnái niệm về CGI: 
hái niệm: 
iết tắt 
hi người sử dụng gọi 
ở rộng của trang W
ript Engine) để d
g trình viết bằng chuẩn CGI thường được đặt trong m ột thư mục ngầm 
định có tên là CGI-BIN. 
 
8.1.2.Cấu trúc: 
 
 
8.1.3.V
ng trình đơn giản CGI viết bằng PERL: 
 
#!/usr/local/bin/perl 
print  “content-type:text/html\n\n”; 
print  “
 
 
Để chạ ng trình Perl CGI trên, c ần: 
 
 chương trình v ới tên tệp hello.pl í dụ về một CGI viết bằng Perl 
Dưới đây m inh hoạ một chươ
Hello, World!\n”; 
 
Kết quả hiển thị: 
Hello, World! 
y chươ
- Lưu
 195
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Cài môi tr ường WEB Server(Có th ể sử dụng IIS, ho ặc Apache…) ở đây sử 
dụng I inh hoạ 
- Cài t rl(Active Perl) vào thư mục: C:\Perl\Bin 
- Khai
ÆChọn Scri pts Onl y(Để chạy các file 
.exe và .dll, ch ọn Scripts and Executables) 
+ Gắn  tên tệp với trình thông d ịch tương ứng(ở đây là 
Perl.ex
 duyệt Web để chạy file hello.pl 
 IS làm ví dụ m
rình thông dịch Pe
 báo các tham số sau trong IIS: 
+ Đặt quyền chạy Script b ằng cách Click chuột phải vào 
WebsiteÆProperties ÆHome Directory
 các phần mở rộng
e) bằng cách Click chu ột phải vào We bsiteÆProperties ÆHome 
DirectoryÆConfiguration ÆAddÆ 
+ Sử dụng trình
 
 
 
8.2.Giới thiệu một số ngôn ngữ lập trình WEB 
 
Hiện nay c ác trang W EB động được lập trình khá đa dạng. Perl, PHP, ASP và 
JSP đều là những ngôn ng ữ lập trình kịch bản phía Server(Scripting Server 
nhập vào trang Web đó, trang W eb sẽ được 
WeS
 Side), tức là mỗi khi c ó một truy 
b erver thông dịch và trả lại kết quả cho người sử dụng(Client). 
8.2
Là ô
bởia ác .1. Perl, vi ết tắt của Practical Extraction and Report Langu age 
ngn ngữ lập trình tuy ệt vời cho việc xử lý các xâu chu ỗi văn bản được viết 
 Lrry Wall, sau được phát triển bởi những người sử dụng Pe rl khác. C
 196
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

thưiệ
Các ch h viết bằng Perl ch ạy tương đối nhanh do th ừa kế từ C-một 
ngôn
CG
phiên 
  vn của Perl rất phong phú và có th ể bổ sung vi đó là một ngôn ng ữ mở. 
ương trìn
n gữ cấp thấp phổ dụng. Perl là s ự lựa chọn tuyệt vời cho các ứng dụng 
I và là ngôn ngữ lập trình tốt trên các h ệ Unix cùng v ới C. Hiện nay đã có 
bản PERL 6. 
8.2.2. 
(Chươ
cũng khá ph  thể nhúng lẫn cùng các 
thẻ ờ tính 
linhộ
người  với những ngôn ng ư khác như Java, CGI,... thì 
php vư
trìntrPHP, viết tắt của PHP Hypertext Preprocessor 
ng tr ình xử lý văn bản siêu liên k ết) là ngôn ngữ lập trình m ã nguồn mở 
ổ dụng. C ác trang W eb viết bằng PHP có
 HTM L, PHP lúc đầu do một nhóm  người phát triển. Nhưng sa u đó nh
 đng và mã ngu ồn mở, php dần được hân rộng ra và ngày càng được nhiều 
tham gia phát tri ển. So
ơn lên nhờ tính dễ học của nó, không ph ức tạp như những ngôn ng ữ lập 
h ên web khác. Một trang We b viết bằng PH P có dạng sau: 
 
<html> 
    <head> 
        <title>Example</title> 
    </head> 
    <body> 
 
        <?php  
        echo "Hi, I'm a P HP script!";  
        ?> 
 
    </body> 
</html> 
 
Nội dung của ngôn ng ữ lập trình PH P được đặt trong cặp thẻ <?php và ?> giúp 
cho trình thông dịch(Script Engine) s ẽ biết và chỉ dịch các thông tin trong c ặp 
thẻ đó m
Để chạ
ương trình trên và o file exam ple.php 
 Cài đặt PHP vào t hư mục C:\PHP(Vào địa chỉ 
p.net để xem chi ti ết) 
Copy file php4ts.dll vào C:\windows\system32 
Copy file php.ini-dist vào th ư mục Windows, đổi tên thành php.ini  
ở tệp php.ini, thay đổi: 
xtension_dir = C:\PHP\extensions 
ssion.save_path = C:\Windows\temp 
Cài Webserver(IIS, Apache…), ở đây ta dùng IIS minh ho ạ 
Click chuột phải vào Website Æ Properties Æ ISAPI Filters Æ Add 
 Filtername: PHP 
 Executable: Đường dẫn tới file php4isapi.dll à thôi. 
y chương trình trên c ần: 
- Lưu đoạn ch
- Download và
http://www.ph
- 
- 
- M
e
se
- 
- 
+
+
 197
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Click chuột phải vào Website Æ Properties Æ Home Directo ry Æ 
onfiguration Æ Mappings Æ Add 
Đường dẫn tới file php4isapi.dll 
 Extension: .PHP 
Sử dụng trình duyệt Web để chạy file example.php trên C
+ Executable: 
+
- 
 
8.2.3.JSP, viết tắt của Jav a Server Pages  
à một ngôn ng ữ lập trình Scri pt giúp cho ng ười lập trình có th ể viết các đoạn 
ã Java nhúng tr ực tiếp trong trang H TML. JSP là sự lựa chọn thông m inh cho 
ứng dụng chạy trên cả Window và Unix. 
iến trúc JSP nh ư sau: L
m
các 
K
 
Mô tả: Người sử dụng(Client) g ửi một yêu cầu HTTP Re quest(bằng cách truy 
nhập vào một trang We b) lên We bserver. WebSer ver sẽ kiểm tra p hần mở rộng 
của
ối tượng Java(JavaBean)... Để 
ịch và chạy được một trang JSP, Webserver c ần được cấu hình hợp lý để nhận 
ra t
Cấu tr  JSP có dạng như sau: 
 
<HTM L>  file và nếu là có ph ần mở rộng là .JSP, Webserver chuy ển yêu cầu đến cho 
JSP container để dịch và chạy, sau đó gửi kết quả đến cho người sử dụng. 
Trong quá trình x ử lý, JSP container có th ể phải tương tác với các thành ph ần 
khác như Cơ sở dữ liệu(thông qua JDBC), các đ
d
hư viện các lớp Java. 
 
úc một trang
<BODY> 
Hello!
</BODY> 
</HTML> 
 
Kết qu
Hello!  The time is now <%= new java.util.Date() %> 
ả hiển thị: 
 The time is now  22/12/2003 
 198
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Mã chương trình JSP được đặt trong cặp thẻ <% và %> giúp cho trình t hông 
dịch JSP ch ỉ dịch nội dung đó mà không dịch các ph ần bên ngoài. 
 
8.2.4.Javas cript: 
Javascript l à một ngôn ng ữ Script được thiết kế tựa Java. Cần phân biệt rằng 
Javascript l à của Nescape, khác v ới Java của SUN. C ấu trúc Javascript được 
thiết kế sao cho d ễ dàng sử dụng đối với người sử dụng. J avascript được phân 
làm Javascript cho phía  Serv er và Javascript cho phía Client. Nhì n chung các 
script dành cho Serv er và Client t ương đối giống nhau, tuy nhiên các  script 
dành cho phía Server ch ủ yếu nặng về tương tác với các ứng dụng trên Server, 
trong khi đó script dành cho phía Client ch ủ yếu dùng để trình 
áy của người sử dụng. Nội dung của các mã Javascr ipt được bày và chạy trên 
đặt trong khai 
áo <S age=”Javascript” Sr c=”Tên File.js”> và </Script> 
Trong .js là tên file chứa nội dung mã Javascript. 
 m
b cript langu
đó Tên File
8.2.5.A
Microsoft Active Server Pages (ASP) không h ẳn là một ngôn ng ữ lập trình , 
icrosoft gọi nó là môi tr ường server-side scripting, môi tr ường này cho phé p 
tạo và 
 ASP coder thường sử dụng VBScript 
ặc JavaS cript, cả hai loại này đều tự động hỗ trợ ASP.  
rong các HTML, mỗi tag được bắt đầu và kết thúc bởi cặp "< />" , ASP c ũng 
tương 
ác đoạn ASP script có th ể xuất hiện ở mọi nơi trong trang HTML, AS P & 
HTML ó thể chen các script th ực 
thi đượ
p tạo ra các tương tác của Web site 
ột cách linh ho ạt uyển chuyển , có thể chen các thành ph ần HTML động vào 
ang Web tùy vào t ừng trường hợp cụ thể. SP 
M
chạy các các ứng dụng Web server động , tương tác và có hi ệu quả cao. 
Ðể làm việc trong m ôi trường này , các
ho
 
T
tự như vậy. Ðể đánh dấu nơi nào A SP script bắt đầu và kết thúc dùng c ặp 
lệnh "". 
 
C
 có sự gắn bó chặt chẽ với nhau. Với ASP ta c
c vào trực tiếp các file HTML . Khi đó việc tạo ra trang H TML và xử lý 
script trở nên đồng thời, điều này cho phé
m
tr
 
VBScript là ngôn ng ữ mặc định của ASP, nếu muốn sử dụng một ngôn ng ữ 
khác thì chúng ta c ần phải định nghĩa ngôn ng ữ. Tại đầu trang thêm dòng : 
 
<@script langua ge=”Tên ngôn ng ữ Script”>  
 
VBScript dễ học và rất tiện lợi nếu chúng ta đã học qua VB. 
Các A ng là .asp . Khi 
cho script ch ạ p://msdn.microsoft.com/default.asp thì mọi quá  
trình x efault.asp sẽ diễn ra trên server thay vì ch ạy ở client , Web 
rver của sẽ làm mọi công việc cần thiết để tạo ra một trang kết quả dạng 
(Hypertext Markup Language) , như thế không cần phải bận tâm rằng SP script được viết và đặt trong các file có ph ần mở rộ
y, ví dụ như : htt
ử lý của file d
se
HTML
 199
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

các W ã làm mọi việc. 
 
Các tín điểm của ASP 
ác ASP script thông t hường chạy trên các server cài IIS ( Microsoft Internet 
Inf ng ASPvẫn có thể làm việc với đa số các Web server 
trên có thể trên một số hệ điều 
hànk
 
uy trình thực hiện một của ASP nh ư sau : khi m ột user thông qua trình duy ệt 
we
ả về cho We b brower là m ột trang HTML. 
hực ra thì quá trình t ạo trang HTML và th ực thi script là hai quá trình riêng 
ực thi trước khi chuy ển kết quả cho 
h tốc độ phát 
triển ứ SP 
hi đư  được ở mọi nơi, không c ần trình biên d ịch ha y 
t được viết dựa trên các ngôn ng ữ hướng đối tượng nê n rất tiện 
i, sẵn có các object đi kèm  như: Request, Response, Application, Server, 
Sessio n dụng được các ActiveX components nh ư : Database access ,  
ata Object, Browser capabilities,File Access, 
. Hơn nữa nó compone nts từ các nhà phân ph ối 
hác, cng cấ
 
Những tính ch ất trên đem đến cho ta nh ững lợi ích xác th ực, cho phép t ạo ra 
các ứn
đã 
ghé th a web site của mình, các web builder có th ế dùng asp để tạo ra các 
file cơở dữ n máy chủ, khi cần có thể tiện tra cứu. 
 
8.3. – gôn 
 
8.3.1 Kến th
 u phải có Mic rosoft 
Interne
 c khi bắt đầu học viết VBScript, b ạn cần phải biết các khái ni ệm cơ 
bản vềWWW, HTML và các kiến thức căn bản để xây dựng một trang we b. 
 eb browser có thể xử lý trang We b hay không vì server đ
h chất và ưu 
 
C
ormation Server). Như
 NT (Netscape, Oreilly ) sử dụng ChiliSoft ASP, 
h hác nh Linux, SunSolaris. 
Q
b gửi yêu cầu tới một file .asp ở server thì script ch ứa trong file đó sẽ được 
chạy trên s erver và trả kết quả về cho browser đó. Khi Web server  nhận được 
yêu cầu tới một file .asp thì nó s ẽ đọc từ đầu tới cuối file .asp đó, thực hiện các  
lệnh script trong đó và trả kết qu
 
T
biệt, script sẽ được ASP engine d ịch và th
Web server, t ới giai đoạn này các m ã HTML và k ết quả sẽ kết hợp để tạo nên 
một trang Web. Vi ệc nhúng HTML và script ch ỉ để làm đẩy nhan
ng dụng mà thôi. Do môi tr ường hoạt động là mạng nên một script A
kợc viết ra có thể sử dụng
kết nối. 
 
Các ASP scrip
lợ
n. Tậ
Content linking, Collaboration D
..  cũng có thể tận dụng được 
k u p dưới dạng các file .dll 
g dụng Web t hương mại có tương tác chứ không c hỉ đơn thuần là phổ 
biến các nội dung tĩnh. Ví dụ như để lưu giữ lại thông tin v ề các khá ch hà ng 
ăm qu
 s liệu khách hà ng lưu trê
N ngữ ASP 
iức cơ bản về VBScript 
VBScript l à một công ngh ệ của Microsoft  yêu cầ
t Explorer. 
Trướ
: 
VBScript là gì?  
 200
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

VBScript là m ột ngôn ngữ script. M ột ngôn ng ữ script là một ngôn ng ữ 
p trình nh ẹ. VBScript là phiên b ản nhẹ của ngôn ng ữ lập trình Vus ual Basic.  lậ
 VBScript làm  việc như thế nào? 
 Khi VBScr ipt được chèn và o trong văn bản HTML, trình duy ệt Internet 
sẽ đọc văn bản HTML đó và dịch các đoạn mã VBS cript. Các đoạn mã này 
được thực hiện hoặc là nga y lúc đó hoặc trong các s ự kiện sau này. 
 
8.3.1.1- Biến và phạm vi biến 
 ủa biến có 
thể đư ột biến 
ông qua tên của nó, cũng như có thể thay đổi giá trị của biến đó. Trong 
VBScript, t ất cả các biến đều có kiểu là va riant, và nõ có t hể lưu trữ bất kỳ 
dạng d o. 
 Quy ắt đầu bằng một chữ cái, không ch ứa dấu (.) và 
độ dài
Bạn có t hể khai bá o biến với các từ khoá Dim , Public ho ặc Private.  
o một biến tên nam e và gán cho nó m ột giá trị: 
e = giá trị 
 giá trị 
 
i tên biến và có th ể nhận được kết quả không chí nh xác khi  chạy chương 
ột tên biến tên “nam e”, sau đó bạn 
Option Explicit 
Cách gán giá tr ị cho biến: 
name = “Nguyễn Minh P hượng” Biến là một vùng ch ứa thông tin mà b ạn cần lưu trữ. Giá trị c
ợc thay đổi trong quá trình l ập trình. B ạn có thể làm việc với m
th
ữ liệu nà
tắc đặt tên biến: B
tự.  không quá 255 ký 
 
Ví dụ dưới đây khai bá
 Dim name 
 nam
Bạn cũng có thể khai  báo biến bằng cách s ử dụng nó trong script c ủa 
bạn. Ví dụ: 
name =
Tuy vậy, cách khai báo này không được tường minh và không t ốt cho 
ứng dụng của bạn, vì sau đó trong ứng dụng của mình, b ạn có thể vô tình vi ết
sa
trình. Điều đó xảy ra là vì gi ả sử bạn có m
gọi tới biến đó bằng một tên “nim e” chẳng hạn, chương trình s ẽ tự động sinh ra 
thêm  1 biến tên “nim e”. Để tránh xảy ra điều nhầm lẫn này,  bạn nên sử dụng 
câu lệnh Option Explicit. Khi s ử dụng câu lênh này, t ất cả các b iến đều phải 
khai bá o trước khi sử dụng bởi các câu l ệnh với từ khoá Dim , Public ho ặc 
Private. Đặt câu lệnh Option Explicit trên đầu của chương trình c ủa bạn, như ví 
dụ sau: 
Dim n ame 
name = giá trị 
Bạn có t hể gán giá tr ị cho c ho một biến như sau: 
 201
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

i = 200 
 Thời gian s sống của biến 
 Khoảng thời gian biến đó tồn tại được gọi là thời gian sống của nó. 
 đó chỉ được truy xuất 
i trong ph ạm vi thủ tục đó. Khi thủ tục đó kết thúc, cá c biến đó cũng bị huỷ. 
hững biến này được gọi là biến cục bộ. Bạn có thể đặt các biến cục bộ trùng 
n nhau trong các thủ tục khác nha u, bởi vì mỗi biến chỉ được nhận biết bởi 
hính thủ tục trong đó chúng được khai bá o. 
i một thủ tục, tất cả các thủ tục nằm 
từ lúc nó được khai bá o và kết thúc khi trang web được đóng lại. 
 t biến, khi đó bạn 
khai bá o một  dữ liệu. Biến này được gọi là biến array. 
Để khai bá o y, bạn đặt dấu ngoặc đơn nga y sau tên bi ến. 
Ví dụ sau chú ột biến array gồm có 3 giá tr ị: 
dim na
 
Giá trị ủa biến array bắt đầu bởi 0 cho 
nên bi ị. Đây là một array có độ dài cố định. Bạn gán 
iá trị cho t n tử của array bằng cách sau: 
” 
names(2)=”Hoà ng Khánh H ưng” 
ất kỳ phần tử nào tr ong array 
à bạn cần bằng cách sử dụng chỉ số tương ứng của phần tử: 
 hể khai bá o nhiều nhất tới 60 chiều cho một array. Các chi ều 
được khai báo cách nhau b ởi dấu phẩy. Ví dụ sau khai báo m ột array ba o gồm 5 
dòng và 7 c ột: 
 dim  table(4,6
  
8.3.1.2- C ác kiểu dữ Khi bạn khai báo m ột biến trong m ột thủ tục, biến
tớ
N
tê
c
 Nếu bạn khai báo m ột biến bên ngoà
trong cùng trang đó đều có t hể truy nhập tới biến đó. Thời gian sống của biến 
này bắt đầu 
 Biến Array: 
Có những khi bạn muốn gán nhiều hơn 1 giá t rị cho mộ
biến có thể chứa một dãy
một biến là biến arra
ng ta khai báo m
mes(2) 
 số trong dấu n
gồm 3 giá trgoặc là 2. Ch ỉ số c
ến này sẽ bao 
ừng phầ g
names(0) = “Nguy ễn Thanh Bì nh
names(1)=”Nguy ễn Minh P hượng” 
 Tương tự như vậy ta có thể lấy giá trị của b
m
 eng = nam es(0) 
Bạn có t
)   
 liệu: 
 Kiểu dữ liệu 
 VBScript chỉột kiểu dữ liệu tên là variant. Ki ểu variant là m ột kiểu 
dữ liệu đặc biệt có th nhau phụ thuộc vào các h sử 
dụng chúng. C ũng vì nó là ki ểu dữ liệu duy nhất trong VB Script c ho nên tất cả 
các hàm c ủa VBScri ề kiểu dữ liệu này. trong VB Script là gì ? 
 có m
ể chứa các loại thông ti n khác 
pt đều trả v
 202
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Nói m ơn giản nhất, một biến variant có t hể chứa thông tin là 
một số hoặc một xâu. Biến variant này x ử sự như một số khi bạn sử dụng nó 
trong ngữ cả ư một xâu khi b ạn sử dụng nó trong ng ữ cảnh xâu. 
Điều đó có nghĩa là  giống kiểu số, 
VBScript s ẽ cho rằn các công việc phù hợp 
nhất với một số. Tư ữ liệu là một xâu, 
VBScript coi t xâu. Tất nhiê n bạn hoà n toà n có thể coi dữ liệu số là 
một xâ ch đặt số đó trong ngoặc kép (“”). 
Kiểu dữ liệu con của Variant – variant subtypes 
ơn giản là phân biệt số và xâu, m ột variant có th ể phân biệt 
ược thông tin s ố theo cách khác. Ch ảng hạn như bạn có thể có một dữ liệu số 
đại di i một dữ liệu kiểu 
Date/Time kh ợc biểu diễn dưới dạng Date/Time. 
Tất nhiên bạn có thể còn có m ột loạt các dữ liệu dạng số với kích thước khác 
nhau từ kiểu u floating – point. C ác dạng thông ti n khác 
nhau đó có th ợc lưu trong bi ến variant g ọi là các ki ểu con (subtype). P hần 
lớn thời gian ủa bạn vào biến variant và bi ến này sẽ 
hoạt động theo cách x ử lý dữ liệu giống như chính dữ liệu mà nó c hứa. 
 
 Bảng dới đâ iệu con của variant: 
 ột cách đ
nh số và nh
 nếu bạn làm  việc với một dữ liệu trông
g đó là một số và thực hiện tất cả 
ơng tự như vậy, nếu bạn làm  việc với d
 đó là mộ
u bằng cá
 
 Ngoài việc đ
đ
ện cho Date/Time. Khi b ạn sử dụng nó cùng v ớ
ác thì kết quả trả về luôn đư
 Boolean cho t ới kiể
ể đư
, bạn chỉ cần gán dữ liệu c
ư y mô tả các kiểu dữ l
Subtype Mô tả 
Empty Variant chưa được gán giá trị ban đầu. Có giá trị 0 đối với các biến 
ối với biến xâu. kiểu số và xâu rỗng (“”) đ
Null Variant không ch ứa dữ liệu 
Boolean Có gái trị là True ho ặc False 
Byte Ch ứa số nguyê n từ 0 tới 255.  
Intege i 32,767.  r Chứa số nguyê n từ -32,768 t ớ
Curren ,337,203,685,477.5808 tới 922, 337,203,685,477.5807. cy -922
Long Cố nguyê n từ -2,147,483,648 t ới  2,147,483,647. hứa s
Single C g-point từ  -1.402823E38 t ới 
-1.401298E-45 ừ 1.401298E-45 t ới 
3. . hứa số single-precision, floatin
đối với giá trị âm, t
402823E38 đối với giá trị dương
Double Cố double- precision, floati ng-point -1.797 69313486232E308 
.94065645841247E-324 đối với giá trị âm, từ  
4.94065645841247E-324 t ới 1.79769313486232E308 đối với giá 
trịhứa s
to -4
 dương. 
Date 
(Time)C ho ngày tính từ Januar y 1, 100 tới 
er 31, 9999.  Decehứa một giá trị số đại diện c
mb
 203
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

String ột xâu có độ dài bất kỳ dài nhất khoảng 2 tỷ ký tự Chứa m
Object Ch ứa một Object 
Error Chứa mã số lỗi 
Bạn có t hể dùng các hàm chuy ển đổi kiểu dữ liệu để chuyển dữ liệu giữa 
các kiểu dữ liệu con với nhau. Thê m vào đó, hàm  VarType cho b ạn biết thông 
tin về cách lưu trữ dữ liệu của bạn trong bi ến Variant.  
8.3.1.3- C ác hàm trong VBScript:  
Dưới đây liệt kê các hàm có s ẵn trong VB Script. Các hà m này được chia 
 thành các loại sau: 
Các hà ian (Date/Time Functions) ra
- Các hàm v ề thời gian 
- Các hàm chuy ển đổi kiểu dữ liệu 
- Các hàm định dạng dữ liệu 
- Các hàm toán h ọc 
- Các hàm v ề dãy 
- Các hàm v ề xâu 
- Các hàm khác 
m về thời g
Tên hàm Mô tả 
CDate Chuyển biểu thức có dạng date and time chuẩn sang 
dạng Date 
Date Trả về ngày giờ hệ thống 
DateAdd Trả về ngày được cộng thêm m ột khoảng thời gian 
DateDiff Trả về giá trị số là khoảng thời gian giữa hai giá tr ị 
ngày. 
DatePart Trả về phần xác định của ngày. 
Day Trả về ngày hiện tại. Giá trị từ 1 tới 31. 
Form atDateTime Trả về biểu thức đã được định dạng theo ki ểu date or 
time 
Hour Trả về giá trị là một số chỉ giờ hiện hành trong ngày, 
có giá trị từ 0 tới 23. 
IsDate Trả về giá trị Boolean cho bi ết biểu thức có thể 
chuyển sang dạng ngày tháng hay không. 
Minute Trả về giá trị số là phút của giờ (có giá tr ị từ 0 tới 59)
Month Cho biết tháng hi ện hành ( Có giá trị từ 1 tới 12) 
MonthName Trả về tên tháng 
 204
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Now Cho biết ngày giờ hiện hành của hệ thống 
Second Trả về số đại diện cho giây (C ó giá trị từ 0 tới 59) 
Time Trả về giờ hệ thống 
Timer Trả về giá trị số giây tính t ừ 12:00 AM 
Weekday Trả về số đại diện cho ngà y trong tu ần (Có giá trị từ 1 
tới 7) 
WeekdayName Trả về tên ngà y trong tu ần 
Year Trả về năm hiện hành 
 
Các hà  kiểu dữ liệu (Conversion Functions) 
 m chuyển
 
Tên hàm  Mô tả 
Asc Chuyển ký tự đầu tiên của xâu sang m ã ANSI . 
CBool Chuyển dữ liệu kiểu variant sang ki ểu subt ype 
Boolean 
CByte Chuyển dữ liệu từ kiểu variant sang ki ểu subtype 
Byte 
CCur Chuyển dữ liệu từ kiểu variant sang ki ểu subtype 
Currenc y 
CDate Chuyển dữ liệu từ biểu thức dạng date/time sang kiểu 
subtype Da te/Tim e 
CDbl Chuyển biểu thức từ kiểu variant sang ki ểu subtype 
Double 
Chr Chuyển mã ANSI sang ký t ự 
CInt Chuyển dữ liệu kiểu variant sang ki ểu subt ype Integer
CLng Chuyển dữ liệu kiểu variant sang ki ểu subt ype Long 
CSng Chuyển dữ liệu kiểu variant sang ki ểu subt ype Single
CStr Chuyển dữ liệu kiểu variant sang kiểu subt ype String
 
 
Các hàm định dạng dữ liệu (Form at Functions) 
  
Tên hàm  Mô tả 
FormatCurrency Trả về biểu thức được định dạng kiểu như currency  
Form atDateTim e Trả về biểu thức được định dạng kiểu date or tim e 
FormatNumber Trả về biểu thức được định dạng kiểu số. 
FormatPercent Trả về biểu thức được định dạng kiểu percent age 
 
Các hàm toán h ọc (Math Functions) 
  
 205
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Tên hàm  Mô tả 
Abs Giá trị tuyệt đối của một số 
Atn Trả về cotan của một số 
Cos Giá trị cosine của một số (Góc) 
Hex Cho giá trị hexa decim al của một số 
Int Trả về phần nguyê n của một số 
Fix Trả về phần nguyê n của một số 
Log Logarit tự nhiê n của một số 
Oct Cho giá trị octal của một số 
Rnd Cho một số ngẫu nhiên nh ỏ hơn 1 và lớn hơn hoặc 
bằng 0 
Sgn Trả về một số đại diện cho dấu của số 
Sin Giá trị Sin của một số (Góc) 
Sqr Bình phương của một số 
Tan Giá trị Tang của một số (Góc) 
 
 
 
 
 
 
Các hà ray Functions) 
  m về array (Ar
Tên hàm  Mô tả 
Array Trả về một variant ch ứa một array 
IsArray Trả về giá trị Bool ceanho biết biến đó có phải là một 
array hay không. 
Join Trả về một xâu c hứa số các xâu c on trong dã y 
LBound Trả về cận dưới của chiếu được chỉ định của một 
array 
Split Trả về một array 1 chi ều chứa một số lượng phần tử 
được chỉ định. 
UBound Trả về cận trên của chiều được chỉ định của array  
 
Các hàm v ề xâu (String Functions)  
  
Tên hàm  Mô tả 
InStr Trả về vị trí đầu tiên m à một xâu xuất hiện trong m ột 
xâu khác. Tìm  kiếm được bắt đầu từ ký tự đầu tiên 
của xâu 
InStrRev Trả về vị trí đầu tiên m à một xâu xuất hiện trong m ột 
 206
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

xâu khác. Tìm  kiếm được bắt đầu từ ký tự cuối cùng 
của xâu 
LCase Chuyển tất cả các ký tự của một xâu thà nh chữ 
thường 
Left Trả về một xâu c ó độ dài được chỉ định tính từ ký tự 
đầu tiên 
Len Trả về đọ dài của xâu 
LTrim  Xoá các ký tự trắng bê n trái của xâu 
RTrim Xoá các ký t ự trắng bê n phải của xâu 
Trim  Xoá các ký tự trắng ở cả hai phía c ủa xâu 
Mid Trả về một xâu c ó độ dài được chỉ định và bắt đầu từ 
một vị trí được chỉ định của xâu nguồn 
Replace Thay một phần của xâu bởi một xâu khác. S ố các lần 
thay được chỉ định trước. 
Right Trả về một xâu c ó độ dài được chỉ định tính từ ký tự 
cuối cùng 
Space Trả về một xâu c hỉ gồm toàn dấu cách. Số lượng dấu 
cách được chỉ định 
StrComp So sánh hai  xâu và trả về một giá trị là kết quả của 
phép so sánh 
String Trả về một xâu c ó đọ dài được chỉ định và được tạo 
ra bằng các h lặp đi lặp lại một ký tự nào đó 
StrReverse Trả về một xâu bằng cách quay ng ược một xâu có s ẵn
UCase Chuyển tất cả các ký tự của 1 xâu thành c hữ hoa 
 
 
   
 Các hàm khác (Other Functions) 
 
Tên hàm  Mô tả 
CreateObject Tạo một Object có ki ểu được chỉ định 
Eval Đánh giá m ột biểu thức và trả về một giá trị là kết 
quả của sự đánh giá đó 
InputBox Hiển thị một hộp thoại cho phé p người sử dụng có 
thể điền thông tin vào 
IsEmpty Trả về một giá trị Bool ean cho bi ết một biến đã được 
gán giá tr ị hay c hưa 
IsNull Kiểm tra x em một biến có là Null (Không ch ứa dữ 
liệu) không. K ết quả là một giá trị Boolean 
IsNumeric Trả về một giá trị Bool ean cho bi ết biểu thức đó có 
thể chuyển thành dạng số không 
 207
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

MsgBox Hiển thị một hộp tin nhắn và chờ người sử dụng 
click vào m ột nút lệnh, và trả về giá trị cho biết 
người sử dụng đã click nà o nút lệnh nào 
Round Làm tròn một số 
ScriptEngi ne Trả về tên của script đang dùng 
TypeNam e Trả về tên kiểu dữ liệu con của biến 
VarType Trả về giá trị của kiểu dữ liệu con của biến 
 
 
8.3.1.4- C ác toán tử và biểu thức 
 
tử 
u thức, từng phần của 
 thứ tự ưu tiên. Bạn có 
n và bắt một phần nào đó của 
hác. Các biểu thức bên trong  
 Khi các biểu thức chứa nhiều loại toán tử khác nha u, cá c toán tử số học 
được x lý trước, sau đến các toán t ử so sánh r ồi cuối cùng là các toán t ử logic. 
 tự ưu tiên, tức là chúng s ẽ được xủa lý từ 
 VBScript có m ột tập hợp lớn các loại toán tử, chia ra thành ba lo ại là các 
toán tử số học, các toán t ử so sánh và ghép n ối (concatenation ), và các toán 
logical. 
 Th ứ tự ưu tiên của các toán t ử 
 Khi c ó nhiều toá n tử cùng xuất hiện trong m ột biể
eo một trình tự gọi là biểu thức được đánh giá và x ử lý th
thể dùng dấu ngoặc đơn để thay đổi thứ tự ưu tiê
iểu thức phải được thực hiện trước các phần k b
dấu ngoặc đơn luôn được xử lý trước những biểu thức bên ngoài.  Tất nhiên, 
nếu biểu thức trong ngo ặc chứa nhiều toán tử thì chúng c ũng phải tuân theo th ứ 
tự ưu tiên chuẩn.  
ử
Các toán t ử so sánh t ất cả có cùng th ứ
trái qua ph ải theo thứ tự xuất hiện. Các toán t ử số học và logic được xử lý theo
thứ tự sau: 
 
Số học So sánh Logic 
Mô tả Ký 
hiệu Mô tả Ký 
hiệu Mô tả Ký hiệu 
Mũ hoá ^ So sánh b ằng = Phủ nhận 
logic Not 
Phép nhân * So sánh khác 
nhau <> Và And 
Phép chia / Nhỏ hơn < Hoặc Or 
Ch Lớn hơn > Loại trừ Xor ia lấy \ 
phần nguyê n 
 208
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chia lấy số 
dư ỏ hơn hoặc 
bằng <= So sánh b ằng Eqv Mod Nh
Phép cộng + Lớn hơn hoặc 
bằng >=   
Phé
ương đương Is       p trừ - So sánh Object 
t
Ghép xâu &             
 hi ph n và chia cùng xuất hiện trong m ột biểu thức, chúng được 
xử lý t
cộng v
 
i hay không.   
 
8.3.1.5- C ác cu trúc điều khiểnK ép nhâ
ừ phải qua trái theo th ứ tự xuất hiện. Tương tự như vậy đối với phép 
à phép trừ. 
Phép ghép xâu không t huộc nhóm toán t ử số học nhưng về thứ tự ưu tiên 
nó đứng sau các toán tử số học và trước các toán t ử so sánh. Toá n tử Is là một 
toán tử so sánh việc tham chi ếu Object. Nó không dùng để so sánh object ha y 
giá trị của chúng, nó ch ỉ cho biết xem hai tham chi ếu obj ect (object references) 
có loa
ấ  
 tuỳ thuộc vào một số điều kiện. Bạn có thể dùng cấu trúc điều kiển để 
ực hiện điều này. 
: 
 và 
if i = 10 then 
 m sgbox “Hello” 
Lựa chọn một trong hai t ập hợp lệnh để thực hiện: Nếu bạn muốn  Khi bạn viết chương trình, nhi ều khi bạn cần thực hiện một hành động 
nào đó
th
 Trong VBScript có 3 d ạng cấu trúc điều khiển
 Câu lệnh if ... then ... else: S ử dụng câ u lệnh nà y khi bạn cần lựa chọn 
một trong điều kiện để thực hiện một trong hai t ập hợp lệnh. Dùng câu l ệnh nà y 
bạn có thể: 
- Thực hiện một tập hợp lệnh nà o đó nếu điều kiên tho ả mãn . 
if i = 10 then msgbox “Hello” 
Nếu bạn muốn thực hiện nhiều hơn một câu lệnh khi điều kiện được 
thoả mãn , bạn cần viết từng câu lệnh trên m ột dòng lệnh khác nhau
kết thúc bởi từ khoá “End If”  
 i = i + 1 
End if 
- 
thực hiện một tập hợp lệnh nà o đó khi điều kiện được thoả mãn và 
 209
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

thực hiện một tập hợp lệnh khác n ếu điều kiện không tho ả mãn , bạn 
 m sgbox “Hello” 
 m sgbox “Goodbye” 
En
u lệnh nà y khi bạn muốn lựa 
ọn m
if payment="Cash" then 
 elseif 
   msgbox "Y o pay with visa." 
 elseif payment="AmEx" then 
   msgbox "You are goi ng to pay with Am erican Express." 
 els
   m x "Unknown method of paym ent." 
end
 
 Câu Select case: Sử dụng câu lệnh này khi b ạn muốn lựa chọn một 
trong nhiề  hợp lệnh để thực hiện. 
   msgbox "You are goi ng to pay cash" 
 case "Visa" 
 to pay with visa" 
"You are going to pay with Am erican Express" 
 of payment" 
lect 
 
thư
sán
lện
8.3 u trúc lặpdùng như sau: 
if i = 10 then 
else 
d if 
 Câu lệnh if ... then....elseif: S ử dụng câ
chột trong nhi ều tập hợp lệnh để thực hiện. 
   msgbox "You are goi ng to pay cash!" 
payment="Visa" then 
ou are going t
e 
sgbo
 If 
lệnh 
u tập
select case payment 
 case "Cash" 
   msgbox "You are goi ng
 case "AmEx" 
   msgbox 
 case Else 
   msgbox "Unknown m ethod
end se
Câu lệnh này làm vi ệc như sau: Đầu tiên chúng ta có m ột biểu thức, 
ờng là một biến, cần được đánh giá giá tr ị. Giá trị của biểu thức này được so 
h với từng giá trị trong cấu trúc Case. N ếu chúng b ằng nha u, tập hợp các 
h tương ứng với giá trị Case đó được thực hiện. 
 
.1.6. C ác cấ  
Cấu trúc For...next 
 210
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Câu lệnh For...Next: L ặp lại việc thực hiện một tập hợp các câu l ệnh một 
số xác
mỗ
Các lệnh ở đây 
vòn
Giá
 For dùng để nhảy ra khỏi vòng lặp. 
đối p, hoặc với mỗi phần tử trong một dãy. Câu 
nh nà y thực hiên không khác nguyên t ắc của vòng For...Next, ch ỉ khác ở chỗ 
bạn
names(0)="Tove" 
x in names 
Do ... Loop: 
ó thể dùng cấu trúc nà y để thực hiện một tập hợp lệnh khi bạn 
không hực hiện khi điều kiện 
While le để kiểm tra điều kiện 
trong c ...Loop.  
 i>10 
Loop 
h trong cấu trúc này không được thực hiện lần  định lần. Bạn có thể sử dụng một biến đếm tăng dần hoặc giảm dần sau 
i lần thực hiện vòng lặp.  
Cú phá p:  
For i = 1 to 10 step 2 
 
Next 
 
Từ khoá step ch ỉ bước nhảy sau mỗi lần thực hiện các câu l ệnh trong 
g lặp. Nếu bạn dùng vòng l ặp giảm dần thì giá tr ị của step cần đặt là số âm. 
 trị ngầm định là 1. 
Từ khoá Exit
Vòng lặp với For Each... Next: Vòng l ặp này thực hiện một tập hợp lệnh 
 với mỗi phần tử trong tập hợ
lệ
 không cần chỉ ra số lượng lần bạn muốn thực hiện vòng lặp. 
dim nam es(2) 
names(1)="Jani" 
names(2)="Hege" 
 
For Each 
  doc ument.write(x & "<br />") 
Next 
 
Cấu trúc 
Từ khoá W hile 
Bạn c
 biết trước số lần cần thực hiện. V òng lặp sẽ t
vẫn còn được thoã mãn. Bạn dùng từ khoá Whi
ấu trúc Do
Do While
  some code 
Nếu i = 9 thì các câu l ện
nào. N hưng nếu bạn thay đổi đoạn mã tr ên như sau: 
Do 
  some code 
Loop While i>10 
 211
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Thì các câu l ệnh trong Do...Loop được thực hiện ít nhất một lần ngay cả 
khi giá
 
Từ khoá Until 
Lặp lại việc thực hiện các lệnh cho tới khi điều kiện thoả mãn  bằng việc 
ừ khoá Until. 
p:  
o Until i=10 
c thực hiện lần 
 
ome code 
ột lần trong 
oát ra khỏi Do...Loop: B ạn dùng lệnh Exit Do để thoát ra khỏi vòng 
.Loop: 
<10 Then Exit Do 
c câu lệnh trong vòng l ặp được thực hiện khi khác  10, và khi  i lớn 
ơn 10. 
ôn ngữ ASP 
ASP là vi ết tắt của Active Server Pages. 
indows 95/98. 
ASP là c ông nghệ của Microsoft. ChiliASP là m ột công ngh ệ cho phép 
chạy A
ành Windows.  trị của i nhỏ hơn 10. 
sử dụng t
Cú phá
D
  some code  
Loop 
Nếu i = 10, các câu l ệnh bên trong vòng l ặp không đượ
nào. 
Do
  s
Loop Until i=10 
Các câu l ệnh bê n trong vòng l ặp được thực hiện ít nhất m
trường hợp bạn kiểm tra điều kiện sau. 
 
Từ khoá Exit Do 
Th
lặp Do..
Do Until i=10 
i=i-1   
  If i
Loop 
Cá
h
 
8.3.2 - Ng
 
 ASP là m ột chương trình ứng dụng web động chạy trong môi tr ường IIS 
(Internet Information Services). IIS là m ột thành ph ần miễn phí đi kèm với 
Windows 2000 ho ặc Windows NT 4.0 O ption Back. Ngoài ra ASP c ũng chạy 
rong môi trường PWS (Personal Web Server). PWS là m ột phiê n bản nhỏ hơn t
nhưng có đầy đủ tính năng của IIS. PW S có thể tìm thấy trong W
 
SP không trong môi trường Windows. InstantASP c ũng là một công 
nghệ khác cho phé p chạy ASP không c ần hệ điều h
 212
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Một file ASP c ũng tương tự như một file HTML. File ASP có th ể chứa 
ác dòng văn bản, các thẻ HTML, XML  hoặc các Scripts. Các scripts trong file 
c thực hiện trên m áy chủ web. Một file ASP có ph ần mở rộng là .asp. 
ột file 
ệt yêu cầu 
ngine đọc file 
ng file đó. Cuối cùng nó tr ả về cho 
ệt một file HTML thu ần tuý. 
ASP đáp ứng các yêu c ầu: 
ạn soạn thảo, chỉnh sửa hay thêm  bớt bất kỳ thành ph ần nào 
ng. 
sử dụng hoặc dữ liệu gửi qua các form. 
ầu khác nhau c ủa từng người 
u trúc đơn giản, dễ học, dễ sử dụng, dễ phát triển, dễ sửa đổi và tốc độ 
xử lý nhanh. Nếu bạn là một người đã que n với HTML thì b ạn có thể 
y trước đây để lấy thông tin t ừ một form  HTML, b ạn phải thạo một 
ngôn ngữ lập trình để xây dựng nên một ứng dụng theo m ột chuẩn gọi là 
CGI (Com mon Interface Gateway). Bây gi ờ, với ASP  bạn có thể lấy 
được các thông tin đó một cách dễ dàng m à chỉ cần môt vài dòng l ệnh 
đơn giản nhúng tr ực tiếp trong trang HTML.  
- Rất an toàn vì các dòng l ệnh AS P không nhì n được từ trình duyệt. 
- Vì ASP tr ả về file HTML thu ần tuý cho nên nó c ó thể xem  được bằng 
bất cứ tình duyệt nào. 
- Một chương trình ASP được lập trình tốt sẽ làm giảm tải đường truyền. 
  
8.3.3- Mô hình ASP ho ạt động như thế nào? 
 Khi Client thông qua trình duy ệt của mình để yêu cầu xử lý và gửi lại 
kết quả một trang web (th ường dưới dạng địa chỉ URL trang web) nào đó lên 
WEB SERVER, WEB SERVER s ẽ xét xem  trang đó là một trang tĩnh hay 
động. Nếu đó là một trang tĩnh(.html, .htm), WEB SERVER s ẽ gửi lại chính 
đó cho client m à không ph ải xử lý; nếu đó là một trang động (.ASP, .JSP, 
F...), WEB SERVER sẽ gọi một Application Ser ver phù hợp để dịch các 
trang đó thông qua các b ộ gine). Trong trang A SP, 
ạn có thể sử dụng cá c ngôn ng ữ Script tu ỳ ý như: VBScript, JavaScript, Perl 
ễn là bạn đã cài các Script Engine t hích hợp trên WEB S ERVER đó. 
SP h
ng .ASP, nó sẽ xử lý các mã ASP và tr ả lại kết quả cho Client và n ếu c
ASP đượ
 ASP khác v ới HTML ở chỗ: Kh i một trình duy ệt yêu cầ
 duyu m
HTML, máy ch ủ trả về chính file HTML đó. Còn khi m ột trình
yêu cầu này tới AS P engi ne, ASP e một file A SP, IIS chuy ển 
 dòng một và xử lý các scripts tro ASP từng
trình duy
 
- Cho phép b
của trang w eb một cách năng độ
- Đáp ứng các truy v ấn của người 
- Truy nhập tới bất kỳ cơ sở dữ liệu nào và trả kết quả cho trình duy ệt. 
- Tuỳ chỉnh trang we b đáp ứng những yêu c
sử dụng. 
- Cấ
thấ
file 
.C
 dịch script file (Script En
b
Script...mi
Aỗ trợ cho 2 scripts ph ổ dụng là: V BScript và JavaScript. S au khi Scri pt 
Engine  dịch các script file, nó s ẽ trả lại kết quả tới Client dưới dạng mã HTML. 
ASP cũng hoạt động theo m ô hình trên. Sau khi Script  Engi ne của ASP dịch 
trang tra
 213
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

mở trang kết quả tại Client, ta s ẽ không th ấy còn cấu trúc lệnh của ASP trong 
ó.  
Hình 8. 1 Mô hình hoạt động trang ASP 
i 
ản (Text) 
- Các thẻ HTML 
- pts. Scripts của trang AS P được chạy trên Server. 
Dễ ạo một trang A SP bằng cách thay đổi phần mở rộng của một 
trang t , .htm) thành trang ASP(.asp) và lưu vào một thư mục trên 
WEB ation Server hoặc là 
Person à chạy, đảm bảo rằng 
thư mụ e. Chú ý rằng trang 
.html v ng thức khác nhau 
hoàn t ng nên đổi tất cả các trang .html thành các trang .asp. Tuy 
nhiên c ư mục.  đ
Hình dưới đây minh ho ạ quá trình ho ạt động của ASP: 
  
  
 Web Server 
ASP’s Script Engine 
Dịch các tra ng .ASP Göi l¹ i Client d−íi d¹ng m∙ HTML  
Trang 
.ASP      Client 
Gửi yêu cầu 
file 
ới Web 
  
xử lý 
ASP t  
Server 
 
 M∙ 
 HTM
 
 
 
 
 
 
 Cơ sở dữ liệu 
 
 
 
 
8.3.4- Tạo một trang ASP 
 Một trang ASP là m ột file văn bản với phần mở rộng là .ASP và n ộ
dung của nó chứa các thành ph ần sau:  
- Văn b
Các Scri
 dàng để t
ĩnh(.html
SERVER (thường là Microsoft Internet Inform
al Web Server). Để trang .Asp có th ể được dịch v
c chứa các trang đó phải có quyền Script và Exe cut
à trang .asp được WEB SERVER x ử lý theo 2 ph ươ
oàn nên khô
ó thể đặt các trang .asp và các trang .html trong cùng m ột th
 214
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Bạể sử dụng bất kỳ trình soạn thảo văn bản nào để tạo các trang .asp.  
Một tr ó là Microsoft Visual InterDev. 
Tuy nh ạn chưa từng là m quen với HTML  thì Front Page s ẽ là công 
cụ thícđể tạo ra các trang nh ư MS Word. 
 
Ví  
 
P page. 
!”%> 
 orld! 
8.3.4.1 các lệnh Scriptn có th
ong các trình soạn thảo  hỗ trợ cho ASP đ
iên, nếu b
h hợp 
dụ một trang .asp vi ết dòng c hữ “Hello World” trên màn hình:
<HTM L>  
<TITLE> 
<BODY> 
   This is an AS
   <%Response.Write “ Hello World
</BODY> 
</TITLE> 
</HTML> 
Khi chạy, trên m àn hình sẽ hiển thị như sau: 
This is an ASP page. Hello W
- Thêm  
 M Script là một tập lệnh được nhúng trong trang HTML để báo cho 
trình duyệt(phía Client) ho ặc Web Server(phía Server) th ực hiện công vi ệc nào 
đó. Cá ợc thực hiện bởi trình duy ệt gọi là các Client-Side Scripts và 
các sc hực hiện bởi Web Server g ọi là các Server-Side Scripts. V ới 
ác Script, ta có thể hiển thị giá trị Ngày hiện tại, lưu tên người sử dụng và o 
một bi Trong các trang ASP, ta có thể 
nhúng à %>. Script engine s ẽ dịch các 
oạn mãlệnh tr ong cặp thẻ này và g ắn kết quả dịch(dưới dạng HTML) và o 
trang và g ửi cho Client. 
ụ sau sẽ minh hoạ cách trộn c i dung html. 
<HTM L> 
ả sẽ là 
 14:15:20 PM 
đầu trang: 
 ột 
c script đư
ript được t
c
ến hoặc trong Database để hiển thị sau…
 các mã lệnh Sc ript trong c ặp thẻ <% v
đ  
Ví d
 ác Script v ới nộ
<BODY> 
This pa ge was last refreshed on <%=N ow%> 
</BODY> 
</HTML> 
 
Kết quả hiển thị sẽ là : (giờ ở đây chỉ có tính ch ất ví dụ. Kết qu
iờ hiện hành khi chạy chương trình). g
  
This pa ge was last refres hed on 9/1/2003  
 
Ngôn ngữ Script ng ầm định trong A SP là VB Script. Tuy nhiên b ạn có 
thay đổi ngôn ng ữ ngầm định tr ong một trang AS P hoặc thay bằng một ngôn 
gữ khác bằng chỉ dẫn sau đặt trên n
 
<%@ LAN GUAGE=Scripting Langua ge%>
 215
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Trong đó Scripting La ngua ge là ngôn ng ữ ngầm định trong trang .ASP  
.3.4.2- Sử dụng các Server- Side VBScript và Jav ascriptmà bạn muốn đặt cho trang đó.  
 
8  
p script được dịch và chạy trên Server, các l ệnh V BScript  hiển 
ị giao diện người sử dụng như: InputBox và MsgB ox không có tác d ụng. Các 
àm tạ pt như: CreateObject và GetObject s ẽ được 
ng Server.CreateObject c ủa ASP.  
 Script:  
<SCRI PT LANGUAGE=JScri pt RUN AT=Server>  
 
UAGE=VBScr ipt RUNAT=Server>  
Các lệnh Script 
</SCRIPT> 
Để
erver-Side VBScript, sử dụng kí tự  ‘ 
- rong Server-Side Jscript, sử dụng kí tự // cho m ột dòng ho ặc {} cho 
Chú ý: V BScript không phâ n biệt chữ hoa chữ thường, tức là một biến 
_Var 
là 2 bi Bởi vì As
th
h o đối tượng trong VBScri
thay thế bằng hàm  tạo đối tượ
Khai bá o sử dụng Server-Side
 
Các lệnh Script 
</SCRIPT> 
 
hoặc 
<SCRI PT LANG
 
 
 tạo một chú giải: 
- Trong S
T
một đoạn 
 
new_var có th ể được hiểu như là New _Var hay new _var. Tuy nhiên JS l ại phâ n 
biệt chữ hoa chữ thường(Case Sensitive), t ức là 2 biến: new _var và New
ến khác nhau hoàn toàn. 
 
8.3.4.3- K hai báo biến trong ASP  
 Một biến là một vùng nh ớ trong m áy tính được đặt tên dùng để lưu trữ 
 biến.  
ừ khoá Dim :   
<% Dim Tên Bi ến %> 
h khai báo, gá n giá trị và sử dụng giá trị của 
ột biến: 
<% 
 Dim ho_ten 
 Van A” dữ liệu. Dữ liệu được lưu trong vùng nh ớ đó gọi là giá trị
Để khai bá o một biến trong V BScript người ta dùng t
 
 Ví dụ sau đây minh ho ạ các
m
  
 
 
  ho_ten = “ Nguyen
  Response.Write(“Ho va ten cua toi la: ” & ho_te n) 
 216
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

%> 
Khai báo m ột dãy (arra y): Một array được dùng để lưu trữ những dữ liệu 
có liên  về cách khai báo và s ử dụng array: 
<% 
 danh_sach(0) = “Thanh Hoa” 
 danh_sach(3) = “Khanh Hung” 
 danh_sach(4) = “Tua n Anh” 
 Next 
 
t:  
<%var Tên Bi ến%> 
8.3.4.4 
 quan tới nhau. Dưới đây là ví dụ
 Dim danh_sach(5), i 
 danh_sach(1) = “Thuy Hien” 
 danh_sach(2) = “Thanh Binh” 
 For i=1 to 4  
  Response.Write(danh_sach(i)) 
%>
 
Khai bá o biến trong JScrip
 
 
- Phạm vi hoạt động của biến 
 Ph ạm vi hoạt động của biến quyết định sự tồn tại của biến. Tr ong AS P 
àn cục và biến cục bộ. Một biến được khai bá o bên 
ục; Giá trị của biến này 
có  ang ASP. 
 cục trùng tên nhau.  
 mặc dù có 2 bi ến được đặt tên là Y: 
 
nd Sub 
 
 dụng trong nhi ều hơn 1 file asp, b ạn cần 
phải khai báo bi ến đó là biến phiên (session) ho ặc biến ứng dụng (application). có 2 loại biến là: Biến to
trong một thủ tục hoặc hàm bằng từ khoá Dim, Var được gọi là biến cục bộ; 
Biến cục bộ được tạo và được huỷ mỗi khi thủ tục hoặc hàm được thi hành. Nó 
không thể được truy nh ập từ bên ngoài t hủ tục hoặc hàm đó. Một biến được 
khabái o bên ngoài m ột thủ tục được gọi là biến toà n c
 trong tr thểtruy xuất và sửa đổi bằng các lệnh Script
 bộ và biến toàn Có thể khai  báo biến cục
Ví dụ sau trả lại giá trị là 1
<% 
Dim Y 
Y = 1 
Call SetLocalVariable 
Response.write Y 
 
Sub SetLoc alVariable 
  Dim Y 
  Y  = 2 
E
%> 
Trong ASP, b ạn có thể sử dụng biến mà không cần khai báo tr ước. Tuy
nhiên, để tránh nhầm lẫn giữa phạm vi các bi ến, nê n khai báo các bi ến trước 
khi sử dụng.  
Để khai báo các bi ến có thể sử
 217
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

n ứng dụng 8.3.4.5- C ác biến phiên và bi ế  
  có 
t 
n 
ó thể đặt thời 
gian tồ
 
 
 
g bằng 2 đối tượng: Session 
 
<%Session(“Tên bi ến”) = Giá tr ị khởi tạo%>  
hoặc: 
 <%A pplication(“Tê n biến”) = Giá tr ị khởi tạo%> 
 
 
 
8.3.4.6- K hai báo t hủ tục, hàm và cách g ọiBiến phiên( session) dùng để lưu thông tin v ề MỘT người sử dụng, và
giá trị trong tất cả các trang web trong su ốt một phiên của người sử dụng. Mộ
phiên của người sử dụng được tính từ lúc người sử dụng bật Browser cho đế
khi tắt Browser. Tuy nhiê n biến phiê n sẽ tự động bị xoá nếu sau một khoảng 
thời gian xác định người sử dụng không Refresh l ại trang. Ta c
n tại biến phiên này trong trang AS P. Thời gian ngầm định là 20 phút.  
 
Biến ứng dụng(Application) có giá tr ị đối với tất cả các trang c ủa ứng
dụng và chỉ bị xoá khi  tắt ứng dụng. Biến ứng dụng là một cách tốt để lưu trữ
thông ti n của TẤT CẢ các người sử dụng trong một ứng dụng.  
Có thể tạo ra các bi ến phiê n và biến ứng dụn
và A pplication. 
 
Cú phá p tạo như sau: 
 
 Ta có thể sử dụng 2 ngôn ng ữ Script để viết trong A SP là Java Script và  
VB Script.  
Trong VB Script: 
 
<SCRI PT LANGUAGE= VBScript RUNAT=Server>  
Sub Tê n thủ tục(đối số) 
 Thâ n thủ tục 
End S ub 
Function Tên hàm (đối số) 
Thân hàm  
 Tên hàm  = Giá trị trả lại 
End F unction 
</SCRIPT> 
 
Cách gọi thủ tục, hàm  VBScript 
 
Call Tên th ủ tục(giá trị truyền cho thủ tục) 
Hoặc 
 Biến = Tên hàm (giá trị truyền cho hàm ) 
 218
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Ví dụ sau m inh hoạ cách khai bá o một thủ tục/hàm  và cách g ọi chúng: 
 
<html> 
<head> 
<% 
sub vbproc (num 1,num2) 
Response.Write(num1*num2) 
end sub 
%> 
<script  lan guage="javascript" runat="server"> 
function jsproc( num1,num2) 
{ 
Response.Write(num1*num2) 
} 
</script> 
</head> 
 
<body> 
<p>Result: <%call vbproc(3,4)%> </p>   
<p>Result: <%vbproc 3,4%> </p> 
<p>Result: <%call js proc(3,4)%> </p> 
</body> 
</html> 
 
Trong Java Script: 
 
<SCRI PT LANGUAGE=JSc ript RUNAT=Server> 
function Tê n thủ tục(đối số) 
{ 
 Thâ n thủ tục 
} 
function Tê n hàm (đối số) 
{ 
 Thâ n hàm 
 return Giá tr ị trả lại 
} 
 
</SCRIPT> 
 
Cách gọi thủ tục, hàm JScript 
 
Tên thủ tục(giá trị truyền cho thủ tục) 
Hoặc 
 Biến = Tên hàm (giá trị truyền cho hàm ) 
Ví dụ minh hoạ: 
 219
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<%@ language="javascript" %> 
<html> 
<head> 
<% 
function jsproc( num1,num2) 
{ 
Response.Write(num1*num2) 
} 
%> 
</head> 
<body> 
<p> 
Result: <%jsproc(3,4)%> 
</p> 
</body> 
</html> 
 
 Sự khác nhau gi ữa JScript và VBScript:  
Khi gọi một thủ tục VBScript ho ặc JScript vi ết bằng VB Script t rong 
ASP, nếu dùng từ khoá Call tr ước tên thủ tục thì các bi ến gán cho th ủ tục đó 
cần để trong ngo ặc đơn. Nếu không dùng t ừ khoá Call thì có th ể không cần dấu 
ngoặc đơn. Nếu  thủ tục không có bi ến thì có th ể có hoặc không có d ấu ngoặc 
đơn. 
 Khi gọi một thủ tục VBScript ha y JScript  viết bằng JScript trong ASP, 
luôn luôn dùng d ấu ngoặc đơn sau tên th ủ tục. 
 
8.3.4.7- Liê n kết nhiều tệp trong m ột tệp 
   
Để tránh nội dung của một tệp quá dài, khó qu ản lý, hoặc có những nội 
dung được lặp đi lặp lại trong nhi ều trang, t a có thể tạo những hà m, headers, 
footers, hay các ph ần tử dùng chung trong nhi ều trang đó và đưa vào các t ệp 
nhỏ rồi liên kết chúng trong t ệp chính.  
Chỉ dẫn #include cho phép liên k ết tệp dưới dạng vật lý hay logic.  
 
Cách sử dụng chỉ dẫn #include: 
Dưới đây là một file có tên mypage.asp: 
 
<html>  
<body>  
 <h3>W ords of Wisdom :</h3> 
 <p><!--#include file="wisdom.inc"--></p>  
 <h3> The time is:</h3> 
 <p><!--#include file="time.inc"--></p> 
 </body>  
 220
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</html> 
Còn đây là file wisdom.inc: 
"One shoul d never inc rease, beyond what is necessary,the number of 
entities req uired to explain anything." 
 
 Và đây là nội dung file time.inc 
  
<% 
Response.Write(Time) 
%> 
 
 Nếu bạn xem  mã nguồn trên trình duy ệt, bạn sẽ thấy chúng c ó dạng như 
sau: 
  
<html> 
<body> 
<h3>W ords of Wisdom :</h3> 
<p>"One should neve r increase, beyond what is necessary, 
the num ber of entities required to explain anything."</p>  
<h3> The time is:</h3> 
<p>11:33:42 AM</p> 
</body> 
</html> 
Cú ph áp cho chỉ dẫn #include nh ư sau: 
<!--#include virtual="somefilename"--> 
or 
<!--#include file ="somefilename"--> 
Từ khoá  VIRTUAL:  
Sử dụng từ khoá virtual để chỉ đường dẫn bắt đầu bởi một thư mục 
ảo.  
 Nếu có một file tên header.inc n ằm trong thư mục ảo có tên /html, thì ta 
sử dụng dòng l ệnh sau để chèn nội dung file header.inc:  
 <!-- #include virtual= ”/html/header.inc” --> 
  
 Từ khoá FI LE 
 Sử dụng từ khoá file để chỉ đường dẫn tương đối. Một đường dẫn tương 
đối bắt đầu bởi thư mục chứa file được chèn thêm vào.  
 Nếu bạn có một file nằm trong thư mục htm l, và file chèn thêm  vào là 
header.inc n
ers\header.inc” --> ằm trong htm l\headers thì ta có th ể dùng dòng l ệnh sau để chèn file 
header.inc: 
 <!-- #include file=”head
 221
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chú ý rằng file chèn thêm  vào (he aders\heade r.inc) có quan h ệ tương đối 
 lệnh #incl ude không n ằm trong 
ư mụ
 file .inc đó thì toàn b ộ nội dung của file 
này sẽ ng của file được nhì n thấy thì 
bạn nên để file dạng .asp. Mã ngu ồn của file ASP không được hiển thị khi c hưa 
dịch. Một file có th ể được include trong nhi ều file khác nha u, và một file có th ể 
include trong nó m ột hay nhiều lần 1 file khác.  
 Nh ững file được include được xử lý và chè n vào trước khi các scripts 
được thực hiện. 
 Script sau s ẽ không là m việc vì ASP th ực hiện chỉ dẫn #include trước 
khi nó gán giá tr ị cho biến: 
 <% 
fname="header.inc" 
%> 
<!--#include file="<%=fname%>"--> 
 
Bạn không th ể đặt #inc lude trong l òng script, nó s ẽ không làm vi ệc. 
Đoạn mã  sau sẽ không làm  việc:  
  
 
 
<% 
For i = 1 To n 
  <!--#include file="count.inc"--> 
Next 
%> 
 
Nhưng đoạn dưới đây thì có làm vi ệc: 
 
<% For i = 1 to n %> 
 <!--#include file="count.inc" --> 
<% Next %> 
 
 
 
8.3..5- Sử dụng các đối tượng Component   
8.3.5.1- K hái niệm Componentsđối với file cần chèn. N ếu như file chứa dòng
th c html thì dòng l ệnh nà y không làm  việc. 
 Bạn cũng có thể sử dụng cú pháp (..\) để chèn một file ở thư mục cấp 
trên. 
  
 Chú ý: Trong các ph ần trên chúng ta dùng file có ph ần mở rộng là .inc. 
Nếu người sử dụng muốn mở chính
 được hiển thị. Nếu bạn không m uốn nội du
 
 Các ActiveX Component là chìa khoá để xây dựng nê n các ứng dụng 
Web mạnh. Một ActiveX Component là m ột tệp chứa mã  để thực hiện  một 
công việc hoặc một tập công vi ệc hoàn c hỉnh giúp ng ười lập trình không ph ải 
viết lại các module để thực hiện công vi ệc đó(thường dưới dạng file .Dll ho ặc 
 222
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

.Exe). Bản thân AS P cũng hỗ trợ một số Compone nt, chẳng hạn: Componen t 
cung cấp các đối tượng truy xu ất CSDL. B ạn cũng có thể kiếm các Component 
từ  các nhà cung c ấp Thir d-Party ho ặc tự bạn có thể viết ra các Component để 
sử dụng. Bạn có thể sử dụng bất kỳ một ngôn ng ữ lập trình nào h ỗ trợ chuẩn 
COM( Com ponent Obj ect Model) để tạo ra các Component, ch ẳng hạn: C, C++, 
Java hoặc Visual Basic. Tuy nhi ên nên nhớ một điều, các ActiveX ch ạy trên 
Server không th ực hiện các chức năng về giao diện người sử dụng, ví dụ hàm  
MsgBox c ủa Visual Basic. 
 
Sau khi đã tạo các Com pone nt, bạn cần cài đặt các Com pone nts của bạn 
trên Web Server. M ột khi đã cài component trên Web Server, b ạn có thể gọi 
chúng trong các file ASP, ho ặc các ứng dụng hỗ trợ ISAPI(Internet Server 
Application Programmming Interface) ho ặc từ chính các Com ponent khác.  
 
8.3.5.2- Sử dụng các đối tượng trong Component  
 Một Component có thể chứa một hoặc nhiều đối tượng trong nó và g ắn 
mỗi đối tượng đều có các ph ương thức và thuộc tính riêng.  Để sử dụng một đối 
tượng của Component, b ạn phải tạo ra một Instance c ủa đối tượng và gắn nó 
với một biến bằng phương thức 
 
Server.CreateObject 
 
Cú phá p:  
 
Trong VBScript: 
  <%Set Tênbi ến = Server.CreateObject(“ProgID.ObjectName”)%>  
 
Trong Jscri pt: 
 <%var Tênbiến = Server.CreateObject(“ProgID.ObjectName”)%>  
 
Trong đó, ProID  là Tên đăng ký của Com ponent đó trong Web S erver; 
ObjectName là tên đối tượng cần tạo Instance. 
 
Ví dụ sau sẽ tạo ra một Instance c ủa đối tượng AdRotator trong 
Component v ới PROGID là “MSWC” 
 
<%Set MyAds = Server.CreateO bject(“MS WC.A dRot ator”)%> 
   
Chú ý là b ạn không th ể sử dụng các hàm c ủa VBScript(CreateObject) 
hoặc Jscript (New) để tạo Instance. B ạn phải sử dụng phương thức tạo Instance 
Server.CreateObject trong ASP.  
Bạn cũng có thể sử dụng thẻ <OB JECT> của HTML để tạo các Instance 
cùng thuộc tính R UNAT=Server. Cú phá p như sau: 
 
<OBJECT RUNAT=Server ID=MyA d PROGID=”M SWC.AdRotator”> 
 223
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</OBJECT> 
hoặc 
<OBJECT RUN AT=Server ID =MyA d CLASSID=”Clsid:1621F7C0-
60AC”> 
</OBJECT> 
 
Không giống như các Component được tạo ra bởi Visual Basic có ph ần 
mở rộng là .DLL, m ột ActiveX Component được viết bằng Java th ường là một 
Class(.class).  Sau khi t ạo  được một lớp bằng Java, b ạn cần dùng ch ương trình 
Javareg để đăng ký nó nh ư một Component. Sau đó, bạn có thể sử dụng 
Component đó như mọi Com ponent bình th ường khác trong V BScript cũng 
như trong J script.  
 
8.3.5.3- C ác phương thức và thuộc tính của đối tượng 
 ASP có các đối tượng của chính nó gi úp người lập trình thực hiện các 
chức năng. Bạn không c ần phải khai báo c ũng như tạo Instance cho nó. Truy 
nhập các phương thức và thuộc tính của một đối tượng ASP  gi ống như truy 
xuất các phưong thức và các thu ộc tính của các đối tượng thuộc các Component 
được đăng ký khác. Tr ước khi làm  quen với các đối tượng của ASP, bạn cần 
làm quen với một số các khái ni ệm và thao tác sau: 
 
Một đối tượng ba o gồm: T huộc tính và P hương thức. Ta có th ể coi thuộc 
tính là nh ững biến để lưu trạng thái của đối tượng đó; Phương thức là n hững 
hàm thực hiện các công vi ệc liên qua n đến đối tượng chứa nó và có th ể được 
gọi từ bên ngoài thông qua đối tượng chứa nó. Cú phá p chung để gọi một 
phương thức đó là: 
  Đối tượng. Phương thức [Tham s ố truyền] 
và để đặt giá trị cho một thuộc tính 
  Đối tượng.Tên thu ộc tính = Giá tr ị 
 
Ví dụ sau sử dụng phương thức Write c ủa đối tượng Response để viết ra một 
dòng chữ được truyền như là một tham số: 
<% Response.Write “Hello” %>  
 
 
8.3.5.4- T hiết lập phạm vi đối tượng 
 Ph ạm vi của đối tượng sẽ quyết định Script nào có th ể truy xuất đến đối 
tượng đó. Ngầm định khi tạo một Instance c ủa đối tượng, nó sẽ có phạm vi 
trang, ngh ĩa là các lệnh Script trong trang đó có thể gọi nó và đối tượng đó sẽ 
được huỷ khi thoát kh ỏi trang đó. Các đối tượng phiên( Session) s ẽ hoạt động 
với phạm vi lớn hơn, phạm vi phiê n, tức là khi m ột người sử dụng bật và tắt 
Browser. Các đối tượng phạm vi phiê n có thể được truy xuất từ các Script c ủa 
các trang. Đối tượng phạm vi ứng dụng(Application) s ẽ hoạt động và bị huỷ khi 
tắt ứng dụng. Để đặt phạm vi cho một đối tượng, sử dụng các cấu trúc khai bá o 
sau: 
 224
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Phạm vi trang: 
 
 Set Tên đối tượng = Server.CreateObject(“ProgID”) 
 
 Ví dụ: Set con = Ser ver.CreateObject(“AD O.Connection”) 
 
Phạm vi Phiên: 
  
Set Session(“Tên đối tượng”) = Server.CreateObject(“ProgID”) 
 
Hoặc 
 
<OBJECT RUNAT=Server SCOPE=Session ID= Tên đối tượng 
PROGID= ”ProgID”> </OBJECT> 
 
Phạm vi ứng dụng: 
 
Set Application(“Tên đối tượng”) =  Server.CreateObject(“ProgID”) 
 
Hoặc 
 
<OBJECT RUNAT=Server SCOPE=Session ID=Tên đối tượng 
PROGID= ”ProgID”> </OBJECT> 
 
Nhìn chung, ch ỉ sử dụng các đối tượng có phạm vi phiên và ph ạm vi ứng 
dụng nếu thực sự cần thiết vì chúng s ẽ chiếm tài nguyên của hệ thống trong 
thời gian chúng t ồn tại. Ta có th ể huỷ các đối tượng có phạm vi trang b ằng câu 
lệnh 
 
Set Tên đối tượng = N othing 
 
Tuy nhiên các tài nguyên dùng cho đối tượng nà y sẽ chỉ bị huỷ khi kết thúc 
trang. 
 
8.3.6- Làm vi ệc với tập hợp (Collection) trong ASP 
 Hầu hết các đối tượng của ASP đều hỗ trợ Collection. M ột Collection là 
một vùng nh ớ để lưu trữ các chuỗi, các số hoặc các giá tr ị khác. Nhì n một phía, 
một Collection có ph ần giống như một mảng ngoại trừ rằng nó có c ơ chế tự bổ 
sung ha y bớt các Items trong nó.  
Không nh ư một mảng, vị trí của các phần tử(Item) tự động thay đổi mỗi khi 
Collection đó được cập nhật.  Bạn có thể truy xuất các phần tử của Collection 
bằng tên, bằng chỉ số(như mảng) của phần tử hoặc thậm chí truy xu ất tất cả các 
phần tử cùng một lúc. Trong ASP, hai đối tượng Collection c ủa Session và 
Application th ường ha y được sử dụng nhất.  
 225
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

8.36.1- Truy xu ất theo tên  
<%Session. Contents(“Tên ph ần tử”) = Giá tr ị%> 
<%A pplication.C ontents(“Tên ph ần tử”) = Giá tr ị%> 
 
Nếu mỗi phần tử có một tên duy nh ất trong Collection, ta có th ể dùng cú 
pháp ngắn gọn sau: 
 
<%Session (“Tên ph ần tử”) = Giá tr ị%> 
<%A pplication (“Tê n phần tử”) = Giá tr ị%> 
 
8.3.6.2- Tr uy xuất theo chỉ số 
 <%Session. Contents(2)  = Giá trị%> 
 
hoặc 
 
 <%Application.Contents(2) = Giá tr ị%> 
 
8.3.6.3- Tr uy xuất đến các phần tử của Collection dùng c ấu trúc lệnh 
For Each Tên bi ến  In Collection  
………….. . 
Next 
 
Ví dụ sau sẽ duyệt các phần tử trong Collection: 
<% 
Dim Item 
For Each Item in  Session. Content s 
 Response.Write Session.Contents(Item) & “<BR>” 
Next 
%> 
8.3.6.4- Sử dụng thuộc tính C ount trong C ollection  
Sử dụng thuộc tính C ount để đếm số phần tử trong C ollection 
 
8.3.7- Các đối tượng của AS P 
 Sáu đối tượng được coi là ch ủ chốt trong AS P, đó là: 
Application: 
Cung cấp các phương thức và thuộc tính để chia sẻ thông tin gi ữa các 
User trong cùng m ột ứng dụng. 
Request: 
Sử dụng đối tượng R equest để lấy các thông tin mà Client đã chuyển 
đến Web Server thông qua m ột HTTP re quest. HTTP  request bao g ồm các 
 226
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

tham số được truyền từ một form HTML theo ph ương thức POST  hoặc 
GET, các Cookies…Ngoài ra, đối tượng R equest cũng cho phé p truy xuất 
đến các dữ liệu được gửi lên Server d ưới dạng các file nh ị phân như Upload 
File. 
Response: 
Sử dụng đối tượng nà y để điều khiển việc gửi thông tin t ới User, gồm: 
Gửi thông tin tr ực tiếp tới Browser c ủa User ho ặc dẫn Browser sang m ột địa 
chỉ URL mới, hoặc đặt một giá trị Cookie để nhận dạng User. 
Server: 
Đối tượng này giúp truy nh ập tới các phương thức và thuộc tính trên 
Server. Ph ưong thức được sử dụng thông thường nhất của đối tượng nà y là 
tạo một Instance c ủa một Com ponent ActiveX(Ser ver.CreateObject). Các 
phương thức khác hay được sử dụng như mã hoá xâ u, đặt đường dẫn ảo và 
đặt thời gian tồn tại cho Script. 
Session: 
Ta đã làm  quen với đối tượng Session và  Application để tạo ra cá c biến 
và đối tượng có phạm vi mức phiê n và ứng dụng. Nhìn chung ta s ử dụng 
đối tượng Session để lưu trữ các thông tin cho m ột phiê n làm  việc của 
người sử dụng(thời gian tính từ lúc User kh ởi tạo brow ser và tắt Browser). 
Thông tin trong Session không b ị mất khi chuy ển giữa các trang. B ạn có thể 
đặt thời gian tồn tại cho các đối tượng Session ho ặc huỷ nó. 
ObjectContext: 
Bạn sử dụng đối tượng nà y để khẳng định hay hu ỷ một giao tác được 
khởi tạo bởi một ASP script. 
 
Các phương thức, thuộc tính, tập hợp của các đối tượng được liệt kê chi ti ết 
ở phụ lục cuối tài liệu. 
 
8.3.7.1- Đối tượng Re quest  
 Đối tượng Request được dùng để lấy thông tin t ừ người sử dụng. 
Request cung c ấp một số phương thức, thuộc tính và t ập hợp(Collection) 
quan trọng sau: 
QueryString: L ấy giá trị của các biến trên dòng l ệnh.  
- Khi người sử dụng nhắp chuột vào một đường kết nối (click on a link). Ví 
dụ sau là nội dung của file dem o_sim lequerystring.asp 
<html> 
<body> 
<a href="dem o_sim plequer ystring.asp?col or=green"> Exam ple 
</a> 
<% 
Response.Write(Request .QueryString(“color”)) 
%> 
</body> 
</html> 
 227
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Khi bạn nhắp chuột trên dòng ch ữ Exam ple, kết quả hiển thị sẽ là: 
 
 Example color=green 
 
- Dùng ph ương thức QueryString để lấy dữ liệu khi người sử dụng nhập vào 
một form. Form này s ử dụng phương thức GET để truyền dữ liệu. Phương thức 
GET cho phép t ất cả mọi người có thể nhìn thấy thông tin truy ền đi trên URL. 
Tuy nhiên ph ương thức này có h ạn chế về dung lượng thông tin. 
 
Ví dụ: Một Form nh ập liệu có dạng như sau:  
 
 
Hình 8. 2 Form nhập liệu 
 
 
<html> 
 
<head> 
<meta http-equi v="Content-Type" co ntent="text/html; charset=utf-8"> 
<meta name="GEN ERATOR" content="Mi crosoft FrontPage 4.0"> 
<meta name="ProgId" content= "FrontPage.Editor.D ocum ent"> 
<title>New Page 1</title> 
</head> 
 
<body> 
<form  method="G ET" action="f older.asp">  
  <p align="center"><b>Please fi ll in the following form</b></p> 
  <table border="0" cellpadding=" 0" cellspacing= "0" wi dth="308"> 
    <tr> 
      <td width="100" nowrap>Name:</td> 
      <td width="202"> <input t ype="text" nam e="nam e" size="30"></td> 
 228
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</tr> 
    <tr> 
      <td width="100" nowrap>Em ail:</td> 
      <td width="202"> <input type ="text" name="emai l" size="30"></td> 
    </tr> 
  </table> 
  <p><input type="submit" value="Submit"> </p> 
</form> 
 
</body> 
 
</html> 
 
 Khi người sử dụng nhấn vào nút Subm it, các giá tr ị của các hộp Text sẽ 
được gắn vào tr ong một xâu cùng v ới tên của của các hộp Text(được định 
nghĩa cùng với thuộc tính Nam e trong t hẻ Input). Xâu đó được gắn với dòng 
URL trong thu ộc tính Action c ủa thẻ Form sau m ột dấu ? và có dạng như sau: 
 
 http://.../folder.asp?name=Ja ckie&email=jack@yahoo.com 
 
Để lấy giá trị của Form nh ập liệu, trong t ệp folder.asp ta dùng ph ương 
thức QueryString c ủa đối tượng Request nh ư sau: 
 
<html> 
 
<head> 
<meta http-equi v="Content-Type" co ntent="text/html; charset=utf-8"> 
<meta name="GEN ERATOR" content="Mi crosoft FrontPage 4.0"> 
<meta name="ProgId" content= "FrontPage.Editor.D ocum ent"> 
<title>New Page 1</title> 
</head> 
<body> 
<% 
Dim n ame, email 
name = Request.QueryString("name") 
email = Request.QueryString("email") 
%> 
<p align= "center">< b>The fol lowing information was received from 
user:</b></p> 
<p align="center">Name = <%=name%></p> 
<p align="center">Em ail&nbsp;  =&nbs p; <%=em ail%></p> 
</body> 
 
</html> 
 229
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 8. 3 Trả lời từ server 
 
 
Để tránh người sử dụng có thể nhìn thấy giá trị được truyền trên URL, ta 
đổi phương thức GET trong thu ộc tính Action c ủa thẻ Form thành phương thức 
POST. 
 
Phương thức Form 
 
Được dùng nh ư đối tượng Quer yString để lấy giá trị của các phần tử 
trong F orm. Để sử dụng đối tượng Form, thu ộc tính Method c ủa thẻ FORM 
phải là POST. V ới phương thức truyền kiểu POST, d ữ liệu được truyền không 
được nhìn thấy, và ta có th ể truyền một dung lượng dữ liệu không h ạn chế. 
Ví dụ dưới đây chỉ khác ví d ụ trên  ở chố thay đổi một một chút một 
đoạn mã trong tệp folder.asp: 
 
<html> 
 
<head> 
<meta http-equi v="Content-Type" co ntent="text/html; charset=windows-
1252"> 
<meta name="GEN ERATOR" content="Mi crosoft FrontPage 4.0"> 
<meta name="ProgId" content= "FrontPage.Editor.D ocum ent"> 
<title>New Page 1</title> 
</head> 
<body> 
<% 
Dim n ame, email 
 230
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

name = Request.F orm("nam e") 
email = Request.Form("email") 
%> 
<p align="center"><b>The followin g information was received from 
user:</b></p> 
<p align="center">Name = <%=name%></p> 
<p align="center">Em ail&nbsp;  =&nbs p; <%=em ail%></p> 
</body> 
 
</html> 
 
 Một ví khá c dưới đây cho thấy tập hợp Form  chứa dữ liệu như thế nào nếu 
có một vài trường được đặt cùng tên. Nó c ũng cho thấy cách sử dụng từ khoá 
Count để đếm số giá trị của tên biến được đặt trùng. For m này sử dụng phwong 
thức POST . 
 
<html> 
<body> 
 
<form  action="dem o_form.asp" m ethod="pos t"> 
First nam e: 
<input type ="text" nam e="nam e" value= "Phuong"> 
<br> 
Last nam e: 
<input type ="text" nam e="na me" value= "Nguye n Minh"> 
<br> 
<input type ="subm it" value="Subm it"> 
</form> 
<hr> 
 
<p>The information received fro m the form above was:</p> 
<% 
If Request.Form("name")<>"" Then 
      Response.Write("<p>") 
      Response.Write("name=" & Request.Form("name")) 
      Response.Write("</p><p>") 
      Response.Write("The name propert y's count is: ") 
      Response.Write(Request.Form("name").Count) 
      Response.Write("</p><p>") 
      Response.Write("First name="  & Request.Form("name")(1)) 
      Response.Write("</p><p>")  
      Response.Write("Last name="  & Request.Form("name")(2)) 
      Response.Write("</p>")  
End if 
%> 
 
 231
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

</body> 
</html>  
 
Kết quả khi subm it chương trình s ẽ là: 
 
  
Hình 8. 4 Kết quả 
 
 
8.3.7.2- Đối tượng Res ponse 
 Response cung c ấp các phương thức và thuộc tính để gửi lại các giá tr ị 
cho người sử dụng từ phía Server.  
Các phương thức sau hay dùng nh ất của đối tượng Res ponse là 
 
- Write: Chèn m ột xâu vào trong trang HTML tr ả lại cho người sử dụng. 
 
Cú pháp:  Response.Write “Xâu c ần chèn” 
 
- Buffer: Nh ận giá trị là True ha y False. N ếu là True,  hệ thống sẽ dành một 
vùng bộ nhớ đệm cho quá trình x ử lý các trang ASP tr ước khi trả lại kết quả là 
các trang HTML cho Client.  
 
Cú pháp:  Response.Buffer =  True/ False 
 
- Redirect: D ẫn hướng Client t ới một địa chỉ URL khác . Để sử dụng phương 
thức này, ta phải gọi phương thức Response.Buffer = True ở đầu trang, sau cá c 
chỉ dẫn lệnh (@language..) 
 
Cú phá p: 
 232
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Response.Buffer = True 
 ……………… 
 ……………… 
 Response.Redirect “địa chỉ URL mới” 
 
- Cookies: Máy ch ủ nhận biết các máy khác truy xu ất đến mình thông qua  các 
Cookie. Để gửi một Cookie t ới một máy khá ch, ta sử dụng cú pháp sau: 
 
 Response.Cookies(“Tên  Cookie”) = Giá tr ị 
Một số các phương thức khác nữa được liệt kê ở Phụ lục, phần cuối 
cùng của chương này.  
 
8.3.7.3- Đối tượng Ser ver 
 Th ực hiện các chức năng hệ thống.  
Có hai ph ương thức phổ dụng của đối tượng Server là CreateObject và 
URLEnc ode. 
 
- CreateObject: S ử dụng để khai báo các đối tượng. Ta xem  chi tiết trong ph ần 
sử dụng đối tượng. 
 
- URLEncode: Khi truy ền giá trị trên URL, để truyền các giá tr ị đặc biệt như 
dấu trống, cách…ta s ử dụng URLEncode để mã hoá xâu tr ước khi truy ền. 
Dim str = Server.URLEncode(Xâu c ần mã hoá) 
 
-URLMapPath: T ạo ánh xạ giữa đường dẫn logic và đường dẫn vật lý 
Để xem  đường dẫn vật lý của thư mục chứa tệp bất kỳ : 
  
 Server.MapPath(“Tên đường dẫn logic/Tê n tệp”) 
Để xem  đường dẫn vật lý của thư mục hiện hành: 
 
 Server.MapPath(“.”)  
 
Để xem  đường dẫn vật lý của thư mục gốc của Web Site: 
 Server.MapPath(“..”) 
 
8.3.7.4- Đối tượng Application  
 Tạo, huỷ các đối tượng và biến có phạm vi hoạt động mức ứng dụng. 
 
Cú phá p: 
 
Application(“Bi ến”)  =  Giá tr ị 
Hoặc 
 Set Application(“ Đối tượng”) = G iá trị 
 233
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Khi đó, biến/ đối tượng có phạm vi hoạt động mức ứng dụng sẽ tồn tại 
từ khi bắt đầu khởi động đến lúc kết thúc ứng dụng. 
 
8.3.7.5- Đối tượng Ses sion 
 Tạo, huỷ các đối tượng và biến có phạm vi hoạt động mức phiên 
 
Cú phá p: 
  
 Session(“Bi ến”) = Giá tr ị 
Hoặc 
 Set Session(“ Đối tượng”) = Giá tr ị 
Một khi được khai báo ph ạm vi phiê n, biến/ đối tượng sẽ tồn tại từ khi 
Client mở Browser và g ửi yêu cầu lên Ser ver tới khi tắt Browser. 
8.3.7.6 - Tệp Global.as a 
 File Global.asa là m ột file tuỳ chọn dùng để khai báo các đối tượng, các  
biến hoặc các phương thức được truy xuất tới bởi tất cả các file trong ứng dụng 
ASP. Một file Global.asa có th ể bao gồm: 
- Các sự kiện mức ứng dụng (application events) 
- Các sự kiện mức phiên (session events) 
- Các khai bá o đối tượng 
- TypeLi brary declarations 
- Các chỉ dẫn #include 
Chú ý rằng file Globa l.asa phải được đặt ở thư mục gốc của ứng dụng 
ASP, và m ỗi một ứng dụng ASP ch ỉ bao gồm 1 file Global.asa duy nh ất. 
 
Các sự kiện trong file Global.asa: 
Trong file Global.asa b ạn có thể cho ứng dụng và các sesssion objects 
biết cần phải làm  gì ngay khi ứng dụng hoặc session b ắt đầu hoặc kết thúc. Để 
làm điều đó bạn đặt các đoạn mã tương ứng trong các th ủ tục đáp ứng sự kiện. 
File Global.asa có th ể chứa bốn loại sự kiện đó như sau: 
 
 
Application_OnStart -  S ự kiện này xảy ra khi ng ười sử dụng đầu tiên 
gọi trang đầu tiên của ứng dụng. Sự kiện này xảy ra khi Web server được khởi 
động lại hoặc khi file Global.asa được soạn thảo. Sự kiện "Session_OnStart"  s ẽ 
xảy ra kế tiếp ngay sau s ự kiện này.  
Session_O nStart - S ự kiện này xảy ra mỗi khi một user mới gọi trang 
đầu tiên tong ứng dụng ASP. 
Session_O nEnd - Sự kiện này xảy ra mỗi khi người sử dụng kết thúc 
phiên làm việc của mìn h. Một người sử dung kết thúc một phiên làm  việc khi 
không c ó bất kỳ một trang nào được gọi sau một khoảng thời gian nhất định. 
(Mặc định là 20 phút, có th ể đặt lại bởi người viết chương trình) 
 234
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Application_OnEnd - S ự kiện này xảy ra khi ng ười sử dụng cuối cùng 
kết thúc phi ên làm  việc của mình . Thường thì sự kiện này xảy ra khi  Web 
server stops. Nó th ường được dùng để  huỷ việc cài đặt sau khi ứng dụng được 
kết thúc,  ví  dụ như xoá các b ản ghi hoặc viết thông tin ra file.  
Một file Global.asa có th ể có dạng như sau: 
 
<Script langua ge=”V BSCript” R UNAT=”S erver”> 
 
Sub A pplication_O nStart 
 --------Mã chương trình  thực hiện khi khởi động ứng dụng---------
- 
End S ub 
 
Sub A pplication_O nEnd 
 ------Mã chương trình được thực hiện khi tắt ứng dụng------- 
End S ub 
 
Sub Session_OnStart 
 ------Mã chương trình được thực hiện khi bắt đầu một phiên-------
-- 
End S ub 
 
Sub Session_OnEnd 
 ------Mã chương trình được thực hiện khi kết thúc một phiên------
------- 
End S ub 
 
</Script> 
 
 Bạn không th ể dùng cặp dấu scrript (<% và % >) trong file Gloabal.a sa. 
 Khai báo Object (<object> Declarations ) 
Bạn có t hể tạo các obj ects trong ph ạm vi phiê n làm việc hoặc phạm vi 
toàn ứng dụng trong file Global.asa b ằng việc sử dụng thẻ <object >.  
Chú ý: Th ẻ <object> ph ải đặt bên ngoài th ẻ <script> 
Cú phá p:  
 <object runat="server" scope="scope " id="i d" 
{progid= "progI D"|classid="classI D"}> 
.... 
</object> 
 
 
 235
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Parameter Description 
scope  Đặt phạm vi của object ( Là m ức Phiên ho ặc Ứng dụng)  
id  Chỉ định id duy nh ất cho từng object  
ProgID  An id associated with a class id. The format for ProgID is 
[Vendor.]Component[.Version]  
Either ProgID or ClassID must be specified. 
ClassID  Specifies a unique id for a COM class object.  
Either ProgID or ClassID must be specified. 
Ví dụ:  
Ví dụ này tạo một object ở mức phiên có tên là MyA d, sử dụng biến 
ProgID: 
<object runat="server" scope="session" i d="MyAd" 
progid= "MSWC.AdRotator"> 
</object> 
Còn ví dụ này tạo một object ở mức ứng dụng có tên là  
“MyC onne ction" bằng cách sử dụng biến ClassID: 
<object runat="server" scope="ap plication" id=" MyConnection" 
classid="Clsid:8AD3067A-B3F C-11CF-A560-00A0C9081C21"> 
</object> 
Một  objects được khia  báo trong file Global.asa có th ể sử dụng trong 
bất kỳ srcipt nào thu ộc ứng dụng: 
GLOBAL. ASA: 
<object runat="server" scope="session" i d="MyAd" 
progid= "MSWC.AdRotator"> 
</object> 
You could reference the object "MyAd" from any page in the ASP application: 
SOME .ASP FILE: 
<%=MyAd.GetAdvertisement("/banners/adrot.txt")%>  
 
 236
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Khai báo t hư viện kiểu dữ liệu (TypeLibrar y Declarations) 
Một TypeLibrary là m ột contai ner chứa nội dung của file DLL  t ương 
ứng với một COM object. B ằng cách chèn t hêm Type Library và o file 
Global.asa, các h ằng số của COM object có th ể được truy xuất, và các l ỗi được 
thông bá o tường m inh hơn bởi mã ASP. Nếu ứng dụng web của bạn có phụ 
thuộc vào COM objects có các ki ểu dữ liệu được định nghĩa trong th ư  viện 
kiểu dữ liệu, bạn cần phải khai báo t ư viện kiểu dữ liệu đó trong f ile Global.asa. 
Cú phá p:   
<!--METADATA TYPE= "TypeLib" 
file="filename" 
uuid="typelibraryuuid" 
version= "versionnum ber" 
lcid="localeid" 
--> 
 
Parameter Description 
file Chỉ ra đường dẫn tuyệt đối tới type library.  
Hoặc là  biến file hoặc là biến uui d param eter phải được chỉ rõ 
uuid Chỉ định id duy nh ất cho  type library.  
Either the file parameter or the uuid parameter is required 
version Tuỳ chọn. Sử dụng để lựa chọn version. N ếu như có yêu cầu về 
version m à không được tìm thấy, version nào g ần nhất sẽ được 
lựa chọn 
localeid Tuỳ chọn. The locale identifier to be  used for the type library 
Các giá tr ị lỗi 
Server có th ể trả về các thông báo l ỗi như sau: 
Error Code Description 
ASP 0222 Invalid type library specification  
ASP 0223 Type library not found  
ASP 0224 Type library cannot be loaded 
ASP 0225 Type library cannot be wrappe d 
Chú ý: Các  thẻ META DATA c ó thể xuất hiện ở bất kỳ vị trí nào trong 
file Global.asa (C ả trong hoặc ngoài th ẻ <script>). Tuy nhiên, t ốt hơn hết là bạn 
nên đặt thẻ các này g ần trên cùng c ủa file Global.asa.  
 237
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

8.3.7.8- Tr uy xuất dữ liệu trong ASP  
 ActiveX Data Objects(ADO)  là một Component chứa các đối tượng 
cung cấp các phương thức và thuộc tính để kết nối và truy xu ất cơ sở dữ liệu 
cho các trang Web.  B ạn có thể sử dụng ADO vi ết các câu l ệnh Script đơn giản 
nối tới cơ sở dữ liệu thông qua chu ẩn OD BC và thông qua các đối tượng dữ 
liệu nhúng và liên k ết(OLE DB).  
 
 
8.3.8.1- Tạo một ODBC DSN  
 Trước khi tạo các Script truy xu ất cơ sở dữ liệu(CS DL), bạn cần chỉ dẫn 
cho ADO để xác định nguồn dữ liệu cần truy xuất và cách th ức liên kết CSDL. 
Phổ biến và đơn giản nhất đó là sử dụng tên ngu ồn dữ liệu(DSN) để định vị và 
cấu hình ngu ồn dữ liệu tưong thí ch chuẩn ODBC.  Với ODBC b ạn có thể lựa 
chọn các kiểu DN S để tạo, đó là: User, System ho ặc File. Các DNS User và 
System  thường trú trong re gistry của hệ điều hành WindowsNT. System DNS 
cho phé p tất cả người sử dụng truy nh ập vào Server đó đều có t hể truy xuất một 
CSDL, trong khi đó User DNS h ạn chế đối với mỗi người sử dụng đăng nhập 
vào Server;   File DSN s ẽ lưu thông tin d ưới dạng file cho phép nhi ều người sử 
dụng truy xu ất CSDL và d ễ dàng chuy ển từ Server này sang  Server khác ch ỉ 
bằng việc copy các t ệp DSN. 
 
Bạn có t hể tạo a DSN b ằng cách: 
- Vào trong Start\Control Panel, click chu ột vào biểu tượng OD BC, chọn 
một dạng DSN  
- Click Add, ch ọn một trình điều khiển dữ liệu(.MDB, SQL) 
- Theo các ch ỉ dẫn trên m àn hình để cấu hình DSN c ho CS DL của bạn 
 
8.3.8.2- Cấu hình File DSN cho M S Access  
- Trong h ộp thoại Create New Data Source, l ựa chọn Micrsoft A ccess 
Driver, click Next 
- Nhập tên cho tệp DSN , sau đó click Next 
- Click Fini sh để tạo DSN 
- Trong h ộp thoại ODBC Micros oft Access Setup, ch ọn Select, sau đó 
vào đường dẫn tới tệp Access. 
- Click OK 
 
8.3.8.3- Cấu hình File DSN cho SQL Server  
 ASP không ch ỉ hỗ trợ cho việc truy xuất vào các CSDL d ạng chia sẻ tệp 
như MS Access,  MS Foxpro, nó còn h ỗ trợ các CSDL d ạng Client-Server nh ư 
Oracle, SQL Server. CSDL d ạng chia s ẻ tệp chỉ thích hợp với các ứng dụng 
nhỏ có số lượng người truy nhập đồng thời không quá 10 ng ười. Đối với các 
ứng dụng Web l ớn có số lượng người truy xuất lớn thì CSDL d ạng Client-
Server là gi ải pháp hữu hiệu nhất. 
Để cấu hình a File DS N cho SQ L Server: 
 238
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

- Trong h ộp thoại Create New Data Source, ch ọn SQL Ser ver, click 
Next 
- Vào tên c ủa DSN, ch ọn local và click Next 
- Click Fini sh để tạo DSN 
- Trong h ộp thoại Create a New Data Source to SQL Server, ch ọn 
phương thức SQL Server authentication và nh ập Logi nID và Passwor d, sau đó 
click Next 
- Trong h ộp thoại OD BC Micros oft S QL Se rver Setup, click Test Data 
Source để kiểm tra lại DSN vừa tạo 
8.3.8.4- Cấu hình File DSN cho O racle 
 Đảm bảo rằng chương trình Oracle Client đã được cài đặt trên máy tính 
định tạo DSN.  
- Trong h ộp thoại Create New Data  Source, l ựa chọn Micros oft for 
Oracle, click Next 
- Nhập tên DS N 
- Click Fini sh để tạo DSN 
- Vào User Name, Pasword và Server ch ứa dữ liệu, sau đó click O K 
 
Chú ý: File DSN là các t ệp có phần mở rộng .dsn và được lưu trong th ư 
mục: \Programs\Common Files\ODBC\Data Sources 
8.3.8.5- Liê n kết và truy xu ất CSDL bằng đối tượng Connection  
 Bước đầu tiên để truy xuất CSDL là thi ết lập một liên kết đến nguồn 
CSDL( DSN). ADO cung c ấp đối tượng C onnection gi úp bạn có thể dễ dàng 
thiết lập liên kết đến CSDL c ủa bạn qua  DSN m à bạn đã tạo. N goài r a 
Connection còn cung c ấp các phương thức, thuộc tính và t ạo các truy v ấn đến 
CSDL. 
 
Tạo một Instance c ủa đối tượng Connection nh ư sau: 
 
<% ‘Tạo một connection 
 Set con = S erver.CreateObject(“A DO.C onnection”) 
 ‘G ắn connection v ừa tạo với một DSN 
 con.Open “FILEDSN= Tên File DSN” 
hoặc 
 con.Open “Tên Syste m DSN” 
%>  
 
Chú ý: Tên File DSN ph ải viết liền sau dấu = 
 
Sử dụng phương thức Execute c ủa đối tượng Connection, b ạn có thể tạo 
ra các câu l ệnh tr uy vấn truy xu ất CSDL và tr ả lại kết quả. Các câu l ệnh truy 
vấn được sử dụng là các câu l ệnh S QL(giả định là bạn đã biết các câu l ệnh 
SQL). 
 
 239
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Ví dụ sau sẽ sử dụng câu lệnh INSERT để thêm một bản ghi  vào b ảng 
CUSTOM ERS tr ong CS DL sử dụng tệp DSN: MyDatabase.dsn 
<% 
str = “FILEDSN=MyDatabase.dsn” 
Set Con = Server.CreateObject(“ADODB.Connection”) 
Con.Open s tr 
‘Chạy một câu lệnh truy vấn 
Sql = “INS ERT IN TO CUS TOMERS(FirstN ame, LastNam e) 
Values(‘Jose’,’Lugo’)” 
Con.Execute(str) 
%> 
 
Ví dụ sau sẽ sử dụng lệnh UPDATE  để thay  đổi giá trị cột FirstName 
trong bảng CUSTOMERS cho các b ản ghi có LastName=’Jean’ 
<% 
Set Con = Server.CreateObject(“ADODB.Connection”) 
Con.Open “FILEDSN=MyDatabase.dsn” 
Con.Execute “UPD ATE CU STOMERS SE T Firs tName = ‘Jeff’ 
WHERE LastNam e = ‘Jean’” 
%> 
 
Ví dụ sau sẽ sử dụng câ u lệnh DELETE để xoá một bản ghi có 
LastNam e = ‘Lugo’ 
 
<% 
Set Con = Server.CreateObject(“ADODB.Connection”) 
Con.Open “FILEDSN=MyDatabase.dsn” 
Con.Execut e “DELETE F ROM CU STOM ERS W HERE 
LastName=’Smith’” 
%> 
 
8.3.8.6- Sử dụng đối tượng RecordSet  
 Sử dụng đối tượng Connection để truy xuất và thực hiện các câu l ệnh 
cập nhật dữ liệu thật đơn giản. Tuy nhiên, để  lấy hay hiển thị dữ liệu, bạn phải 
dùng đối tưọng RecordSet. Có thể coi RecordSet nh ư là một tập dữ liệu có 
nhiều hàng và nhi ều cột. Bạn sử dụng con trỏ của RecordSet để trỏ đến một bản 
ghi xác định nà o đó trong Rec ordSet. Ví  dụ sau sẽ minh hoạ cách sử dụng 
RecordSet để hiển thị thông tin c ủa 2 cột FirstName và LastName trong 
CUSTOM ERS. 
 
<% 
‘Trước tiên, thiết lập một liên kết tới DSN 
strDSN = “FILEDSN=MyDatabase.dsn” 
Set Con = Server.CreateObject(“ADODB.Connection”) 
Con.Open s trDSN 
 240
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

‘Khởi tạo một đối tượng Recor d Set 
Set rs = Server.CreateObject(“ADODB.RecordSet”) 
 
‘Mở đối tượng RecordSet v ừa khởi tạo 
strSQL = “SELECT FirstName, LastName FROM CUSTOM ERS” 
rs.Open strSQL, Con 
 
‘Hiển thị các dữ liệu trong Rec ordSet 
rs.MoveFirst 
Do Until  rs.EOF 
 FirstName = rs.Fields(“FirstName”).Value 
 LastName = rs.Fields(“LastName”).Value 
 Response.Write FirstName + “-“ + LastName 
 rs.MoveNe xt 
Loop  
%> 
  
Mỗi đối tượng Recordset có m ột đối tượng tập hợp(Collection )là Fields  
đại diện cho các tr ường trong RecordSet. Ta có th ể truy xuất đến từng trường 
trong đối tượng Fields: 
 
<% 
.. .. 
 FirstName = rs.Fields(“FirstName”).Value 
 LastName = rs.Fields(“LastName”).Value 
.. .. 
%> 
 
Đối tượng tập hợp các trường F ields bao g ồm nh iều đối tượng Field 
tương ứng với các trường đơn lẻ. Trong ví d ụ trên, đối tượng Field là:  
  
Fields(“FirstName”) 
 Fields(“LastName”) 
 
Bảng dưới sẽ mô tả thuộc tính của đối tượng Fields và F ield 
 
 
 
 
 
8.3.8.7- C ác thao t ác dữ liệu với RecordSet  
 Thêm  mới bản ghi: 
 
 241
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<% 
‘Khởi tạo một đối tượng Recor d Set 
Set rs = Server.CreateObject(“ADODB.RecordSet”) 
 
‘Mở đối tượng RecordSet v ừa khởi tạo 
strSQL = “SELECT Tr ường1, Trường2 F ROM Bảng” 
rs.Open strSQL, Con 
rs.AddNew 
 rs.Fields(“Tr ường1”).Value = Giá tr ị 1 
 rs.Fields(“Tr ường2”).Value = Giá tr ị 2 
 rs.Update 
%> 
 
Sửa bản ghi tồn tại 
 
<% 
‘Khởi tạo một đối tượng Recor d Set 
Set rs = Server.CreateObject(“ADODB.RecordSet”) 
‘Mở đối tượng RecordSet v ừa khởi tạo 
strSQL = “SELECT Tr ường1, Trường2 F ROM Bảng” 
rs.Open strSQL, Con 
 rs.Fields(“Tr ường1”).Value = Giá tr ị 1 
 rs.Fields(“Tr ường2”).Value = Giá tr ị 2 
 rs.Update 
%> 
 
Xoá bản ghi tồn tại 
 
<% 
‘Khởi tạo một đối tượng Recor d Set 
Set rs = Server.CreateObject(“ADODB.RecordSet”) 
‘Mở đối tượng RecordSet v ừa khởi tạo 
strSQL = “SELECT Các b ản ghi cần xoá” 
rs.Open strSQL, Con 
 rs.Delete 
%> 
 
 
 
 
 
 
8.3.9- Thao tác v ới tệp và thư mục 
 ASP cung cấp  đối tượng FileSystemObject để hỗ trợ cho người lập trình 
thao tác v ới tệp, thư mục và ổ đĩa.  Đối tượng FileSystemObject là m ột trong 3 
 242
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

đối tượng của com ponent Scripting, được chứa trong tệp thư viện liên kết động 
SCRRUN. DLL.  Đoạn mã sau sẽ hướng dẫn cách khai báo và s ử dụng đối 
tượng: 
 
<% 
Trong VBScript: 
 
Set objFSO = CreateObject(“Scripting.FileSystemObject”) 
 
Hoặc trong Jscript: 
 
Var obj FSO 
ObjFSO = CreateObject(“Scr ipting.FileSystemObject”) 
%> 
 
8.3.9.1- Đối tượng Dri ve 
 Đối tượng FileSystemObject ch ứa một thuộc tính, đó là Drives. Thu ộc 
tính này tr ả lại một tập hợp các đối tượng Drive trên máy ch ủ. Ví dụ sau sẽ 
minh hoạ việc sử dụng đối tượng Drive để lấy các thông tin v ề các ổ đĩa, kiểu 
đĩa và tên đĩa: 
 
<% 
Dim fs,d,dc,s,n 
Set fs = CreateObject(“Scripting.FileSystemObject”) 
Set dc = fs.Drives 
Response.Write “<TAB LE>” 
For each d in dc 
 Response.Write “<TR><TD>” + d.DriveLetter + “</TD><TD> ” 
 If d.DriveType = 3 t hen 
  S = “Remote” 
  N = d.ShareName 
 Else 
  S = “Local” 
  N = d.VolumeName 
 End if 
 Response.Write s + “</td><td>” + n + “</td><td>” 
Next 
Response.Write “</TABLE>”  
%> 
 
Kết quả có dạng: 
 
A Local  Wizard1 
C Local  Setup1 
G Remote  \\Dec3\User 
 243
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

8.3.9.2- Đối tượng Fol der 
 Thu ộc tính RootFolder c ủa đối tượng Drive tr ả lại giá trị là đối tượng 
Folder, giúp truy xu ất hệ thống tệp và thư mục trong m ột ổ đĩa xác định. Với 
các thuộc tính và đối tượng của Folder được nêu dưới đây sẽ chỉ rõ ý nghĩa các 
thuộc tính và ph ương thức của đối tượng Folder 
8.3.9.3- Đối tượng Fil e 
 Chú ý rằng đối tượng FileSystemObject cung c ấp một tập các phương 
thức mà có các ch ức năng tương tự chức năng của các phương thức của các đối 
tượng riêng l ẻ. Ví dụ CopyFolder tương ứng với Folder.Copy, DeleteFolder 
tương ứng Folder.Delete. Đối tượng FileSystemObject cung c ấp các phương 
thức để làm việc với các ổ đĩa và thư mục nói chung, còn các đối tượng riêng l ẻ 
như Folder, Drive cung c ấp các phương thức để làm việc với các thư mục và ổ 
đĩa xác định. Hai ph ương thức giúp tha o tác với các tệp Text th ường được 
dùng, đó là: CreateTextFile và OpenTe xtFile. Cú phá p đầy đủ cho chúng là: 
 
CreateTextFile:  
 
Set ObjFSO =  Server.CreateObject (“Scripting. FileSyst emObject”) 
Set objNewFile = 
objFSO.Cr eateTextFile(filenam e[,overwrite[,unic ode]]) 
 
Trong đó: 
Filename: Đường dẫn Vật lý đầy đủ và tên tệp cần tạo 
Overwrite: True n ếu ghi đè và False nếu không ghi đè, ngầm định là ghi  
đè 
Unic ode: True n ếu tệp được tạo sử dụng m ã Unic ode, hoặc Fals e nếu 
dùng mã ASCII, ng ầm định là mã ASCII. 
 
OpenTextFile: 
 
Set ObjFSO =  Server.CreateObject (“Scripting. FileSyst emObject”) 
Set objNewFile = objFSO.OpenTextFile (filename[,iomode[,create[,format]]]) 
 
Trong đó: 
Filename: Đường dẫn Vật lý đầy đủ và tên tệp cần tạo hoặc ghi. 
Iomode: Lựa chọn For Reading hay F orAppendi ng. Ngầm định l à 
ForReading 
Create: N ếu mang giá  trị True, hệ thống sẽ tự  tạo tệp mới nếu chưa tồn 
tại. Nếu mang giá trị False, hệ thống sẽ báo lỗi nếu tệp cần mở chưa tồn tại. 
Format: Định dạng m ã hoá tệp. –1: Unicode; -2: Ng ầm định hệ thống; 0: 
Dạng mã ASCII 
Ngầm định giá trị 0. 
 
 244
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hai phương thức trên trả lại đối tượng kiểu TextStream . TextStream  là 
đối tượng dùng để thao tác v ới các tệp văn bản. Các thu ộc tính và ph ương thức 
của đối tượng Text Stream  được miêu tả chi tiết ở phần phụ lục cuối tài liệu. 
 
Để đăt/ lấy các thu ộc tính của một tệp, ta có th ể dùng đối tượng File. 
Cách tạo một đối tượng File nh ư sau: 
 
Set ObjFSO =  Server.CreateObject (“Scripting.FileSystemObject”) 
Set obj F = obj FSO.GetFile(filename) 
 
Trong đó, filename là t ệp cần lấy các thuộc tính.  
 
 
Bài tập chương 
 
1. Bài tập về các cấu trúc điều khiển và vòng l ặp. 
1.1. Viết đoạn mã chương trình AS P dùng cấu trúc Select...Case để hiển thị ra 
màn hình ngày hi ện hành tr ong tuần bằng tiếng Việt. 
1.2. Viết đoạn mã chương trình ASP dùng vòng l ặp Do...Loop để viết ra màn 
hình 10 dòng c hữ “Hello world” có kích th ước tăng dần. 
2. Bài tập về các đối tượng. 
2.1. Viết ra m àn hình c âu “Hello worl d” 
2.2. Viết một form lấy ý kiến của người sử dụng về trang web c ủa bạn, rồi hiển 
thị các thông tin ng ười sử dụng điền vào ra m àn hình. 
3. Các bài t ập tổng hợp 
20 câ u hỏi dưới đây thử kỹ năng làm việc của bạn với ngôn ng ữ ASP. 
  
1. W hat does ASP stand f or? 
 
 All Standar d Pages 
 Active Server Pages 
 Active Standard Pages 
 A Server Page 
 
 
2. ASP server scripts are su rrounded by delim iters, which? 
 
 <&>...</&> 
 245
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

<%>...</%> 
 <script>...</script> 
 <%...%> 
 
3. How do you write "Hello W orld" i n ASP 
 
 Response.Write("Hello World") 
 "Hello World" 
 Document.Write("Hello World")
 
  
4. "<%= " is the same as: 
 
 <%Docum ent.Write 
 <%Equal 
 <%Response.Write 
 <%Write 
 
  
5. W hat is the default scripting langua ge in A SP? 
 
 VBScript 
 EcmaScript 
 PERL 
 JavaScript 
 
  
6. How can you script your A SP code in Ja vaScript? 
 
 End the document with: <% language="ja vascript" %> 
 JavaScript is the default scripting language 
 Start the docum ent with: <%@ la ngua ge="javascript" % >
 Start the docum ent with: <% language="ja vascript" %> 
 
  
7. How do you get information from a fo rm that is submitted using the "get" 
method? 
 
 246
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Request.Form 
 Request.QueryString 
 
  
8. How do you get information from a form  that is submitted using the "post" 
method? 
 
 Request.Form 
 Request.QueryString 
 
  
9. Page 1 has this link: 
<a href="page2.asp?c olor=gree n">G o</a> 
How can page2.asp get th e "color " param eter? 
 
 Response.Param eter("color") 
 Request.QueryString("color") 
 Get("col or") 
 Response.QuerySt ring("color")
 
 
10. Whic h AS P property is used to identif y a user? 
 
 An ASP Cookie 
 The Application object 
 The Server object 
 
  
11. All users of the sam e application share O NE Session object. 
 
 True 
 False 
 
12. All users of the sam e applicat ion share O NE Application object. 
 
 False 
 True 
 
 247
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

13. If a user has Cooki es enabled, a sessi on variable is available to all pages in 
one a pplication. 
 
 True 
 False 
 
 
  
14. Include files m ust have the file extension ".inc" 
 
 False 
 True 
 
15. What is the correct way to include the file "time.inc" ? 
 
 <% #incl ude file="time.inc" %>
 <!--#include file="time.inc"--> 
 <% include file="time.inc" %> 
 <include file="time.inc"> 
 
  
16. Whic h one of these events is  a standard Global.asa event? 
 
 Session_id 
 Global.asa does n't have any standard events
 Application_OnStart 
 Session_St art 
 
  
17. Global.asa is required for all Web sites 
 
 Only for ASP Web sites 
 False 
 True 
 
18. Whic h of these obj ects is NOT an A SP component? 
 
 AdRotator 
 File Access 
 248
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

LinkC ounter
 Counter 
 
19. AS P com es with a standard com pone nt that displays a different 
advertisement each time a user enters or refreshes a page, what is the name of 
this component? 
 
 AdRotator 
 RotateAds 
 Advertisement 
 Advertise 
 
20. How do you create a FileSystemObject? 
 
 Create("FileSystemObject") 
 Server.CreateObject("Scri pting.FileSystemObject")
 Create Object:"Scripti ng.FileSystemObject" 
 Server.CreateObject("FileSystemObject") 
 
 
 
 
 249
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Bảng các thuộc tính và ph ương thức của một số đối tượng ASP  thường dùng  
 
1.Đối tượng Re quest  
 
Collections  
Miêu tả 
ClientCertificate 
Cookies 
Form  
QueryString 
ServerVariables Cung cấp các giá tr ị để phân biệt Client khác nha u. 
Giá trị các Cookies được gửi từ Browser của Client 
 
Thuộc tính Miêu tả 
TotalBytes S ố Byte Cli ent gửi trong Request 
Phương thức Miêu tả 
BinaryRead Tr ả lại thông tin d ạng nhị phân mà Client đã gửi lên 
Server 
 
 
2.Đối tượng Response 
 
Collections  Miêu tả 
Cookies Tr ả lại các thông tin để phân biệt các Client g ửi y/c tới 
Server 
Thuộc tính Miêu tả 
Buffer 
CacheControl 
Charset 
ContentType 
Expires 
 
ExpiresAbs olute 
IsClientConnected 
Status Tạo vùng đệm cho xử lý trang hay không 
Có tạo Cache trên máy đại diện(Proxy) ha y không 
Gắn thông t in mã hoá Char set và o trong header c ủa 
trang  
Đặt kiểu nội dung trang 
Trang hết hiệu lực sau kho ảng thời gian (phút ) được 
đặt = Expires 
Ngày và thời gian trang h ết hiệu lực 
Kiểm tra Client còn n ối với Server không 
Giá trị trạng thái Server g ửi lại cho Client 
Phương thức Miêu tả 
AddHea der 
AppendToLog 
BinaryWrite 
Clear 
End 
Flush 
Redirect 
Write Thêm  hoặc thay đổi giá trị trong he ader của trang 
HTML 
Tự động thêm v ăn bản vào tệp Log của Web Server 
Gửi dữ liệu tới Browse r mà không m ã hoá 
Xoá các b ộ đệm trong quá trình x ử lý trang 
Dừng xử lý trang và tr ả lại kết quả ngay lập tức cho 
Client 
Gửi kết quả được xử lý trong bộ đệm ngay lập tức 
Dẫn hướng tới một trang bất kỳ 
Chèn một xâu và o trang H TML 
 250
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

3.Đối tượng Server 
 
Thuộc tính Miêu tả 
ScriptTim eOut Th ời gian một Script có th ể chạy trước khi xảy ra lỗi 
Phương thức Miêu tả 
CreateObject 
HTMLEncode 
MapPat h 
URLEnc ode Khai bá o sử dụng một đói tượng 
Mã hoá tra ng HTML 
Chuyển đổi đường dẫn logic thành đường dẫn vật lý 
Mã hoá các tham s ố truyền trên U RL 
 
 
4.Đối tượng Session 
 
Collections  Miêu tả 
Contents 
StaticObjects Chứa các biến/ đối tượng phạm vi phiên 
Chứa các đối tượng được khai báo v ới thẻ <Object> 
trong thủ tục đáp ứng sự kiện mức phiên 
Thuộc tính Miêu tả 
CodePa ge 
LCID 
TimeOut Đặt chế độ mã hoá trang 
Đặt các thông s ố hệ thống theo địa điểm mỗi vùng 
Khoảng thời gian tồn tại của một biến phiên 
Phương thức Miêu tả 
Abandon Hu ỷ bỏ giá trị các biến phiê n 
Sự kiện Miêu tả 
OnStart 
OnEnd Xảy ra khi Server t ạo ra một phiên m ới 
Xảy ra khi m ột phiên kết thúc 
 
 
5.Đối tượng A pplication 
 
Collections  Miêu tả 
Contents 
StaticObjects Chứa các biến/ đối tượng phạm vi ứng dụng 
Chứa các đối tượng được khai báo v ới thẻ <Object> 
trong thủ tục đáp ứng sự kiện mức ứng dụng 
Phương thức Miêu tả 
Lock 
 
UnLock Cấm các Client khác thay đổi các thuộc tính mức ứng 
dụng 
Cho phé p các Client khác thay đổi các thuộc tính mức 
ứng dụng 
Sự kiện Miêu tả 
OnStart 
OnEnd Xảy ra khi kh ởi động ứng dụng 
Xảy ra khi ứng dụng kết thúc 
 
 251
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

6.Đối tượng FileSystemObject 
 
Phương thức Miêu tả 
CreateTextFile 
 
OpenTextFile 
 
 Tạo một tệp và trả lại một đối tượng Text Stream  để 
truy nhập tệp 
Mở một tệp và trả lại một đối tượng Text Stream  để 
truy nhập tệp 
 
 
7.Đối tượng TextStream 
Phương thức Miêu tả 
Close 
Read 
ReadAll 
ReadLine 
Skip 
SkipLine 
Write 
WriteLine 
WriteBlankLines Đóng một tệp 
Đọc các ký t ự trong một tệp 
Đưa tất cả các ký tự vào một xâu 
Đọc một dòng ký t ự và đưa vào một xâu 
Bỏ qua hoặc huỷ một ký tự khi đọc tệp 
Bỏ qua hoặc huỷ cả một dòng khi đọc tệp 
Viết một xâu tới một tệp 
Viết một xâu và ký t ự xuống dòng t ới một tệp 
Viết ký tự xuống dòng t ới một tệp 
Thuộc tính Miêu tả 
AtEndOfLi ne 
AtEndOfStream 
Column 
Line True nếu con trỏ tệp ở cuối dòng trong t ệp 
True nếu con trỏ tệp ở cuối tệp 
Trả lại số thứ tự cột của ký tự hiện tại trong một tệp 
Trả lại số thứ tự dòng của ký tự hiện tại trong một tệp 
 
 
 
 
 
 
 
 
 
 
 252
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chương 9: Qu ản trị máy chủ Web Server trên Windows 
 
9.1. Giới thiệu WEB Server 
Là phần mềm cài trên máy ch ủ cung cấp các thông ti n thông qua cá c trang 
web cho các các máy tr ạm bằng việc sử dụng giao th ức HTTP. C ấu trúc 
hoạt động của Web Server d ựa trên mô hình client/server và s ử dụng giao 
thức HTTP trong việc truyền dữ liệu. Các we b server thông t hường là một 
phần trong bộ các phần mềm ứng dụng để phục vụ cung cấp dịch vụ email, 
ftp … và xây d ựng, xuất bản các  trang we b trong m ạng Internet hay 
Intranet.  
Có khá nhi ều sản phẩm web server khác nha u, việc lựa chọn một web 
server phù h ợp sẽ dựa trên các tiêu chí đánh giá: Khả năng làm  việc với hệ điều 
hành và các  ứng dụng khác, kh ả năng thiết lập các chương trình ứng dụng phía  
server, kh ả năng bảo mật dữ liệu, khả năng xuất bản trang we b, các công c ụ hỗ 
trợ khi xây d ựng các trang web.  
 
9.2. Giới thiệu một số phần mềm Web  Server 
SunO ne W eb Server 
SunO ne cho phép phát tri ển rất nhiều lĩnh vực khác nhau trên các d ịch vụ ứng 
dụng và các d ịch vụ web , dựa trên nền J2EE với hiệu năng và sự thực thi rất 
cao. Đây là một phần mềm được phát triển theo các m odul dựa trên các chu ẩn 
về HTTP server, Java Message Servic e (JMS), Enterprise Edition (J2EE). 
 
Apac he We b Server 
Apac he We b Server được xem  như một sự nỗ lực rất lớn trong vi ệc phát 
triển và duy trì m ột Web Server m ã nguồn mở cho các h ệ điều hành, bao 
gồm Unix, Linux và Windows NT. Đây là một Web Server h ội tụ tất cả các 
 253
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

tính năng: bảo mật, hiệu suất, mở rộng và phát tri ển cung cấp các dịch vụ 
Web được đồng bộ trong các chu ẩn We b hiện hành. 
Các đặc điểm nổi bật của Apache: 
- Ngày nay Apac he có thể chạy kết hợp (hybrid) giữa chế độ đa sử lý 
và chế độ đa chỉ lệnh. 
- Hỗ trợ nhiều giao thức: Apache được phát triển để có thể phục vụ 
trên nhiều giao thức khác nhau. 
- Ngày càng h ỗ trợ tốt hơn cho các hệ điều hành khác nh ư BeOS, 
OS/2 và Wi ndows. 
- Ngày càng phát tri ển và hoà n thiện các API (Application Program 
Interface). 
- Hỗ trợ IPv6. 
- Hỗ trợ nhiều modul dùng để lọc (Filtering) các dòng d ữ liệu đến 
hoặc đi từ server. 
- Hỗ trợ nhiều ngôn ng ữ hiển thị các thông báo l ỗi. 
- Ngày càng đơn giản và dễ dàng thiết lập các tham s ố cho Web 
Server qua các file c ấu hình. 
 
Internet Information Services  (IIS) 
IIS là dịch vụ thông tin Internet do Microsoft phát tri ển, sản phẩm này 
được tích hợp cùng với hệ điều hành Wi ndow s. Phiên b ản mới nhất hiện nay là 
IIS 6. 0 được chạy trên hệ điều hành Wi ndows 2003.  Trong IIS  bao gồm nh iều 
dịch vụ dịch vụ như: dịch vụ Web Server, d ịch vụ FTP Server … Trong ph ần 
này ta chỉ đề cập đến dịch vụ Web Server. IIS Web Server (g ọi tắt là IIS) đáp 
ứng mọi yêu cầu chủ yếu của một Web Server nh ư: độ tin cậy, hiệu năng, khả 
năng the o dõi giám  sát (quản trị), tính bảo mật và tính kh ả thi trong vi ệc phát  
triển các dịch vụ ứng dụng. Tất cả các cải tiến này là kết quả là sự kết hợp chặt 
chẽ cùng với các tính n ăng mới được cung cấp trong hệ điều hành Windows.  
Độ tin cậy và hiệu năng: Với một số các tính n ăng mới ngày càng làm cho 
IIS trở nên tinh c ậy hơn và hiệu suất hơn. Cá c tính năng này gi úp khởi động 
lại IIS một cách nhanh chóng và d ễ dàng. N gười quản trị có thể khởi động 
các dịch vụ Web mà không c ần khởi động lại máy chủ. Để tăng cường độ 
tin cậy, tính năng Application P rotect cung c ấp các khả năng để chạy các 
ứng dụng chung (pool) ho ặc riêng bi ệt (separate) trong các d ịch vụ Web 
(Web services). Thêm vào đó các tính n ăng mới như: CPU Throttlinh và 
Socket Pooling cũng tăng cường rất nhiều về độ tin cậy. Đối với các người 
phát triển ứng dụng, hiệu suất của các web site được cải thiện qua các tính 
năng mới chẳng lạn như scriptless Microsoft Active Server Pages (ASP) 
processing,  ASP self-tuni ng, và pe rformance-enhanced ASP objects. 
Quản trị: IIS rất dễ dàng trong vi ệc cài đặt và duy trì. M ột số tính năng mới 
hỗ trợ thêm cho người quản trị trong việc duy trì bao g ồm đơn giản hoá quá  
trình cài đặt, nhiều các thao tác b ảo mật theo các thu ật có sẵn giúp ng ười 
 254
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

quản trị thực hiện một cách dễ dàng, có kh ả năng theo dõi th ời gian sử lý, 
cũng như rất linh hoạt trong việc quản trị từ xa, và cho phép kh ởi tạo các 
thông bá o lỗi theo ý tưởng của người quản trị. 
Bảo mật: IIS bổ sung thêm các chu ẩn hỗ trợ các giao th ức bảo mật trên các 
chuẩn công nghi ệp quan tr ọng bao g ồm:  Digest Authentication, Server 
Gated Cr yptogra phy, Kerberos v5 aut hentic ation pr otocol, Trans port Layer 
Security, and Fort ezza. Thêm vào đó có các thuật thao tác m ới có sẵn, giúp 
dễ dàng hơn cho người quản trị thiết lập và cấu hình bảo mật cho website. 
Môi trường ứng dụng: Các ng ười phát triển ứng dụng có thể dễ dàng phát 
triển các ứng dụng của mình dựa trên các công ngh ệ mới được phát triển và 
tích hợp cùng v ới hệ thống như dịch vụ Active Directory ho ặc COM+... 
Thêm  vào đó các cải tiến trong IIS AS P đã cải thiện rất nhiều trong việc 
điều khiển các luồng dữ liệu cũng như bắt lỗi giúp ng ười phát triển phát 
triển các ứng dụng của mình một cách rất hiệu quả và linh ho ạt. 
 
9.3. Quản trị máy chủ WebServer trên  Window s - Phần mềm IIS 
Web Serv er 
9.3.1. Các khái niệm cơ bản 
Mạng m áy tính là gì ? Ta có th ể hiểu một cách đơn giản: Mạng máy tính 
là một tập hợp các máy tính độc lập được kết nối với nhau thông qua các đường 
truyền vật lý và tuân theo các q uy ước truyền thông ( giao thức) nà o đó. Có rất 
nhiều mô hình kết nối khác nha u, mỗi mô hình đều tuân theo m ột chuẩn riêng. 
 
Mô hình O SI (Ope n System  Interconnection)  
Mô hì nh O SI được tổ chức quốc tế về tiêu chuẩn hoá ISO (International 
Orga nizaiton for Sta ndardization) đưa ra nhằm cung cấp một mô hình chu ẩn 
cho các nhà s ản xuất và cung c ấp sản phẩm viễn thông áp d ụng để phát triển 
các sản phẩm viễn thông. Ý  tưởng m ô hình hoá được tao ra còn nh ằm hỗ trợ 
cho việc kết nối giữa các hệ thống và modun hoá các thành ph ần phục vụ mạng 
viễn thông. Mô hì nh OSI được phân thành 7 l ớp (mức) (ch i tiết xin tham kh ảo 
ở các tài liệu khác) và có m ô hình như sau: 
 
Aplication ( Ứng dụng)  
Presentation (Trình di ễn)  (Upper Layer) 
Session (Phiên)  
 Transport Layer (Gia o vận) 
 Networ k Layer (M ạng) 
 Data Link (Liên k ết) 
 Physical (Vật lý)  
(Lower Layer) 
 
 255
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

TCP/IP  
TCP/IP viết tắt của cụm từ Transmission Control Protocol/Internet 
Protoc ol là một giao thức truyền thôn g cơ bản trong m ạng Internet. Xin 
tham khảo thêm ở các tài liệu khác. 
 
LAN – Loc al Area Networ k 
Local Area Network là m ột nhóm  các m áy tính và các thi ết bị được kết 
hợp để chia sẻ chung một đường truyền thông, và thông th ường để chia sẻ 
chung các ngu ồn tài nguyên c ủa một máy chủ trong một phạm vi hẹp. Thông 
thường một mạng LA N ba o gồm 2 hoặc nhiều các má tính cá nhân, các máy in, 
các thiết bị có khả năng lưu trữ (file servers)… Nó c ho phé p mỗi máy tính cá 
nhân trong m ạng truy cập và sử dụng các ngu ồn tài nguyên c hung này, c ũng 
như dùng chung các ch ương trình ph ần mềm khác...  M ạng LA N thông th ường 
được kết nối với nha u trong m ột khu vực địa lý nhỏ như một tầng của toà nhà, 
hoặc trong m ột toà nhà … M ột số mạng LAN  có thể kết  nối lại với nha u trong 
một khu làm  việc. Tuy nhiên nhi ều khi khái ni ệm phạm vi hẹp ở đây cũng chỉ 
có ý nghĩa tương đối. 
 
WAN – Wi de Area Ne twork 
Wide Area Networ k là một mạng m áy tính được mở rộng trên các kho ảng 
cách vị trí địa lý rất xa. Thông th ường người ta kết nối các mạng LAN v ới nhau 
để tạo thành W AN. 
 
Mạng Internet 
Internet là m ạng của các mạng, trong đó các m áy tính được kết nối với 
nhau và tra o đổi dữ liệu thông qua  giao thức truyền thông TCP/IP. Hay nói m ột 
cách khác Internet là m ột tập hợp số lượng khổng lồ các mạng m áy tính m à mỗi 
mạng nà y kết nối tới hàng trăm triệu máy tính, con ng ười, cũng như các 
chương trình ph ần mềm, các cơ sở dữ liệu, và các file. 
 
Dịch vụ WWW 
WWW là m ột mạng toàn cầu của tất cả các mạng và có th ể hiểu WWW là 
một tên gọi khác của Internet.  Có th ể nói nôm na, thông qua WWW ng ười ta 
có thể tích hợp tất cả các dịch vụ khác cuả Internet lên nó. B ạn có thể lấy tài 
liệu trên mạng, xem  ảnh, vi deo, nghe nh ạc, nói chuy ện và chạy các chương 
trình ứng dụng trên m ạng thông qua d ịch vụ WWW. Để có thể sử dụng được 
 256
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

dịch vụ WWW, b ạn phải có phần mềm trên  máy  trạm thường được gọi là trình 
duyệt (Browser) và các máy cung c ấp dữ liệu sử dụng phần mềm Web server. 
Hiện nay, có mấy loại trình duy ệt cơ bản sau: Netscape, Internet Explorer ho ặc 
Opera. Đối với phần mềm Web server thì đa dạng hơn, việc đa dạng này dựa 
trên hệ điều hành m áy chủ sử dụng và các ứng dụng cung c ấp trên m áy chủ đó 
tuy nhiê n một số sản phẩm sa u đây được sử dụng nhiều hơn cả: Internet 
Information Service (IIS) c ủa Microsoft, Iplanet Web server c ủa SUN được 
phát triển trên nền của Netscape và Apache Web server.  
Khi truy nh ập Internet, b ạn sử dụng các trình duy ệt để xem các tài li ệu trên đó. 
Các tài li ệu này gọi là các trang web, hi ện nay việc tạo các trang web trên 
Internet s ử dụng một ngôn ng ữ HTML. Trong các trang web còn có các thành 
phần siêu liên k ết (Hypertext), cá thành ph ần này cho ng ười sử dụng có thể đọc 
các phần dữ liệu khác  trong trang web ho ặc ở trang web khác thông qua m ột 
thao tác click chu ột.  
Nguyên tắc hoạt động của siêu liên k ết có thể hình dung m ột cách đơn giản như 
sau: Mỗi mộtrang web v ăn bản, một file dữ liệu hoặc file âm thanh ho ặc bất cứ 
cài gì bạn tìm thấy trên mạng đều có địa chỉ nguồn (URL – U niform  Resource 
Loacator). D ựa vào URL có th ể xác định được nơi cung cấp dữ liệu bạn cần sử 
dụng (địa chỉ của máy cung c ấp dịch vụ WWW trên Inter net hay một phần 
trong trang web).  
IP Address 
Là thông tin nh ằm xác định đich chỉ của một máy tình khi tham gia k ết 
nối mạng Internet. Thông th ường chuẩn IP address hi ện nay là IPV 4 có nghĩa 
sử dụng 4 bytes bi ểu diễn 1 chuỗi số thành IP  Address, trong t ương lai chu ẩn 
này sẽ là IPV6. 
 
TCP Port Nu mber 
Như chúng ta đã biết các m áy tính sử dụng giao th ức truyền thông là 
TCP/IP và có r ất nhiều dịch vụ khác nhau tr ong mạng Internet. Để phân biệt 
giữa các dịch vụ khác nha u trên một máy chủ cung cấp dịch vụ TCP đưa ra 
khái niệm cổng (port) có ngh ĩa mỗi dịch vụ sẽ sử dụng  1 số cổng nhất định ví 
dụ ngầm định m ail sử dụng 110, 25 hay Telnet s ử dụng port 23 còn WWW hay 
HTTP sử dụng port 80. Giá tr ị của các port t ừ 0 – 65535,  người quản trị có thể 
thay đổi lại giá trị port ứng với từng dịch vụ khác với giái trị ngầm định. 
 
 257
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

HTTP – H ypertext Tr ansfer Prot ocol 
HTTP là m ộ giao thức mức ứng dụng được Web Client và Web Server dùng 
để trao đổi thông tin v ới nhau. HTTP là giao th ức yêu cầu/đáp ứng, và có thể 
hiểu một cách nô m na  là một tập hợp các nguyên t ắc trao đổi file dữ liệu 
(Text, Graphic images, sound, video và  các file multimedia khác) trên WWW. 
 
9.3.2. Cài đặt Internet Information Services IIS 
9.3.2.1. C huẩn bị cài đặt 
Chuẩn bị về máy móc thi ết bị phần cứng 
- Yêu cầu 01 m áy chủ với cấu hình tối thiểu như sau: 
+ CPU Pentium /133M Hz. 
+ 64M B RAM (khuyến nghị 128MB ho ặc lớn hơn). 
+ 950M B đến 1 G B ổ đĩa cứng. 
- Yêu cầu tối thiểu 01m áy trạm (client) v ới cấu hình nh ư sau: 
+ CPU Pentium ho ặc Celeron 366 MHz. 
+ 32M B RAM (khuyến nghị 64 MB ho ặc lớn hơn). 
+ 640 MB đến 1 G B ổ đĩa cứng. 
- Hệ thống mạng kết nối giữa máy chủ và các máy tr ạm (theo số lượng 
máy trạm) 
Chuẩn bị về phần mềm 
- 01 hệ điều hành Wi ndows A dvanced Server:  Dùng để cài đặt máy 
chủ và Web Server. 
- 01 hệ điều hành Wi ndows (Wi ndows 9x, Wi ndows XP ho ặc 
Windows 2000 Professional). 
- Trình duy ệt Web.  
 
9.3.2.2. C ài đặt Internet Information Services  
IIS thường được cài đặt mặc định cùng với hệ điều hành Windows (NT 
Server ho ặc Windows  2000 Server), tuy nhiên ng ười quản trị có thể thể lựa 
chọn để bổ sung hoặc loại bỏ các modul không c ần thiết. Tuy nhiên ng ười quản 
trị cần phải hoạch định các các yêu c ầu cũng như khả năng phát tri ển và mở 
rộng của web server tr ước khi thao tác. 
Lưu ý: Trong ph ần này ta thực hiện việc cài đặt và quản trị IIS 5.0 trên h ệ 
điều hành Windows 2000  Advanced Server. 
 
Việc cài IIS có th ể thao tác theo các thao tác sau: 
+ Start/Settings/Control Panel. 
+ Nhấn đúp chuột trái vào m ục Add/Rem ove Program s.  
+ Nhấn vào biểu tượng A dd/Rem ove Wind ows Components. M ột cửa 
sổ hiện ra cho phép b ạn lựa chọn cài đặt thêm ho ặc loại bỏ các 
modul c ùng với hệ điều hành. 
+ Chọn mục Internet Information Serv ices IIS (Xem hình 8.1) 
 258
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Chú ý: IIS bao g ồm các m odul thà nh phần: 
+ Co mmo n Files: Đây là các file yêu c ầu cho IIS, và các file này được 
dùng cho nhi ều modul thành ph ần khác nh ưng thông thường không 
cài đặt là một modul độc lập. 
+ Documentation: Là các tài li ệu và ví dụ để người quản trị tham khảo. 
+ File Tra nsfer Protoc ol (F TP) Server: Modul thà nh phần này thiết lập 
một FTP Site (FTP Server), dùng để upload và download các file. 
+ FrontPage 2000 Server Extensi on: c ho phép qu ản trị các web s ite 
thông qua Microsoft FrontP age và Visual InterDev. 
+ Internet Informati on Ser vices Sna p-In: Một gia o diện quản trị IIS, 
được dùng trong MM C (Microsoft Ma nage ment Console). Qua giao 
diện này người quản trị có thể dễ dàng t hiết lập, tha y đổi và cấu hình 
các tham s ố cho we b site. 
+ Internet Services Manager (HTML): M ột giao diện quản trị IIS qua 
giao diện Web. 
+ NNTP Se rvice. 
+ SMTP Se rvice. 
+ Visual InterDev RAD Remote Deloym ent Support: Cho phé p triển 
khai từ xa các ứng dụng trên Web Server. 
+ World W ide Web Server:  h ỗ trợ việc truy cập các web site. 
 
 
 
Hình 9. 1: Lựa chọn để cài đặt IIS 
 
Cài đặt mặc định (Typical Install) 
IIS mặc định cài đặt các modul: Common Fil es, Documentation, Int ernet 
Information Services Snap-In , World Wide Web Server. Để cài đặt mặc định 
 259
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

trong cửa sổ cài đặt (Windows Components Wizard) l ựa chọn Internet 
Information Services (IIS), r ồi nhấn vào nút Next để tiếp tục. Toàn bộ modul 
đã ngầm định sẽ được cài đặt. 
Cài đặt tuỳ chỉnh (Custom Install) 
Để cài đặt tuỳ chỉnh tr ong cửa sổ cài đặt nhấn vào nút Detail. Các modul 
sẽ được liệt kê c ho phé p bạn lựa chọn chi tiết các modul để cài đặt. Sau khi l ựa 
chọn xong, nh ấn vào nút Ne xt để tiếp tục, toàn bộ các m odule m à bạn lựa chọn 
sẽ được cài đặt. Vì trong giáo trình này ta đề cập tới Web Ser ver nên bạn phải 
chọn modul World Wi de Web Server. 
 
 
Hình 9. 2: Chi tiết các m odul trong IIS 
 
 
Lưu ý: Một số điều trước khi cài đặt: 
- Nên câ n nhắc các modul để cài đặt, không nên cài đặt các modul 
không cần thiết.  
- Nên cài IIS trên m ột máy chủ riêng (Standalone Server). 
- Nên cài đặt IIS trên m ột máy chủ mà máy  chủ không ph ải hỗ trợ bất 
kỳ dịch vụ nào khác. 
- Nên loại bỏ các giao th ức không c ần thiết. 
 
 
Trong quá  trình cài đặt Windows s ẽ tự động cài đặt và cấu hình các  
module. 
 260
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9. 3: Cài đặt IIS 
 
9.3.3. Quản trị Intern et Information Services (IIS) 
9.3.3.1. Cấu hình Internet Inform ation Services  
 
9.3.3.1.1 Thi ết lập một Web Site mới 
Để thiết lập một web site m ới yêu cầu đầu tiên mà cũng là tối thiểu một 
người quản trị cần biết thông tin v ề về web site bao g ồm:  
- Miêu tả web site: đây là thông tin giúp ng ười quản trị nhận biết và phâ n 
loại các web site trên máy ch ủ mình quản trị. 
- Tiêu đề của web site (host heade r): Thông t hường có thể có nhiều tiêu 
đề hoặc nhiều tên m iền cùng ánh x ạ vào một web site. 
- Địa chỉ IP: Là địa chỉ IP của card mạng dùng để phục vụ web site. 
- Cổng truy c ập (Port Number): Giá tr ị mặc định là 80, v ới một số web 
site vì các m ục đích bảo mật người quản trị có thể thay đổi giá trị này. 
- Thư mục gốc: Mỗi Web site có m ột thư mục gọi là thư mục gốc (hom e 
directory), th ư mục này là duy nh ất. Trong th ư mục gốc này bao gồm 
toàn bộ các file và các th ư mục hoặc thư mục ảo liên quan đến we b site 
này.  
Bạn có t hể tạo một Web site m ới theo nhi ều cách, qua các câu l ệnh 
(com mand) hoặc qua giải thuật (wizard) v ới giao diện đồ hoạ mà chỉ cần vài 
lần nhấn chuột.  
+ Start/Programs/Administrative To ols/Internet Service Manager 
+ Bấm ch uột phải tên máy ch ủ Web Server. Ch ọn New/ Web Site 
 261
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

+ Tại cửa sổ Web Site Creation W izard, nhấn vào nút Next để tiếp tục. 
 
Hình 9. 4: Lựa chọn Web Site Creation Wizard để tạo web site m ới 
 
 
 
Hình 9. 5: Web Site C reation Wizard 
 
+ Điền tên m iêu tả của web site c ần khởi tạo: Ví du: m ycompany.com .vn 
 
 262
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9. 6: Dùng Web Site Creation Wizard để tạo we b site mới 
+ Ấn nút N ext để tiếp tục. Tiếp theo xin điền địa chỉ IP, số hiệu cổng, cũng như 
tiêu đề của web site (host header). 
 
 
Hình 9. 7:  Dùng Web Site Creation Wizard để tạo we b site mới 
+ Tiếp theo chọn thư mục gốc của web site 
 263
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9. 8: Dùng Web Site Creation Wizard để tạo we b site mới 
+ Lựa chọn các quy ền đối với thư mục chủ (hom e directory) 
 
 
Hình 9. 9: Dùng Web Site Creation Wizard để tạo we b site mới 
+ Nhấn Ne xt để hoàn thành việc khởi tạo web site m ới. 
 264
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9. 10: Web Site C reation Wi zard thông báo hoàn thành vi ệc khởi tạo 
 
9.3.3.1.2. Tạo thư mục ảo 
Về bản chất việc tạo thư mục ảo là là ánh x ạ một thư mục vật lý trong 
máy thành m ột thư mục con tương đối của thư mục hiện tại. Với cách ánh x ạ 
này giúp ng ười quản trị có thể linh hoạt hơn trong vi ệc tổ chức các thư mục 
trên máy ch ủ. Người quản trị có thể thiết lập các thư mục ảo là t hư mục con của 
bất kỳ thư mục nào: t hư mục chủ (home document), th ư mục con hoặc thư mục 
ảo bất kỳ. 
Để tạo một thư mục ảo, trong c ửa sổ IIS Snap-In, nh ấn chuột phải vào t hư mục 
cần thêm  thư mục ảo, chon Ne w/Virtual Directory. T ại menu cửa sổ Virtual 
Directory Creation W izard nhấn nút Next để tiếp tục. 
 
 
 
Hình 9. 11:  Dùng Virtual Directory Creation Wizard để tạo thư mục ảo 
 265
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9.12: Dùng Virtual Directory Creation Wizard để tạo thư mục ảo 
 
+ Điền tên bí danh (Al ias nam e): Tên này được Web Server “hi ểu” như tên của 
thư mục con của thư mục hiện tại. 
 
Hình 9.13: Dùng Virtual Directory Creation Wizard để tạo thư mục ảo 
 
+ Chọn thư mục trên ổ đĩa muốn ánh xạ theo tên ảo này 
 
 266
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9.15: Dùng Virtual Directory Creation Wizard để tạo thư mục ảo 
 
+ Đặt quyền truy cập cho t hư mục ảo này 
 
 
 
Hình 9.16: Dùng Virtual Directory Creation Wizard để tạo thư mục ảo 
 
+ Nhấn vào nút ne xt để hoàn thà nh việc khởi tạo một thư mục ảo 
 
 267
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9. 17: Virtual Directory Crea tion Wizar d thông báo hoà n thà nh việc khởi 
tạo 
 
9.3.3.1.3. Thiết lập các tham s ố cho we b site 
1. Đối với một Web site, IIS có chép ng ười quản trị lựa chọn rất 
nhiều các thông tham s ố khác nhau nh ư: cơ chế lưu nhật ký, lựa chọn các tham 
số về performance, ánh x ạ ứng dụng, lựa chọn các tham s ố bảo mật, tuỳ chỉnh 
các thông báo l ỗi … Để thiết lập các tham s ố này, trong c ửa sổ IIS Snap-In 
chọn tên m iêu tả của web site, nhấn chuột  phải và chọn mục properties. 
2.  
3. 
  
4. Hình 9. 18: Lựa chọn và cấu hình các tham  số cho we b site 
Một cửa sổ hiện lên với rất nhiều các menu con cho phép b ạn lựa chọn cấu hình 
các tham s ố cho we b site. 
 268
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9. 19: Menu l ựa chọn và cấu hình các tham s ố cho web site 
 
9.3.3.1.3.1. Cấu hình web site: xác m inh web site, k ết nối, cơ chế lưu nhật ký 
Xác minh web site (Identification web site) 
Với mỗi yêu cầu từ phía client, web server xác định tiêu đề và số hiệu 
cổng, để thực hiện yêu cầu, sau đó trả lại kết quả của yêu cầu đó cho client. V ới 
mỗi web site bao g ồm tên  miêu  tả, số hiệu cổng, và các tiêu đề (host header). 
Người quản trị có thể ánh xạ nhiều tên m iền vào c ùng một tiêu đề.  
Connections 
Cho phép ng ười quản trị hạn chế số lượng truy cập đồng thời tới web site 
và thiết lập thời gian t imeout của kết nối. Theo khuy ến nghị nên hạn chế thời 
gian kết nối này để ngăn ngừa các kiểu tấn công từ chối dịch vụ (DoS). X em 
hình 8. 19 
Thiết lập cơ chế lưu nhật ký 
Việc lựa chọn và cấu hình file l ưu nhật ký có ý ngh ĩa rất qua n trọng đối 
với người quản trị. Thông qua các file nh ật ký này giúp ng ười quản trị phân 
tích, đánh giá, c ũng như có các thông tin v ề web site này (nh ư số lượng truy 
cập, …). Có th ể lưu nhật ký t heo 3 cách khác  nhau:  
+ Theo định dạng NC SA C ommon Log File 
+ Theo định dạng W3C Extension Log File 
+ Theo ODBC Loggi ng 
Khi đánh dấu vào hộp chọn Ena ble Loggi ng thì nhật ký t hực hiện của một 
web site được lưu. Khi đó mỗi yêu cầu (request) t ừ phía client sau khi được 
Web server th ực hiê n (response) đều được lưu lại bao gồm các thông tin c ơ bản 
về yêu cầu đó. Chẳng hạn đối với định dạng NC SA C ommon Log File bao 
 269
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

gồm: Địa chỉ IP của client, Tên c ủa client, Ngày truy c ập, Thời gian truy c ập, 
Loại yêu cầu, Mã trạng thái HTTP, và S ố lượng byte được Web server g ửi về. 
Chú ý: Khi s ố lượng truy cập web site r ất lớn, người quản trị cần cân nhắc việc 
lưu trữ file nhật ký, cũng như định dạng của nhật ký, thời gian lưu file nhật ký 
… trên cơ sở xem  xét các thông s ố của máy chủ như dung lượng ổ đia, hiệu 
suất máy chủ … 
 
Người quản trị cũng có thể lựa chọn các tham s ố khác cho vi ệc lưu nhật ký, 
như thời gian lưu nhật ký (theo gi ờ, theo ngày, theo tháng, …) C ũng như việc 
lựa chọn đường dẫn để lưu trữ các file nh ật ký. 
 
 
Hình 9. 20: Lựa chọn các tham s ố cho file l ưu nhật ký 
9.3.3.1.3.2. Lựa chọn các quy ền đối với thư mục 
Người quản trị có thể thiết lập các quy ền cho các t hư mục trong web site , 
bao gồm qu yền đọc (read), quy ền ghi (write), li ệt kê  (browsing) … Tuy nhi ên 
các quyền này cần phải thích hợp với các quyền NTFS. Bên cạnh đó trong mục 
này c òn cho phép ng ười quản trị thiết lập các tham s ố ứng dụng bao gồm tên 
ứng dụng, quyền khả thi, và cơ chế bảo vệ ứng dụng. 
Script source access – Cho phép ng ười duyệt web có th ể truy cập tới các file tài 
nguyên, n ếu người truy cập có quyền đọc thì họ có thể đọc các tài nguyên này, 
nếu có quyền ghi thì h ọ có thể ghi đè lên các ngu ồn tài nguyê n này. 
Read perm ission – cho phé p đọc nội dung và g ửi nội dung này tr ả lại trình 
duyệt. 
 270
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Write permission – cho phép upl oad các file lên web server ho ặc thay đổi nội 
dung của các file này. 
Directory browsing– Cho phép ng ười duyệt web liệt kê các file, c ũng như các 
thư mục trong hệ thống.  
Log visits – Đản bảo tất cả các truy xuất của người duyệt web qua các th ư mục 
đều được lưu lại trong file nh ật ký. 
 
 
Hình 9. 21: Thiết lập các quy ền đối với thư mục web 
Bên cạnh đó người quản trị có thể thiết lập các quy ền thực thi (Execute 
Permission): 
Scripts only - ch ỉ giới hạn đối với các script, điều này có ý nghĩa rất qua n 
trọng nếu dùng các ch ương trình vi ết bằng ASP ho ặc CGI. 
Scripts and Executables – Ngoà i các script, nó còn cho phép th ực thi đối 
với các chương trình d ạng EX E, DLL. 
Bảo vệ ứng dụng (Application protection) – C ho phép ng ười quản trị cô lập 
một ứng dụng trên nền web với các ứng dụng khác ho ặc với các ứng dụng riêng 
biệt khác của phần mềm web server. 
 
Chú ý: Bạn nên cân nhắc các quy ền thiết lập với các yêu c ầu về bảo mật của 
web site. Theo khuy ến cáo không nê n lựa chọn thuộc tính cho phé p liệt kê 
(Browsing), cho phép ghi (write), c ũng như việc lựa chọn quyền thực thi là 
Scripts and Exec utable s. 
 
Cấu hình ứng dụng (A pplication Configuration) 
 271
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

IIS được cấu hình để hỗ trợ rất nhiều các dạng file khá c nhau, điều đó cho 
phép các trang web được phục vụ bởi việc dùng m ột số lượng rất lớn ứng dụng 
khác nha u, điều này cà ng làm  tăng thêm tính linh động của IIS.Thông qua giao 
diện này người quản trị có thể dễ dàng cấu hình chi ti ết các ứng dụng. 
Enable session state and Session ti meout 
Cho phé p AS P khởi tạo một phi ên làm  việc cho mỗi người duyệt web tron g 
một ứng dụng AS P. 
Enable par ent paths 
Cho phé p AS P Script  dùng đường dẫn tương đối tới thư mục cha của thư mục 
hiện tại (“..”). 
 
Hình 9. 22: Danh sách các ứng dụng được ánh xạ cùng với phần mở rộng 
 
 
Hình 9. 23: Thêm  một ánh xạ ứng dụng cùng v ới phần mở rộng của tên file 
 272
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

9.3.3.1.3.3. Performance Turning 
Hạn chế số lượng kết nối cùng một lúc tới web site là m ột phương 
thức tiếp cận khác để  tiết kiệm tài nguyên h ệ thống cho các d ịch vụ 
khác cùng s ử dụng chung m ột kết nối hoặc các ứng dụng khác cùng s ử 
dụng chung m ột máy chủ. Khi thực hiện việc hạn chế kết nối tới từng 
Web site riêng l ẻ cần chu ý rằng hầu hết các browser thông th ường tạo 
ra tới 4 liên kết một lúc để dow nload text và hình ảnh từ trang Web. T ất 
cả các kết nối lớn hơn giới hạn kết nối đều bị loại bỏ. 
Bằng cách h ạn chế thông lượng kết nối được sử dụng bởi IIS, bạn 
có thể sử dụng phần thông lượng còn lại cho các ứng dụng khác ví d ụ 
như  e-m ail hay ne ws servers. N ếu bạn cài đặt nhiều Web site trên cùng 
một IIS bạn có thể tăng hoặc giảm thông lượng cho từng site m ột cách 
độc lập. Việc hạn chế thông lượng cho từng site  đảm bảo thông lượng 
được chia một cách hợp lí cho m ọi Web site đang cùng chia s ẻ một card  
mạng. 
Hạn chế thời gian sử dụng CPU là m ột phương thức dùng để tiết 
kiệm tài nguyê n hệ thống, đồng thời cũng đảm bảo một việc không b ị 
CPU “quá t ải” làm ảnh hưởng tới các dịch vụ khác trên m áy chủ, cũng 
như ảnh hưởng tới khả năng phục vụ đối với các web site khác. 
 
Hình 8. 24: Thiết lập các tham s ố cho Performace c ủa web site 
9.3.3.1.3.4. Bảo mật thư mục (Directory Sercurity) 
Các thuộc tính về bảo mật có thể thiết lập cho we b site, thư mục, thư mục 
ảo hoặc cho các file. Đối với mỗi web site ph ương thức xác thực được dùng có 
ý nghĩa rất qua n trọng trong vi ệc nhận biết người dùng và điều kiển các truy 
xuất tới các file, th ư mục và các script c ũng như các file kh ả chạy khác.  
 273
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 8. 25: Lựa chọn các phương thức xác thực 
Trong menu này ng ười quản trị có thể lựa chọn người dùng nặc dan h 
(Anonym ous user) cho we b site này. Theo c ơ chế này,  hiện tại IIS cung c ấp 3 
phương thức khác nhau để xác thực đó là: phương thức Basic authentication, 
phương thức Di gest authe ntication, và ph ương thức integrated windows  
authentication. 
 
Hình 9. 26: Chọn người dùng nặc danh cho w eb site 
Bên cạnh đó người quản trị có thể thiết lập các hạn chế các kết nối tới web 
site theo địa chỉ IP đối với những người duyệt web. Thông th ường mục đích 
của việc này nhằm tăng cường tính bảo mật cho các file, th ư mục hoặc web site 
được dùng cho m ục đích riêng m à không m uốn xuất bản rộng rãi trên m ạng. 
 274
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

9.3.3.2 Stop/St art/Restart IIS  
Có rất nhiều cách khác nhau để thực hiện các câu l ệnh St art, Stop ho ặc Restart 
IIS (IIS - Web Serve r). Thông qua dòng l ệnh hoặc thông qua MM C. Để thực 
hiện theo dòng l ệnh bạn vào cửa sổ Windows  Command (Start/Run/cmd). 
Trong chế độ dòng lệnh nà y bạn có thể thực hiện nhiều thao tác khá c nhau như, 
stop hoặc start IIS (Web Server) … v ới các file th ực thi Net.exe ho ặc 
IISReset.exe  B ạn có thể dùng câu l ệnh N ET /? hoặc IISreset/? để xem chi ti ết 
các câu lệnh nà y. 
Tuy nhiên để dễ dàng sử dụng người quản trị có thể dùng giao di ện MMC để 
thực hiện các thao tác này, v ới giao diện này rất đơn giản và thuận tiện. 
(Start/Program/Administr ator Tool s/Services). Hình 9. 27: Hạn chế truy cập với web site theo địa chỉ IP 
 275
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9. 28: Stop/Start  IIS (Web Server) 
 
9.3.3.3  C ài đặt các công c ụ hỗ trợ bảo mật 
 
9.3.3.3.1. Cài Lo ckdown tool, cài đặt URLScan 
IIS Lockdown Wizar d cho phép lo ại bỏ các tính n ăng, các dịch vụ không 
cần thiết trên máy ch ủ, để giảm thiểu các cuộc tấn công với nhiều mức bảo vệ 
khác nha u. Với URLScan gi úp ngăn chặn các truy vấn (HTTP Request) tác h ại 
tới hệ thống. Có th ể xem chi ti ết tại web  s ite: 
http://www.microsoft.com/technet/security 
+ Download Internet Information Services (IIS) Lockdown Tool t ại địa 
chỉ 
http://download.microsoft.com/do wnload/iis50/Utility /2.1/NT45XP/E
N-US/iislockd.exe 
+ Chạy file iislockd.exe, t ại cửa sổ IIS Lockdown Wizard nh ấn nút  Next  
để tiếp tục IIS Lockdown Wizard (hình 9.29). 
+  Đọc kỹ các quy định về bản quyền, rồi chọn nút “I agree” để tiếp tục, 
sau đó ấn nút Next để thực hiện tiếp (hình 9.30). 
+ Chọn khuôn m ẫu để tiếp tục. Ở đây ta chọn mục Other (Server that 
does not m atch any of  listed roles), r ồi ấn nút Next để tiếp tục (hình 
9.31). 
+ Tiếp theo chọn các Services được cài cùng v ới IIS (hình 9.32). 
+ Chọn các script map để loại bỏ (hình 9.33). 
 276
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

+ Lựa chọn các mức bảo mật khác như ngăn chặn quyền thực thi với các 
file hệ thống như: cmd.exe … (hình 9.34). 
+ Lựa chọn việc cài đặt URLScan. Có th ể cài đặt UR LSca n nga y trong 
quá trì nh thực thi này, hoặc có thể cài URLScan m ột cách độc lập. 
Chọn nút “Install URLScan filter on the server” n ếu muốn cài đặt 
URLSca n (hình 9. 35). 
+ Tiếp theo IIS Lockdown Wizard sẽ liệt kê các thao thác th ực hiện, ấn 
nút Next để tiếp tục (hình 9.36) 
+ IIS Lockdown Wizard th ực thi các l ựa chọn của người quản trị đã 
chọn (hình 9.37). 
+ IIS Lockdown Wizard hoàn t ất việc thực hiện (hình 9.38). 
Chú ý: Nếu chỉ cài đặt URLScan: 
+ Giải nén file iislockd.exe vào th ư mục c:\Lockdown_files theo l ệnh 
iislockd.exe /q /c /t:c:\Lockdown_files. 
+ Chạy file urlscan.exe, khi đó UrlScan sẽ được cài đặt và tự động cấu 
hình trong I IS. 
Hình 9. 29 Hình 9. 30 
 
 277
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

Hình 9. 31 Hình 9. 32 
Hình 9. 34 Hình 9. 33 
 
Hình 9. 35 Hình 9. 36 
Hình 9. 37 
 
Hình 9. 38 
 
 278
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

2799.3.3.3.2. C ấu hình URLScan 
Theo mặc đinh URLScan được cài đặt trong thư mục 
\WINNT\system32\inetsrv\urlscan. Vi ệc cài cấu hình thực hiện thông qua file 
cấu hình urlscan.ini. Trong file này có r ất nhiều tham số khác nhau, cho cho 
phép cấu hình các truy v ấn tới Web server, b ạn có thể thêm, loại bỏ hoặc thay 
đổi các tham s ố này. Sau đây là các tham s ố trong file c ấu hình urlscan.ini 
 
[options] L ựa chọn các tham s ố cấu hình 
UseAllowVerbs=1 Tham s ố này bằng 1 thì tham chi ếu tới các tham 
số trong đoạn [AllowVerbs] n ếu không s ẽ là 
[DenyVerbs]  
UseAllowExtensions=0 Tham s ố này bằng 1 thi tham chi ếu tới các tham 
số trong đoạn [AllowExtensions]  n ếu không s ẽ 
là [DenyExtensions]  
NormalizeUrlBeforeScan=1 Chu ẩn hoá trước khi scan 
VerifyNormalization=1          
AllowHighBitCharacters=0  
AllowDotInPath=0 Cho phép dùng d ấu . trong th ư mục 
RemoveServerHeader=0  
EnableLogging=1 N ếu tham số này bằng 1 URLScan s ẽ lưu nhật ký
PerProcessLogging=0  
AllowLateScanning=0  
PerDayLogging=1  
RejectResponseUrl=  
UseFastPathReject=0              
AlternateServerName=  
[AllowVerbs] 
GET HEAD POST Đây là các d ạng yêu cầu mà URLScan ch ấp nhận 
(Nếu UseAllowVerbs=1) 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

280[DenyVerbs] 
PROPFIND PROPPATCH MKCOL 
DELETE 
PUT COPY Đây là các d ạng yêu cầu mà URLScan ch ấp nhận 
(Nếu UseAllowVerbs=0) 
[DenyHeaders] Translate: 
If: 
Lock-Token:  
[AllowExtensions] .htm 
.html 
.txt .jpg .jpeg .gif  Đây là các ph ần mở rộng được URLScan ch ấp 
nhận (nếu UseAllowExtensions=1) 
[DenyExtensions] .exe .bat .cmd .com  Đây là các ph ần mở rộng được URLScan ch ấp 
nhận (nếu UseAllowExtensions=0) 
[DenyUrlSequences]  Các ký tự sẽ bị từ chối nếu URL ch ứa chúng, 
chẳng hạn như dấu &, dấu % … 
 
Tóm tắt chương  
Trong chương này ta đã tìm hiểu về IIS –Web Server, đây là một sản phẩm 
được tích hợp cùng với hệ điều hành Microsoft Windows, v ới rất nhiều tính 
năng: nhanh, ổn định, tin cậy, bảo mật tốt, rất dễ dàng cho vi ệc quản trị và 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

281khai thác. IIS – Web Server có m ột cơ chế tuỳ chọn và cấu hình rất đa dạng, 
yêu cầu người quản trị phải cân nhắc trong vi ệc lựa chọn và cấu hình để 
nâng cao độ ổn định, hiệu quả cũng như tính bảo mật cho web site. 
 
Bài tập chương: Tạo một web site m ới với các yêu c ầu: 
a. Chỉ cho phép truy nhâp t ừ một địa chỉ IP duy nh ất. 
b. Chỉ cho phép truy c ập tới các web site v ới các file có ph ần mở rộng là 
.asp, .gif, .html 
 
 
 
 
      
 
      
 
     
 
  
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

282Chương 10 Gi ới thiệu về WebPortal và ph ương pháp thi ết kế 
web  
 
10.1 Webportal là gì? 
Chúng ta th ường sử dụng khá nhi ều các trang web v ề nhiều vấn đề lớn để tra 
cứu, tìm ki ếm thông tin điển hình nh ư http://www.google.com trong m ỗi 
website nh ư vậy chứa đựng một lượng thông tin kh ổng lồ nhưng không ph ải 
hoàn toàn các thông tin đó nều nằm trên server c ủa họ mà thực tế các thông tin 
này nằm ở rất nhiều website khác nhau nh ưng họ đã có một cơ chế liên kết tất 
cả các thông tin này. Nh ững website nh ư vậy coi là m ột cổng thông tin v ề một 
hay nhiều lĩnh vực nào đó hay nói cách khác đó là những Webportal. 
Webportal là m ột website trong đó đề cập đến một hay nhiều lĩnh vực mà các 
thông tin c ủa nó phần lớn được liên kết với các website khác theo m ột cơ chế 
nào đó. 
 
Hình 10.1 Ví d ụ Webportal 
10.2 Các l ưu ý khi xây d ựng Webportal  
Mỗi webportal hay website được sinh ra để thực hiện một mục đích nào đó, để 
phục vụ, phát triển một hay nhiều lĩnh vực nào đó. Để xây dựng được một 
webportal có t ầm cỡ không ph ải đơn giản mà phải thực hiện bởi một hay nhiều 
nhóm làm vi ệc có tổ chức chặt chẽ chính vì v ậy mỗi người trong các nhóm c ần 
phải nắm bắt được mọi thông tin c ơ bản về phần công việc mà ta đang thực 
hiện. 
Trước khi bắt tay vào vi ệc thực hiện mọi thành viên ph ải nắm được các vấn đề 
trọng yếu sau: 
- Mục đích, định hướng, đối tượng phục vụ của webportal 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

283- Chiến lược thiết kế, triển khai xây d ựng và phát tri ển: Có thể chia theo 
nhiều giai đoạn khác nhau. 
- Xác định phạm vi của công việc của các nhóm, thành viên và các quy 
ước thực hiện: 
+ Phát triển các nhóm làm vi ệc 
+ Các kế hoạch về mặt nghiệp vụ 
+ Các văn bản pháp quy liên quan 
+ Chiến lược phát triển các mối quan hệ với các thành viên  
+ Phân chia trách nhi ệm đối với các thành viên theo t ừng người điều 
phối: 
 . Qu ản lý dự án  
 . Điều phối dự án 
 . Điều phối về nội dung 
 . Điều phối về công ngh ệ 
 . Điều phối về phát triển nghiệp vụ 
 . T ư vấn dự án 
 .... 
- Quản lý và phân ph ối tài chính 
 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

284 
10.3  Phương pháp thi ết kế web 
 
 
Hình 10.2 V ị trí của bộ phận thiết kế 
 
Việc thiết kế website đối với các hệ thống càng ph ức tạp thì tác d ụng của nó 
càng lớn. còn với những hệ thống quá nh ỏ, không ph ức tạp thì không có ý 
nghĩa nhiều lắm. 
Thông thường đối với việc thiết kế một hệ thống web có th ể chia làm 5 b ước: 
- Khảo sát, thu th ập, phân tích thông tin 
- Thiết kế kiến trúc hệ thống 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

285- Thiết kế logic web 
- Thiết kế cơ sở dữ liệu 
- Lập kế hoạch xây dựng, tích hợp hệ thống. 
 
Đối với hệ thống web tĩnh không ph ải xử lý các thông tin tr ực tuyến thì toàn b ộ 
khâu thiết kế có thể bỏ qua bước thiết kế cơ sở dữ liệu, các bước xây dựng còn 
lại cũng giản đơn rất nhiều. 
 
10.3.1 Xác định mục đích, yêu c ầu, đối tượng, nhu c ầu điều kiện thiết kế 
Web 
Trước khi ta mu ốn thực hiện một việc gì đó, ta phải biết chắc chắn ta làm 
với mục đích gì, cho ai, nó có h ữu ích thực sự hay không? 
Nếu ta không bi ết hay không rõ l ắm về công việc ta đang làm thì ta không 
thể đạt được một điều gì đó theo đúng ý mu ốn được hoặc nó sẽ làm ta tốn 
rất nhiều thời gian và công s ức mà chưa chắc đã làm ta hài lòng. 
Thiết kế website c ũng vậy.  
 
Hình 10.3 V ị trí nhóm nh ận, phân tích, qu ản lý yêu c ầu trong bộ phận thiết 
kế 
Bước đầu tiên trong công đoạn thiết kế một Web site là chúng ta đã có 
những quyết định chắc chắn về việc chúng ta s ẽ "xuất bản" cái gì v ới Web 
site của mình. Không có ch ủ định và mục tiêu rõ ràng thì c ả web site đó sẽ 
trở nên lan man, sa l ầy và cuối cùng đi đến một điểm khó có th ể quay trở 
lại. Thiết kế cẩn thận và định hướng rõ là nh ững chìa khoá d ẫn đến thành 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

286công trong vi ệc xây dựng một Web site.  
Trong bước này chúng ta c ần thực hiện các công vi ệc: 
• Xác địch mục đích Web site m ột cách cụ thể, rõ ràng. 
Trước tiên cần có một tuyên bố khái quát ng ắn và rõ ràng cho các 
mục tiêu của web site, điều sẽ giúp đỡ rất nhiều cho công vi ệc thiết 
kế. Nó là điểm xuất phát để chúng ta m ở rộng đến các mục tiêu 
chính, và c ũng là một cái đánh giá sự thành công c ủa một web site. 
Xây dựng một web site là c ả một quá trình liên t ục, nó không đơn 
thuần chỉ là một dự án duy nh ất, một lần với các thông tin t ĩnh. Việc 
biên tập, quản lý và duy trì k ỹ thuật dài hạn nhất định phải bao trùm 
lên kế hoạch xây dựng web site. 
• Xác định đối tượng sử dụng của web site. 
Để chúng ta có th ể thiết kế cấu trúc phù h ợp với nhu cầu, mong 
muốn của họ. Sự hiểu biết, trình độ, sở thích cũng như yêu cầu của 
người sử dụng thay đổi từ một người hoàn toàn không có kinh 
nghiệm, người sẽ cần đến một sự dẫn dắt cẩn thận, đến người đọc 
thành thục, người sẽ nổi giận với bất cứ cái gì mang v ẻ chiếu cố tới 
họ, hoặc làm chậm trễ việc truy nhập thông tin c ủa họ. Một hệ thống 
được thiết kế tốt sẽ thích hợp cho một dải rộng trình độ, nhu cầu của 
mọi đối tượng. Ta cũng có thể sử dụng nhiều cách trình bày khác 
nhau cho t ừng loại đối tượng. 
• Các điều kiện phụ thuộc. 
Bản quyền: 
Bản quyền được tạo bởi một người hay một tập thể được công nh ận 
bởi một tổ chức điều hành. Khi ch úng ta có ý định thiết kế web cần 
phải lưu ý về: 
- Bản quyền về các biểu trưng, quyền về sở hữu website: Chúng 
ta nên đăng ký một biểu trưng riêng c ủa  tổ chức sở hữu của 
website n ếu chưa có để tránh việc trùng lặp biểu trưng, ăn cắp 
bản quyền. 
- Bản quyền về nội dung: Các thông tin ta cung c ấp trên website 
cũng phải lưu ý về nguồn tin. Nếu ta tự lọc lấy thông tin c ủa mình 
thì không v ấn đề gì nhưng nếu ta sao chép thì ph ải được sự cho 
phép của cá nhân hay t ổ chức sở hữu nó để tránh các r ắc rối 
không cần thiết. 
 
 Thời gian: 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

287Thật khó có th ể dự đoán ta cần bao nhiêu th ời gian để thiết kế, xây 
dựng một website, ngay c ả đối  với người có kinh nghi ệm. Chỉ khi 
nào ta lường trước được tất cả các sự việc, vấn đề xẩy ra khi thi ết kế, 
xây dựng website ta m ới có thể dự đoán được khoảng thời gian cần 
thiết. Chính vì th ế tại bước này ta c ũng không xác định được vì ta 
chưa xác định được nội dung của website, website s ử dụng công 
nghệ gì, mô hình ra sao,....  
Ngân sách: 
Sản phẩm website c ũng phụ thuộc khá nhiều vào việc chi phí. Để có 
thể hoàn thành trang web theo ý c ủa ta thì chi phí cho nó có th ể sẽ rất 
lớn. Thực tế ta thường cần nhắc xây dựng website c ủa ta trong ph ạm 
vi bao nhiêu ti ền trước dựa vào mục đích của website, r ồi mới xem 
đến việc có làm nó hay không và nh ư thế cần chi phí các kho ản mục 
ra sao. Ví d ụ nếu ta xây d ựng một website v ới mô hình b ảo mật dữ 
liệu cao, đòi hỏi các thiết bị là tốt và phải mua một số phần mềm hay 
ta phải thuê hay h ợp tác với các tổ chức cung cấp nội dung thông 
tin,... Chi phí s ẽ rất lớn và ta đã đạt mục đích chưa? nếu rút bớt chi 
phí thì ảnh hưởng của nó đến đâu?  Lý do này c ũng sẽ làm nảy sinh 
nhiều phương án thiết kế để cuối cùng làm sao đạt được mục đích 
của mình. 
Các dự toán, phương án phải được cân nhắc sau khi ta l ập kế hoạch 
xây dựng website là b ước cuối cùng của tài liệu thiết kế. 
 
10.3.2 Kỹ thuật khảo sát, thu th ập thông tin 
Đây là cách th ức khai thác các thông tin s ử dụng một số công cụ thu 
thập thông tin để tìm kiếm những vấn đề sau: 
- Liệt kê các mong mu ốn của mình, và các nhu c ầu của độc giả 
- Thành ph ần của website 
- Chức năng cần có để website ho ạt động 
- Phương thức cập nhật thông tin 
- Các yêu c ầu về hệ thống web 
- Yêu cầu bảo mật thông tin 
 Các bước thu thập thông tin: 
- Xác định nguồn thông tin s ẽ thu thập 
- Tìm những chủ đề thông tin định thu thập từ nguồn 
- Lựa chọn kỹ thuật sẽ sử dụng để thu thập thông tin 
- 
Chọn lọc các yêu c ầu về nghiệp vụ và những mong mu ốn từ phía 
người sử dụng 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

288- Tài liệu hoá toàn b ộ thông tin thu th ập được. 
 
Một số kỹ thuật thu thập thông tin: 
- Kết hợp theo dõi và ph ỏng vấn trực tiếp hoạt động của người dùng 
(shadowing):   
Đây là những thông tin b ạn thu thập được trong các tình hu ống, ngữ 
cảnh cụ thể. Qua kỹ thuật này ta ph ải trả lời được các câu h ỏi: 
+ Khảo sát các hành động của các đối tượng như thế nào? 
 Đối với nhóm qu ản trị nôi dung web 
 Đối với các độc giả duyệt web 
+ Cái gì khi ến họ làm như thế? 
+ Những gì thường xuyên khi ến người dùng ph ải lặp đi lặp lại nhiều 
lần các thao tác khi th ực hiện công việc. 
+ Có thể giảm bớt các động tác dư thừa không 
+ Số lượng đối tượng thường thực hiện các động tác đó. 
 
- Phỏng vấn (Interviewing):  
Shadowing ch ỉ hiệu quả trong việc khám phá các thông tin theo tình 
huống cụ thể, ta mong mu ốn thông tin thu th ập được một cách đầy 
đủ hơn về quản lý, các m ức hoạt động có tính lâu dài, ho ặc những 
tiến trình rất ít người hoặc chẳng có người nào tham gia mà h ệ thống 
tự động giải quyết.  
Phỏng vấn cho ta c ơ hội để giải quyết một lượng lớn câu hỏi về 
nhiều vấn đề mà có thể ta không thu th ập được bằng cách quan sát và 
cũng tốn ít thời gian hơn nhiều. 
 - Nhóm thảo luận (Focus Group)  
Thảo luận các chủ đề sẽ đem lại cái nhìn t ổng thể, chính xác v ấn đề. 
Đối tượng tham d ự nhóm thảo luận là những người thiết kế, xây 
dựng , sử dụng và các đối tượng liên quan khác. 
Phương thức này thường được sử dụng khi có quá nhi ều người liên 
quan đến hệ thống mà ta khó có th ể khả
o sát riêng được. 
- Khảo sát, điều tra (Surveys) 
Tập hợp một lượng câu hỏi đã chuẩn bị trước để thu thập thông tin. 
Phương thức này có th ể đem lại được nhiều thông tin chi ti ết, và có 
thể tìm được những thông tin mà các k ỹ thuật khác khó làm được 
(Cấu trúc tổ chức, chính sách, các quan h ệ giữa thành ph ần trong hệ 
thống,...) nhưng mất rất nhiều thời gian và công s ức. 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

289- Chỉ dẫn của người dùng (User Instruction) 
Người sử dụng trực tiếp hướng dẫn về các công vi ệc, hành động và 
các bước thao tác trong công vi ệc. Kỹ thuật này nếu được người 
dùng giúp đỡ thì mọi việc sẽ dễ dàng, nhưng một số người không 
thoải mái thậm chí gây khó d ễ cho việc tìm kiếm thông tin, h ơn nữa 
thông tin thu th ập được cũng mang tính cá nhân vì v ậy với kỹ thuật 
này phải áp dụng với nhiều người và phải có khả năng tổng hợp cao. 
10.3.3 Phân tích, l ựa chọn các thành ph ần chính c ủa Website, th ứ tự ưu tiên 
Trước hết cần xác định rõ lại một lần nữa sản phẩm mà  ta s ẽ đạt được và sản 
phẩm mà ta mong mu ốn: 
Đứng ở góc độ người thiết kế ta không nên ch ấp nhận ngay yêu c ầu của vấn đề 
đặt ra mà nên tìm hi ểu thêm hỏi “tại sao?” để tìm yêu c ầu thực sự của nó và 
những vấn đề đằng sau yêu c ầu đó. 
Với mục tiêu chính c ủa website có nh ững vấn đề nào liên quan đến. Cần xác 
định vấn đề nào là mấu chốt cần ưu tiên và t ập chung phát tri ển theo vấn đề đó. 
Một cách để tìm kiếm vấn đề mấu chốt đó là theo công th ức Pareto ho ặc luật 
“80-20”  
01020304050Banking at night
More Baking location
Banking at Airport
Tellers too Costly
Private White Banking
Other Reasons
 
Hình 10.4  Bi ểu đồ Pareto 
80 % của vấn đề được quyết định bởi 20% còn l ại. 
Ta cần xác định giới hạn phục vụ của sản phẩm web để xác định mức độ phức 
tạp, các yếu tố mà hệ thống web đòi hỏi cũng để cân đối với yêu cầu hiện tại, 
mức độ sử dụng nên có m ột hệ thống hợp lý nhất để tiết kiệm được cả về thời 
gian lẫn tiền bạc, nhưng ta cũng phải lưu tâm đến việc phát triển của website 
sau này. 
Tại bước này ta tìm ki ếm các vấn đề về nội dung mà website đề cập. 
Sử dụng các kỹ thuật thu thập thông tin để làm rõ hơn từng vấn đề đó nếu cần. 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

290Mỗi vấn đề nội dung hãy cân nh ắc nó đạt được những lợi ích gì cho m ục đích 
của web site. Ti ếp theo với vấn đề đó ta phải thực hiện những gì về mặt nghiệp 
vụ, mô tả chi tiết về các vấn đề nghiệp vụ đó. 
Với các yêu c ầu nghiệp vụ hãy phát tri ển thành các yêu c ầu của hệ thống. 
Tổng hợp lại toàn bộ các vấn đề đã phân tích, hãy s ắp xếp các vấn đề theo thứ 
tự ưu tiên. 
Tiếp theo hãy cân nh ắc lại một lần nữa toàn bộ các vấn đề về nội dung so v ới 
các điều kiện mà ta có và so sánh v ới mục đích của website. 
Tài liệu hoá toàn b ộ các các yêu c ầu, các vấn đề nội dung và các yêu c ầu hệ 
thống. 
 
10.3.4 Ph ương án kỹ thuật, mô hình b ảo mật, vận hành website  
(Kiến trúc hệ thống)  
Việc thiết kế hệ thống là khâu c ực kỳ quan trọng quyết định phương thức thiết 
kế, thực hiện các phần tử của website. Để có thể thiết kế tốt thì nó cũng đòi hỏi 
một lượng kiến thức khổng lồ và bao quát v ề hệ thống mạng, về bảo mật cũng 
như các kiến trúc về ứng dụng phần mềm,....  
Trong phạm vi tài li ệu này chúng tôi ch ỉ giới thiệu về các bước thực hiện thiết 
kế hệ thống. 
Việc xác định sản phẩm web quy mô đến đâu quyết định cho kiến trúc của hệ 
thống xây dựng phức tạp cỡ nào. 
 
Hình 10.5 V ị trí nhóm thi ết kế hệ thống trong b ộ phận thiết kế 
 
 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

291Đối với hệ thống Web động có xử lý dữ liệu trực tuyến thì luôn có ki ến trúc 
nhiều lớp. Có thể chia như sau: 
 
 
 
Hình 10.6 Mô hình ki ến trúc ứng dụng nhiều lớp 
 
Lớp trình diễn: Lớp này chứa toàn bộ các giao di ện người sử dụng tương tác 
trực tiếp với hệ thống. Bao g ồm: 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

292- Các phần tử giao diện như form, các trình bày, hi ển thị dữ liệu,... 
- Chứa các phương thức liên kết với lớp ứng dụng 
- Cung cấp các phản hồi về kết qủa của yêu cầu người sử dụng khi 
tương tác với hệ thống. 
- Cho biết tình trạng sử dụng của người sử dụng với hệ thống để có thể 
có những biện pháp tối  ưu cho phù h ợp, dễ dàng cho ng ười sử dụng. 
Lớp ứng dụng: Xử lý các tương tác mà ng ười sử dụng yêu cầu hệ thống. lớp 
này bao g ồm: 
- Các phần tử xử lý nghiệp vụ (component, script,...)  và các ti ến trình 
xử lý nghiệp vụ. 
- Liên kết với hệ điều hành 
Lớp kết nối dữ liệu: Các ph ương thức kết nối đến CSDL 
Lớp dữ liệu: Lưu trữ và xử lý dữ liệu.  
- Các luật tương tác, quan h ệ giữa các dữ liệu 
- Kiểm tra tính h ợp lệ của dữ liệu. Cung c ấp các giá tr ị mặc định cho 
từng loại dữ liệu nếu cần và xác định loại dữ liệu trong CSDL. 
- Các tiến trình xử lý logic, qu ản lý dữ liệu 
 
Đi từ mô hình ki ến trúc logic c ủa hệ thống kết hợp với các yêu c ầu để tìm ra 
các phần tử thiết kế vật lý. Thiết kế hệ thống phải dựa vào một số các tiêu chí 
sau: 
- Tính an toàn b ảo mật 
- Tính ổn định của hệ thống:  
- Hiệu năng làm vi ệc 
- Độ tin cậy 
 
Hệ thống bao gồm phân m ạng Client và phân m ạng server 
- Hệ thống phân m ạng client: 
Phụ thuộc phần lớn vào cách t ổ chức công việc của người sử dụng: có thể là 
một mạng WAN hay LAN, c ũng có thể không cần phải xây dựng gì mà k ết nối 
bằng những máy đơn lẻ. Đối với mạng LAN,WAN thì có th ể có các ph ương 
thức bảo mật ra sao, x ử lý dữ liệu nội bộ thế nào. 
 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

293
 
Hình 10.7 Client - Server 
 
- Phân mạng server 
Bao gồm Webserver, FTP server, Database  server, Application server, Các 
thiết bị kết nối mạng như router, modem,... Các thi ết bị bảo mật như firewall 
server, Access server,... Tuỳ theo yêu c ầu của hệ thống phức tạp đến đâu mà sử dụng các ph ần tử và mô 
hình kết nối. Các phần mềm server có th ể đặt trên một hay nhiều máy khác 
nhau. Từ tài liệu yêu cầu ta tìm ra các ph ần tử cần thiết: 
- Đòi hỏi mức độ
 bảo mật cao: Firewall, d ữ liệu được mã hoá, quy ền truy nhập 
theo nhiều mức kiểm soát bằng CA,... 
- Hệ thống chạy trên hệ điều hành nào s ẽ quyết định việc sử dụng thiết bị loại 
gì và hệ thống các ph ần mềm trên đó. 
- Hệ thống cho phép các d ịch vụ gì trên đó (Web, FTP, Mail,....), có s ử dụng cơ 
sở dữ liệu không và s ử dụng loại gì? 
- Yêu cầu mức độ ổn định của hệ thống thế nào? có c ần phải sử dụng các công 
nghệ như cluster không?... 
Từ đó đưa ra các ph ương án, mô hình k ết nối giữa chúng. 
Cuối cùng đánh giá, cân đối mức độ cần thiết sử dụng mô hình nào là thích h ợp 
với mục đích đề ra. 
 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

29410.3.5 Cấu trúc logic Web 
 
 
Hình 10.8 V ị trí của nhóm thi ết kế logic trong b ộ phận thiết kế 
 
Từ tài liệu phân tích các v ấn đề về nội dung và th ứ tự ưu tiên của chúng c ộng 
với tài liệu yêu cầu về hệ thống, ta phải đưa ra mô hình logic web, mô hình 
logic về các phần tử xử lý của mỗi vấn đề về nội dung và d ạng dữ liệu liên 
quan. Một mô hình logic t ổng quan bi ểu thị các khối thông tin đặc thù của t
ừng vấn 
đề nội dung và m ối quan hệ giữa các khối thông tin đó. Mỗi khối thông tin ta 
nên chi tiết hoá thành các kh ối thông tin con Cách th ức sắp xếp các khối thông 
tin trong mô hình nên đặt theo các m ức khác nhau. 
Mô hình logic t ựa như hình cây nh ưng có thể có các liên k ết chéo (là nh ững 
khối thông tin v ề mặt vật lý thì ch ỉ là 1 nhưng về logic thì nó t ồn tại trên nhiều 
nhánh khác nhau). Các đường liên kết chéo quy ước là những đường 
  
chiều mũi tên biểu thị liên kết đến khối thông tin nào. 
Mỗi khối thông tin l ớn cần phát triển các yêu c ầu chi tiết về cách thức xử lý dữ 
liệu của nó. Đồng thời xác định luôn d ữ liệu của nó cần có những thuộc tính gì. 
Nên xác định từ những khối thông tin nh ỏ nhất vì tại đó mới có những thuộc 
tính và trách nhi ệm cụ thể nhất. Khối thông tin ở mức cha sẽ bao gồm luôn các 
thuộc tính của mức con và có th ể có thêm nh ững thuộc tính và trách nhi ệm 
khác nữa. 
   
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

295 
 
 
Hình 10.9 Ví d ụ về mô hình logic web 
 Từ tất cả các trách nhi ệm chung trong cùng m ột khối thông tin l ớn ta sẽ lọc ra 
các trách nhi ệm nào chung để khi xây d ựng chương trình s ẽ không có nh ững 
đoạn mã lặp lại. Còn tất cả các thuộc tính của khối thông tin s ẽ được sử dụng 
để thiết kế cơ sở dữ liệu. 
 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

296
 
Hình 10.10 Phân tích thu ộc tính và trách nhi ệm của khối thông tin 
 
10.3.6 Cấu trúc cơ sở dữ liệu Web 
 
 
Hình 10.11 V ị trí nhóm thi ết kế CSDL trong b ộ phận thiết kế 
 
Từ tất cả các thuộc tính của các khối thông tin ta tìm được từ trên 
- Phân tích ti ếp các thuộc tính của mỗi khối thông tin đó, đồng thời 
tìm các thu ộc tính khác dùng để quản lý dữ liệu. 
- Tìm các thu ộc tính mà có các giá tr ị mặc định mà hệ quản trị cơ sở 
dữ liệu ta chọn có thể hỗ trợ. 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

297- Tổng hợp lại toàn bộ các thuộc tính của mỗi khối thông tin 
- Tìm và tách các thu ộc tính nào m ức độ truy cập thường xuyên và 
không thương xuyên 
- Tách các thu ộc tính trong kh ối thông tin đó chia vào các b ảng và tìm 
quan hệ giữa các bảng đó. 
- Nếu tồn tại các quan h ệ nhiều - nhiều giữa các bảng có ngh ĩa là cách 
chia bảng của ta chưa tốt. Nếu thế cần phải tách nhỏ hơn nữa.  
- Thiết lập các khoá chính (Primary key) và khoá ph ụ (Foreign key) 
cho mỗi bảng và đặt các quan h ệ giữa chúng. 
Lưu ý : Trong m ột số trường hợp không nên phân tách quá nhi ều bảng vì lý do 
đảm bảo tốc độ truy cập thông tin khi tìm ki ếm hay lọc thông tin, nhung khi đó 
một số trường sẽ tồn tại dữ liệu thừa. 
 
 
Hình 10.12 T ừ các khối thông tin đến bảng dữ liệu 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

298 
10.3.7 Ph ương án triển khai xây d ựng Web 
 
Hình 10.13 V ị trí của nhóm thi ết kế kế hoạch triển khai trong b ộ phận thiết kế 
 
Ta đã có các tài li ệu về yêu cầu, mô hình c ơ sở dữ liệu, các trách nhi ệm đối với 
từng khối thông tin m ột cách chi ti ết. Tại bước này ta ch ọn ra các ph ần tử thiết 
kế vật lý, các modul ch ương trình và ph ương thức tích hợp hệ thống. 
Từ tài liệu về kiến trúc hệ thống ta đã chọn hệ thống của ta chạy trên máy nào, 
hệ điều hành nào, các ph ương thức xử lý được viết bằng ngôn ng ữ gì, kết nối 
giữa các lớp từ giao diện người sử dụng đến lớp dữ liệu. 
Bây giờ ta tổng hợp toàn bộ các tài liệu trên và làm m ịn hoá chúng m ột lần nữa. 
và cần xem lại có cân thêm b ớt phần tử nào không. Ví d ụ nếu ta sử dụng một 
component nào đó có sẵn liên kết vào chương trình c ủa ta chẳng hạn.... 
Để tiếp tục triển khai việc thực hiện xây dựng ta phải lập ra một kế hoạch thực 
hiện xây dựng hệ thống. Phân công cho t ừng người hoặc nhóm ng ười thực 
hiện. Như thế ta phải nắm được mọi hoạt động của các khâu xây d ựng. Với mỗi 
khâu cần xác định chi tiết các công vi ệc phải làm và định ra kho ảng thời gian 
cho công vi ệc đó. Qua đó có thể kết hợp làm việc song song để rút ngắn thời 
gian thực hiện. 
  
    
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

299 
 
Hình 10.14 Các ho ạt động của các nhóm khác trong quá trình s ản xuất web 
 
Tóm tắt chương 
Chương này cung c ấp cho các b ạn về cách ngh ĩ, cách thức thiết kế một sản 
phẩm web nh ưng không đi sâu vào t ừng việc thiết kế cụ thể, vì mỗi vấn để đó 
là một vấn đề lớn cần đi sâu nghiên c ứu. 
 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

300Bài tập chương 
Thiết kế một website v ề một doanh nghi ệp với các yêu c ầu kèm theo. 
 
 
Giáo trình đào tạo                                                              Xây dựng và quản trị Website, Portal
Trung tâm Điện toán Truyền số liệu KV1

